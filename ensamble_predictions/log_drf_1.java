package cybersec;
/*
  Licensed under the Apache License, Version 2.0
    http://www.apache.org/licenses/LICENSE-2.0.html

  AUTOGENERATED BY H2O at 2017-02-13T07:06:35.771-08:00
  3.10.3.4
  
  Standalone prediction code with sample test data for DRFModel named log_drf_1

  How to download, compile and execute:
      mkdir tmpdir
      cd tmpdir
      curl http://172.16.1.155:54321/3/h2o-genmodel.jar > h2o-genmodel.jar
      curl http://172.16.1.155:54321/3/Models.java/log_drf_1 > log_drf_1.java
      javac -cp h2o-genmodel.jar -J-Xmx2g -J-XX:MaxPermSize=128m log_drf_1.java

     (Note:  Try java argument -XX:+PrintCompilation to show runtime JIT compiler behavior.)
*/
import java.util.Map;
import hex.genmodel.GenModel;
import hex.genmodel.annotations.ModelPojo;

@ModelPojo(name="log_drf_1", algorithm="drf")
public class log_drf_1 extends GenModel {
  public hex.ModelCategory getModelCategory() { return hex.ModelCategory.Multinomial; }

  public boolean isSupervised() { return true; }
  public int nfeatures() { return 17; }
  public int nclasses() { return 39; }

  // Names of columns used by model.
  public static final String[] NAMES = NamesHolder_log_drf_1.VALUES;
  // Number of output classes included in training data response column.
  public static final int NCLASSES = 39;

  // Column domains. The last array contains domain of response column.
  public static final String[][] DOMAINS = new String[][] {
    /* vlan */ null,
    /* type_of_time */ null,
    /* no_of_characters */ null,
    /* no_of_ips */ null,
    /* no_of_macs */ null,
    /* 4_letter_word */ null,
    /* 5_letter_word */ null,
    /* 6_letter_word */ null,
    /* 7_letter_word */ null,
    /* 8_letter_word */ null,
    /* 9_letter_word */ null,
    /* 10_letter_word */ null,
    /* 11_letter_word */ null,
    /* 12_letter_word */ null,
    /* 13_letter_word */ null,
    /* 14_letter_word */ null,
    /* 15_letter_word */ null,
    /* log_source */ log_drf_1_ColInfo_17.VALUES
  };
  // Prior class distribution
  public static final double[] PRIOR_CLASS_DISTRIB = {2.75E-4,0.00249,0.008175,0.0295,3.0E-4,3.85E-4,0.002635,0.00125,0.00143,0.01133,3.5E-5,5.0E-6,3.15E-4,0.00276,1.05E-4,0.005945,1.05E-4,0.00225,5.0E-6,0.005225,0.17791,0.00229,4.0E-5,0.02512,1.5E-5,0.184985,0.00332,1.0E-5,0.03917,5.5E-5,7.6E-4,0.008205,0.001485,0.002215,1.0E-5,1.35E-4,8.0E-5,0.47966,1.5E-5};
  // Class distribution used for model building
  public static final double[] MODEL_CLASS_DISTRIB = {2.75E-4,0.00249,0.008175,0.0295,3.0E-4,3.85E-4,0.002635,0.00125,0.00143,0.01133,3.5E-5,5.0E-6,3.15E-4,0.00276,1.05E-4,0.005945,1.05E-4,0.00225,5.0E-6,0.005225,0.17791,0.00229,4.0E-5,0.02512,1.5E-5,0.184985,0.00332,1.0E-5,0.03917,5.5E-5,7.6E-4,0.008205,0.001485,0.002215,1.0E-5,1.35E-4,8.0E-5,0.47966,1.5E-5};

  public log_drf_1() { super(NAMES,DOMAINS); }
  public String getUUID() { return Long.toString(-3654208116872029344L); }

  // Pass in data in a double[], pre-aligned to the Model's requirements.
  // Jam predictions into the preds[] array; preds[0] is reserved for the
  // main prediction (class for classifiers or value for regression),
  // and remaining columns hold a probability distribution for classifiers.
  public final double[] score0( double[] data, double[] preds ) {
    java.util.Arrays.fill(preds,0);
    log_drf_1_Forest_0.score0(data,preds);
    log_drf_1_Forest_1.score0(data,preds);
    log_drf_1_Forest_2.score0(data,preds);
    log_drf_1_Forest_3.score0(data,preds);
    log_drf_1_Forest_4.score0(data,preds);
    log_drf_1_Forest_5.score0(data,preds);
    log_drf_1_Forest_6.score0(data,preds);
    log_drf_1_Forest_7.score0(data,preds);
    log_drf_1_Forest_8.score0(data,preds);
    log_drf_1_Forest_9.score0(data,preds);
    log_drf_1_Forest_10.score0(data,preds);
    log_drf_1_Forest_11.score0(data,preds);
    log_drf_1_Forest_12.score0(data,preds);
    log_drf_1_Forest_13.score0(data,preds);
    log_drf_1_Forest_14.score0(data,preds);
    log_drf_1_Forest_15.score0(data,preds);
    log_drf_1_Forest_16.score0(data,preds);
    log_drf_1_Forest_17.score0(data,preds);
    log_drf_1_Forest_18.score0(data,preds);
    log_drf_1_Forest_19.score0(data,preds);
    log_drf_1_Forest_20.score0(data,preds);
    log_drf_1_Forest_21.score0(data,preds);
    log_drf_1_Forest_22.score0(data,preds);
    log_drf_1_Forest_23.score0(data,preds);
    log_drf_1_Forest_24.score0(data,preds);
    log_drf_1_Forest_25.score0(data,preds);
    log_drf_1_Forest_26.score0(data,preds);
    log_drf_1_Forest_27.score0(data,preds);
    log_drf_1_Forest_28.score0(data,preds);
    log_drf_1_Forest_29.score0(data,preds);
    log_drf_1_Forest_30.score0(data,preds);
    log_drf_1_Forest_31.score0(data,preds);
    log_drf_1_Forest_32.score0(data,preds);
    log_drf_1_Forest_33.score0(data,preds);
    log_drf_1_Forest_34.score0(data,preds);
    log_drf_1_Forest_35.score0(data,preds);
    log_drf_1_Forest_36.score0(data,preds);
    log_drf_1_Forest_37.score0(data,preds);
    log_drf_1_Forest_38.score0(data,preds);
    log_drf_1_Forest_39.score0(data,preds);
    log_drf_1_Forest_40.score0(data,preds);
    log_drf_1_Forest_41.score0(data,preds);
    log_drf_1_Forest_42.score0(data,preds);
    log_drf_1_Forest_43.score0(data,preds);
    log_drf_1_Forest_44.score0(data,preds);
    log_drf_1_Forest_45.score0(data,preds);
    log_drf_1_Forest_46.score0(data,preds);
    log_drf_1_Forest_47.score0(data,preds);
    log_drf_1_Forest_48.score0(data,preds);
    log_drf_1_Forest_49.score0(data,preds);
    double sum = 0;
    for(int i=1; i<preds.length; i++) { sum += preds[i]; }
    if (sum>0) for(int i=1; i<preds.length; i++) { preds[i] /= sum; }
    preds[0] = hex.genmodel.GenModel.getPrediction(preds, PRIOR_CLASS_DISTRIB, data, 0.5);
    return preds;
  }
}
// The class representing training column names
class NamesHolder_log_drf_1 implements java.io.Serializable {
  public static final String[] VALUES = new String[17];
  static {
    NamesHolder_log_drf_1_0.fill(VALUES);
  }
  static final class NamesHolder_log_drf_1_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "vlan";
      sa[1] = "type_of_time";
      sa[2] = "no_of_characters";
      sa[3] = "no_of_ips";
      sa[4] = "no_of_macs";
      sa[5] = "4_letter_word";
      sa[6] = "5_letter_word";
      sa[7] = "6_letter_word";
      sa[8] = "7_letter_word";
      sa[9] = "8_letter_word";
      sa[10] = "9_letter_word";
      sa[11] = "10_letter_word";
      sa[12] = "11_letter_word";
      sa[13] = "12_letter_word";
      sa[14] = "13_letter_word";
      sa[15] = "14_letter_word";
      sa[16] = "15_letter_word";
    }
  }
}
// The class representing column log_source
class log_drf_1_ColInfo_17 implements java.io.Serializable {
  public static final String[] VALUES = new String[39];
  static {
    log_drf_1_ColInfo_17_0.fill(VALUES);
  }
  static final class log_drf_1_ColInfo_17_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "airmagnet.txt";
      sa[1] = "arubanetworks.txt";
      sa[2] = "bigip-vpn.txt";
      sa[3] = "bluecoat.txt";
      sa[4] = "bugreport.txt";
      sa[5] = "centrify.txt";
      sa[6] = "checkpoint.txt";
      sa[7] = "ciscoacl.txt";
      sa[8] = "ciscoacs.txt";
      sa[9] = "ciscoasa.txt";
      sa[10] = "cluster_manager.txt";
      sa[11] = "clusterd.txt";
      sa[12] = "cyberark.txt";
      sa[13] = "default.txt";
      sa[14] = "esxad.txt";
      sa[15] = "f5.txt";
      sa[16] = "ftp.txt";
      sa[17] = "hpnetwork.txt";
      sa[18] = "incidentserver.txt";
      sa[19] = "infoblox.txt";
      sa[20] = "ironport.txt";
      sa[21] = "loggagg.txt";
      sa[22] = "mail.txt";
      sa[23] = "mesosphere.txt";
      sa[24] = "mocana.txt";
      sa[25] = "network.txt";
      sa[26] = "networkadmin.txt";
      sa[27] = "oracle.txt";
      sa[28] = "paloalto.txt";
      sa[29] = "postgres.txt";
      sa[30] = "radware.txt";
      sa[31] = "ssh.txt";
      sa[32] = "stunnel.txt";
      sa[33] = "system.txt";
      sa[34] = "trendmicro.txt";
      sa[35] = "uiserver.txt";
      sa[36] = "unix_system.txt";
      sa[37] = "vmware.txt";
      sa[38] = "xinetd.txt";
    }
  }
}

class log_drf_1_Forest_0 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += log_drf_1_Tree_0_class_0.score0(fdata);
    preds[2] += log_drf_1_Tree_0_class_1.score0(fdata);
    preds[3] += log_drf_1_Tree_0_class_2.score0(fdata);
    preds[4] += log_drf_1_Tree_0_class_3.score0(fdata);
    preds[5] += log_drf_1_Tree_0_class_4.score0(fdata);
    preds[6] += log_drf_1_Tree_0_class_5.score0(fdata);
    preds[7] += log_drf_1_Tree_0_class_6.score0(fdata);
    preds[8] += log_drf_1_Tree_0_class_7.score0(fdata);
    preds[9] += log_drf_1_Tree_0_class_8.score0(fdata);
    preds[10] += log_drf_1_Tree_0_class_9.score0(fdata);
    preds[11] += log_drf_1_Tree_0_class_10.score0(fdata);
    preds[12] += log_drf_1_Tree_0_class_11.score0(fdata);
    preds[13] += log_drf_1_Tree_0_class_12.score0(fdata);
    preds[14] += log_drf_1_Tree_0_class_13.score0(fdata);
    preds[15] += log_drf_1_Tree_0_class_14.score0(fdata);
    preds[16] += log_drf_1_Tree_0_class_15.score0(fdata);
    preds[17] += log_drf_1_Tree_0_class_16.score0(fdata);
    preds[18] += log_drf_1_Tree_0_class_17.score0(fdata);
    preds[19] += log_drf_1_Tree_0_class_18.score0(fdata);
    preds[20] += log_drf_1_Tree_0_class_19.score0(fdata);
    preds[21] += log_drf_1_Tree_0_class_20.score0(fdata);
    preds[22] += log_drf_1_Tree_0_class_21.score0(fdata);
    preds[23] += log_drf_1_Tree_0_class_22.score0(fdata);
    preds[24] += log_drf_1_Tree_0_class_23.score0(fdata);
    preds[25] += log_drf_1_Tree_0_class_24.score0(fdata);
    preds[26] += log_drf_1_Tree_0_class_25.score0(fdata);
    preds[27] += log_drf_1_Tree_0_class_26.score0(fdata);
    preds[28] += log_drf_1_Tree_0_class_27.score0(fdata);
    preds[29] += log_drf_1_Tree_0_class_28.score0(fdata);
    preds[30] += log_drf_1_Tree_0_class_29.score0(fdata);
    preds[31] += log_drf_1_Tree_0_class_30.score0(fdata);
    preds[32] += log_drf_1_Tree_0_class_31.score0(fdata);
    preds[33] += log_drf_1_Tree_0_class_32.score0(fdata);
    preds[34] += log_drf_1_Tree_0_class_33.score0(fdata);
    preds[35] += log_drf_1_Tree_0_class_34.score0(fdata);
    preds[36] += log_drf_1_Tree_0_class_35.score0(fdata);
    preds[37] += log_drf_1_Tree_0_class_36.score0(fdata);
    preds[38] += log_drf_1_Tree_0_class_37.score0(fdata);
    preds[39] += log_drf_1_Tree_0_class_38.score0(fdata);
  }
}
class log_drf_1_Tree_0_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.07421875f ? 
        0.0f : 
         (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.020507812f ? 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <1061.0f ? 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <528.5f ? 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <521.5f ? 
                        2.6892565E-4f : 
                        0.00952381f) : 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.109375f ? 
                        0.0f : 
                        0.5714286f)) : 
                0.5f) : 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <99.5f ? 
                0.0f : 
                 (Double.isNaN(data[14]) || data[14 /* 13_letter_word */] <0.01171875f ? 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.16666667f ? 
                        0.0f : 
                        0.026086956f) : 
                    1.0f))));
    return pred;
  } // constant pool size = 38B, number of visited nodes = 9, static init size = 0B
}

class log_drf_1_Tree_0_class_1 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0]) || data[0 /* vlan */] <142.0f ? 
        0.0f : 
         (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
            0.0f : 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <255.5f ? 
                 (data[0 /* vlan */] <148.5f ? 
                    1.0f : 
                    0.0f) : 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <364.5f ? 
                     (data[8 /* 7_letter_word */] <0.265625f ? 
                        0.0f : 
                        0.94011974f) : 
                    0.0f))));
    return pred;
  } // constant pool size = 26B, number of visited nodes = 6, static init size = 0B
}

class log_drf_1_Tree_0_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0]) || data[0 /* vlan */] <181.5f ? 
         (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.56933594f ? 
             (data[0 /* vlan */] <141.5f ? 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.6328125f ? 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <135.5f ? 
                        0.0f : 
                        0.34082398f) : 
                     (data[7 /* 6_letter_word */] <0.80493164f ? 
                        0.04f : 
                        0.011443103f)) : 
                0.0f) : 
             (data[5 /* 4_letter_word */] <0.61307526f ? 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.34375f ? 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.071875f ? 
                        0.0f : 
                        0.16129032f) : 
                    0.9137931f) : 
                 (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                     (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
                        0.0f : 
                        0.06045813f) : 
                    0.0f))) : 
         (data[7 /* 6_letter_word */] <0.36132812f ? 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <303.5f ? 
                0.0f : 
                0.10526316f) : 
             (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.12890625f ? 
                 (Double.isNaN(data[14]) || data[14 /* 13_letter_word */] <0.10058594f ? 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.3671875f ? 
                        0.9468665f : 
                        0.0f) : 
                    1.0f) : 
                0.0f)));
    return pred;
  } // constant pool size = 66B, number of visited nodes = 16, static init size = 0B
}

class log_drf_1_Tree_0_class_3 {
  static final double score0(double[] data) {
    double pred =      (data[0 /* vlan */] <29.5f ? 
         (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.4765625f ? 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <28.5f ? 
                0.0f : 
                 (data[5 /* 4_letter_word */] <0.06392045f ? 
                    0.0f : 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.125f ? 
                        0.6211604f : 
                        1.0f))) : 
             (data[2 /* no_of_characters */] <140.5f ? 
                0.0f : 
                 (data[2 /* no_of_characters */] <147.5f ? 
                    0.89390445f : 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <28.0f ? 
                        0.0f : 
                        1.0f)))) : 
         (data[2 /* no_of_characters */] <105.5f ? 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <103.5f ? 
                 (data[5 /* 4_letter_word */] <0.83203125f ? 
                    0.0f : 
                    2.3894863E-4f) : 
                 (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                    0.0f : 
                     (data[11 /* 10_letter_word */] <0.125f ? 
                        0.53846157f : 
                        0.0f))) : 
            0.0f));
    return pred;
  } // constant pool size = 54B, number of visited nodes = 13, static init size = 0B
}

class log_drf_1_Tree_0_class_4 {
  static final double score0(double[] data) {
    double pred =      (data[0 /* vlan */] <27.5f ? 
         (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <1.5f ? 
             (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.31054688f ? 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <24.5f ? 
                    0.0f : 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.0625f ? 
                        0.027522936f : 
                        0.22222222f)) : 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <106.5f ? 
                    0.0f : 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.171875f ? 
                        0.0f : 
                        0.6585366f))) : 
            0.0f) : 
        0.0f);
    return pred;
  } // constant pool size = 30B, number of visited nodes = 7, static init size = 0B
}

class log_drf_1_Tree_0_class_5 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.095703125f ? 
         (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.6513672f ? 
             (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.3256836f ? 
                0.0f : 
                 (data[8 /* 7_letter_word */] <0.2578125f ? 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.2376709f ? 
                        4.0628386E-4f : 
                        0.0076923077f) : 
                    0.0f)) : 
             (data[2 /* no_of_characters */] <145.5f ? 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.2890625f ? 
                    0.0f : 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <100.0f ? 
                        0.0f : 
                        0.12790698f)) : 
                 (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.69140625f ? 
                     (data[8 /* 7_letter_word */] <0.0859375f ? 
                        7.905138E-4f : 
                        0.0f) : 
                    0.0f))) : 
         (data[7 /* 6_letter_word */] <0.2334671f ? 
             (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.07519531f ? 
                 (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.080729164f ? 
                    0.0f : 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <263.5f ? 
                        0.0027027028f : 
                        0.057377048f)) : 
                 (Double.isNaN(data[15]) || data[15 /* 14_letter_word */] <0.05f ? 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <97.5f ? 
                        0.046961326f : 
                        0.0f) : 
                    0.0f)) : 
             (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.22395833f ? 
                0.0f : 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <61.5f ? 
                     (data[2 /* no_of_characters */] <105.5f ? 
                        0.0022988506f : 
                        0.0f) : 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.1875f ? 
                        0.0f : 
                        0.1891892f)))));
    return pred;
  } // constant pool size = 82B, number of visited nodes = 20, static init size = 0B
}

class log_drf_1_Tree_0_class_6 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0]) || data[0 /* vlan */] <133.5f ? 
         (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
             (data[2 /* no_of_characters */] <100.5f ? 
                 (data[9 /* 8_letter_word */] <0.1015625f ? 
                     (data[2 /* no_of_characters */] <48.0f ? 
                        1.0f : 
                        0.014365523f) : 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <107.5f ? 
                        0.0f : 
                        1.0f)) : 
                 (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.1640625f ? 
                    0.0f : 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <121.0f ? 
                        0.0f : 
                        0.58426964f))) : 
            0.0f) : 
        0.0f);
    return pred;
  } // constant pool size = 34B, number of visited nodes = 8, static init size = 0B
}

class log_drf_1_Tree_0_class_7 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0]) || data[0 /* vlan */] <185.0f ? 
        0.0f : 
         (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.74902344f ? 
            0.0f : 
            0.9936709f));
    return pred;
  } // constant pool size = 10B, number of visited nodes = 2, static init size = 0B
}

class log_drf_1_Tree_0_class_8 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0]) || data[0 /* vlan */] <180.5f ? 
        0.0f : 
         (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <2.5f ? 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <886.0f ? 
                 (data[5 /* 4_letter_word */] <0.05859375f ? 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <590.5f ? 
                        0.0020703934f : 
                        0.0f) : 
                    0.0f) : 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.54296875f ? 
                    1.0f : 
                    0.5f)) : 
             (data[3 /* no_of_ips */] <3.5f ? 
                1.0f : 
                 (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <4.5f ? 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <1018.5f ? 
                        0.0f : 
                        0.029411765f) : 
                    1.0f))));
    return pred;
  } // constant pool size = 38B, number of visited nodes = 9, static init size = 0B
}

class log_drf_1_Tree_0_class_9 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0]) || data[0 /* vlan */] <159.5f ? 
        0.0f : 
         (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <2.5f ? 
             (data[2 /* no_of_characters */] <120.5f ? 
                 (data[1 /* type_of_time */] <3.5f ? 
                    1.0f : 
                    0.0f) : 
                 (data[8 /* 7_letter_word */] <0.08984375f ? 
                     (data[1 /* type_of_time */] <3.5f ? 
                        1.0f : 
                        0.0f) : 
                    0.0f)) : 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <173.5f ? 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.1015625f ? 
                     (data[9 /* 8_letter_word */] <0.125f ? 
                        0.99248123f : 
                        1.0f) : 
                    1.0f) : 
                0.0f)));
    return pred;
  } // constant pool size = 38B, number of visited nodes = 9, static init size = 0B
}

class log_drf_1_Tree_0_class_10 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0]) || data[0 /* vlan */] <166.5f ? 
        5.0979834E-6f : 
         (data[2 /* no_of_characters */] <93.5f ? 
             (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.33398438f ? 
                0.0f : 
                1.0f) : 
            0.0f));
    return pred;
  } // constant pool size = 14B, number of visited nodes = 3, static init size = 0B
}

class log_drf_1_Tree_0_class_11 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.27929688f ? 
        0.0f : 
        3.5023815E-5f);
    return pred;
  } // constant pool size = 6B, number of visited nodes = 1, static init size = 0B
}

class log_drf_1_Tree_0_class_12 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0]) || data[0 /* vlan */] <593.5f ? 
        0.0f : 
         (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
            0.0f : 
             (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.43359375f ? 
                 (data[7 /* 6_letter_word */] <0.69921875f ? 
                    0.0f : 
                    1.0f) : 
                1.0f)));
    return pred;
  } // constant pool size = 18B, number of visited nodes = 4, static init size = 0B
}

class log_drf_1_Tree_0_class_13 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0]) || data[0 /* vlan */] <593.5f ? 
         (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.24804688f ? 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <165.5f ? 
                0.0f : 
                 (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.97265625f ? 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.03125f ? 
                        0.0010041121f : 
                        0.0f) : 
                    0.024523161f)) : 
             (data[2 /* no_of_characters */] <55.5f ? 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.2890625f ? 
                    1.0f : 
                    0.0f) : 
                 (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.19140625f ? 
                    0.0f : 
                     (data[9 /* 8_letter_word */] <0.2088623f ? 
                        0.02849741f : 
                        0.0f)))) : 
         (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <37.0f ? 
            1.0f : 
             (data[2 /* no_of_characters */] <126.5f ? 
                0.0f : 
                 (data[2 /* no_of_characters */] <431.0f ? 
                    0.33333334f : 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <497.5f ? 
                        0.0f : 
                        0.06666667f)))));
    return pred;
  } // constant pool size = 54B, number of visited nodes = 13, static init size = 0B
}

class log_drf_1_Tree_0_class_14 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.19726562f ? 
        0.0f : 
         (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.19824219f ? 
            0.0f : 
             (data[7 /* 6_letter_word */] <0.2004013f ? 
                 (data[5 /* 4_letter_word */] <0.23057175f ? 
                     (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.15104167f ? 
                        0.019480519f : 
                        0.12643678f) : 
                    0.0f) : 
                0.0f)));
    return pred;
  } // constant pool size = 22B, number of visited nodes = 5, static init size = 0B
}

class log_drf_1_Tree_0_class_15 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.5942383f ? 
         (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.9277344f ? 
             (data[0 /* vlan */] <141.5f ? 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.31801033f ? 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.15625f ? 
                        9.8830504E-5f : 
                        0.0051635113f) : 
                     (data[3 /* no_of_ips */] <1.5f ? 
                        0.024237428f : 
                        5.509642E-4f)) : 
                0.0f) : 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <100.5f ? 
                0.09673519f : 
                0.0f)) : 
         (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <213.5f ? 
             (data[2 /* no_of_characters */] <112.5f ? 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <111.5f ? 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <113.5f ? 
                        0.0f : 
                        0.33333334f) : 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <81.5f ? 
                        0.0f : 
                        1.0f)) : 
                 (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <1.5f ? 
                    0.0f : 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <206.0f ? 
                        0.0f : 
                        1.0f))) : 
             (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.690625f ? 
                 (Double.isNaN(data[14]) || data[14 /* 13_letter_word */] <0.083333336f ? 
                     (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.2265625f ? 
                        0.6818182f : 
                        1.0f) : 
                    0.0f) : 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <89.5f ? 
                    0.0f : 
                     (data[2 /* no_of_characters */] <334.0f ? 
                        1.0f : 
                        0.0f)))));
    return pred;
  } // constant pool size = 78B, number of visited nodes = 19, static init size = 0B
}

class log_drf_1_Tree_0_class_16 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0]) || data[0 /* vlan */] <83.5f ? 
         (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.32226562f ? 
            0.0f : 
             (data[2 /* no_of_characters */] <80.5f ? 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <30.5f ? 
                    0.0f : 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.75f ? 
                        0.0f : 
                        1.0f)) : 
                 (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.30859375f ? 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.3203125f ? 
                        1.4891294E-4f : 
                        5.9265114E-4f) : 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.25f ? 
                        0.033333335f : 
                        0.5f)))) : 
        0.0f);
    return pred;
  } // constant pool size = 34B, number of visited nodes = 8, static init size = 0B
}

class log_drf_1_Tree_0_class_17 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0]) || data[0 /* vlan */] <180.5f ? 
         (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.029296875f ? 
             (data[0 /* vlan */] <15.0f ? 
                 (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.83203125f ? 
                    0.0f : 
                    0.33333334f) : 
                0.0f) : 
             (data[11 /* 10_letter_word */] <0.033088684f ? 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.2578125f ? 
                    0.0f : 
                    1.0f) : 
                0.0f)) : 
         (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <613.0f ? 
            0.0f : 
             (data[2 /* no_of_characters */] <752.0f ? 
                0.9930556f : 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <1011.5f ? 
                     (data[3 /* no_of_ips */] <1.5f ? 
                        0.060606062f : 
                        0.0f) : 
                     (data[3 /* no_of_ips */] <2.5f ? 
                        0.0f : 
                        0.9517241f)))));
    return pred;
  } // constant pool size = 46B, number of visited nodes = 11, static init size = 0B
}

class log_drf_1_Tree_0_class_18 {
  static final double score0(double[] data) {
    double pred =      (data[0 /* vlan */] <14.5f ? 
        5.034233E-5f : 
        0.0f);
    return pred;
  } // constant pool size = 6B, number of visited nodes = 1, static init size = 0B
}

class log_drf_1_Tree_0_class_19 {
  static final double score0(double[] data) {
    double pred =      (data[0 /* vlan */] <14.5f ? 
         (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.23535156f ? 
             (data[2 /* no_of_characters */] <140.5f ? 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.18359375f ? 
                    0.0f : 
                     (data[8 /* 7_letter_word */] <0.22824097f ? 
                        0.15384616f : 
                        0.0f)) : 
                0.0f) : 
            1.0f) : 
        0.0f);
    return pred;
  } // constant pool size = 22B, number of visited nodes = 5, static init size = 0B
}

class log_drf_1_Tree_0_class_20 {
  static final double score0(double[] data) {
    double pred =      (data[0 /* vlan */] <23.5f ? 
         (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <3.5f ? 
             (data[2 /* no_of_characters */] <125.5f ? 
                 (data[0 /* vlan */] <18.5f ? 
                    0.0f : 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <115.5f ? 
                        1.0f : 
                        0.999092f)) : 
                 (data[1 /* type_of_time */] <4.5f ? 
                    0.0f : 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.296875f ? 
                        0.5488082f : 
                        0.9702613f))) : 
            0.0f) : 
        0.0f);
    return pred;
  } // constant pool size = 30B, number of visited nodes = 7, static init size = 0B
}

class log_drf_1_Tree_0_class_21 {
  static final double score0(double[] data) {
    double pred =      (data[0 /* vlan */] <11.5f ? 
         (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
            0.0f : 
             (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.0625f ? 
                 (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.21484375f ? 
                    0.44186047f : 
                    0.0f) : 
                0.0f)) : 
         (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <215.5f ? 
             (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.3203125f ? 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.8984375f ? 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.546875f ? 
                        2.5393104E-4f : 
                        0.0034179688f) : 
                    0.0015258216f) : 
                 (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.31640625f ? 
                     (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                        0.0014454469f : 
                        6.8899E-5f) : 
                     (Double.isNaN(data[15]) || data[15 /* 14_letter_word */] <0.0859375f ? 
                        0.01191067f : 
                        0.0f))) : 
             (data[2 /* no_of_characters */] <224.5f ? 
                 (data[5 /* 4_letter_word */] <0.265625f ? 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.22619629f ? 
                        0.026570048f : 
                        0.704918f) : 
                     (data[0 /* vlan */] <99.5f ? 
                        0.0f : 
                        0.0027116602f)) : 
                 (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                     (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.15625f ? 
                        0.0056838365f : 
                        0.03974563f) : 
                     (data[3 /* no_of_ips */] <3.5f ? 
                        0.0035128805f : 
                        0.0f)))));
    return pred;
  } // constant pool size = 74B, number of visited nodes = 18, static init size = 0B
}

class log_drf_1_Tree_0_class_22 {
  static final double score0(double[] data) {
    double pred =      (data[0 /* vlan */] <5.5f ? 
         (data[5 /* 4_letter_word */] <0.41601562f ? 
            0.0f : 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <130.5f ? 
                0.0f : 
                0.33333334f)) : 
         (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <227.5f ? 
            0.0f : 
             (data[2 /* no_of_characters */] <231.5f ? 
                 (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.30859375f ? 
                    0.0f : 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.5f ? 
                        0.0f : 
                        0.22222222f)) : 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <319.5f ? 
                    0.0f : 
                     (data[5 /* 4_letter_word */] <0.171875f ? 
                        0.0010288066f : 
                        0.0f)))));
    return pred;
  } // constant pool size = 38B, number of visited nodes = 9, static init size = 0B
}

class log_drf_1_Tree_0_class_23 {
  static final double score0(double[] data) {
    double pred =      (data[0 /* vlan */] <14.5f ? 
         (data[5 /* 4_letter_word */] <0.055664062f ? 
             (data[9 /* 8_letter_word */] <0.12695312f ? 
                 (data[2 /* no_of_characters */] <157.0f ? 
                    0.0f : 
                     (data[2 /* no_of_characters */] <415.5f ? 
                        0.7076923f : 
                        0.0f)) : 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <388.5f ? 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.515625f ? 
                        0.99506414f : 
                        0.0f) : 
                    0.0f)) : 
             (Double.isNaN(data[13]) || data[13 /* 12_letter_word */] <0.046875f ? 
                 (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.265625f ? 
                     (data[5 /* 4_letter_word */] <0.1388889f ? 
                        0.09090909f : 
                        1.1621151E-4f) : 
                     (data[9 /* 8_letter_word */] <0.3095703f ? 
                        1.0f : 
                        0.10344828f)) : 
                1.0f)) : 
        0.0f);
    return pred;
  } // constant pool size = 46B, number of visited nodes = 11, static init size = 0B
}

class log_drf_1_Tree_0_class_24 {
  static final double score0(double[] data) {
    double pred =      (data[0 /* vlan */] <11.5f ? 
         (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
            0.0f : 
             (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.0625f ? 
                0.04f : 
                0.0f)) : 
        0.0f);
    return pred;
  } // constant pool size = 14B, number of visited nodes = 3, static init size = 0B
}

class log_drf_1_Tree_0_class_25 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0]) || data[0 /* vlan */] <41.0f ? 
         (data[3 /* no_of_ips */] <0.5f ? 
             (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.1484375f ? 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <160.5f ? 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.8984375f ? 
                        0.027440634f : 
                        0.27498f) : 
                     (data[2 /* no_of_characters */] <201.5f ? 
                        0.6634659f : 
                        0.1691572f)) : 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.44921875f ? 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.3088379f ? 
                        0.0072473492f : 
                        0.10566038f) : 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <180.5f ? 
                        0.0f : 
                        0.9402391f))) : 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <290.5f ? 
                 (data[3 /* no_of_ips */] <1.5f ? 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <159.5f ? 
                        0.29647958f : 
                        0.94512975f) : 
                     (data[0 /* vlan */] <25.0f ? 
                        0.0f : 
                        0.9749938f)) : 
                0.0f)) : 
         (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <550.0f ? 
             (data[2 /* no_of_characters */] <153.5f ? 
                 (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <1.5f ? 
                    0.0f : 
                     (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
                        0.0f : 
                        0.71428573f)) : 
                0.0f) : 
             (data[6 /* 5_letter_word */] <0.029296875f ? 
                0.01010101f : 
                0.0f)));
    return pred;
  } // constant pool size = 74B, number of visited nodes = 18, static init size = 0B
}

class log_drf_1_Tree_0_class_26 {
  static final double score0(double[] data) {
    double pred =      (data[0 /* vlan */] <29.5f ? 
         (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.6513672f ? 
            0.0f : 
             (data[2 /* no_of_characters */] <63.0f ? 
                0.9949622f : 
                0.0f)) : 
        0.0f);
    return pred;
  } // constant pool size = 14B, number of visited nodes = 3, static init size = 0B
}

class log_drf_1_Tree_0_class_27 {
  static final double score0(double[] data) {
    double pred =      (data[0 /* vlan */] <14.5f ? 
         (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.4765625f ? 
            0.0f : 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <255.5f ? 
                0.0f : 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.22265625f ? 
                    0.0f : 
                     (data[3 /* no_of_ips */] <0.5f ? 
                        1.0f : 
                        0.0f)))) : 
        0.0f);
    return pred;
  } // constant pool size = 22B, number of visited nodes = 5, static init size = 0B
}

class log_drf_1_Tree_0_class_28 {
  static final double score0(double[] data) {
    double pred =      (data[0 /* vlan */] <14.5f ? 
         (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <3.0f ? 
            0.0f : 
            1.0f) : 
        0.0f);
    return pred;
  } // constant pool size = 10B, number of visited nodes = 2, static init size = 0B
}

class log_drf_1_Tree_0_class_29 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.018066406f ? 
         (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.6904297f ? 
            0.0f : 
             (data[5 /* 4_letter_word */] <0.7321491f ? 
                 (data[6 /* 5_letter_word */] <0.23828125f ? 
                    1.0f : 
                    0.0f) : 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <180.5f ? 
                    0.0f : 
                     (data[2 /* no_of_characters */] <194.5f ? 
                        0.02631579f : 
                        0.0f)))) : 
         (data[7 /* 6_letter_word */] <0.07560158f ? 
             (data[2 /* no_of_characters */] <987.5f ? 
                1.0f : 
                0.0f) : 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <956.5f ? 
                0.0f : 
                 (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.42578125f ? 
                    0.0f : 
                    0.5f))));
    return pred;
  } // constant pool size = 42B, number of visited nodes = 10, static init size = 0B
}

class log_drf_1_Tree_0_class_30 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0]) || data[0 /* vlan */] <177.0f ? 
        0.0f : 
         (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <2.5f ? 
             (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.22460938f ? 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.22265625f ? 
                    0.0f : 
                     (data[7 /* 6_letter_word */] <0.359375f ? 
                        0.42857143f : 
                        0.0f)) : 
                 (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.37109375f ? 
                    0.0f : 
                     (data[2 /* no_of_characters */] <209.0f ? 
                        1.0f : 
                        0.0f))) : 
             (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.20703125f ? 
                 (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <3.5f ? 
                     (data[5 /* 4_letter_word */] <0.3828125f ? 
                        1.0f : 
                        0.15f) : 
                    0.0f) : 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <624.5f ? 
                    1.0f : 
                    0.0f))));
    return pred;
  } // constant pool size = 46B, number of visited nodes = 11, static init size = 0B
}

class log_drf_1_Tree_0_class_31 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[15]) || data[15 /* 14_letter_word */] <0.22485352f ? 
         (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.23535156f ? 
             (Double.isNaN(data[13]) || data[13 /* 12_letter_word */] <0.41601562f ? 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.1171875f ? 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.15625f ? 
                        0.005005045f : 
                        4.983238E-4f) : 
                     (Double.isNaN(data[15]) || data[15 /* 14_letter_word */] <0.1828125f ? 
                        0.012585147f : 
                        0.8333333f)) : 
                 (data[2 /* no_of_characters */] <105.5f ? 
                    1.0f : 
                    0.0f)) : 
             (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.31054688f ? 
                0.0f : 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.0859375f ? 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <113.5f ? 
                        0.7777778f : 
                        0.0f) : 
                    0.0f))) : 
         (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <117.0f ? 
             (data[15 /* 14_letter_word */] <0.29149055f ? 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <102.5f ? 
                    1.0f : 
                    0.71428573f) : 
                1.0f) : 
            0.0f));
    return pred;
  } // constant pool size = 54B, number of visited nodes = 13, static init size = 0B
}

class log_drf_1_Tree_0_class_32 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.5942383f ? 
         (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.23535156f ? 
             (data[0 /* vlan */] <29.5f ? 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.46424866f ? 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.4609375f ? 
                        3.172589E-5f : 
                        0.012339056f) : 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.4140625f ? 
                        0.0f : 
                        0.1687898f)) : 
                0.0f) : 
             (data[2 /* no_of_characters */] <115.5f ? 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <111.5f ? 
                    0.0f : 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <112.5f ? 
                        0.9285714f : 
                        0.0f)) : 
                0.0f)) : 
         (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.10058594f ? 
            0.0f : 
             (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.26650938f ? 
                1.0f : 
                0.0f)));
    return pred;
  } // constant pool size = 46B, number of visited nodes = 11, static init size = 0B
}

class log_drf_1_Tree_0_class_33 {
  static final double score0(double[] data) {
    double pred =      (data[0 /* vlan */] <7.5f ? 
         (data[5 /* 4_letter_word */] <0.29101562f ? 
             (data[5 /* 4_letter_word */] <0.12504578f ? 
                1.0f : 
                0.0f) : 
             (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.083984375f ? 
                1.0f : 
                0.0f)) : 
         (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <280.5f ? 
             (data[2 /* no_of_characters */] <83.5f ? 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <80.5f ? 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.7421875f ? 
                        0.0010917031f : 
                        0.1764706f) : 
                    0.109540634f) : 
                 (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.70703125f ? 
                     (data[0 /* vlan */] <96.0f ? 
                        4.3096373E-4f : 
                        0.0f) : 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.078125f ? 
                        0.002512895f : 
                        0.0f))) : 
             (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.080078125f ? 
                0.0f : 
                 (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.41015625f ? 
                     (data[2 /* no_of_characters */] <326.5f ? 
                        0.03846154f : 
                        0.0f) : 
                     (data[8 /* 7_letter_word */] <0.046875f ? 
                        0.05882353f : 
                        0.80487806f)))));
    return pred;
  } // constant pool size = 62B, number of visited nodes = 15, static init size = 0B
}

class log_drf_1_Tree_0_class_34 {
  static final double score0(double[] data) {
    double pred =      (data[0 /* vlan */] <10.0f ? 
         (data[5 /* 4_letter_word */] <0.29101562f ? 
             (data[9 /* 8_letter_word */] <0.1796875f ? 
                0.0f : 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <4.5f ? 
                    0.0f : 
                    0.5f)) : 
            0.0f) : 
         (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.15527344f ? 
            0.0f : 
             (data[2 /* no_of_characters */] <117.5f ? 
                 (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.16796875f ? 
                    0.0f : 
                     (data[0 /* vlan */] <25.5f ? 
                        0.33333334f : 
                        0.0f)) : 
                0.0f)));
    return pred;
  } // constant pool size = 34B, number of visited nodes = 8, static init size = 0B
}

class log_drf_1_Tree_0_class_35 {
  static final double score0(double[] data) {
    double pred =      (data[0 /* vlan */] <12.5f ? 
         (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.41601562f ? 
             (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.29101562f ? 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.046875f ? 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.3671875f ? 
                        0.0f : 
                        0.4f) : 
                    0.0f) : 
                 (data[2 /* no_of_characters */] <90.5f ? 
                    0.5f : 
                    0.0f)) : 
            0.0f) : 
         (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.87402344f ? 
             (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
                0.0f : 
                 (data[0 /* vlan */] <20.5f ? 
                     (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.015625f ? 
                        0.001885822f : 
                        0.0f) : 
                    0.0f)) : 
             (data[2 /* no_of_characters */] <83.5f ? 
                 (data[0 /* vlan */] <28.5f ? 
                    1.0f : 
                    0.0f) : 
                0.0f)));
    return pred;
  } // constant pool size = 50B, number of visited nodes = 12, static init size = 0B
}

class log_drf_1_Tree_0_class_36 {
  static final double score0(double[] data) {
    double pred =      (data[0 /* vlan */] <5.5f ? 
         (data[5 /* 4_letter_word */] <0.41601562f ? 
            0.0f : 
             (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.083984375f ? 
                0.0f : 
                0.875f)) : 
        0.0f);
    return pred;
  } // constant pool size = 14B, number of visited nodes = 3, static init size = 0B
}

class log_drf_1_Tree_0_class_37 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0]) || data[0 /* vlan */] <156.5f ? 
         (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.5859375f ? 
             (data[0 /* vlan */] <18.0f ? 
                 (data[1 /* type_of_time */] <4.5f ? 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.7421875f ? 
                        0.9992658f : 
                        0.5f) : 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.03125f ? 
                        2.0226538E-4f : 
                        0.0f)) : 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.6328125f ? 
                     (data[1 /* type_of_time */] <2.5f ? 
                        0.8055556f : 
                        9.78713E-5f) : 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.29017857f ? 
                        0.014270613f : 
                        0.23529412f))) : 
             (data[1 /* type_of_time */] <4.5f ? 
                 (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.8734375f ? 
                    1.0f : 
                     (data[1 /* type_of_time */] <3.0f ? 
                        1.0f : 
                        0.9966216f)) : 
                0.0f)) : 
         (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.31640625f ? 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <645.5f ? 
                 (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <1.5f ? 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.0625f ? 
                        0.9888561f : 
                        0.9987443f) : 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.3671875f ? 
                        0.002945508f : 
                        0.9528302f)) : 
                0.020501139f) : 
             (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.833107f ? 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <174.0f ? 
                     (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <2.5f ? 
                        0.98888886f : 
                        0.0f) : 
                     (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.2890625f ? 
                        0.14231738f : 
                        0.96428573f)) : 
                0.11818182f)));
    return pred;
  } // constant pool size = 86B, number of visited nodes = 21, static init size = 0B
}

class log_drf_1_Tree_0_class_38 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.47216797f ? 
         (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.9277344f ? 
            0.0f : 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <63.5f ? 
                0.0f : 
                 (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                    0.0f : 
                     (data[3 /* no_of_ips */] <1.5f ? 
                        0.025974026f : 
                        0.0f)))) : 
        7.367025E-5f);
    return pred;
  } // constant pool size = 22B, number of visited nodes = 5, static init size = 0B
}


class log_drf_1_Forest_1 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += log_drf_1_Tree_1_class_0.score0(fdata);
    preds[2] += log_drf_1_Tree_1_class_1.score0(fdata);
    preds[3] += log_drf_1_Tree_1_class_2.score0(fdata);
    preds[4] += log_drf_1_Tree_1_class_3.score0(fdata);
    preds[5] += log_drf_1_Tree_1_class_4.score0(fdata);
    preds[6] += log_drf_1_Tree_1_class_5.score0(fdata);
    preds[7] += log_drf_1_Tree_1_class_6.score0(fdata);
    preds[8] += log_drf_1_Tree_1_class_7.score0(fdata);
    preds[9] += log_drf_1_Tree_1_class_8.score0(fdata);
    preds[10] += log_drf_1_Tree_1_class_9.score0(fdata);
    preds[11] += log_drf_1_Tree_1_class_10.score0(fdata);
    preds[12] += log_drf_1_Tree_1_class_11.score0(fdata);
    preds[13] += log_drf_1_Tree_1_class_12.score0(fdata);
    preds[14] += log_drf_1_Tree_1_class_13.score0(fdata);
    preds[15] += log_drf_1_Tree_1_class_14.score0(fdata);
    preds[16] += log_drf_1_Tree_1_class_15.score0(fdata);
    preds[17] += log_drf_1_Tree_1_class_16.score0(fdata);
    preds[18] += log_drf_1_Tree_1_class_17.score0(fdata);
    preds[19] += log_drf_1_Tree_1_class_18.score0(fdata);
    preds[20] += log_drf_1_Tree_1_class_19.score0(fdata);
    preds[21] += log_drf_1_Tree_1_class_20.score0(fdata);
    preds[22] += log_drf_1_Tree_1_class_21.score0(fdata);
    preds[23] += log_drf_1_Tree_1_class_22.score0(fdata);
    preds[24] += log_drf_1_Tree_1_class_23.score0(fdata);
    preds[25] += log_drf_1_Tree_1_class_24.score0(fdata);
    preds[26] += log_drf_1_Tree_1_class_25.score0(fdata);
    preds[27] += log_drf_1_Tree_1_class_26.score0(fdata);
    preds[28] += log_drf_1_Tree_1_class_27.score0(fdata);
    preds[29] += log_drf_1_Tree_1_class_28.score0(fdata);
    preds[30] += log_drf_1_Tree_1_class_29.score0(fdata);
    preds[31] += log_drf_1_Tree_1_class_30.score0(fdata);
    preds[32] += log_drf_1_Tree_1_class_31.score0(fdata);
    preds[33] += log_drf_1_Tree_1_class_32.score0(fdata);
    preds[34] += log_drf_1_Tree_1_class_33.score0(fdata);
    preds[35] += log_drf_1_Tree_1_class_34.score0(fdata);
    preds[36] += log_drf_1_Tree_1_class_35.score0(fdata);
    preds[37] += log_drf_1_Tree_1_class_36.score0(fdata);
    preds[38] += log_drf_1_Tree_1_class_37.score0(fdata);
    preds[39] += log_drf_1_Tree_1_class_38.score0(fdata);
  }
}
class log_drf_1_Tree_1_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <1040.0f ? 
         (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <532.5f ? 
             (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.234375f ? 
                0.0f : 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <524.5f ? 
                     (data[1 /* type_of_time */] <4.5f ? 
                        0.0f : 
                        2.6208197E-4f) : 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.21875f ? 
                        0.017094018f : 
                        0.0f))) : 
             (Double.isNaN(data[14]) || data[14 /* 13_letter_word */] <0.009765625f ? 
                 (Double.isNaN(data[4]) || data[4 /* no_of_macs */] <0.5f ? 
                    0.0f : 
                     (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.109375f ? 
                        1.0f : 
                        0.5f)) : 
                 (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.03125f ? 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <684.5f ? 
                        0.0f : 
                        0.5f) : 
                    1.0f))) : 
         (data[11 /* 10_letter_word */] <0.02734375f ? 
            0.0f : 
            1.0f));
    return pred;
  } // constant pool size = 50B, number of visited nodes = 12, static init size = 0B
}

class log_drf_1_Tree_1_class_1 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <261.5f ? 
         (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <260.5f ? 
             (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
                0.0f : 
                 (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                    0.0f : 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.703125f ? 
                        1.4537525E-4f : 
                        0.035820894f))) : 
            0.013651877f) : 
         (data[1 /* type_of_time */] <3.5f ? 
             (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.21679688f ? 
                0.0f : 
                1.0f) : 
             (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.31640625f ? 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.2793274f ? 
                    0.0f : 
                     (data[2 /* no_of_characters */] <277.5f ? 
                        0.2857143f : 
                        0.0f)) : 
                 (data[8 /* 7_letter_word */] <0.4152069f ? 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.3877025f ? 
                        0.14285715f : 
                        0.97402596f) : 
                    0.0f))));
    return pred;
  } // constant pool size = 50B, number of visited nodes = 12, static init size = 0B
}

class log_drf_1_Tree_1_class_2 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* no_of_characters */] <158.5f ? 
         (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <147.5f ? 
             (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.1328125f ? 
                0.0f : 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <137.5f ? 
                    0.0f : 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.3671875f ? 
                        0.375f : 
                        0.85813147f))) : 
             (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.12890625f ? 
                    0.0f : 
                     (data[7 /* 6_letter_word */] <0.22418213f ? 
                        0.6f : 
                        0.0033840947f)) : 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.4140625f ? 
                    0.0f : 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.0859375f ? 
                        0.9882155f : 
                        0.0f)))) : 
         (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
            0.0f : 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <181.5f ? 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <136.5f ? 
                    0.0f : 
                     (data[0 /* vlan */] <140.0f ? 
                        1.0f : 
                        0.0021253985f)) : 
                 (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.03125f ? 
                     (data[3 /* no_of_ips */] <1.5f ? 
                        0.36923078f : 
                        0.0f) : 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <591.0f ? 
                        1.0f : 
                        0.0f)))));
    return pred;
  } // constant pool size = 70B, number of visited nodes = 17, static init size = 0B
}

class log_drf_1_Tree_1_class_3 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
         (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <295.5f ? 
            0.0f : 
             (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.36914062f ? 
                0.0f : 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <319.5f ? 
                     (data[1 /* type_of_time */] <4.5f ? 
                        0.0f : 
                        0.9421769f) : 
                    0.0f))) : 
         (data[1 /* type_of_time */] <4.5f ? 
             (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <1.5f ? 
                0.001079525f : 
                0.0f) : 
             (data[0 /* vlan */] <29.5f ? 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.17578125f ? 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.3125f ? 
                        0.03182437f : 
                        0.7961768f) : 
                    0.0f) : 
                0.0f)));
    return pred;
  } // constant pool size = 42B, number of visited nodes = 10, static init size = 0B
}

class log_drf_1_Tree_1_class_4 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* no_of_characters */] <113.5f ? 
         (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <109.5f ? 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <25.5f ? 
                0.0f : 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <98.5f ? 
                    0.0f : 
                     (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.171875f ? 
                        7.780083E-4f : 
                        0.037037037f))) : 
             (data[3 /* no_of_ips */] <0.5f ? 
                 (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.2890625f ? 
                    0.0f : 
                     (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.2890625f ? 
                        0.0f : 
                        1.0f)) : 
                0.0f)) : 
         (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.3095703f ? 
             (data[8 /* 7_letter_word */] <0.14453125f ? 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.12364197f ? 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.4765625f ? 
                        0.0f : 
                        1.7210223E-4f) : 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.3984375f ? 
                        0.0022883294f : 
                        0.25f)) : 
                0.0f) : 
             (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.29101562f ? 
                0.0f : 
                 (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.16796875f ? 
                    0.0f : 
                    0.75f))));
    return pred;
  } // constant pool size = 62B, number of visited nodes = 15, static init size = 0B
}

class log_drf_1_Tree_1_class_5 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
         (data[0 /* vlan */] <83.5f ? 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <305.5f ? 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <80.5f ? 
                     (Double.isNaN(data[12]) || data[12 /* 11_letter_word */] <0.2890625f ? 
                        4.4953922E-4f : 
                        0.028571429f) : 
                     (data[8 /* 7_letter_word */] <0.0625f ? 
                        1.0f : 
                        0.083333336f)) : 
                 (Double.isNaN(data[13]) || data[13 /* 12_letter_word */] <0.046875f ? 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.2578125f ? 
                        0.0f : 
                        0.06504065f) : 
                    0.0f)) : 
            0.0f) : 
        0.0f);
    return pred;
  } // constant pool size = 34B, number of visited nodes = 8, static init size = 0B
}

class log_drf_1_Tree_1_class_6 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* no_of_characters */] <98.5f ? 
         (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <92.5f ? 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <109.5f ? 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.87109375f ? 
                     (data[2 /* no_of_characters */] <33.5f ? 
                        1.0f : 
                        6.3946797E-4f) : 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <47.0f ? 
                        1.0f : 
                        0.0f)) : 
                 (data[2 /* no_of_characters */] <51.0f ? 
                    0.0f : 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.171875f ? 
                        0.2868421f : 
                        0.8181818f))) : 
             (data[3 /* no_of_ips */] <0.5f ? 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.4140625f ? 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.1015625f ? 
                        0.17454545f : 
                        0.9230769f) : 
                    0.0f) : 
                0.0f)) : 
         (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
            0.0f : 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <125.5f ? 
                0.0f : 
                 (data[0 /* vlan */] <133.5f ? 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <136.0f ? 
                        1.0f : 
                        0.0f) : 
                    0.0f))));
    return pred;
  } // constant pool size = 62B, number of visited nodes = 15, static init size = 0B
}

class log_drf_1_Tree_1_class_7 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <1.5f ? 
         (data[2 /* no_of_characters */] <158.5f ? 
             (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.8984375f ? 
                0.0f : 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <178.5f ? 
                    0.0f : 
                    0.97727275f)) : 
            0.0f) : 
         (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.0390625f ? 
             (data[3 /* no_of_ips */] <2.5f ? 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <160.5f ? 
                    0.0f : 
                     (Double.isNaN(data[4]) || data[4 /* no_of_macs */] <1.0f ? 
                        0.23736264f : 
                        0.0f)) : 
                0.0f) : 
            0.0f));
    return pred;
  } // constant pool size = 34B, number of visited nodes = 8, static init size = 0B
}

class log_drf_1_Tree_1_class_8 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <900.5f ? 
         (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <751.0f ? 
             (data[1 /* type_of_time */] <4.5f ? 
                0.0f : 
                 (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.05859375f ? 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.078125f ? 
                        2.2521254E-4f : 
                        0.0f) : 
                    0.0f)) : 
             (data[14 /* 13_letter_word */] <0.009765625f ? 
                 (data[2 /* no_of_characters */] <789.0f ? 
                    0.5f : 
                    0.0f) : 
                0.0f)) : 
         (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.0087890625f ? 
             (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.20703125f ? 
                 (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <3.5f ? 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.203125f ? 
                        0.89830506f : 
                        0.6f) : 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.578125f ? 
                        0.12f : 
                        0.0f)) : 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.41645813f ? 
                    0.0f : 
                     (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
                        0.0f : 
                        0.5f))) : 
            0.0f));
    return pred;
  } // constant pool size = 58B, number of visited nodes = 14, static init size = 0B
}

class log_drf_1_Tree_1_class_9 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <2.5f ? 
         (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <1.5f ? 
             (data[1 /* type_of_time */] <3.5f ? 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <162.5f ? 
                    0.0f : 
                    1.0f) : 
                0.0f) : 
             (Double.isNaN(data[4]) || data[4 /* no_of_macs */] <0.5f ? 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.18359375f ? 
                    0.0f : 
                     (data[1 /* type_of_time */] <3.5f ? 
                        0.9459459f : 
                        0.0f)) : 
                0.0f)) : 
         (data[1 /* type_of_time */] <3.5f ? 
             (data[9 /* 8_letter_word */] <0.1015625f ? 
                 (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <3.5f ? 
                     (data[0 /* vlan */] <178.5f ? 
                        1.0f : 
                        0.0f) : 
                    1.0f) : 
                1.0f) : 
            0.0f));
    return pred;
  } // constant pool size = 46B, number of visited nodes = 11, static init size = 0B
}

class log_drf_1_Tree_1_class_10 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* no_of_characters */] <92.5f ? 
         (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <91.5f ? 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <165.5f ? 
                0.0f : 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.16796875f ? 
                    0.0f : 
                    0.5f)) : 
             (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.5332031f ? 
                0.0f : 
                1.0f)) : 
        5.364749E-6f);
    return pred;
  } // constant pool size = 22B, number of visited nodes = 5, static init size = 0B
}

class log_drf_1_Tree_1_class_11 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* no_of_characters */] <134.5f ? 
        1.8135326E-5f : 
        0.0f);
    return pred;
  } // constant pool size = 6B, number of visited nodes = 1, static init size = 0B
}

class log_drf_1_Tree_1_class_12 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <529.5f ? 
         (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <428.5f ? 
            0.0f : 
             (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.83203125f ? 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <581.0f ? 
                    0.0f : 
                    1.0f) : 
                1.0f)) : 
         (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.013671875f ? 
             (data[3 /* no_of_ips */] <1.5f ? 
                 (data[2 /* no_of_characters */] <553.5f ? 
                    1.0f : 
                    0.0f) : 
                0.0f) : 
            0.0f));
    return pred;
  } // constant pool size = 30B, number of visited nodes = 7, static init size = 0B
}

class log_drf_1_Tree_1_class_13 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* no_of_characters */] <54.0f ? 
         (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <28.0f ? 
            1.0f : 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <47.0f ? 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.125f ? 
                     (data[2 /* no_of_characters */] <33.5f ? 
                        0.25f : 
                        0.0f) : 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.66503906f ? 
                        1.0f : 
                        0.0f)) : 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.16796875f ? 
                    1.0f : 
                    0.0f))) : 
         (data[1 /* type_of_time */] <4.5f ? 
            0.0f : 
             (Double.isNaN(data[4]) || data[4 /* no_of_macs */] <0.5f ? 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <593.0f ? 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.390625f ? 
                        0.0f : 
                        5.356969E-4f) : 
                     (data[2 /* no_of_characters */] <322.0f ? 
                        1.0f : 
                        0.0f)) : 
                0.0f)));
    return pred;
  } // constant pool size = 50B, number of visited nodes = 12, static init size = 0B
}

class log_drf_1_Tree_1_class_14 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[12]) || data[12 /* 11_letter_word */] <0.18310547f ? 
         (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <173.5f ? 
            0.0f : 
             (data[1 /* type_of_time */] <2.5f ? 
                 (data[3 /* no_of_ips */] <1.0f ? 
                     (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.1015625f ? 
                        0.0f : 
                        1.0f) : 
                    0.0f) : 
                0.0f)) : 
         (data[1 /* type_of_time */] <2.5f ? 
            1.0f : 
            0.0f));
    return pred;
  } // constant pool size = 26B, number of visited nodes = 6, static init size = 0B
}

class log_drf_1_Tree_1_class_15 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* no_of_characters */] <100.5f ? 
         (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <98.5f ? 
            0.0f : 
             (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.7480469f ? 
                0.0f : 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <99.5f ? 
                    0.2756632f : 
                    0.4870317f))) : 
         (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.3095703f ? 
             (Double.isNaN(data[15]) || data[15 /* 14_letter_word */] <0.10546875f ? 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <211.5f ? 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.8671875f ? 
                        7.377896E-4f : 
                        0.00831202f) : 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.59375f ? 
                        9.119003E-4f : 
                        0.3759124f)) : 
                 (data[15 /* 14_letter_word */] <0.12704468f ? 
                    0.10769231f : 
                     (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                        0.0f : 
                        0.09090909f))) : 
             (data[11 /* 10_letter_word */] <0.36620712f ? 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.5f ? 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.16796875f ? 
                        0.038845725f : 
                        0.0f) : 
                    0.74647886f) : 
                 (data[2 /* no_of_characters */] <137.5f ? 
                     (data[6 /* 5_letter_word */] <0.25f ? 
                        0.47368422f : 
                        0.0f) : 
                     (data[6 /* 5_letter_word */] <0.125f ? 
                        0.004219409f : 
                        0.0f)))));
    return pred;
  } // constant pool size = 70B, number of visited nodes = 17, static init size = 0B
}

class log_drf_1_Tree_1_class_16 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* no_of_characters */] <84.5f ? 
         (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <79.5f ? 
            0.0f : 
             (data[2 /* no_of_characters */] <80.5f ? 
                0.3125f : 
                0.0f)) : 
         (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.3095703f ? 
             (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                 (data[0 /* vlan */] <97.5f ? 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <30.5f ? 
                        0.0f : 
                        0.0012254902f) : 
                    0.0f) : 
                0.0f) : 
             (data[11 /* 10_letter_word */] <0.36620712f ? 
                 (data[3 /* no_of_ips */] <0.5f ? 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.0859375f ? 
                        0.009259259f : 
                        0.0f) : 
                    0.0f) : 
                0.0f)));
    return pred;
  } // constant pool size = 42B, number of visited nodes = 10, static init size = 0B
}

class log_drf_1_Tree_1_class_17 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <659.0f ? 
         (data[2 /* no_of_characters */] <94.5f ? 
             (data[1 /* type_of_time */] <2.5f ? 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.16796875f ? 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.5f ? 
                        0.0f : 
                        0.5f) : 
                    0.0f) : 
                0.0f) : 
            0.0f) : 
         (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.02734375f ? 
             (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <3.5f ? 
                 (data[2 /* no_of_characters */] <717.0f ? 
                     (data[2 /* no_of_characters */] <677.0f ? 
                        0.9787234f : 
                        1.0f) : 
                     (data[2 /* no_of_characters */] <886.0f ? 
                        0.3f : 
                        0.0052083335f)) : 
                 (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <4.5f ? 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.171875f ? 
                        0.9866667f : 
                        1.0f) : 
                    0.0f)) : 
             (data[11 /* 10_letter_word */] <0.03060913f ? 
                0.5f : 
                0.0f)));
    return pred;
  } // constant pool size = 54B, number of visited nodes = 13, static init size = 0B
}

class log_drf_1_Tree_1_class_18 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <330.5f ? 
        0.0f : 
        9.973073E-5f);
    return pred;
  } // constant pool size = 6B, number of visited nodes = 1, static init size = 0B
}

class log_drf_1_Tree_1_class_19 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.23583984f ? 
         (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
            0.0f : 
             (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.19115925f ? 
                0.0f : 
                 (data[2 /* no_of_characters */] <185.5f ? 
                    0.09090909f : 
                    0.0f))) : 
         (data[11 /* 10_letter_word */] <0.2679286f ? 
             (data[3 /* no_of_ips */] <0.5f ? 
                0.0f : 
                 (data[2 /* no_of_characters */] <120.5f ? 
                    0.0f : 
                     (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <1.5f ? 
                        0.9969651f : 
                        0.0f))) : 
            0.0f));
    return pred;
  } // constant pool size = 34B, number of visited nodes = 8, static init size = 0B
}

class log_drf_1_Tree_1_class_20 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* no_of_characters */] <134.5f ? 
         (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <25.5f ? 
                 (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.70703125f ? 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.2890625f ? 
                        0.9619267f : 
                        0.99316007f) : 
                     (data[2 /* no_of_characters */] <121.5f ? 
                        0.789916f : 
                        0.45652175f)) : 
                0.0f) : 
             (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <2.5f ? 
                 (data[0 /* vlan */] <25.5f ? 
                     (data[0 /* vlan */] <17.0f ? 
                        0.0f : 
                        1.0f) : 
                    0.0f) : 
                0.0f)) : 
         (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
            0.0f : 
             (data[0 /* vlan */] <25.5f ? 
                 (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.19140625f ? 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.4765625f ? 
                        0.22579151f : 
                        0.96888345f) : 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.578125f ? 
                        0.99901915f : 
                        0.0f)) : 
                0.0f)));
    return pred;
  } // constant pool size = 58B, number of visited nodes = 14, static init size = 0B
}

class log_drf_1_Tree_1_class_21 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[12]) || data[12 /* 11_letter_word */] <0.22460938f ? 
         (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <237.5f ? 
             (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.18359375f ? 
                 (data[0 /* vlan */] <17.5f ? 
                     (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
                        0.0f : 
                        0.009991674f) : 
                     (Double.isNaN(data[13]) || data[13 /* 12_letter_word */] <0.171875f ? 
                        7.373399E-4f : 
                        0.0114613185f)) : 
                 (data[0 /* vlan */] <17.5f ? 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <169.5f ? 
                        0.0f : 
                        1.0f) : 
                     (data[2 /* no_of_characters */] <109.5f ? 
                        0.0042735045f : 
                        0.0f))) : 
             (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <1.5f ? 
                 (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.15625f ? 
                     (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                        0.006581654f : 
                        0.02819549f) : 
                     (data[11 /* 10_letter_word */] <0.18310547f ? 
                        0.3548387f : 
                        0.0038910506f)) : 
                0.0f)) : 
         (data[1 /* type_of_time */] <3.5f ? 
            1.0f : 
            0.0f));
    return pred;
  } // constant pool size = 58B, number of visited nodes = 14, static init size = 0B
}

class log_drf_1_Tree_1_class_22 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <227.5f ? 
         (data[2 /* no_of_characters */] <131.5f ? 
             (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.46289062f ? 
                0.0f : 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <129.5f ? 
                    0.0f : 
                     (data[2 /* no_of_characters */] <130.5f ? 
                        0.0f : 
                        0.06818182f))) : 
            0.0f) : 
         (data[1 /* type_of_time */] <4.5f ? 
            0.0f : 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <21.5f ? 
                0.0f : 
                 (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <1.5f ? 
                     (data[8 /* 7_letter_word */] <0.03125f ? 
                        0.0037488285f : 
                        0.0f) : 
                    0.0f))));
    return pred;
  } // constant pool size = 38B, number of visited nodes = 9, static init size = 0B
}

class log_drf_1_Tree_1_class_23 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.13378906f ? 
         (data[2 /* no_of_characters */] <153.5f ? 
             (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.0625f ? 
                 (data[0 /* vlan */] <17.5f ? 
                     (data[9 /* 8_letter_word */] <0.4140625f ? 
                        0.0f : 
                        0.99617225f) : 
                    0.0f) : 
                0.0f) : 
             (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                 (data[0 /* vlan */] <17.5f ? 
                     (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
                        0.0f : 
                        0.8292683f) : 
                    0.0f) : 
                 (data[3 /* no_of_ips */] <1.5f ? 
                     (data[0 /* vlan */] <17.5f ? 
                        0.35714287f : 
                        0.0f) : 
                    0.0f))) : 
         (data[11 /* 10_letter_word */] <0.15493679f ? 
             (data[9 /* 8_letter_word */] <0.072265625f ? 
                0.0f : 
                 (data[8 /* 7_letter_word */] <0.21428572f ? 
                    0.0f : 
                     (data[7 /* 6_letter_word */] <0.2890625f ? 
                        0.0f : 
                        1.0f))) : 
            0.0f));
    return pred;
  } // constant pool size = 58B, number of visited nodes = 14, static init size = 0B
}

class log_drf_1_Tree_1_class_24 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
        0.0f : 
         (data[3 /* no_of_ips */] <1.5f ? 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <140.5f ? 
                0.0f : 
                 (data[2 /* no_of_characters */] <148.5f ? 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <98.0f ? 
                        3.5932448E-4f : 
                        0.0f) : 
                    0.0f)) : 
            0.0f));
    return pred;
  } // constant pool size = 22B, number of visited nodes = 5, static init size = 0B
}

class log_drf_1_Tree_1_class_25 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <1.5f ? 
         (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
             (data[0 /* vlan */] <41.5f ? 
                 (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.2109375f ? 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.3125f ? 
                        0.033377584f : 
                        0.110523105f) : 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <160.5f ? 
                        0.09162076f : 
                        0.39763677f)) : 
                0.0f) : 
             (Double.isNaN(data[13]) || data[13 /* 12_letter_word */] <0.29101562f ? 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <61.5f ? 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <29.5f ? 
                        0.004410355f : 
                        0.9974239f) : 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.5390625f ? 
                        0.0f : 
                        0.16666667f)) : 
                1.0f)) : 
         (data[1 /* type_of_time */] <4.5f ? 
            0.0f : 
             (data[0 /* vlan */] <25.5f ? 
                0.0f : 
                 (Double.isNaN(data[4]) || data[4 /* no_of_macs */] <0.5f ? 
                     (data[3 /* no_of_ips */] <2.5f ? 
                        0.828427f : 
                        0.96681017f) : 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.21875f ? 
                        1.0f : 
                        0.8f)))));
    return pred;
  } // constant pool size = 62B, number of visited nodes = 15, static init size = 0B
}

class log_drf_1_Tree_1_class_26 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* no_of_characters */] <57.5f ? 
         (data[2 /* no_of_characters */] <54.0f ? 
            0.0f : 
             (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                0.9929078f : 
                0.0f)) : 
        0.0f);
    return pred;
  } // constant pool size = 14B, number of visited nodes = 3, static init size = 0B
}

class log_drf_1_Tree_1_class_27 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <256.5f ? 
        0.0f : 
         (data[2 /* no_of_characters */] <258.5f ? 
             (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
                0.0f : 
                 (data[2 /* no_of_characters */] <257.5f ? 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.125f ? 
                        0.0f : 
                        0.2f) : 
                    0.0f)) : 
            0.0f));
    return pred;
  } // constant pool size = 22B, number of visited nodes = 5, static init size = 0B
}

class log_drf_1_Tree_1_class_28 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <5.5f ? 
         (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <472.5f ? 
            0.0f : 
             (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.31835938f ? 
                0.0f : 
                 (data[0 /* vlan */] <98.0f ? 
                    1.0f : 
                    0.0f))) : 
         (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.0625f ? 
             (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <8.5f ? 
                 (data[7 /* 6_letter_word */] <0.15625f ? 
                    0.6666667f : 
                    1.0f) : 
                0.0f) : 
            1.0f));
    return pred;
  } // constant pool size = 30B, number of visited nodes = 7, static init size = 0B
}

class log_drf_1_Tree_1_class_29 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <957.5f ? 
         (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <184.5f ? 
            0.0f : 
             (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.6894531f ? 
                0.0f : 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <85.5f ? 
                    0.0f : 
                     (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
                        0.0f : 
                        0.25f)))) : 
         (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.040039062f ? 
             (Double.isNaN(data[12]) || data[12 /* 11_letter_word */] <0.017578125f ? 
                0.0f : 
                0.33333334f) : 
             (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.05438423f ? 
                1.0f : 
                0.0f)));
    return pred;
  } // constant pool size = 34B, number of visited nodes = 8, static init size = 0B
}

class log_drf_1_Tree_1_class_30 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <2.5f ? 
         (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <1.5f ? 
            0.0f : 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <177.5f ? 
                0.0f : 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.125f ? 
                    0.0f : 
                    1.0f))) : 
         (data[1 /* type_of_time */] <2.0f ? 
            1.0f : 
            0.0f));
    return pred;
  } // constant pool size = 22B, number of visited nodes = 5, static init size = 0B
}

class log_drf_1_Tree_1_class_31 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* no_of_characters */] <113.5f ? 
         (Double.isNaN(data[13]) || data[13 /* 12_letter_word */] <0.125f ? 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <65.5f ? 
                 (data[2 /* no_of_characters */] <73.5f ? 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <34.5f ? 
                        0.0f : 
                        0.64285713f) : 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <34.5f ? 
                        0.0f : 
                        0.012552301f)) : 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.0859375f ? 
                     (Double.isNaN(data[15]) || data[15 /* 14_letter_word */] <0.16666667f ? 
                        0.09372275f : 
                        1.0f) : 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.4453125f ? 
                        0.93306285f : 
                        0.3275862f))) : 
             (data[3 /* no_of_ips */] <0.5f ? 
                 (data[0 /* vlan */] <57.5f ? 
                    0.0f : 
                    1.0f) : 
                 (data[0 /* vlan */] <61.5f ? 
                     (data[10 /* 9_letter_word */] <0.171875f ? 
                        0.5f : 
                        0.0f) : 
                    1.0f))) : 
         (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.23535156f ? 
             (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.5644531f ? 
                 (data[2 /* no_of_characters */] <141.5f ? 
                     (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.055555556f ? 
                        0.0021614558f : 
                        0.75f) : 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.03125f ? 
                        1.9807646E-4f : 
                        0.0f)) : 
                 (data[2 /* no_of_characters */] <132.5f ? 
                     (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.078125f ? 
                        0.0f : 
                        1.0f) : 
                    1.1284134E-4f)) : 
             (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.29101562f ? 
                 (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.4140625f ? 
                    0.0f : 
                     (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.125f ? 
                        0.025641026f : 
                        1.0f)) : 
                 (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.30859375f ? 
                    0.0f : 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <150.5f ? 
                        0.76428574f : 
                        0.0f)))));
    return pred;
  } // constant pool size = 102B, number of visited nodes = 25, static init size = 0B
}

class log_drf_1_Tree_1_class_32 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* no_of_characters */] <123.5f ? 
         (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <121.5f ? 
             (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.1015625f ? 
                 (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.3125f ? 
                        0.0f : 
                        8.016032E-4f) : 
                     (data[1 /* type_of_time */] <4.5f ? 
                        0.0f : 
                        0.0067520044f)) : 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <25.5f ? 
                    0.0f : 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <57.5f ? 
                        0.58641976f : 
                        0.0f))) : 
             (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.44921875f ? 
                0.0f : 
                 (data[0 /* vlan */] <25.5f ? 
                    0.0f : 
                     (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <1.0f ? 
                        1.0f : 
                        0.0f)))) : 
        0.0f);
    return pred;
  } // constant pool size = 46B, number of visited nodes = 11, static init size = 0B
}

class log_drf_1_Tree_1_class_33 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* no_of_characters */] <69.5f ? 
         (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <67.0f ? 
             (data[2 /* no_of_characters */] <53.5f ? 
                 (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.2890625f ? 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.125f ? 
                        0.0074626864f : 
                        0.0f) : 
                    1.0f) : 
                 (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.2890625f ? 
                    0.0f : 
                    0.11111111f)) : 
             (data[7 /* 6_letter_word */] <0.25f ? 
                0.0f : 
                1.0f)) : 
         (data[1 /* type_of_time */] <4.5f ? 
            0.0f : 
             (data[0 /* vlan */] <9.5f ? 
                 (data[10 /* 9_letter_word */] <0.0859375f ? 
                    1.0f : 
                    0.0f) : 
                 (data[0 /* vlan */] <17.5f ? 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.40625f ? 
                        2.2476961E-4f : 
                        0.7123288f) : 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.7265625f ? 
                        4.2423213E-4f : 
                        0.003193497f)))));
    return pred;
  } // constant pool size = 54B, number of visited nodes = 13, static init size = 0B
}

class log_drf_1_Tree_1_class_34 {
  static final double score0(double[] data) {
    double pred =     1.0E-5f;
    return pred;
  } // constant pool size = 2B, number of visited nodes = 0, static init size = 0B
}

class log_drf_1_Tree_1_class_35 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* no_of_characters */] <88.5f ? 
         (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <87.5f ? 
             (data[0 /* vlan */] <19.5f ? 
                 (data[7 /* 6_letter_word */] <0.16796875f ? 
                     (data[8 /* 7_letter_word */] <0.1015625f ? 
                        0.07692308f : 
                        0.0f) : 
                    0.0f) : 
                0.0f) : 
             (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.16796875f ? 
                0.0f : 
                 (data[10 /* 9_letter_word */] <0.4140625f ? 
                    0.5f : 
                    0.0f))) : 
         (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
            0.0f : 
             (data[0 /* vlan */] <13.5f ? 
                 (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.21484375f ? 
                    0.0f : 
                    0.125f) : 
                 (data[0 /* vlan */] <21.5f ? 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.703125f ? 
                        7.518797E-4f : 
                        0.09090909f) : 
                    0.0f))));
    return pred;
  } // constant pool size = 50B, number of visited nodes = 12, static init size = 0B
}

class log_drf_1_Tree_1_class_36 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* no_of_characters */] <131.5f ? 
         (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <126.5f ? 
            0.0f : 
             (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.15429688f ? 
                0.0f : 
                 (data[0 /* vlan */] <13.5f ? 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <130.5f ? 
                        1.0f : 
                        0.5714286f) : 
                    0.0f))) : 
        0.0f);
    return pred;
  } // constant pool size = 22B, number of visited nodes = 5, static init size = 0B
}

class log_drf_1_Tree_1_class_37 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* no_of_characters */] <164.5f ? 
         (data[2 /* no_of_characters */] <112.5f ? 
             (data[1 /* type_of_time */] <4.5f ? 
                 (data[1 /* type_of_time */] <3.5f ? 
                     (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <1.5f ? 
                        0.94736844f : 
                        0.0f) : 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.5f ? 
                        0.98903507f : 
                        0.5f)) : 
                 (Double.isNaN(data[12]) || data[12 /* 11_letter_word */] <0.74609375f ? 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.0859375f ? 
                        0.0070045595f : 
                        0.0f) : 
                    0.8333333f)) : 
             (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <1.5f ? 
                 (data[1 /* type_of_time */] <4.5f ? 
                    1.0f : 
                     (data[0 /* vlan */] <17.5f ? 
                        3.595829E-4f : 
                        0.0f)) : 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.70703125f ? 
                     (data[6 /* 5_letter_word */] <0.4140625f ? 
                        0.0f : 
                        7.583801E-4f) : 
                    0.03846154f))) : 
         (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
             (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.05078125f ? 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <225.5f ? 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.078125f ? 
                        0.9962489f : 
                        1.0f) : 
                     (data[1 /* type_of_time */] <3.5f ? 
                        0.22916667f : 
                        0.9943182f)) : 
                 (data[2 /* no_of_characters */] <225.5f ? 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.0859375f ? 
                        0.09512761f : 
                        0.96153843f) : 
                     (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.05357143f ? 
                        0.99545455f : 
                        0.4861111f))) : 
            0.0f));
    return pred;
  } // constant pool size = 86B, number of visited nodes = 21, static init size = 0B
}

class log_drf_1_Tree_1_class_38 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* no_of_characters */] <93.5f ? 
         (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <88.5f ? 
            0.0f : 
             (data[2 /* no_of_characters */] <89.5f ? 
                 (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.74609375f ? 
                    0.0f : 
                    0.05f) : 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <61.5f ? 
                    0.0f : 
                     (data[2 /* no_of_characters */] <90.5f ? 
                        0.33333334f : 
                        0.0f)))) : 
        0.0f);
    return pred;
  } // constant pool size = 26B, number of visited nodes = 6, static init size = 0B
}


class log_drf_1_Forest_2 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += log_drf_1_Tree_2_class_0.score0(fdata);
    preds[2] += log_drf_1_Tree_2_class_1.score0(fdata);
    preds[3] += log_drf_1_Tree_2_class_2.score0(fdata);
    preds[4] += log_drf_1_Tree_2_class_3.score0(fdata);
    preds[5] += log_drf_1_Tree_2_class_4.score0(fdata);
    preds[6] += log_drf_1_Tree_2_class_5.score0(fdata);
    preds[7] += log_drf_1_Tree_2_class_6.score0(fdata);
    preds[8] += log_drf_1_Tree_2_class_7.score0(fdata);
    preds[9] += log_drf_1_Tree_2_class_8.score0(fdata);
    preds[10] += log_drf_1_Tree_2_class_9.score0(fdata);
    preds[11] += log_drf_1_Tree_2_class_10.score0(fdata);
    preds[12] += log_drf_1_Tree_2_class_11.score0(fdata);
    preds[13] += log_drf_1_Tree_2_class_12.score0(fdata);
    preds[14] += log_drf_1_Tree_2_class_13.score0(fdata);
    preds[15] += log_drf_1_Tree_2_class_14.score0(fdata);
    preds[16] += log_drf_1_Tree_2_class_15.score0(fdata);
    preds[17] += log_drf_1_Tree_2_class_16.score0(fdata);
    preds[18] += log_drf_1_Tree_2_class_17.score0(fdata);
    preds[19] += log_drf_1_Tree_2_class_18.score0(fdata);
    preds[20] += log_drf_1_Tree_2_class_19.score0(fdata);
    preds[21] += log_drf_1_Tree_2_class_20.score0(fdata);
    preds[22] += log_drf_1_Tree_2_class_21.score0(fdata);
    preds[23] += log_drf_1_Tree_2_class_22.score0(fdata);
    preds[24] += log_drf_1_Tree_2_class_23.score0(fdata);
    preds[25] += log_drf_1_Tree_2_class_24.score0(fdata);
    preds[26] += log_drf_1_Tree_2_class_25.score0(fdata);
    preds[27] += log_drf_1_Tree_2_class_26.score0(fdata);
    preds[28] += log_drf_1_Tree_2_class_27.score0(fdata);
    preds[29] += log_drf_1_Tree_2_class_28.score0(fdata);
    preds[30] += log_drf_1_Tree_2_class_29.score0(fdata);
    preds[31] += log_drf_1_Tree_2_class_30.score0(fdata);
    preds[32] += log_drf_1_Tree_2_class_31.score0(fdata);
    preds[33] += log_drf_1_Tree_2_class_32.score0(fdata);
    preds[34] += log_drf_1_Tree_2_class_33.score0(fdata);
    preds[35] += log_drf_1_Tree_2_class_34.score0(fdata);
    preds[36] += log_drf_1_Tree_2_class_35.score0(fdata);
    preds[37] += log_drf_1_Tree_2_class_36.score0(fdata);
    preds[38] += log_drf_1_Tree_2_class_37.score0(fdata);
    preds[39] += log_drf_1_Tree_2_class_38.score0(fdata);
  }
}
class log_drf_1_Tree_2_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[12]) || data[12 /* 11_letter_word */] <0.017578125f ? 
         (Double.isNaN(data[4]) || data[4 /* no_of_macs */] <2.5f ? 
             (Double.isNaN(data[14]) || data[14 /* 13_letter_word */] <0.009765625f ? 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <519.5f ? 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.1875f ? 
                        6.286738E-5f : 
                        0.0f) : 
                     (Double.isNaN(data[4]) || data[4 /* no_of_macs */] <0.5f ? 
                        0.0f : 
                        1.0f)) : 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <929.0f ? 
                    0.0f : 
                    1.0f)) : 
             (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.029296875f ? 
                0.0f : 
                0.5f)) : 
         (data[12 /* 11_letter_word */] <0.041563034f ? 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <963.5f ? 
                1.0f : 
                0.5f) : 
             (Double.isNaN(data[4]) || data[4 /* no_of_macs */] <0.5f ? 
                0.0f : 
                1.0f)));
    return pred;
  } // constant pool size = 46B, number of visited nodes = 11, static init size = 0B
}

class log_drf_1_Tree_2_class_1 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0]) || data[0 /* vlan */] <142.0f ? 
        0.0f : 
         (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.38671875f ? 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <265.5f ? 
                 (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.18359375f ? 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.15490723f ? 
                        4.1284258E-4f : 
                        0.04225352f) : 
                    0.0f) : 
                 (data[2 /* no_of_characters */] <271.5f ? 
                     (data[3 /* no_of_ips */] <0.5f ? 
                        0.0f : 
                        1.0f) : 
                     (data[2 /* no_of_characters */] <283.5f ? 
                        0.04255319f : 
                        0.0f))) : 
             (data[5 /* 4_letter_word */] <0.40827942f ? 
                 (data[3 /* no_of_ips */] <0.5f ? 
                    0.0f : 
                     (data[8 /* 7_letter_word */] <0.296875f ? 
                        0.0f : 
                        0.98268396f)) : 
                 (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.1328125f ? 
                    0.0f : 
                     (data[5 /* 4_letter_word */] <0.519227f ? 
                        0.27142859f : 
                        0.0f)))));
    return pred;
  } // constant pool size = 54B, number of visited nodes = 13, static init size = 0B
}

class log_drf_1_Tree_2_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0]) || data[0 /* vlan */] <181.5f ? 
         (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.56933594f ? 
             (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
                0.0f : 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.3515625f ? 
                     (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                        0.0054453355f : 
                        8.946144E-5f) : 
                    0.0f)) : 
             (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.05078125f ? 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <137.5f ? 
                    0.0f : 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.078125f ? 
                        0.26222223f : 
                        0.5678392f)) : 
                0.0f)) : 
         (data[7 /* 6_letter_word */] <0.36132812f ? 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <667.0f ? 
                0.0f : 
                1.0f) : 
             (data[1 /* type_of_time */] <4.5f ? 
                0.0f : 
                 (Double.isNaN(data[14]) || data[14 /* 13_letter_word */] <0.1015625f ? 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <591.0f ? 
                        1.0f : 
                        0.0f) : 
                    1.0f))));
    return pred;
  } // constant pool size = 54B, number of visited nodes = 13, static init size = 0B
}

class log_drf_1_Tree_2_class_3 {
  static final double score0(double[] data) {
    double pred =      (data[0 /* vlan */] <29.5f ? 
         (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.4765625f ? 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <28.5f ? 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <24.0f ? 
                    0.0f : 
                     (data[5 /* 4_letter_word */] <0.052124023f ? 
                        0.0057803467f : 
                        0.0f)) : 
                 (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.125f ? 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.375f ? 
                        0.91828793f : 
                        0.0f) : 
                    0.0f)) : 
             (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.18359375f ? 
                 (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.0859375f ? 
                     (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.2890625f ? 
                        0.41841164f : 
                        0.0f) : 
                    0.0f) : 
                0.0f)) : 
         (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.013671875f ? 
             (data[2 /* no_of_characters */] <105.5f ? 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <103.5f ? 
                    0.0f : 
                     (data[5 /* 4_letter_word */] <0.125f ? 
                        0.11111111f : 
                        0.0f)) : 
                0.0f) : 
            0.0f));
    return pred;
  } // constant pool size = 58B, number of visited nodes = 14, static init size = 0B
}

class log_drf_1_Tree_2_class_4 {
  static final double score0(double[] data) {
    double pred =      (data[0 /* vlan */] <27.5f ? 
         (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.123046875f ? 
             (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.46289062f ? 
                4.2981173E-5f : 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <24.5f ? 
                    0.0f : 
                     (data[7 /* 6_letter_word */] <0.58457947f ? 
                        0.09090909f : 
                        0.0f))) : 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <26.0f ? 
                0.0f : 
                 (data[1 /* type_of_time */] <3.5f ? 
                    0.0f : 
                     (data[2 /* no_of_characters */] <120.5f ? 
                        0.8965517f : 
                        0.046728972f)))) : 
        0.0f);
    return pred;
  } // constant pool size = 34B, number of visited nodes = 8, static init size = 0B
}

class log_drf_1_Tree_2_class_5 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.095703125f ? 
         (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.6513672f ? 
             (data[0 /* vlan */] <85.5f ? 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <210.5f ? 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <63.5f ? 
                        0.0f : 
                        0.04225352f) : 
                     (data[8 /* 7_letter_word */] <0.1328125f ? 
                        0.025210084f : 
                        0.0f)) : 
                0.0f) : 
             (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.29101562f ? 
                9.15248E-5f : 
                 (data[2 /* no_of_characters */] <150.5f ? 
                     (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <1.0f ? 
                        0.023305085f : 
                        0.0f) : 
                    0.0f))) : 
         (data[7 /* 6_letter_word */] <0.2334671f ? 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <33.5f ? 
                0.0f : 
                 (data[0 /* vlan */] <37.0f ? 
                    1.0f : 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.21875f ? 
                        0.009025271f : 
                        1.0f))) : 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <81.5f ? 
                0.0f : 
                 (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.22265625f ? 
                    0.0f : 
                     (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.0625f ? 
                        0.022292994f : 
                        0.0f)))));
    return pred;
  } // constant pool size = 66B, number of visited nodes = 16, static init size = 0B
}

class log_drf_1_Tree_2_class_6 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0]) || data[0 /* vlan */] <133.5f ? 
         (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.24804688f ? 
             (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.83203125f ? 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.87109375f ? 
                     (data[2 /* no_of_characters */] <40.5f ? 
                        1.0f : 
                        0.0f) : 
                     (data[2 /* no_of_characters */] <60.5f ? 
                        1.0f : 
                        0.0f)) : 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <87.5f ? 
                    0.0f : 
                    1.0f)) : 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <125.5f ? 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <84.5f ? 
                     (data[0 /* vlan */] <17.5f ? 
                        0.001831197f : 
                        0.0f) : 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.265625f ? 
                        0.0f : 
                        0.8181818f)) : 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.3671875f ? 
                    1.0f : 
                    0.0f))) : 
        0.0f);
    return pred;
  } // constant pool size = 50B, number of visited nodes = 12, static init size = 0B
}

class log_drf_1_Tree_2_class_7 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0]) || data[0 /* vlan */] <185.0f ? 
        0.0f : 
         (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.74902344f ? 
            0.0f : 
            0.99358976f));
    return pred;
  } // constant pool size = 10B, number of visited nodes = 2, static init size = 0B
}

class log_drf_1_Tree_2_class_8 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0]) || data[0 /* vlan */] <180.5f ? 
        0.0f : 
         (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.52246094f ? 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <734.5f ? 
                 (data[7 /* 6_letter_word */] <0.125f ? 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.15918732f ? 
                        0.0072202166f : 
                        0.0f) : 
                    0.0f) : 
                 (data[3 /* no_of_ips */] <3.5f ? 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.0625f ? 
                        0.9591837f : 
                        0.2f) : 
                     (data[2 /* no_of_characters */] <1014.5f ? 
                        0.037037037f : 
                        0.0f))) : 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <572.0f ? 
                0.0f : 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <997.5f ? 
                    1.0f : 
                     (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <4.5f ? 
                        0.2f : 
                        1.0f)))));
    return pred;
  } // constant pool size = 46B, number of visited nodes = 11, static init size = 0B
}

class log_drf_1_Tree_2_class_9 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0]) || data[0 /* vlan */] <159.5f ? 
        0.0f : 
         (data[8 /* 7_letter_word */] <0.109375f ? 
             (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <2.5f ? 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.14453125f ? 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.8671875f ? 
                        0.0f : 
                        0.0033112583f) : 
                     (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <1.5f ? 
                        0.0020682523f : 
                        0.94666666f)) : 
                 (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.265625f ? 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <606.5f ? 
                        1.0f : 
                        0.0f) : 
                     (data[2 /* no_of_characters */] <193.5f ? 
                        1.0f : 
                        0.0f))) : 
             (data[1 /* type_of_time */] <3.5f ? 
                 (data[1 /* type_of_time */] <2.0f ? 
                    0.0f : 
                    1.0f) : 
                0.0f)));
    return pred;
  } // constant pool size = 46B, number of visited nodes = 11, static init size = 0B
}

class log_drf_1_Tree_2_class_10 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0]) || data[0 /* vlan */] <166.5f ? 
         (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.4716797f ? 
            0.0f : 
             (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
                0.0f : 
                 (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.4140625f ? 
                        0.0f : 
                        0.009090909f) : 
                    0.0f))) : 
         (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.026367188f ? 
             (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.6230469f ? 
                0.0f : 
                 (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
                    0.0f : 
                     (data[8 /* 7_letter_word */] <0.83213806f ? 
                        1.0f : 
                        0.6666667f))) : 
            0.0f));
    return pred;
  } // constant pool size = 38B, number of visited nodes = 9, static init size = 0B
}

class log_drf_1_Tree_2_class_11 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.27929688f ? 
        0.0f : 
        3.5023815E-5f);
    return pred;
  } // constant pool size = 6B, number of visited nodes = 1, static init size = 0B
}

class log_drf_1_Tree_2_class_12 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0]) || data[0 /* vlan */] <593.5f ? 
        0.0f : 
         (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.25f ? 
            0.15646258f : 
            0.0f));
    return pred;
  } // constant pool size = 10B, number of visited nodes = 2, static init size = 0B
}

class log_drf_1_Tree_2_class_13 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0]) || data[0 /* vlan */] <593.5f ? 
         (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.2607422f ? 
             (data[0 /* vlan */] <3.5f ? 
                 (data[0 /* vlan */] <2.5f ? 
                    0.0f : 
                     (data[8 /* 7_letter_word */] <0.125f ? 
                        0.0f : 
                        1.0f)) : 
                 (data[2 /* no_of_characters */] <40.5f ? 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.6171875f ? 
                        0.8867925f : 
                        0.0f) : 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.19335938f ? 
                        0.0f : 
                        0.0051493305f))) : 
            0.0f) : 
         (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.16699219f ? 
             (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.25f ? 
                 (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                    0.87916666f : 
                    1.0f) : 
                1.0f) : 
             (data[2 /* no_of_characters */] <429.5f ? 
                0.5f : 
                0.0f)));
    return pred;
  } // constant pool size = 50B, number of visited nodes = 12, static init size = 0B
}

class log_drf_1_Tree_2_class_14 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[12]) || data[12 /* 11_letter_word */] <0.18310547f ? 
         (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.19824219f ? 
            0.0f : 
             (data[1 /* type_of_time */] <2.5f ? 
                 (data[2 /* no_of_characters */] <185.5f ? 
                     (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.1015625f ? 
                        0.0f : 
                        1.0f) : 
                    0.0f) : 
                0.0f)) : 
         (data[12 /* 11_letter_word */] <0.2245884f ? 
             (data[10 /* 9_letter_word */] <0.1015625f ? 
                0.0f : 
                 (Double.isNaN(data[1]) || data[1 /* type_of_time */] <3.0f ? 
                    1.0f : 
                    0.0f)) : 
            0.0f));
    return pred;
  } // constant pool size = 34B, number of visited nodes = 8, static init size = 0B
}

class log_drf_1_Tree_2_class_15 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.5942383f ? 
         (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.93652344f ? 
             (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
                0.0f : 
                 (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.30859375f ? 
                     (Double.isNaN(data[15]) || data[15 /* 14_letter_word */] <0.22265625f ? 
                        0.0018106274f : 
                        0.03409091f) : 
                     (data[3 /* no_of_ips */] <0.5f ? 
                        0.22135417f : 
                        0.0f))) : 
            0.060292494f) : 
         (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.26660156f ? 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <210.5f ? 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <113.5f ? 
                    0.0f : 
                     (Double.isNaN(data[13]) || data[13 /* 12_letter_word */] <0.1015625f ? 
                        0.09039548f : 
                        0.0f)) : 
                 (data[1 /* type_of_time */] <4.5f ? 
                    0.0f : 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.1015625f ? 
                        0.088f : 
                        1.0f))) : 
             (data[1 /* type_of_time */] <3.5f ? 
                0.0f : 
                0.7536232f)));
    return pred;
  } // constant pool size = 54B, number of visited nodes = 13, static init size = 0B
}

class log_drf_1_Tree_2_class_16 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0]) || data[0 /* vlan */] <83.5f ? 
         (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.32226562f ? 
             (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.15429688f ? 
                0.0f : 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.30859375f ? 
                    0.0f : 
                     (data[2 /* no_of_characters */] <100.5f ? 
                        0.1f : 
                        0.0f))) : 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <80.5f ? 
                 (data[2 /* no_of_characters */] <80.5f ? 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <79.5f ? 
                        0.0f : 
                        0.75f) : 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <169.5f ? 
                        3.8763983E-4f : 
                        0.0f)) : 
                0.025641026f)) : 
        0.0f);
    return pred;
  } // constant pool size = 38B, number of visited nodes = 9, static init size = 0B
}

class log_drf_1_Tree_2_class_17 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0]) || data[0 /* vlan */] <180.5f ? 
         (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.20703125f ? 
            0.0f : 
             (Double.isNaN(data[14]) || data[14 /* 13_letter_word */] <0.052734375f ? 
                0.0f : 
                 (data[0 /* vlan */] <19.0f ? 
                    1.0f : 
                    0.0f))) : 
         (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.36132812f ? 
             (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.02734375f ? 
                 (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.51953125f ? 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <659.5f ? 
                        0.0f : 
                        0.86031747f) : 
                     (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <3.5f ? 
                        0.0f : 
                        0.44444445f)) : 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.0625f ? 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.3125f ? 
                        0.0f : 
                        0.9166667f) : 
                    0.0f)) : 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <998.5f ? 
                0.0f : 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.5434494f ? 
                    1.0f : 
                    0.0f))));
    return pred;
  } // constant pool size = 54B, number of visited nodes = 13, static init size = 0B
}

class log_drf_1_Tree_2_class_18 {
  static final double score0(double[] data) {
    double pred =      (data[0 /* vlan */] <14.5f ? 
        5.034233E-5f : 
        0.0f);
    return pred;
  } // constant pool size = 6B, number of visited nodes = 1, static init size = 0B
}

class log_drf_1_Tree_2_class_19 {
  static final double score0(double[] data) {
    double pred =      (data[0 /* vlan */] <14.5f ? 
         (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.23144531f ? 
             (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.171875f ? 
                0.0f : 
                 (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.05859375f ? 
                    0.09090909f : 
                    0.0f)) : 
             (data[1 /* type_of_time */] <4.5f ? 
                0.0f : 
                 (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.22265625f ? 
                    0.0f : 
                    1.0f))) : 
        0.0f);
    return pred;
  } // constant pool size = 26B, number of visited nodes = 6, static init size = 0B
}

class log_drf_1_Tree_2_class_20 {
  static final double score0(double[] data) {
    double pred =      (data[0 /* vlan */] <23.5f ? 
         (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.055664062f ? 
             (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.58203125f ? 
                 (Double.isNaN(data[14]) || data[14 /* 13_letter_word */] <0.07421875f ? 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <220.5f ? 
                        0.9772016f : 
                        0.017163506f) : 
                     (data[2 /* no_of_characters */] <499.5f ? 
                        0.5f : 
                        0.0f)) : 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <18.0f ? 
                    0.0f : 
                    1.0f)) : 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <17.0f ? 
                0.0f : 
                 (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.0390625f ? 
                     (data[5 /* 4_letter_word */] <0.17370605f ? 
                        0.9777778f : 
                        0.99954605f) : 
                    1.0f))) : 
        0.0f);
    return pred;
  } // constant pool size = 42B, number of visited nodes = 10, static init size = 0B
}

class log_drf_1_Tree_2_class_21 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[12]) || data[12 /* 11_letter_word */] <0.22460938f ? 
         (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.24804688f ? 
             (data[0 /* vlan */] <13.5f ? 
                 (data[1 /* type_of_time */] <3.5f ? 
                    0.0f : 
                     (data[2 /* no_of_characters */] <230.5f ? 
                        0.0f : 
                        0.32786885f)) : 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.59375f ? 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.9140625f ? 
                        2.8248056E-4f : 
                        0.0021261924f) : 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <29.5f ? 
                        0.007283321f : 
                        0.0f))) : 
             (data[8 /* 7_letter_word */] <0.13671875f ? 
                 (data[0 /* vlan */] <17.5f ? 
                     (data[2 /* no_of_characters */] <133.5f ? 
                        0.028184893f : 
                        0.0f) : 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.4453125f ? 
                        1.7176228E-4f : 
                        0.0022696324f)) : 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <260.5f ? 
                     (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                        0.0017112707f : 
                        2.2007042E-4f) : 
                     (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.1328125f ? 
                        0.016172506f : 
                        0.072972976f)))) : 
         (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.125f ? 
            0.0f : 
            0.98630136f));
    return pred;
  } // constant pool size = 66B, number of visited nodes = 16, static init size = 0B
}

class log_drf_1_Tree_2_class_22 {
  static final double score0(double[] data) {
    double pred =      (data[0 /* vlan */] <5.5f ? 
         (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.083984375f ? 
            0.0f : 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <4.5f ? 
                0.0f : 
                0.083333336f)) : 
        2.003165E-5f);
    return pred;
  } // constant pool size = 14B, number of visited nodes = 3, static init size = 0B
}

class log_drf_1_Tree_2_class_23 {
  static final double score0(double[] data) {
    double pred =      (data[0 /* vlan */] <14.5f ? 
         (data[5 /* 4_letter_word */] <0.055664062f ? 
             (data[9 /* 8_letter_word */] <0.12695312f ? 
                 (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.0859375f ? 
                     (data[0 /* vlan */] <11.5f ? 
                        0.57894737f : 
                        0.0f) : 
                    0.93333334f) : 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <385.0f ? 
                     (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.1703125f ? 
                        0.99550706f : 
                        0.0f) : 
                    0.0f)) : 
             (data[0 /* vlan */] <11.5f ? 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <10.0f ? 
                    0.0f : 
                     (data[12 /* 11_letter_word */] <0.046875f ? 
                        0.33333334f : 
                        1.0f)) : 
                 (data[2 /* no_of_characters */] <260.5f ? 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <258.5f ? 
                        2.6766595E-4f : 
                        0.4090909f) : 
                    0.0f))) : 
        0.0f);
    return pred;
  } // constant pool size = 50B, number of visited nodes = 12, static init size = 0B
}

class log_drf_1_Tree_2_class_24 {
  static final double score0(double[] data) {
    double pred =      (data[0 /* vlan */] <11.5f ? 
         (data[5 /* 4_letter_word */] <0.072265625f ? 
             (data[2 /* no_of_characters */] <155.5f ? 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <8.5f ? 
                    0.0f : 
                    0.33333334f) : 
                0.0f) : 
            0.0f) : 
        0.0f);
    return pred;
  } // constant pool size = 18B, number of visited nodes = 4, static init size = 0B
}

class log_drf_1_Tree_2_class_25 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0]) || data[0 /* vlan */] <41.0f ? 
         (Double.isNaN(data[4]) || data[4 /* no_of_macs */] <0.5f ? 
             (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.8984375f ? 
                 (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.44921875f ? 
                     (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                        0.09538388f : 
                        0.47851926f) : 
                     (data[6 /* 5_letter_word */] <0.125f ? 
                        0.0f : 
                        0.9365362f)) : 
                 (data[0 /* vlan */] <26.0f ? 
                    0.0f : 
                    0.9000452f)) : 
             (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.046875f ? 
                 (data[3 /* no_of_ips */] <1.5f ? 
                    0.0f : 
                    1.0f) : 
                0.0f)) : 
         (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.05078125f ? 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <170.0f ? 
                0.0f : 
                 (data[0 /* vlan */] <176.5f ? 
                    1.0f : 
                    0.0f)) : 
             (data[11 /* 10_letter_word */] <0.067466736f ? 
                0.33333334f : 
                0.0f)));
    return pred;
  } // constant pool size = 54B, number of visited nodes = 13, static init size = 0B
}

class log_drf_1_Tree_2_class_26 {
  static final double score0(double[] data) {
    double pred =      (data[0 /* vlan */] <29.5f ? 
         (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.6513672f ? 
            0.0f : 
             (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.083984375f ? 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.2890625f ? 
                    0.0f : 
                     (data[1 /* type_of_time */] <3.5f ? 
                        0.0f : 
                        0.92967033f)) : 
                0.0f)) : 
        0.0f);
    return pred;
  } // constant pool size = 22B, number of visited nodes = 5, static init size = 0B
}

class log_drf_1_Tree_2_class_27 {
  static final double score0(double[] data) {
    double pred =      (data[0 /* vlan */] <14.5f ? 
         (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.22460938f ? 
            0.0f : 
             (data[9 /* 8_letter_word */] <0.04296875f ? 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <210.5f ? 
                    0.0f : 
                     (data[3 /* no_of_ips */] <3.0f ? 
                        1.0f : 
                        0.0f)) : 
                0.0f)) : 
        0.0f);
    return pred;
  } // constant pool size = 22B, number of visited nodes = 5, static init size = 0B
}

class log_drf_1_Tree_2_class_28 {
  static final double score0(double[] data) {
    double pred =      (data[0 /* vlan */] <14.5f ? 
         (data[5 /* 4_letter_word */] <0.18359375f ? 
             (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.46289062f ? 
                 (Double.isNaN(data[14]) || data[14 /* 13_letter_word */] <0.0625f ? 
                    0.0f : 
                    1.0f) : 
                 (data[2 /* no_of_characters */] <375.0f ? 
                    0.0f : 
                    1.0f)) : 
             (data[1 /* type_of_time */] <4.5f ? 
                0.0f : 
                 (data[2 /* no_of_characters */] <415.0f ? 
                    0.0f : 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <681.5f ? 
                        1.0f : 
                        0.0f)))) : 
        0.0f);
    return pred;
  } // constant pool size = 34B, number of visited nodes = 8, static init size = 0B
}

class log_drf_1_Tree_2_class_29 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[12]) || data[12 /* 11_letter_word */] <0.0087890625f ? 
         (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.77441406f ? 
            0.0f : 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <111.5f ? 
                0.0f : 
                 (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.1015625f ? 
                    0.0f : 
                    1.0f))) : 
         (data[12 /* 11_letter_word */] <0.06105995f ? 
             (data[10 /* 9_letter_word */] <0.037109375f ? 
                1.0f : 
                0.0f) : 
            0.0f));
    return pred;
  } // constant pool size = 26B, number of visited nodes = 6, static init size = 0B
}

class log_drf_1_Tree_2_class_30 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0]) || data[0 /* vlan */] <177.0f ? 
        0.0f : 
         (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.19628906f ? 
             (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <2.5f ? 
                0.0f : 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.07421875f ? 
                     (data[2 /* no_of_characters */] <578.0f ? 
                        1.0f : 
                        0.0f) : 
                    0.0f)) : 
             (data[1 /* type_of_time */] <2.5f ? 
                1.0f : 
                0.0f)));
    return pred;
  } // constant pool size = 26B, number of visited nodes = 6, static init size = 0B
}

class log_drf_1_Tree_2_class_31 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[15]) || data[15 /* 14_letter_word */] <0.22485352f ? 
         (Double.isNaN(data[13]) || data[13 /* 12_letter_word */] <0.23535156f ? 
             (data[1 /* type_of_time */] <4.5f ? 
                0.0f : 
                 (data[2 /* no_of_characters */] <130.5f ? 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.078125f ? 
                        0.008665624f : 
                        0.059691913f) : 
                     (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.234375f ? 
                        0.0016726675f : 
                        0.011804384f))) : 
             (data[8 /* 7_letter_word */] <0.125f ? 
                 (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.125f ? 
                     (data[13 /* 12_letter_word */] <0.41992188f ? 
                        0.0f : 
                        0.7818182f) : 
                    0.9714286f) : 
                0.0f)) : 
         (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.16699219f ? 
             (data[5 /* 4_letter_word */] <0.125f ? 
                0.0f : 
                0.8965517f) : 
            1.0f));
    return pred;
  } // constant pool size = 46B, number of visited nodes = 11, static init size = 0B
}

class log_drf_1_Tree_2_class_32 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.5942383f ? 
         (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.24804688f ? 
             (data[0 /* vlan */] <29.5f ? 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <28.0f ? 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <26.0f ? 
                        0.0f : 
                        0.010526316f) : 
                     (data[5 /* 4_letter_word */] <0.063949585f ? 
                        1.0f : 
                        0.0f)) : 
                0.0f) : 
             (data[8 /* 7_letter_word */] <0.013671875f ? 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.23908806f ? 
                    0.0f : 
                     (data[6 /* 5_letter_word */] <0.0546875f ? 
                        0.028146232f : 
                        0.0f)) : 
                0.0f)) : 
         (data[7 /* 6_letter_word */] <0.61246586f ? 
             (data[2 /* no_of_characters */] <123.0f ? 
                1.0f : 
                0.0f) : 
            0.0f));
    return pred;
  } // constant pool size = 46B, number of visited nodes = 11, static init size = 0B
}

class log_drf_1_Tree_2_class_33 {
  static final double score0(double[] data) {
    double pred =      (data[0 /* vlan */] <7.5f ? 
         (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.083984375f ? 
            1.0f : 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <3.5f ? 
                0.016666668f : 
                 (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.125f ? 
                    0.0f : 
                    1.0f))) : 
         (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.080078125f ? 
             (data[8 /* 7_letter_word */] <0.013671875f ? 
                 (data[2 /* no_of_characters */] <90.5f ? 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <26.5f ? 
                        0.011074651f : 
                        0.0011520737f) : 
                     (data[2 /* no_of_characters */] <105.5f ? 
                        0.0011750881f : 
                        7.865552E-5f)) : 
                 (data[2 /* no_of_characters */] <100.5f ? 
                     (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.171875f ? 
                        0.00295858f : 
                        0.0f) : 
                    4.1230312E-5f)) : 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <280.5f ? 
                 (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.70703125f ? 
                     (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.05078125f ? 
                        3.0993336E-4f : 
                        0.0f) : 
                     (data[0 /* vlan */] <40.5f ? 
                        0.0f : 
                        0.85714287f)) : 
                 (data[9 /* 8_letter_word */] <0.094451904f ? 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.171875f ? 
                        1.0f : 
                        0.0f) : 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.421875f ? 
                        0.0025125628f : 
                        0.47457626f)))));
    return pred;
  } // constant pool size = 74B, number of visited nodes = 18, static init size = 0B
}

class log_drf_1_Tree_2_class_34 {
  static final double score0(double[] data) {
    double pred =      (data[0 /* vlan */] <10.0f ? 
         (data[5 /* 4_letter_word */] <0.29101562f ? 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <5.0f ? 
                0.0f : 
                 (data[9 /* 8_letter_word */] <0.2890625f ? 
                    0.5f : 
                    0.0f)) : 
            0.0f) : 
        5.0081885E-6f);
    return pred;
  } // constant pool size = 18B, number of visited nodes = 4, static init size = 0B
}

class log_drf_1_Tree_2_class_35 {
  static final double score0(double[] data) {
    double pred =      (data[0 /* vlan */] <12.5f ? 
         (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.29101562f ? 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <100.5f ? 
                0.0f : 
                 (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.390625f ? 
                    0.0f : 
                     (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.203125f ? 
                        0.0f : 
                        1.0f))) : 
             (Double.isNaN(data[1]) || data[1 /* type_of_time */] <3.5f ? 
                0.0f : 
                0.5f)) : 
         (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.87402344f ? 
             (data[0 /* vlan */] <16.5f ? 
                 (data[2 /* no_of_characters */] <90.5f ? 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.6640625f ? 
                        0.0f : 
                        0.4f) : 
                     (data[2 /* no_of_characters */] <140.5f ? 
                        0.004983389f : 
                        3.0141667E-4f)) : 
                0.0f) : 
             (data[0 /* vlan */] <18.5f ? 
                 (data[2 /* no_of_characters */] <100.5f ? 
                    1.0f : 
                    0.0f) : 
                0.0f)));
    return pred;
  } // constant pool size = 54B, number of visited nodes = 13, static init size = 0B
}

class log_drf_1_Tree_2_class_36 {
  static final double score0(double[] data) {
    double pred =      (data[0 /* vlan */] <5.5f ? 
         (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.083984375f ? 
            0.0f : 
             (data[8 /* 7_letter_word */] <0.20817184f ? 
                0.9166667f : 
                0.0f)) : 
        0.0f);
    return pred;
  } // constant pool size = 14B, number of visited nodes = 3, static init size = 0B
}

class log_drf_1_Tree_2_class_37 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0]) || data[0 /* vlan */] <156.5f ? 
         (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.5917969f ? 
             (data[1 /* type_of_time */] <4.5f ? 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <210.5f ? 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.4140625f ? 
                        0.9949568f : 
                        0.75f) : 
                     (data[5 /* 4_letter_word */] <0.17106628f ? 
                        1.0f : 
                        0.041322313f)) : 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.46875f ? 
                    0.0f : 
                     (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <2.5f ? 
                        0.0f : 
                        0.0010756544f))) : 
             (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.18359375f ? 
                 (data[3 /* no_of_ips */] <0.5f ? 
                     (data[1 /* type_of_time */] <4.5f ? 
                        1.0f : 
                        0.0f) : 
                    0.0f) : 
                 (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
                    1.0f : 
                    0.0f))) : 
         (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.31640625f ? 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <170.5f ? 
                 (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.4140625f ? 
                     (data[0 /* vlan */] <165.0f ? 
                        0.8497434f : 
                        0.9969745f) : 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.25f ? 
                        0.29220778f : 
                        0.0f)) : 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <184.5f ? 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.21875f ? 
                        0.66433567f : 
                        0.0056657223f) : 
                    0.07160494f)) : 
             (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
                 (Double.isNaN(data[13]) || data[13 /* 12_letter_word */] <0.1015625f ? 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <200.5f ? 
                        0.5664122f : 
                        0.9965035f) : 
                    1.0f) : 
                 (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.03125f ? 
                     (data[0 /* vlan */] <177.5f ? 
                        0.5f : 
                        0.0f) : 
                    0.0f))));
    return pred;
  } // constant pool size = 98B, number of visited nodes = 24, static init size = 0B
}

class log_drf_1_Tree_2_class_38 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.47216797f ? 
         (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.93652344f ? 
            0.0f : 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <63.5f ? 
                0.0f : 
                 (data[2 /* no_of_characters */] <95.5f ? 
                    0.033898305f : 
                    0.0f))) : 
         (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.41601562f ? 
            0.0f : 
            0.0015847861f));
    return pred;
  } // constant pool size = 22B, number of visited nodes = 5, static init size = 0B
}


class log_drf_1_Forest_3 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += log_drf_1_Tree_3_class_0.score0(fdata);
    preds[2] += log_drf_1_Tree_3_class_1.score0(fdata);
    preds[3] += log_drf_1_Tree_3_class_2.score0(fdata);
    preds[4] += log_drf_1_Tree_3_class_3.score0(fdata);
    preds[5] += log_drf_1_Tree_3_class_4.score0(fdata);
    preds[6] += log_drf_1_Tree_3_class_5.score0(fdata);
    preds[7] += log_drf_1_Tree_3_class_6.score0(fdata);
    preds[8] += log_drf_1_Tree_3_class_7.score0(fdata);
    preds[9] += log_drf_1_Tree_3_class_8.score0(fdata);
    preds[10] += log_drf_1_Tree_3_class_9.score0(fdata);
    preds[11] += log_drf_1_Tree_3_class_10.score0(fdata);
    preds[12] += log_drf_1_Tree_3_class_11.score0(fdata);
    preds[13] += log_drf_1_Tree_3_class_12.score0(fdata);
    preds[14] += log_drf_1_Tree_3_class_13.score0(fdata);
    preds[15] += log_drf_1_Tree_3_class_14.score0(fdata);
    preds[16] += log_drf_1_Tree_3_class_15.score0(fdata);
    preds[17] += log_drf_1_Tree_3_class_16.score0(fdata);
    preds[18] += log_drf_1_Tree_3_class_17.score0(fdata);
    preds[19] += log_drf_1_Tree_3_class_18.score0(fdata);
    preds[20] += log_drf_1_Tree_3_class_19.score0(fdata);
    preds[21] += log_drf_1_Tree_3_class_20.score0(fdata);
    preds[22] += log_drf_1_Tree_3_class_21.score0(fdata);
    preds[23] += log_drf_1_Tree_3_class_22.score0(fdata);
    preds[24] += log_drf_1_Tree_3_class_23.score0(fdata);
    preds[25] += log_drf_1_Tree_3_class_24.score0(fdata);
    preds[26] += log_drf_1_Tree_3_class_25.score0(fdata);
    preds[27] += log_drf_1_Tree_3_class_26.score0(fdata);
    preds[28] += log_drf_1_Tree_3_class_27.score0(fdata);
    preds[29] += log_drf_1_Tree_3_class_28.score0(fdata);
    preds[30] += log_drf_1_Tree_3_class_29.score0(fdata);
    preds[31] += log_drf_1_Tree_3_class_30.score0(fdata);
    preds[32] += log_drf_1_Tree_3_class_31.score0(fdata);
    preds[33] += log_drf_1_Tree_3_class_32.score0(fdata);
    preds[34] += log_drf_1_Tree_3_class_33.score0(fdata);
    preds[35] += log_drf_1_Tree_3_class_34.score0(fdata);
    preds[36] += log_drf_1_Tree_3_class_35.score0(fdata);
    preds[37] += log_drf_1_Tree_3_class_36.score0(fdata);
    preds[38] += log_drf_1_Tree_3_class_37.score0(fdata);
    preds[39] += log_drf_1_Tree_3_class_38.score0(fdata);
  }
}
class log_drf_1_Tree_3_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[4]) || data[4 /* no_of_macs */] <2.5f ? 
         (Double.isNaN(data[4]) || data[4 /* no_of_macs */] <0.5f ? 
            0.0f : 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <442.5f ? 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.37109375f ? 
                    0.0f : 
                     (data[8 /* 7_letter_word */] <0.25f ? 
                        0.5f : 
                        0.0f)) : 
                1.0f)) : 
         (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <506.0f ? 
            0.0f : 
            0.5f));
    return pred;
  } // constant pool size = 26B, number of visited nodes = 6, static init size = 0B
}

class log_drf_1_Tree_3_class_1 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.018066406f ? 
         (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
             (data[8 /* 7_letter_word */] <0.44921875f ? 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.38604736f ? 
                     (data[6 /* 5_letter_word */] <0.1796875f ? 
                        3.9035815E-4f : 
                        0.0f) : 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <260.5f ? 
                        0.0f : 
                        0.962963f)) : 
                0.0f) : 
             (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.1328125f ? 
                0.0f : 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <137.5f ? 
                    0.0f : 
                     (data[6 /* 5_letter_word */] <0.22088623f ? 
                        0.9927536f : 
                        0.048780486f)))) : 
        0.0f);
    return pred;
  } // constant pool size = 38B, number of visited nodes = 9, static init size = 0B
}

class log_drf_1_Tree_3_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.47216797f ? 
         (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
            0.0f : 
             (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.17382812f ? 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.13279724f ? 
                    0.0f : 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.2109375f ? 
                        0.053661905f : 
                        5.0251256E-4f)) : 
                 (Double.isNaN(data[4]) || data[4 /* no_of_macs */] <3.0f ? 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.1328125f ? 
                        9.6693094E-4f : 
                        0.011499337f) : 
                    0.5f))) : 
         (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <158.5f ? 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <175.5f ? 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.6329918f ? 
                     (data[3 /* no_of_ips */] <0.5f ? 
                        0.015950069f : 
                        0.0f) : 
                     (data[2 /* no_of_characters */] <98.5f ? 
                        0.29032257f : 
                        0.023044692f)) : 
                 (data[3 /* no_of_ips */] <0.5f ? 
                    0.0f : 
                    1.0f)) : 
             (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.44921875f ? 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <174.5f ? 
                    0.0f : 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.3671875f ? 
                        0.07692308f : 
                        0.0f)) : 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <174.5f ? 
                    0.0f : 
                    1.0f))));
    return pred;
  } // constant pool size = 70B, number of visited nodes = 17, static init size = 0B
}

class log_drf_1_Tree_3_class_3 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.013183594f ? 
         (data[1 /* type_of_time */] <4.5f ? 
             (data[2 /* no_of_characters */] <105.5f ? 
                 (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.16796875f ? 
                     (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                        0.0f : 
                        0.8333333f) : 
                    0.0f) : 
                0.0f) : 
             (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.31640625f ? 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.046875f ? 
                     (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.21875f ? 
                        0.0f : 
                        0.09821428f) : 
                    0.0f) : 
                 (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.3671875f ? 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.098958336f ? 
                        0.0f : 
                        0.07030626f) : 
                     (data[3 /* no_of_ips */] <0.5f ? 
                        0.0f : 
                        0.9440138f)))) : 
        2.1993974E-5f);
    return pred;
  } // constant pool size = 46B, number of visited nodes = 11, static init size = 0B
}

class log_drf_1_Tree_3_class_4 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.3095703f ? 
         (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
            0.0f : 
             (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.12109375f ? 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <25.5f ? 
                    0.0f : 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.53125f ? 
                        3.299967E-4f : 
                        0.0f)) : 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.4140625f ? 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.4765625f ? 
                        0.0f : 
                        5.824112E-4f) : 
                     (data[7 /* 6_letter_word */] <0.46598598f ? 
                        0.05970149f : 
                        0.0f)))) : 
         (data[10 /* 9_letter_word */] <0.36688137f ? 
             (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.16796875f ? 
                 (data[2 /* no_of_characters */] <117.5f ? 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.16666667f ? 
                        0.0f : 
                        0.969697f) : 
                    0.0f) : 
                0.0f) : 
            0.0f));
    return pred;
  } // constant pool size = 50B, number of visited nodes = 12, static init size = 0B
}

class log_drf_1_Tree_3_class_5 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.095703125f ? 
         (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
            0.0f : 
             (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.25976562f ? 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <140.5f ? 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <65.5f ? 
                        0.0f : 
                        0.0010493179f) : 
                     (data[5 /* 4_letter_word */] <0.4765625f ? 
                        0.0f : 
                        0.0026347304f)) : 
                0.0f)) : 
         (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.08984375f ? 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <33.5f ? 
                0.0f : 
                 (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.4140625f ? 
                    0.0f : 
                     (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.07421875f ? 
                        7.1073207E-4f : 
                        0.1f))) : 
             (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.30273438f ? 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.46660614f ? 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.24597168f ? 
                        0.0f : 
                        9.174312E-4f) : 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.5275621f ? 
                        0.006772009f : 
                        0.0f)) : 
                 (data[9 /* 8_letter_word */] <0.10786947f ? 
                     (data[8 /* 7_letter_word */] <0.22851562f ? 
                        0.0f : 
                        1.0f) : 
                     (data[5 /* 4_letter_word */] <0.3084208f ? 
                        1.0f : 
                        0.0f)))));
    return pred;
  } // constant pool size = 70B, number of visited nodes = 17, static init size = 0B
}

class log_drf_1_Tree_3_class_6 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.1616211f ? 
         (data[1 /* type_of_time */] <4.5f ? 
            0.0f : 
             (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.34960938f ? 
                 (data[2 /* no_of_characters */] <70.5f ? 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.7421875f ? 
                        0.022123894f : 
                        1.0f) : 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <65.5f ? 
                        2.0585813E-4f : 
                        0.011107371f)) : 
                0.0f)) : 
         (data[2 /* no_of_characters */] <83.5f ? 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <109.5f ? 
                0.0f : 
                 (data[2 /* no_of_characters */] <70.0f ? 
                    0.8f : 
                    1.0f)) : 
             (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.22460938f ? 
                0.0f : 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.14453125f ? 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.2890625f ? 
                        0.013410466f : 
                        0.0f) : 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.15625f ? 
                        0.045559846f : 
                        0.2717949f)))));
    return pred;
  } // constant pool size = 54B, number of visited nodes = 13, static init size = 0B
}

class log_drf_1_Tree_3_class_7 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.013183594f ? 
         (data[1 /* type_of_time */] <4.5f ? 
            0.0f : 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <185.5f ? 
                0.0f : 
                 (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.25f ? 
                    0.36930457f : 
                    0.0f))) : 
        0.0f);
    return pred;
  } // constant pool size = 18B, number of visited nodes = 4, static init size = 0B
}

class log_drf_1_Tree_3_class_8 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.1484375f ? 
         (data[1 /* type_of_time */] <4.5f ? 
            0.0f : 
             (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.27929688f ? 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <174.5f ? 
                    0.0f : 
                     (data[5 /* 4_letter_word */] <0.03125f ? 
                        0.0671785f : 
                        0.0025773195f)) : 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <819.0f ? 
                    0.0f : 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.515625f ? 
                        0.13868614f : 
                        0.96153843f)))) : 
         (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <965.0f ? 
            0.0f : 
             (data[2 /* no_of_characters */] <1013.5f ? 
                0.33333334f : 
                0.0f)));
    return pred;
  } // constant pool size = 38B, number of visited nodes = 9, static init size = 0B
}

class log_drf_1_Tree_3_class_9 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.095703125f ? 
         (data[1 /* type_of_time */] <3.5f ? 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <200.5f ? 
                 (data[1 /* type_of_time */] <2.5f ? 
                    0.0f : 
                    1.0f) : 
                 (data[3 /* no_of_ips */] <0.5f ? 
                    0.0f : 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.0859375f ? 
                        0.0f : 
                        0.4f))) : 
            0.0f) : 
         (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.18359375f ? 
             (data[1 /* type_of_time */] <3.5f ? 
                 (data[7 /* 6_letter_word */] <0.1015625f ? 
                     (data[5 /* 4_letter_word */] <0.3671875f ? 
                        0.0f : 
                        1.0f) : 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.1015625f ? 
                        1.0f : 
                        0.0f)) : 
                0.0f) : 
             (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <2.5f ? 
                0.0f : 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.25f ? 
                     (data[5 /* 4_letter_word */] <0.22265625f ? 
                        1.0f : 
                        0.9987923f) : 
                    0.0f))));
    return pred;
  } // constant pool size = 58B, number of visited nodes = 14, static init size = 0B
}

class log_drf_1_Tree_3_class_10 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.013183594f ? 
         (data[1 /* type_of_time */] <4.5f ? 
            0.0f : 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <155.5f ? 
                0.0f : 
                 (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.0859375f ? 
                     (data[0 /* vlan */] <169.5f ? 
                        0.077922076f : 
                        0.0f) : 
                    0.0f))) : 
        0.0f);
    return pred;
  } // constant pool size = 22B, number of visited nodes = 5, static init size = 0B
}

class log_drf_1_Tree_3_class_11 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.27929688f ? 
        0.0f : 
        3.5023815E-5f);
    return pred;
  } // constant pool size = 6B, number of visited nodes = 1, static init size = 0B
}

class log_drf_1_Tree_3_class_12 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.92822266f ? 
         (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
            0.0f : 
             (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.03125f ? 
                 (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.58203125f ? 
                    0.0f : 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.16992188f ? 
                        0.0f : 
                        1.0f)) : 
                0.0f)) : 
         (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <369.0f ? 
            0.0f : 
            1.0f));
    return pred;
  } // constant pool size = 26B, number of visited nodes = 6, static init size = 0B
}

class log_drf_1_Tree_3_class_13 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.018066406f ? 
         (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
            0.0f : 
             (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.26757812f ? 
                 (data[2 /* no_of_characters */] <40.5f ? 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.6171875f ? 
                        0.96363634f : 
                        0.0f) : 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.4140625f ? 
                        0.004849915f : 
                        0.0f)) : 
                 (data[2 /* no_of_characters */] <45.5f ? 
                    1.0f : 
                     (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.078125f ? 
                        1.538935E-4f : 
                        0.0f)))) : 
         (data[2 /* no_of_characters */] <35.5f ? 
            0.25f : 
             (data[5 /* 4_letter_word */] <0.03125f ? 
                 (data[7 /* 6_letter_word */] <0.41314125f ? 
                     (data[1 /* type_of_time */] <4.5f ? 
                        0.0f : 
                        3.888025E-4f) : 
                    0.0f) : 
                0.0f)));
    return pred;
  } // constant pool size = 50B, number of visited nodes = 12, static init size = 0B
}

class log_drf_1_Tree_3_class_14 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.19091797f ? 
         (data[1 /* type_of_time */] <2.5f ? 
             (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.1015625f ? 
                0.0f : 
                 (data[7 /* 6_letter_word */] <0.22265625f ? 
                    1.0f : 
                    0.0f)) : 
            0.0f) : 
         (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <215.5f ? 
            0.0f : 
             (data[1 /* type_of_time */] <3.0f ? 
                 (Double.isNaN(data[12]) || data[12 /* 11_letter_word */] <0.1015625f ? 
                    0.0f : 
                    1.0f) : 
                0.0f)));
    return pred;
  } // constant pool size = 30B, number of visited nodes = 7, static init size = 0B
}

class log_drf_1_Tree_3_class_15 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.5942383f ? 
         (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
            0.0f : 
             (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.03125f ? 
                 (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.44921875f ? 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.0625f ? 
                        0.019401945f : 
                        9.59785E-5f) : 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.25275734f ? 
                        0.0f : 
                        1.0f)) : 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <150.5f ? 
                     (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.21875f ? 
                        3.092624E-4f : 
                        0.0024405124f) : 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.20625f ? 
                        0.00861671f : 
                        1.7421602E-4f)))) : 
         (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <213.5f ? 
             (data[2 /* no_of_characters */] <112.5f ? 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <110.5f ? 
                    0.0f : 
                    0.47368422f) : 
                 (data[7 /* 6_letter_word */] <0.63227844f ? 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <182.5f ? 
                        0.0f : 
                        0.5f) : 
                    0.0f)) : 
             (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <1.5f ? 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.6893387f ? 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.16666667f ? 
                        0.853211f : 
                        0.0f) : 
                     (data[1 /* type_of_time */] <3.5f ? 
                        0.0f : 
                        0.010309278f)) : 
                 (data[0 /* vlan */] <77.5f ? 
                    0.0f : 
                    1.0f))));
    return pred;
  } // constant pool size = 78B, number of visited nodes = 19, static init size = 0B
}

class log_drf_1_Tree_3_class_16 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.013183594f ? 
         (data[1 /* type_of_time */] <4.5f ? 
            0.0f : 
             (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.34960938f ? 
                 (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.3168335f ? 
                     (data[3 /* no_of_ips */] <0.5f ? 
                        6.17284E-4f : 
                        0.0f) : 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.140625f ? 
                        5.1020406E-4f : 
                        0.0037128713f)) : 
                0.0f)) : 
        2.1993974E-5f);
    return pred;
  } // constant pool size = 26B, number of visited nodes = 6, static init size = 0B
}

class log_drf_1_Tree_3_class_17 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.09765625f ? 
         (data[1 /* type_of_time */] <4.5f ? 
             (data[2 /* no_of_characters */] <95.5f ? 
                 (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                     (data[0 /* vlan */] <17.5f ? 
                        0.1f : 
                        0.0f) : 
                    0.0f) : 
                0.0f) : 
             (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.01953125f ? 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <624.5f ? 
                    0.0f : 
                     (data[0 /* vlan */] <106.0f ? 
                        0.0f : 
                        0.62094766f)) : 
                 (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.31640625f ? 
                     (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.015625f ? 
                        0.0f : 
                        0.0011135858f) : 
                    0.007137193f))) : 
         (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <991.5f ? 
            0.0f : 
             (data[3 /* no_of_ips */] <2.5f ? 
                0.0f : 
                1.0f)));
    return pred;
  } // constant pool size = 50B, number of visited nodes = 12, static init size = 0B
}

class log_drf_1_Tree_3_class_18 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.07470703f ? 
        0.0f : 
        5.3321957E-5f);
    return pred;
  } // constant pool size = 6B, number of visited nodes = 1, static init size = 0B
}

class log_drf_1_Tree_3_class_19 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.24365234f ? 
         (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
            0.0f : 
             (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.03515625f ? 
                 (data[0 /* vlan */] <17.5f ? 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.1015625f ? 
                        0.0f : 
                        0.027777778f) : 
                    0.0f) : 
                0.0f)) : 
         (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.22460938f ? 
            0.0f : 
             (data[0 /* vlan */] <19.5f ? 
                 (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.26777902f ? 
                     (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <3.5f ? 
                        1.0f : 
                        0.0f) : 
                    0.0f) : 
                0.0f)));
    return pred;
  } // constant pool size = 38B, number of visited nodes = 9, static init size = 0B
}

class log_drf_1_Tree_3_class_20 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.44970703f ? 
         (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
            0.0f : 
             (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.9707031f ? 
                 (data[2 /* no_of_characters */] <130.5f ? 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.8671875f ? 
                        0.3933383f : 
                        0.9498911f) : 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.31851196f ? 
                        0.28387251f : 
                        0.031441495f)) : 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <599.5f ? 
                     (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <1.5f ? 
                        0.98560095f : 
                        0.0f) : 
                    0.0f))) : 
         (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <133.5f ? 
             (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.25f ? 
                 (data[2 /* no_of_characters */] <84.0f ? 
                    0.0f : 
                     (data[0 /* vlan */] <17.5f ? 
                        0.0f : 
                        0.98785216f)) : 
                1.0f) : 
             (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.083984375f ? 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.125f ? 
                     (data[9 /* 8_letter_word */] <0.87109375f ? 
                        0.23357664f : 
                        0.07136641f) : 
                    0.054380666f) : 
                0.0f)));
    return pred;
  } // constant pool size = 62B, number of visited nodes = 15, static init size = 0B
}

class log_drf_1_Tree_3_class_21 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.24365234f ? 
         (Double.isNaN(data[13]) || data[13 /* 12_letter_word */] <0.18359375f ? 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <235.5f ? 
                 (data[0 /* vlan */] <17.5f ? 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.0625f ? 
                        0.00757077f : 
                        0.0f) : 
                     (data[2 /* no_of_characters */] <162.5f ? 
                        1.5787099E-4f : 
                        0.0014681788f)) : 
                 (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.15625f ? 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <268.5f ? 
                        0.009817289f : 
                        0.0012399256f) : 
                     (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
                        0.0f : 
                        0.40425533f))) : 
             (data[13 /* 12_letter_word */] <0.21229553f ? 
                0.6666667f : 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.4140625f ? 
                    0.0f : 
                     (data[2 /* no_of_characters */] <181.5f ? 
                        0.2f : 
                        0.0f)))) : 
         (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <215.5f ? 
             (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.18359375f ? 
                 (data[0 /* vlan */] <17.5f ? 
                     (data[6 /* 5_letter_word */] <0.1171875f ? 
                        0.05925926f : 
                        0.0f) : 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.4453125f ? 
                        0.0f : 
                        0.0017123288f)) : 
                 (data[3 /* no_of_ips */] <0.5f ? 
                    0.0f : 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <17.5f ? 
                        0.013392857f : 
                        0.0f))) : 
             (Double.isNaN(data[12]) || data[12 /* 11_letter_word */] <0.18554688f ? 
                 (data[3 /* no_of_ips */] <1.5f ? 
                     (data[9 /* 8_letter_word */] <0.114583336f ? 
                        0.038301416f : 
                        0.0f) : 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.4622841f ? 
                        0.0f : 
                        0.002283105f)) : 
                1.0f)));
    return pred;
  } // constant pool size = 94B, number of visited nodes = 23, static init size = 0B
}

class log_drf_1_Tree_3_class_22 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.16015625f ? 
        2.2002563E-5f : 
         (data[10 /* 9_letter_word */] <0.17409897f ? 
             (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.083984375f ? 
                0.0f : 
                0.09090909f) : 
            0.0f));
    return pred;
  } // constant pool size = 14B, number of visited nodes = 3, static init size = 0B
}

class log_drf_1_Tree_3_class_23 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.5830078f ? 
         (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
            0.0f : 
             (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.18359375f ? 
                 (data[0 /* vlan */] <17.5f ? 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.0625f ? 
                        0.8376471f : 
                        0.019191919f) : 
                    0.0f) : 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.69140625f ? 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.25f ? 
                        9.875109E-4f : 
                        0.0f) : 
                     (data[0 /* vlan */] <17.5f ? 
                        1.0f : 
                        0.0f)))) : 
         (data[2 /* no_of_characters */] <133.5f ? 
            0.0f : 
             (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.16796875f ? 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <153.5f ? 
                     (data[2 /* no_of_characters */] <134.5f ? 
                        0.0f : 
                        0.9879285f) : 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <179.5f ? 
                        0.0f : 
                        0.060606062f)) : 
                0.0f)));
    return pred;
  } // constant pool size = 54B, number of visited nodes = 13, static init size = 0B
}

class log_drf_1_Tree_3_class_24 {
  static final double score0(double[] data) {
    double pred =     1.5E-5f;
    return pred;
  } // constant pool size = 2B, number of visited nodes = 0, static init size = 0B
}

class log_drf_1_Tree_3_class_25 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[4]) || data[4 /* no_of_macs */] <0.5f ? 
         (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
            0.0f : 
             (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.94921875f ? 
                 (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.09375f ? 
                        0.029435769f : 
                        0.22546342f) : 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <260.5f ? 
                        0.61569715f : 
                        0.008964669f)) : 
                0.6937758f)) : 
         (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <291.5f ? 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <35.5f ? 
                1.0f : 
                0.0f) : 
            0.0f));
    return pred;
  } // constant pool size = 34B, number of visited nodes = 8, static init size = 0B
}

class log_drf_1_Tree_3_class_26 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.013183594f ? 
         (data[1 /* type_of_time */] <4.5f ? 
            0.0f : 
             (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.6503906f ? 
                0.0f : 
                 (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.0625f ? 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.2890625f ? 
                        0.0f : 
                        0.2789927f) : 
                    0.0f))) : 
        0.0f);
    return pred;
  } // constant pool size = 22B, number of visited nodes = 5, static init size = 0B
}

class log_drf_1_Tree_3_class_27 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.24365234f ? 
        0.0f : 
        5.4626897E-5f);
    return pred;
  } // constant pool size = 6B, number of visited nodes = 1, static init size = 0B
}

class log_drf_1_Tree_3_class_28 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.39453125f ? 
         (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
            0.0f : 
             (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.16015625f ? 
                0.0f : 
                 (data[0 /* vlan */] <17.5f ? 
                     (data[2 /* no_of_characters */] <420.0f ? 
                        0.0f : 
                        1.0f) : 
                    0.0f))) : 
         (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <492.0f ? 
            0.0f : 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <97.5f ? 
                1.0f : 
                0.0f)));
    return pred;
  } // constant pool size = 30B, number of visited nodes = 7, static init size = 0B
}

class log_drf_1_Tree_3_class_29 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.030761719f ? 
         (data[1 /* type_of_time */] <4.5f ? 
            0.0f : 
             (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.05078125f ? 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <125.5f ? 
                    0.0f : 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.7734375f ? 
                        0.0f : 
                        0.0125f)) : 
                0.0f)) : 
         (data[9 /* 8_letter_word */] <0.049692154f ? 
            1.0f : 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <957.5f ? 
                0.0f : 
                 (Double.isNaN(data[12]) || data[12 /* 11_letter_word */] <0.01171875f ? 
                    0.0f : 
                     (data[6 /* 5_letter_word */] <0.125f ? 
                        1.0f : 
                        0.6666667f)))));
    return pred;
  } // constant pool size = 38B, number of visited nodes = 9, static init size = 0B
}

class log_drf_1_Tree_3_class_30 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.013183594f ? 
         (data[1 /* type_of_time */] <1.5f ? 
            1.0f : 
            0.0f) : 
        0.0f);
    return pred;
  } // constant pool size = 10B, number of visited nodes = 2, static init size = 0B
}

class log_drf_1_Tree_3_class_31 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.13378906f ? 
         (Double.isNaN(data[13]) || data[13 /* 12_letter_word */] <0.22460938f ? 
             (data[2 /* no_of_characters */] <110.5f ? 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <65.5f ? 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.4453125f ? 
                        0.0f : 
                        8.7822013E-4f) : 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.25f ? 
                        0.16534741f : 
                        0.96875f)) : 
                 (data[0 /* vlan */] <109.5f ? 
                     (data[2 /* no_of_characters */] <125.5f ? 
                        0.017305644f : 
                        0.0017631502f) : 
                    0.0f)) : 
             (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.125f ? 
                0.0f : 
                1.0f)) : 
         (data[2 /* no_of_characters */] <105.5f ? 
             (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.4140625f ? 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.2890625f ? 
                     (data[2 /* no_of_characters */] <90.5f ? 
                        0.6753247f : 
                        0.023183925f) : 
                     (data[0 /* vlan */] <33.5f ? 
                        0.0f : 
                        0.9556962f)) : 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <57.5f ? 
                    0.0f : 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <98.5f ? 
                        0.0f : 
                        1.0f))) : 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <81.5f ? 
                 (data[6 /* 5_letter_word */] <0.03125f ? 
                     (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.18359375f ? 
                        3.856537E-4f : 
                        0.0049751243f) : 
                    0.0f) : 
                 (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
                    0.0f : 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.53125f ? 
                        0.11419939f : 
                        1.0f)))));
    return pred;
  } // constant pool size = 86B, number of visited nodes = 21, static init size = 0B
}

class log_drf_1_Tree_3_class_32 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.5942383f ? 
         (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
            0.0f : 
             (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.03125f ? 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <25.5f ? 
                    0.0f : 
                     (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.4140625f ? 
                        0.00560277f : 
                        0.3783784f)) : 
                0.0f)) : 
         (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.10058594f ? 
            0.0f : 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <142.5f ? 
                1.0f : 
                0.0f)));
    return pred;
  } // constant pool size = 30B, number of visited nodes = 7, static init size = 0B
}

class log_drf_1_Tree_3_class_33 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.47216797f ? 
         (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
             (data[2 /* no_of_characters */] <105.5f ? 
                 (data[0 /* vlan */] <21.5f ? 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.16666667f ? 
                        0.07692308f : 
                        0.0f) : 
                    0.0f) : 
                0.0f) : 
             (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.080078125f ? 
                 (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.94921875f ? 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.234375f ? 
                        2.3881167E-4f : 
                        0.001117943f) : 
                     (Double.isNaN(data[4]) || data[4 /* no_of_macs */] <0.5f ? 
                        0.005330124f : 
                        0.0f)) : 
                 (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.70703125f ? 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.40875244f ? 
                        6.863418E-4f : 
                        0.03343166f) : 
                    0.67741936f))) : 
         (data[2 /* no_of_characters */] <70.5f ? 
             (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                 (data[5 /* 4_letter_word */] <0.37304688f ? 
                     (data[2 /* no_of_characters */] <58.5f ? 
                        0.16666667f : 
                        0.0f) : 
                    1.0f) : 
                0.0f) : 
             (data[0 /* vlan */] <9.5f ? 
                1.0f : 
                 (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                     (Double.isNaN(data[13]) || data[13 /* 12_letter_word */] <0.0625f ? 
                        0.0017165277f : 
                        0.0f) : 
                    0.0f))));
    return pred;
  } // constant pool size = 74B, number of visited nodes = 18, static init size = 0B
}

class log_drf_1_Tree_3_class_34 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.123535156f ? 
        0.0f : 
         (data[1 /* type_of_time */] <4.5f ? 
            0.0f : 
             (data[0 /* vlan */] <9.5f ? 
                0.071428575f : 
                0.0f)));
    return pred;
  } // constant pool size = 14B, number of visited nodes = 3, static init size = 0B
}

class log_drf_1_Tree_3_class_35 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.8745117f ? 
         (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
            0.0f : 
             (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.4140625f ? 
                 (data[0 /* vlan */] <17.5f ? 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.5859375f ? 
                        0.0016233766f : 
                        0.06818182f) : 
                    0.0f) : 
                 (data[2 /* no_of_characters */] <110.5f ? 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.125f ? 
                        0.0f : 
                        0.006535948f) : 
                    0.0f))) : 
         (data[2 /* no_of_characters */] <83.5f ? 
            0.09090909f : 
            0.0f));
    return pred;
  } // constant pool size = 34B, number of visited nodes = 8, static init size = 0B
}

class log_drf_1_Tree_3_class_36 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.16015625f ? 
        0.0f : 
         (data[1 /* type_of_time */] <4.5f ? 
            0.0f : 
             (data[0 /* vlan */] <7.5f ? 
                0.84615386f : 
                0.0f)));
    return pred;
  } // constant pool size = 14B, number of visited nodes = 3, static init size = 0B
}

class log_drf_1_Tree_3_class_37 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.10546875f ? 
         (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
             (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.22460938f ? 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <174.5f ? 
                     (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.18249512f ? 
                        0.99431866f : 
                        0.9325153f) : 
                     (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <1.0f ? 
                        1.0f : 
                        0.0f)) : 
                 (data[3 /* no_of_ips */] <1.5f ? 
                    1.0f : 
                    0.0f)) : 
             (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.9707031f ? 
                 (Double.isNaN(data[12]) || data[12 /* 11_letter_word */] <0.74609375f ? 
                     (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.046875f ? 
                        0.00212056f : 
                        0.0f) : 
                    0.1904762f) : 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <126.0f ? 
                    0.0f : 
                     (data[0 /* vlan */] <168.5f ? 
                        0.8055556f : 
                        0.0f)))) : 
         (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.23535156f ? 
             (data[3 /* no_of_ips */] <0.5f ? 
                 (Double.isNaN(data[13]) || data[13 /* 12_letter_word */] <0.171875f ? 
                     (data[2 /* no_of_characters */] <146.5f ? 
                        0.011341027f : 
                        0.34846056f) : 
                     (data[8 /* 7_letter_word */] <0.1015625f ? 
                        0.0f : 
                        1.0f)) : 
                 (data[3 /* no_of_ips */] <2.5f ? 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <154.5f ? 
                        0.0f : 
                        0.153125f) : 
                     (data[5 /* 4_letter_word */] <0.064453125f ? 
                        9.375E-4f : 
                        0.0f))) : 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <153.5f ? 
                0.0f : 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.37452698f ? 
                    0.999177f : 
                    1.0f))));
    return pred;
  } // constant pool size = 90B, number of visited nodes = 22, static init size = 0B
}

class log_drf_1_Tree_3_class_38 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.44970703f ? 
        1.0653939E-5f : 
         (data[2 /* no_of_characters */] <93.5f ? 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <91.5f ? 
                0.0f : 
                0.5f) : 
            0.0f));
    return pred;
  } // constant pool size = 14B, number of visited nodes = 3, static init size = 0B
}


class log_drf_1_Forest_4 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += log_drf_1_Tree_4_class_0.score0(fdata);
    preds[2] += log_drf_1_Tree_4_class_1.score0(fdata);
    preds[3] += log_drf_1_Tree_4_class_2.score0(fdata);
    preds[4] += log_drf_1_Tree_4_class_3.score0(fdata);
    preds[5] += log_drf_1_Tree_4_class_4.score0(fdata);
    preds[6] += log_drf_1_Tree_4_class_5.score0(fdata);
    preds[7] += log_drf_1_Tree_4_class_6.score0(fdata);
    preds[8] += log_drf_1_Tree_4_class_7.score0(fdata);
    preds[9] += log_drf_1_Tree_4_class_8.score0(fdata);
    preds[10] += log_drf_1_Tree_4_class_9.score0(fdata);
    preds[11] += log_drf_1_Tree_4_class_10.score0(fdata);
    preds[12] += log_drf_1_Tree_4_class_11.score0(fdata);
    preds[13] += log_drf_1_Tree_4_class_12.score0(fdata);
    preds[14] += log_drf_1_Tree_4_class_13.score0(fdata);
    preds[15] += log_drf_1_Tree_4_class_14.score0(fdata);
    preds[16] += log_drf_1_Tree_4_class_15.score0(fdata);
    preds[17] += log_drf_1_Tree_4_class_16.score0(fdata);
    preds[18] += log_drf_1_Tree_4_class_17.score0(fdata);
    preds[19] += log_drf_1_Tree_4_class_18.score0(fdata);
    preds[20] += log_drf_1_Tree_4_class_19.score0(fdata);
    preds[21] += log_drf_1_Tree_4_class_20.score0(fdata);
    preds[22] += log_drf_1_Tree_4_class_21.score0(fdata);
    preds[23] += log_drf_1_Tree_4_class_22.score0(fdata);
    preds[24] += log_drf_1_Tree_4_class_23.score0(fdata);
    preds[25] += log_drf_1_Tree_4_class_24.score0(fdata);
    preds[26] += log_drf_1_Tree_4_class_25.score0(fdata);
    preds[27] += log_drf_1_Tree_4_class_26.score0(fdata);
    preds[28] += log_drf_1_Tree_4_class_27.score0(fdata);
    preds[29] += log_drf_1_Tree_4_class_28.score0(fdata);
    preds[30] += log_drf_1_Tree_4_class_29.score0(fdata);
    preds[31] += log_drf_1_Tree_4_class_30.score0(fdata);
    preds[32] += log_drf_1_Tree_4_class_31.score0(fdata);
    preds[33] += log_drf_1_Tree_4_class_32.score0(fdata);
    preds[34] += log_drf_1_Tree_4_class_33.score0(fdata);
    preds[35] += log_drf_1_Tree_4_class_34.score0(fdata);
    preds[36] += log_drf_1_Tree_4_class_35.score0(fdata);
    preds[37] += log_drf_1_Tree_4_class_36.score0(fdata);
    preds[38] += log_drf_1_Tree_4_class_37.score0(fdata);
    preds[39] += log_drf_1_Tree_4_class_38.score0(fdata);
  }
}
class log_drf_1_Tree_4_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.015136719f ? 
         (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.30273438f ? 
            0.0f : 
             (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.22460938f ? 
                 (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.5151825f ? 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <719.5f ? 
                        2.6757046E-4f : 
                        0.015151516f) : 
                    0.0f) : 
                0.0f)) : 
         (Double.isNaN(data[12]) || data[12 /* 11_letter_word */] <0.009765625f ? 
             (Double.isNaN(data[4]) || data[4 /* no_of_macs */] <0.5f ? 
                0.0f : 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <440.0f ? 
                    0.0f : 
                     (data[9 /* 8_letter_word */] <0.09151786f ? 
                        0.6666667f : 
                        1.0f))) : 
             (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.28476563f ? 
                 (data[12 /* 11_letter_word */] <0.08184662f ? 
                    0.6666667f : 
                    0.0f) : 
                1.0f)));
    return pred;
  } // constant pool size = 46B, number of visited nodes = 11, static init size = 0B
}

class log_drf_1_Tree_4_class_1 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.39208984f ? 
         (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.3246994f ? 
             (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
                0.0f : 
                 (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.73828125f ? 
                    0.0f : 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <160.5f ? 
                        0.0f : 
                        0.15853658f))) : 
             (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
                0.0f : 
                 (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.14453125f ? 
                    0.0f : 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.140625f ? 
                        0.0f : 
                        0.2651515f)))) : 
         (data[5 /* 4_letter_word */] <0.40811872f ? 
             (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.1015625f ? 
                 (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.05078125f ? 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <113.5f ? 
                        0.0f : 
                        0.7317881f) : 
                    0.0f) : 
                0.0f) : 
             (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.140625f ? 
                0.0f : 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <260.5f ? 
                    0.0f : 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.0234375f ? 
                        0.13405797f : 
                        0.0f)))));
    return pred;
  } // constant pool size = 62B, number of visited nodes = 15, static init size = 0B
}

class log_drf_1_Tree_4_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.49560547f ? 
         (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <1.5f ? 
             (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
                0.0f : 
                 (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <1078.5f ? 
                        0.0048364033f : 
                        0.125f) : 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <609.5f ? 
                        0.022816487f : 
                        0.33333334f))) : 
             (Double.isNaN(data[4]) || data[4 /* no_of_macs */] <3.0f ? 
                0.0f : 
                0.5f)) : 
         (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
             (data[8 /* 7_letter_word */] <0.013671875f ? 
                 (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.22265625f ? 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <160.5f ? 
                        0.057465367f : 
                        0.0f) : 
                    0.0f) : 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.22265625f ? 
                    0.0f : 
                     (data[2 /* no_of_characters */] <120.5f ? 
                        1.0f : 
                        0.0f))) : 
             (data[5 /* 4_letter_word */] <0.5234375f ? 
                 (Double.isNaN(data[12]) || data[12 /* 11_letter_word */] <0.25f ? 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.4296875f ? 
                        0.0f : 
                        0.75186104f) : 
                    0.0f) : 
                0.0f)));
    return pred;
  } // constant pool size = 66B, number of visited nodes = 16, static init size = 0B
}

class log_drf_1_Tree_4_class_3 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.39208984f ? 
         (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.121379375f ? 
             (data[8 /* 7_letter_word */] <0.05078125f ? 
                 (data[1 /* type_of_time */] <4.5f ? 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <120.5f ? 
                        0.0010028414f : 
                        0.0f) : 
                    0.0f) : 
                0.0f) : 
             (data[8 /* 7_letter_word */] <0.29296875f ? 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.27923584f ? 
                     (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.109375f ? 
                        0.0f : 
                        0.0067692306f) : 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <33.5f ? 
                        0.96350366f : 
                        0.0f)) : 
                0.0f)) : 
         (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
            0.0f : 
             (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.31640625f ? 
                 (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.22544643f ? 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.046875f ? 
                        1.2275964E-4f : 
                        0.0f) : 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.078125f ? 
                        1.0f : 
                        0.0f)) : 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <175.5f ? 
                     (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <1.5f ? 
                        0.9828674f : 
                        0.0f) : 
                    0.0f))));
    return pred;
  } // constant pool size = 66B, number of visited nodes = 16, static init size = 0B
}

class log_drf_1_Tree_4_class_4 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.3095703f ? 
         (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.27929688f ? 
             (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
                0.0f : 
                 (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.029457092f ? 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.828125f ? 
                        0.0f : 
                        8.3857443E-4f) : 
                    0.0f)) : 
             (data[8 /* 7_letter_word */] <0.15234375f ? 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.123184204f ? 
                     (data[2 /* no_of_characters */] <120.5f ? 
                        1.2434718E-4f : 
                        0.0f) : 
                     (data[9 /* 8_letter_word */] <0.046875f ? 
                        0.028571429f : 
                        0.0f)) : 
                0.0f)) : 
         (data[3 /* no_of_ips */] <0.5f ? 
             (data[9 /* 8_letter_word */] <0.16796875f ? 
                 (data[10 /* 9_letter_word */] <0.36620712f ? 
                     (data[2 /* no_of_characters */] <120.5f ? 
                        0.7567568f : 
                        0.0f) : 
                    0.0f) : 
                0.0f) : 
            0.0f));
    return pred;
  } // constant pool size = 54B, number of visited nodes = 13, static init size = 0B
}

class log_drf_1_Tree_4_class_5 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.27929688f ? 
         (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
             (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.22460938f ? 
                0.0f : 
                4.747837E-4f) : 
            0.0f) : 
         (data[5 /* 4_letter_word */] <0.30885696f ? 
             (data[8 /* 7_letter_word */] <0.037109375f ? 
                 (Double.isNaN(data[13]) || data[13 /* 12_letter_word */] <0.071614586f ? 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <57.5f ? 
                        0.0f : 
                        1.0f) : 
                    0.0f) : 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.15085384f ? 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <81.5f ? 
                        0.0052083335f : 
                        0.0f) : 
                    0.0f)) : 
             (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.13671875f ? 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <270.5f ? 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.265625f ? 
                        5.454837E-4f : 
                        1.1300712E-4f) : 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.078125f ? 
                        4.7180938E-4f : 
                        0.04f)) : 
                 (data[10 /* 9_letter_word */] <0.15534973f ? 
                     (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <1.5f ? 
                        1.0f : 
                        0.0f) : 
                    0.0f))));
    return pred;
  } // constant pool size = 62B, number of visited nodes = 15, static init size = 0B
}

class log_drf_1_Tree_4_class_6 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.1616211f ? 
         (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
             (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.31054688f ? 
                 (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.7734375f ? 
                     (data[0 /* vlan */] <154.5f ? 
                        0.002798596f : 
                        0.0f) : 
                     (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.1484375f ? 
                        0.0f : 
                        0.875f)) : 
                 (data[2 /* no_of_characters */] <75.5f ? 
                    1.0f : 
                    0.0f)) : 
            0.0f) : 
         (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.3203125f ? 
             (data[8 /* 7_letter_word */] <0.037109375f ? 
                 (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.22265625f ? 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.8297043f ? 
                        0.0f : 
                        0.0061932285f) : 
                     (data[2 /* no_of_characters */] <100.5f ? 
                        0.067226894f : 
                        0.0f)) : 
                0.0f) : 
             (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.15234375f ? 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.22265625f ? 
                     (data[9 /* 8_letter_word */] <0.3190104f ? 
                        0.0f : 
                        0.046028513f) : 
                     (data[2 /* no_of_characters */] <130.5f ? 
                        0.85f : 
                        0.0f)) : 
                 (data[1 /* type_of_time */] <4.5f ? 
                    0.0f : 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.45052084f ? 
                        0.19767442f : 
                        0.0f)))));
    return pred;
  } // constant pool size = 74B, number of visited nodes = 18, static init size = 0B
}

class log_drf_1_Tree_4_class_7 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.94970703f ? 
        0.0f : 
         (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <2.5f ? 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <150.5f ? 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <178.5f ? 
                    0.0f : 
                    1.0f) : 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <178.5f ? 
                    0.0f : 
                    1.0f)) : 
            0.0f));
    return pred;
  } // constant pool size = 22B, number of visited nodes = 5, static init size = 0B
}

class log_drf_1_Tree_4_class_8 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.53759766f ? 
         (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <2.5f ? 
             (data[8 /* 7_letter_word */] <0.013671875f ? 
                 (Double.isNaN(data[12]) || data[12 /* 11_letter_word */] <0.01953125f ? 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.0390625f ? 
                        0.0015843997f : 
                        0.0f) : 
                    0.0f) : 
                 (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
                    0.0f : 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.033088237f ? 
                        1.381788E-4f : 
                        0.0f))) : 
             (Double.isNaN(data[4]) || data[4 /* no_of_macs */] <0.5f ? 
                 (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.14453125f ? 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <729.0f ? 
                        0.0f : 
                        0.11347517f) : 
                    0.0f) : 
                0.0f)) : 
         (data[5 /* 4_letter_word */] <0.59178543f ? 
             (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.27929688f ? 
                0.0f : 
                 (data[2 /* no_of_characters */] <669.5f ? 
                    0.0f : 
                    1.0f)) : 
             (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.3671875f ? 
                 (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.05078125f ? 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.0546875f ? 
                        0.0028727644f : 
                        0.0f) : 
                    0.0f) : 
                 (data[3 /* no_of_ips */] <2.5f ? 
                    0.0f : 
                    1.0f))));
    return pred;
  } // constant pool size = 70B, number of visited nodes = 17, static init size = 0B
}

class log_drf_1_Tree_4_class_9 {
  static final double score0(double[] data) {
    double pred =      (data[1 /* type_of_time */] <3.5f ? 
         (data[3 /* no_of_ips */] <1.5f ? 
             (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.234375f ? 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <113.5f ? 
                    0.0f : 
                     (data[6 /* 5_letter_word */] <0.18402778f ? 
                        0.2f : 
                        0.0f)) : 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.04296875f ? 
                    0.0f : 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <180.5f ? 
                        0.0f : 
                        0.25f))) : 
             (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.29101562f ? 
                 (data[1 /* type_of_time */] <2.0f ? 
                    0.0f : 
                    1.0f) : 
                 (data[1 /* type_of_time */] <2.0f ? 
                    0.0f : 
                    1.0f))) : 
        0.0f);
    return pred;
  } // constant pool size = 42B, number of visited nodes = 10, static init size = 0B
}

class log_drf_1_Tree_4_class_10 {
  static final double score0(double[] data) {
    double pred =      (data[1 /* type_of_time */] <4.5f ? 
        0.0f : 
         (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.3486328f ? 
             (data[2 /* no_of_characters */] <95.5f ? 
                 (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.125f ? 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.578125f ? 
                        0.0f : 
                        0.037037037f) : 
                    0.0f) : 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <154.5f ? 
                    0.0f : 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.029960632f ? 
                        0.0026809652f : 
                        0.0f))) : 
            0.0f));
    return pred;
  } // constant pool size = 30B, number of visited nodes = 7, static init size = 0B
}

class log_drf_1_Tree_4_class_11 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.14111328f ? 
        0.0f : 
         (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.26757812f ? 
            0.0f : 
             (data[5 /* 4_letter_word */] <0.29301834f ? 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.21484375f ? 
                     (data[7 /* 6_letter_word */] <0.21875f ? 
                        0.0f : 
                        0.008333334f) : 
                    0.0f) : 
                0.0f)));
    return pred;
  } // constant pool size = 22B, number of visited nodes = 5, static init size = 0B
}

class log_drf_1_Tree_4_class_12 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.5830078f ? 
         (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
            0.0f : 
             (data[1 /* type_of_time */] <4.5f ? 
                0.0f : 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.04296875f ? 
                     (data[5 /* 4_letter_word */] <0.0625f ? 
                        0.0015543568f : 
                        0.0f) : 
                    0.0f))) : 
         (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
            0.0f : 
             (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.16796875f ? 
                0.0f : 
                1.0f)));
    return pred;
  } // constant pool size = 30B, number of visited nodes = 7, static init size = 0B
}

class log_drf_1_Tree_4_class_13 {
  static final double score0(double[] data) {
    double pred =      (data[1 /* type_of_time */] <4.5f ? 
        0.0f : 
         (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.2548828f ? 
             (data[2 /* no_of_characters */] <60.5f ? 
                 (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.125f ? 
                     (data[0 /* vlan */] <107.5f ? 
                        0.0f : 
                        0.9028777f) : 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.29589844f ? 
                        1.0f : 
                        0.85714287f)) : 
                 (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.18359375f ? 
                     (data[2 /* no_of_characters */] <80.5f ? 
                        6.570302E-4f : 
                        0.0f) : 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <384.5f ? 
                        0.0f : 
                        0.5f))) : 
             (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.19140625f ? 
                 (data[5 /* 4_letter_word */] <0.34802246f ? 
                     (data[2 /* no_of_characters */] <60.5f ? 
                        0.14285715f : 
                        0.0f) : 
                    0.0f) : 
                 (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.18489583f ? 
                    0.0f : 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.1015625f ? 
                        0.0f : 
                        0.875f)))));
    return pred;
  } // constant pool size = 58B, number of visited nodes = 14, static init size = 0B
}

class log_drf_1_Tree_4_class_14 {
  static final double score0(double[] data) {
    double pred =      (data[1 /* type_of_time */] <2.5f ? 
         (Double.isNaN(data[12]) || data[12 /* 11_letter_word */] <0.171875f ? 
             (data[6 /* 5_letter_word */] <0.2109375f ? 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <170.5f ? 
                    0.0f : 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.18292236f ? 
                        0.0f : 
                        1.0f)) : 
                0.0f) : 
            1.0f) : 
        0.0f);
    return pred;
  } // constant pool size = 22B, number of visited nodes = 5, static init size = 0B
}

class log_drf_1_Tree_4_class_15 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.94970703f ? 
         (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.43682814f ? 
             (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
                0.0f : 
                 (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.1962314f ? 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.2109375f ? 
                        0.009077406f : 
                        7.58673E-4f) : 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.546875f ? 
                        0.00843383f : 
                        0.35135135f))) : 
             (data[8 /* 7_letter_word */] <0.013671875f ? 
                 (Double.isNaN(data[12]) || data[12 /* 11_letter_word */] <0.009765625f ? 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <33.5f ? 
                        0.0f : 
                        0.0022271716f) : 
                    0.0f) : 
                0.0f)) : 
         (data[3 /* no_of_ips */] <1.5f ? 
            0.0f : 
             (data[2 /* no_of_characters */] <95.5f ? 
                0.0f : 
                 (Double.isNaN(data[4]) || data[4 /* no_of_macs */] <0.5f ? 
                     (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <2.5f ? 
                        0.1954023f : 
                        0.0f) : 
                    0.0f))));
    return pred;
  } // constant pool size = 54B, number of visited nodes = 13, static init size = 0B
}

class log_drf_1_Tree_4_class_16 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.94970703f ? 
         (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.15488386f ? 
            0.0f : 
             (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
                0.0f : 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.3190104f ? 
                     (data[3 /* no_of_ips */] <0.5f ? 
                        3.0506405E-4f : 
                        0.0f) : 
                     (Double.isNaN(data[15]) || data[15 /* 14_letter_word */] <0.05078125f ? 
                        6.079027E-4f : 
                        0.0f)))) : 
         (data[3 /* no_of_ips */] <0.5f ? 
             (data[1 /* type_of_time */] <4.5f ? 
                0.0f : 
                 (data[2 /* no_of_characters */] <80.5f ? 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <79.5f ? 
                        0.0f : 
                        0.8f) : 
                    0.0f)) : 
            0.0f));
    return pred;
  } // constant pool size = 42B, number of visited nodes = 10, static init size = 0B
}

class log_drf_1_Tree_4_class_17 {
  static final double score0(double[] data) {
    double pred =      (data[1 /* type_of_time */] <4.5f ? 
         (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.05078125f ? 
             (data[1 /* type_of_time */] <2.5f ? 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.16796875f ? 
                     (data[0 /* vlan */] <17.5f ? 
                        0.04f : 
                        0.0f) : 
                    0.0f) : 
                0.0f) : 
            0.0f) : 
         (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <659.0f ? 
            0.0f : 
             (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <3.5f ? 
                 (data[5 /* 4_letter_word */] <0.03125f ? 
                     (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                        0.8083832f : 
                        0.2f) : 
                     (data[5 /* 4_letter_word */] <0.37939453f ? 
                        0.078947365f : 
                        0.0f)) : 
                 (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <4.5f ? 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.578125f ? 
                        0.99270076f : 
                        0.71428573f) : 
                    0.0f))));
    return pred;
  } // constant pool size = 50B, number of visited nodes = 12, static init size = 0B
}

class log_drf_1_Tree_4_class_18 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.07470703f ? 
        0.0f : 
         (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.4580078f ? 
            0.0f : 
             (data[5 /* 4_letter_word */] <0.52275276f ? 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <330.5f ? 
                    0.0f : 
                     (data[9 /* 8_letter_word */] <0.078125f ? 
                        0.5f : 
                        0.0f)) : 
                0.0f)));
    return pred;
  } // constant pool size = 22B, number of visited nodes = 5, static init size = 0B
}

class log_drf_1_Tree_4_class_19 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.24023438f ? 
         (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
            0.0f : 
             (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.19140625f ? 
                0.0f : 
                 (data[5 /* 4_letter_word */] <0.22265625f ? 
                     (data[8 /* 7_letter_word */] <0.22299194f ? 
                        0.009345794f : 
                        0.0f) : 
                    0.0f))) : 
         (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
            0.0f : 
             (Double.isNaN(data[4]) || data[4 /* no_of_macs */] <0.5f ? 
                 (data[1 /* type_of_time */] <4.5f ? 
                    0.0f : 
                     (data[11 /* 10_letter_word */] <0.125f ? 
                        0.0f : 
                        0.9291553f)) : 
                0.0f)));
    return pred;
  } // constant pool size = 38B, number of visited nodes = 9, static init size = 0B
}

class log_drf_1_Tree_4_class_20 {
  static final double score0(double[] data) {
    double pred =      (data[1 /* type_of_time */] <4.5f ? 
        0.0f : 
         (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.030273438f ? 
             (data[2 /* no_of_characters */] <130.5f ? 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <25.5f ? 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.828125f ? 
                        0.9975218f : 
                        0.9951535f) : 
                    0.0f) : 
                 (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.4140625f ? 
                     (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.22320557f ? 
                        0.13845038f : 
                        0.9870518f) : 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.3671875f ? 
                        0.0021413276f : 
                        1.0f))) : 
             (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.31640625f ? 
                 (data[5 /* 4_letter_word */] <0.3863449f ? 
                     (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.1875f ? 
                        0.16044822f : 
                        0.65841013f) : 
                     (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.3125f ? 
                        0.13512577f : 
                        0.86021507f)) : 
                 (Double.isNaN(data[15]) || data[15 /* 14_letter_word */] <0.083984375f ? 
                     (data[9 /* 8_letter_word */] <0.45049033f ? 
                        0.63255817f : 
                        0.9040661f) : 
                    0.0f))));
    return pred;
  } // constant pool size = 58B, number of visited nodes = 14, static init size = 0B
}

class log_drf_1_Tree_4_class_21 {
  static final double score0(double[] data) {
    double pred =      (data[1 /* type_of_time */] <3.5f ? 
         (Double.isNaN(data[12]) || data[12 /* 11_letter_word */] <0.22460938f ? 
            0.0f : 
            1.0f) : 
         (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.24804688f ? 
             (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.9160156f ? 
                 (data[6 /* 5_letter_word */] <0.15625f ? 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <160.5f ? 
                        2.748952E-4f : 
                        0.006162465f) : 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <260.5f ? 
                        6.217359E-5f : 
                        3.271181E-4f)) : 
                 (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
                    0.002455209f : 
                    0.0f)) : 
             (data[8 /* 7_letter_word */] <0.1640625f ? 
                 (Double.isNaN(data[13]) || data[13 /* 12_letter_word */] <0.1953125f ? 
                     (data[0 /* vlan */] <17.5f ? 
                        0.0056574326f : 
                        4.5445364E-4f) : 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.0859375f ? 
                        0.025f : 
                        0.0f)) : 
                 (data[8 /* 7_letter_word */] <0.17321777f ? 
                     (data[9 /* 8_letter_word */] <0.03125f ? 
                        0.17006803f : 
                        0.0f) : 
                     (data[8 /* 7_letter_word */] <0.29488277f ? 
                        0.011378849f : 
                        0.0023036976f)))));
    return pred;
  } // constant pool size = 62B, number of visited nodes = 15, static init size = 0B
}

class log_drf_1_Tree_4_class_22 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.16015625f ? 
         (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.6513672f ? 
             (data[8 /* 7_letter_word */] <0.013671875f ? 
                 (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.15520859f ? 
                    0.0f : 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <320.5f ? 
                        0.0f : 
                        2.151926E-4f)) : 
                0.0f) : 
             (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.0625f ? 
                1.8892877E-4f : 
                0.0f)) : 
         (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.4638672f ? 
            0.0f : 
             (data[10 /* 9_letter_word */] <0.18312073f ? 
                 (data[8 /* 7_letter_word */] <0.0859375f ? 
                    0.0f : 
                     (data[2 /* no_of_characters */] <160.5f ? 
                        0.13333334f : 
                        0.0f)) : 
                0.0f)));
    return pred;
  } // constant pool size = 42B, number of visited nodes = 10, static init size = 0B
}

class log_drf_1_Tree_4_class_23 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.5830078f ? 
         (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.13378906f ? 
             (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
                0.0f : 
                 (Double.isNaN(data[4]) || data[4 /* no_of_macs */] <0.5f ? 
                     (data[0 /* vlan */] <17.5f ? 
                        0.689569f : 
                        0.0f) : 
                    0.0f)) : 
             (Double.isNaN(data[12]) || data[12 /* 11_letter_word */] <0.087890625f ? 
                 (data[8 /* 7_letter_word */] <0.013020833f ? 
                     (data[0 /* vlan */] <17.5f ? 
                        0.0014204546f : 
                        0.0f) : 
                    0.0f) : 
                 (data[12 /* 11_letter_word */] <0.094329834f ? 
                    0.875f : 
                    0.0f))) : 
         (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
             (data[2 /* no_of_characters */] <135.5f ? 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <134.5f ? 
                    0.0f : 
                    0.7058824f) : 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <154.5f ? 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <17.5f ? 
                        1.0f : 
                        0.0f) : 
                    0.0f)) : 
            0.0f));
    return pred;
  } // constant pool size = 58B, number of visited nodes = 14, static init size = 0B
}

class log_drf_1_Tree_4_class_24 {
  static final double score0(double[] data) {
    double pred =      (data[1 /* type_of_time */] <4.5f ? 
        0.0f : 
         (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.030273438f ? 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <140.5f ? 
                0.0f : 
                 (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.97265625f ? 
                    0.0f : 
                     (data[0 /* vlan */] <17.5f ? 
                        1.0f : 
                        0.0f))) : 
            0.0f));
    return pred;
  } // constant pool size = 22B, number of visited nodes = 5, static init size = 0B
}

class log_drf_1_Tree_4_class_25 {
  static final double score0(double[] data) {
    double pred =      (data[1 /* type_of_time */] <4.5f ? 
        0.0f : 
         (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.94921875f ? 
             (data[2 /* no_of_characters */] <130.5f ? 
                 (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <120.5f ? 
                        0.0056134723f : 
                        0.049113233f) : 
                     (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.1015625f ? 
                        0.7431956f : 
                        0.06379585f)) : 
                 (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.4140625f ? 
                     (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.4453125f ? 
                        0.33428478f : 
                        0.9816738f) : 
                     (data[6 /* 5_letter_word */] <0.125f ? 
                        0.13265306f : 
                        1.0f))) : 
            0.7362302f));
    return pred;
  } // constant pool size = 38B, number of visited nodes = 9, static init size = 0B
}

class log_drf_1_Tree_4_class_26 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.6513672f ? 
        0.0f : 
         (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.6905203f ? 
             (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
                0.0f : 
                 (data[3 /* no_of_ips */] <0.5f ? 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.25f ? 
                        0.0f : 
                        0.8597561f) : 
                    0.0f)) : 
            0.0f));
    return pred;
  } // constant pool size = 22B, number of visited nodes = 5, static init size = 0B
}

class log_drf_1_Tree_4_class_27 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.49560547f ? 
        0.0f : 
         (data[5 /* 4_letter_word */] <0.5148158f ? 
             (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <250.5f ? 
                    0.0f : 
                     (data[8 /* 7_letter_word */] <0.3046875f ? 
                        0.003012048f : 
                        0.0f)) : 
                0.0f) : 
            0.0f));
    return pred;
  } // constant pool size = 22B, number of visited nodes = 5, static init size = 0B
}

class log_drf_1_Tree_4_class_28 {
  static final double score0(double[] data) {
    double pred =      (data[1 /* type_of_time */] <4.5f ? 
        0.0f : 
         (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.12109375f ? 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <494.5f ? 
                 (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <5.5f ? 
                    0.0f : 
                    0.16666667f) : 
                 (Double.isNaN(data[13]) || data[13 /* 12_letter_word */] <0.03125f ? 
                     (data[14 /* 13_letter_word */] <0.078125f ? 
                        0.0f : 
                        1.0f) : 
                    0.0f)) : 
             (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.19726562f ? 
                 (data[5 /* 4_letter_word */] <0.43695068f ? 
                     (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <5.0f ? 
                        0.004390613f : 
                        1.0f) : 
                    0.0f) : 
                 (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <5.5f ? 
                    0.0f : 
                    1.0f))));
    return pred;
  } // constant pool size = 42B, number of visited nodes = 10, static init size = 0B
}

class log_drf_1_Tree_4_class_29 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.51464844f ? 
         (Double.isNaN(data[12]) || data[12 /* 11_letter_word */] <0.03125f ? 
            0.0f : 
             (data[12 /* 11_letter_word */] <0.04260254f ? 
                 (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.3046875f ? 
                    0.0f : 
                    0.33333334f) : 
                0.0f)) : 
         (Double.isNaN(data[12]) || data[12 /* 11_letter_word */] <0.0087890625f ? 
             (data[1 /* type_of_time */] <4.5f ? 
                0.0f : 
                 (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.18359375f ? 
                    0.0f : 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.77205884f ? 
                        0.0f : 
                        0.0625f))) : 
             (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.05859375f ? 
                0.0f : 
                1.0f)));
    return pred;
  } // constant pool size = 38B, number of visited nodes = 9, static init size = 0B
}

class log_drf_1_Tree_4_class_30 {
  static final double score0(double[] data) {
    double pred =      (data[1 /* type_of_time */] <1.5f ? 
        1.0f : 
        0.0f);
    return pred;
  } // constant pool size = 6B, number of visited nodes = 1, static init size = 0B
}

class log_drf_1_Tree_4_class_31 {
  static final double score0(double[] data) {
    double pred =      (data[1 /* type_of_time */] <4.5f ? 
        0.0f : 
         (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.12109375f ? 
             (Double.isNaN(data[13]) || data[13 /* 12_letter_word */] <0.41601562f ? 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <65.5f ? 
                    0.0f : 
                     (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.03125f ? 
                        0.14794007f : 
                        0.0f)) : 
                 (Double.isNaN(data[13]) || data[13 /* 12_letter_word */] <0.7490692f ? 
                     (data[7 /* 6_letter_word */] <0.3671875f ? 
                        0.0f : 
                        0.98214287f) : 
                    0.0f)) : 
             (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.31054688f ? 
                 (data[5 /* 4_letter_word */] <0.17259216f ? 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.3125f ? 
                        0.0f : 
                        0.65f) : 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <65.5f ? 
                        7.6735264E-4f : 
                        0.23193341f)) : 
                 (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.0859375f ? 
                        0.3508772f : 
                        0.0f) : 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <140.5f ? 
                        1.0f : 
                        0.0f)))));
    return pred;
  } // constant pool size = 58B, number of visited nodes = 14, static init size = 0B
}

class log_drf_1_Tree_4_class_32 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.19091797f ? 
         (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.24804688f ? 
             (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
                0.0f : 
                3.431709E-5f) : 
             (data[8 /* 7_letter_word */] <0.013671875f ? 
                 (Double.isNaN(data[12]) || data[12 /* 11_letter_word */] <0.009765625f ? 
                     (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.21875f ? 
                        0.001990427f : 
                        0.04789272f) : 
                    0.0f) : 
                0.0f)) : 
         (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <1.5f ? 
             (data[10 /* 9_letter_word */] <0.22410297f ? 
                 (data[8 /* 7_letter_word */] <0.1015625f ? 
                     (data[3 /* no_of_ips */] <0.5f ? 
                        0.0f : 
                        0.2122449f) : 
                    0.0f) : 
                 (data[2 /* no_of_characters */] <90.5f ? 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.16875f ? 
                        0.043243244f : 
                        0.0f) : 
                    0.0f)) : 
            0.0f));
    return pred;
  } // constant pool size = 50B, number of visited nodes = 12, static init size = 0B
}

class log_drf_1_Tree_4_class_33 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.40820312f ? 
         (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <1.5f ? 
             (data[1 /* type_of_time */] <2.5f ? 
                 (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.05f ? 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.7421875f ? 
                        0.010989011f : 
                        0.2f) : 
                    0.0f) : 
                 (data[8 /* 7_letter_word */] <0.2578125f ? 
                     (data[0 /* vlan */] <17.5f ? 
                        0.0047106324f : 
                        6.7408156E-4f) : 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.21875f ? 
                        2.4594801E-5f : 
                        7.606009E-4f))) : 
            0.0f) : 
         (data[5 /* 4_letter_word */] <0.45848274f ? 
             (Double.isNaN(data[4]) || data[4 /* no_of_macs */] <1.0f ? 
                 (data[9 /* 8_letter_word */] <0.04296875f ? 
                    0.0f : 
                     (data[0 /* vlan */] <17.5f ? 
                        0.96f : 
                        0.0f)) : 
                1.0f) : 
             (data[5 /* 4_letter_word */] <0.5145382f ? 
                 (data[2 /* no_of_characters */] <70.5f ? 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <69.5f ? 
                        1.0f : 
                        0.0f) : 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.078125f ? 
                        4.7296233E-4f : 
                        0.0106929f)) : 
                 (data[2 /* no_of_characters */] <90.5f ? 
                     (data[0 /* vlan */] <17.5f ? 
                        0.93939394f : 
                        0.0f) : 
                     (data[1 /* type_of_time */] <4.5f ? 
                        0.0f : 
                        0.002316765f)))));
    return pred;
  } // constant pool size = 78B, number of visited nodes = 19, static init size = 0B
}

class log_drf_1_Tree_4_class_34 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.123535156f ? 
        0.0f : 
         (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.24023438f ? 
            0.0f : 
             (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <1.5f ? 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.10546875f ? 
                    0.0f : 
                     (data[8 /* 7_letter_word */] <0.1362915f ? 
                        0.125f : 
                        0.0026041667f)) : 
                0.0f)));
    return pred;
  } // constant pool size = 22B, number of visited nodes = 5, static init size = 0B
}

class log_drf_1_Tree_4_class_35 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.8745117f ? 
         (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <2.5f ? 
             (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
                0.0f : 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.87109375f ? 
                     (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.3125f ? 
                        2.3926879E-4f : 
                        9.4428705E-4f) : 
                    0.0010531859f)) : 
            0.0f) : 
         (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
             (data[1 /* type_of_time */] <4.5f ? 
                0.0f : 
                 (data[2 /* no_of_characters */] <90.5f ? 
                     (data[2 /* no_of_characters */] <81.5f ? 
                        0.1f : 
                        0.0f) : 
                    0.0f)) : 
            0.0f));
    return pred;
  } // constant pool size = 38B, number of visited nodes = 9, static init size = 0B
}

class log_drf_1_Tree_4_class_36 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.16015625f ? 
        0.0f : 
         (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.4638672f ? 
            0.0f : 
             (data[5 /* 4_letter_word */] <0.5498699f ? 
                 (data[2 /* no_of_characters */] <130.5f ? 
                     (data[9 /* 8_letter_word */] <0.0859375f ? 
                        0.0f : 
                        1.0f) : 
                     (data[2 /* no_of_characters */] <134.5f ? 
                        0.08571429f : 
                        0.0f)) : 
                0.0f)));
    return pred;
  } // constant pool size = 26B, number of visited nodes = 6, static init size = 0B
}

class log_drf_1_Tree_4_class_37 {
  static final double score0(double[] data) {
    double pred =      (data[1 /* type_of_time */] <4.5f ? 
         (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <2.5f ? 
             (data[1 /* type_of_time */] <3.5f ? 
                 (Double.isNaN(data[12]) || data[12 /* 11_letter_word */] <0.171875f ? 
                     (Double.isNaN(data[1]) || data[1 /* type_of_time */] <2.5f ? 
                        0.9148936f : 
                        0.0f) : 
                    0.0f) : 
                 (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.44921875f ? 
                     (data[8 /* 7_letter_word */] <0.15625f ? 
                        0.9993026f : 
                        0.9980644f) : 
                     (data[5 /* 4_letter_word */] <0.3671875f ? 
                        1.0f : 
                        0.99262536f))) : 
             (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.111328125f ? 
                0.0f : 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <230.5f ? 
                    0.0f : 
                     (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.125f ? 
                        0.029411765f : 
                        0.0f)))) : 
         (data[2 /* no_of_characters */] <83.5f ? 
             (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.1015625f ? 
                 (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.125f ? 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <154.5f ? 
                        0.0f : 
                        0.25071225f) : 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.7470703f ? 
                        0.0f : 
                        0.01058201f)) : 
                0.0f) : 
             (data[5 /* 4_letter_word */] <0.03125f ? 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <154.5f ? 
                     (data[0 /* vlan */] <13.5f ? 
                        0.013888889f : 
                        1.0121799E-4f) : 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.96875f ? 
                        0.041666668f : 
                        0.11111111f)) : 
                0.0f)));
    return pred;
  } // constant pool size = 82B, number of visited nodes = 20, static init size = 0B
}

class log_drf_1_Tree_4_class_38 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.94970703f ? 
        5.3063627E-6f : 
         (data[3 /* no_of_ips */] <1.5f ? 
             (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                0.0f : 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <61.5f ? 
                    0.0f : 
                     (data[1 /* type_of_time */] <4.5f ? 
                        0.0f : 
                        0.023529412f))) : 
            0.0f));
    return pred;
  } // constant pool size = 22B, number of visited nodes = 5, static init size = 0B
}


class log_drf_1_Forest_5 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += log_drf_1_Tree_5_class_0.score0(fdata);
    preds[2] += log_drf_1_Tree_5_class_1.score0(fdata);
    preds[3] += log_drf_1_Tree_5_class_2.score0(fdata);
    preds[4] += log_drf_1_Tree_5_class_3.score0(fdata);
    preds[5] += log_drf_1_Tree_5_class_4.score0(fdata);
    preds[6] += log_drf_1_Tree_5_class_5.score0(fdata);
    preds[7] += log_drf_1_Tree_5_class_6.score0(fdata);
    preds[8] += log_drf_1_Tree_5_class_7.score0(fdata);
    preds[9] += log_drf_1_Tree_5_class_8.score0(fdata);
    preds[10] += log_drf_1_Tree_5_class_9.score0(fdata);
    preds[11] += log_drf_1_Tree_5_class_10.score0(fdata);
    preds[12] += log_drf_1_Tree_5_class_11.score0(fdata);
    preds[13] += log_drf_1_Tree_5_class_12.score0(fdata);
    preds[14] += log_drf_1_Tree_5_class_13.score0(fdata);
    preds[15] += log_drf_1_Tree_5_class_14.score0(fdata);
    preds[16] += log_drf_1_Tree_5_class_15.score0(fdata);
    preds[17] += log_drf_1_Tree_5_class_16.score0(fdata);
    preds[18] += log_drf_1_Tree_5_class_17.score0(fdata);
    preds[19] += log_drf_1_Tree_5_class_18.score0(fdata);
    preds[20] += log_drf_1_Tree_5_class_19.score0(fdata);
    preds[21] += log_drf_1_Tree_5_class_20.score0(fdata);
    preds[22] += log_drf_1_Tree_5_class_21.score0(fdata);
    preds[23] += log_drf_1_Tree_5_class_22.score0(fdata);
    preds[24] += log_drf_1_Tree_5_class_23.score0(fdata);
    preds[25] += log_drf_1_Tree_5_class_24.score0(fdata);
    preds[26] += log_drf_1_Tree_5_class_25.score0(fdata);
    preds[27] += log_drf_1_Tree_5_class_26.score0(fdata);
    preds[28] += log_drf_1_Tree_5_class_27.score0(fdata);
    preds[29] += log_drf_1_Tree_5_class_28.score0(fdata);
    preds[30] += log_drf_1_Tree_5_class_29.score0(fdata);
    preds[31] += log_drf_1_Tree_5_class_30.score0(fdata);
    preds[32] += log_drf_1_Tree_5_class_31.score0(fdata);
    preds[33] += log_drf_1_Tree_5_class_32.score0(fdata);
    preds[34] += log_drf_1_Tree_5_class_33.score0(fdata);
    preds[35] += log_drf_1_Tree_5_class_34.score0(fdata);
    preds[36] += log_drf_1_Tree_5_class_35.score0(fdata);
    preds[37] += log_drf_1_Tree_5_class_36.score0(fdata);
    preds[38] += log_drf_1_Tree_5_class_37.score0(fdata);
    preds[39] += log_drf_1_Tree_5_class_38.score0(fdata);
  }
}
class log_drf_1_Tree_5_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[4]) || data[4 /* no_of_macs */] <2.5f ? 
         (Double.isNaN(data[14]) || data[14 /* 13_letter_word */] <0.0087890625f ? 
             (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.0234375f ? 
                 (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.4921875f ? 
                    0.0f : 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <105.5f ? 
                        0.0f : 
                        1.4077568E-4f)) : 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.15625f ? 
                    0.0f : 
                     (data[7 /* 6_letter_word */] <0.1961263f ? 
                        0.05882353f : 
                        0.0020046777f))) : 
             (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.02734375f ? 
                 (Double.isNaN(data[4]) || data[4 /* no_of_macs */] <0.5f ? 
                    0.0f : 
                    1.0f) : 
                 (data[8 /* 7_letter_word */] <0.11328125f ? 
                    1.0f : 
                     (data[11 /* 10_letter_word */] <0.033003956f ? 
                        0.6666667f : 
                        1.0f)))) : 
        0.2857143f);
    return pred;
  } // constant pool size = 46B, number of visited nodes = 11, static init size = 0B
}

class log_drf_1_Tree_5_class_1 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
        0.0f : 
         (data[3 /* no_of_ips */] <1.5f ? 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <253.0f ? 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.05859375f ? 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.6171875f ? 
                        0.0f : 
                        0.0024255025f) : 
                    0.0f) : 
                 (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.03125f ? 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <364.0f ? 
                        0.9311475f : 
                        0.0f) : 
                     (data[2 /* no_of_characters */] <280.5f ? 
                        1.0f : 
                        0.0f))) : 
            0.0f));
    return pred;
  } // constant pool size = 34B, number of visited nodes = 8, static init size = 0B
}

class log_drf_1_Tree_5_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
         (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
            0.0f : 
             (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.34960938f ? 
                 (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.5703125f ? 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.015625f ? 
                        0.007269532f : 
                        0.0018948838f) : 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.1328125f ? 
                        0.0f : 
                        0.47379455f)) : 
                0.0016977929f)) : 
         (data[3 /* no_of_ips */] <1.5f ? 
             (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.46289062f ? 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <614.5f ? 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <178.5f ? 
                        1.3013209E-4f : 
                        0.12f) : 
                     (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.0859375f ? 
                        0.1f : 
                        1.0f)) : 
                 (data[5 /* 4_letter_word */] <0.37109375f ? 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.0625f ? 
                        0.32994923f : 
                        1.0f) : 
                    0.7631242f)) : 
            0.0f));
    return pred;
  } // constant pool size = 54B, number of visited nodes = 13, static init size = 0B
}

class log_drf_1_Tree_5_class_3 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.3227539f ? 
         (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.24048948f ? 
            1.10699744E-4f : 
             (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.46289062f ? 
                0.0f : 
                 (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.5357895f ? 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <160.5f ? 
                        0.585209f : 
                        0.0f) : 
                    0.0f))) : 
         (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <1.5f ? 
             (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.38671875f ? 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <290.5f ? 
                    0.0f : 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.46031952f ? 
                        0.9580645f : 
                        0.0f)) : 
                 (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.0859375f ? 
                     (data[2 /* no_of_characters */] <140.5f ? 
                        0.0f : 
                        0.8618858f) : 
                    0.0f)) : 
            0.0f));
    return pred;
  } // constant pool size = 46B, number of visited nodes = 11, static init size = 0B
}

class log_drf_1_Tree_5_class_4 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.3227539f ? 
         (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.12197828f ? 
            2.6921161E-5f : 
             (data[6 /* 5_letter_word */] <0.14840338f ? 
                 (data[5 /* 4_letter_word */] <0.265625f ? 
                    0.0f : 
                     (data[0 /* vlan */] <33.5f ? 
                        0.08695652f : 
                        0.0f)) : 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.2421875f ? 
                    0.0f : 
                     (data[7 /* 6_letter_word */] <0.25805664f ? 
                        5.934718E-4f : 
                        0.0f)))) : 
         (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.29101562f ? 
            0.0f : 
             (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.16796875f ? 
                 (data[10 /* 9_letter_word */] <0.41591644f ? 
                     (data[8 /* 7_letter_word */] <0.171875f ? 
                        0.0f : 
                        1.0f) : 
                    0.0f) : 
                0.0f)));
    return pred;
  } // constant pool size = 46B, number of visited nodes = 11, static init size = 0B
}

class log_drf_1_Tree_5_class_5 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.087402344f ? 
         (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
             (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.02734375f ? 
                 (data[8 /* 7_letter_word */] <0.3671875f ? 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.30981445f ? 
                        0.0f : 
                        9.884214E-4f) : 
                    0.0f) : 
                0.0f) : 
            0.0f) : 
         (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.07519531f ? 
             (data[6 /* 5_letter_word */] <0.09096718f ? 
                1.0f : 
                 (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
                    0.0f : 
                     (Double.isNaN(data[12]) || data[12 /* 11_letter_word */] <0.2890625f ? 
                        6.5049715E-4f : 
                        0.09090909f))) : 
             (data[10 /* 9_letter_word */] <0.08017349f ? 
                 (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <1.0f ? 
                    1.0f : 
                    0.0f) : 
                 (data[10 /* 9_letter_word */] <0.15561107f ? 
                     (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.13358894f ? 
                        0.0f : 
                        0.3548387f) : 
                    0.0f))));
    return pred;
  } // constant pool size = 54B, number of visited nodes = 13, static init size = 0B
}

class log_drf_1_Tree_5_class_6 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
         (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
            0.0f : 
             (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.16015625f ? 
                 (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.27734375f ? 
                     (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.1875f ? 
                        0.0011762264f : 
                        0.008759124f) : 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.265625f ? 
                        0.0f : 
                        0.11764706f)) : 
                 (data[2 /* no_of_characters */] <80.5f ? 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.125f ? 
                        0.503268f : 
                        0.0f) : 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <122.5f ? 
                        0.03567703f : 
                        0.0f)))) : 
        0.0f);
    return pred;
  } // constant pool size = 38B, number of visited nodes = 9, static init size = 0B
}

class log_drf_1_Tree_5_class_7 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <1.5f ? 
         (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.028320312f ? 
             (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.02734375f ? 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.0625f ? 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.9296875f ? 
                        0.0f : 
                        0.01609589f) : 
                    0.0f) : 
                0.0f) : 
            0.0f) : 
         (data[3 /* no_of_ips */] <2.5f ? 
             (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.0390625f ? 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <160.5f ? 
                    0.0f : 
                     (data[6 /* 5_letter_word */] <0.1015625f ? 
                        0.44912282f : 
                        0.0f)) : 
                0.0f) : 
            0.0f));
    return pred;
  } // constant pool size = 38B, number of visited nodes = 9, static init size = 0B
}

class log_drf_1_Tree_5_class_8 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <2.5f ? 
         (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <1.5f ? 
             (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.0703125f ? 
                 (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.03125f ? 
                     (data[8 /* 7_letter_word */] <0.1015625f ? 
                        0.0016296598f : 
                        2.9281719E-5f) : 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <958.5f ? 
                        0.0f : 
                        0.030303031f)) : 
                0.0f) : 
             (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.0390625f ? 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <634.5f ? 
                    0.0f : 
                    1.0f) : 
                0.0f)) : 
         (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <5.5f ? 
             (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.5214844f ? 
                 (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.05078125f ? 
                     (data[6 /* 5_letter_word */] <0.3515625f ? 
                        0.003322259f : 
                        6.34652E-4f) : 
                    0.0f) : 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <584.5f ? 
                    0.0f : 
                     (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <3.5f ? 
                        1.0f : 
                        0.78571427f))) : 
            0.0f));
    return pred;
  } // constant pool size = 58B, number of visited nodes = 14, static init size = 0B
}

class log_drf_1_Tree_5_class_9 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <2.5f ? 
         (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <1.5f ? 
            2.9512164E-5f : 
             (data[1 /* type_of_time */] <3.5f ? 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <155.5f ? 
                    1.0f : 
                    0.0f) : 
                0.0f)) : 
         (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.05078125f ? 
             (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.18359375f ? 
                 (data[1 /* type_of_time */] <3.5f ? 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <200.5f ? 
                        1.0f : 
                        0.0f) : 
                    0.0f) : 
                 (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.1015625f ? 
                    0.0f : 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.0625f ? 
                        1.0f : 
                        0.0f))) : 
             (data[6 /* 5_letter_word */] <0.26757812f ? 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <150.5f ? 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.32421875f ? 
                        0.998782f : 
                        1.0f) : 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <98.0f ? 
                        0.0f : 
                        0.9111111f)) : 
                0.0f)));
    return pred;
  } // constant pool size = 58B, number of visited nodes = 14, static init size = 0B
}

class log_drf_1_Tree_5_class_10 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
        7.4042264E-6f : 
         (data[3 /* no_of_ips */] <1.5f ? 
             (data[2 /* no_of_characters */] <95.5f ? 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.125f ? 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.578125f ? 
                        0.0f : 
                        0.71428573f) : 
                    0.0f) : 
                0.0f) : 
            0.0f));
    return pred;
  } // constant pool size = 22B, number of visited nodes = 5, static init size = 0B
}

class log_drf_1_Tree_5_class_11 {
  static final double score0(double[] data) {
    double pred =     5.0E-6f;
    return pred;
  } // constant pool size = 2B, number of visited nodes = 0, static init size = 0B
}

class log_drf_1_Tree_5_class_12 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
        0.0f : 
         (data[6 /* 5_letter_word */] <0.028320312f ? 
             (data[3 /* no_of_ips */] <1.5f ? 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <415.5f ? 
                    0.0f : 
                     (data[7 /* 6_letter_word */] <0.25f ? 
                        0.0f : 
                        0.9230769f)) : 
                0.0f) : 
            0.0f));
    return pred;
  } // constant pool size = 22B, number of visited nodes = 5, static init size = 0B
}

class log_drf_1_Tree_5_class_13 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
         (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
            0.0f : 
             (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.25976562f ? 
                 (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.265625f ? 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.19299316f ? 
                        0.0143125f : 
                        0.06635802f) : 
                    0.0f) : 
                 (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.03515625f ? 
                     (data[6 /* 5_letter_word */] <0.9710846f ? 
                        8.691873E-4f : 
                        0.0045856535f) : 
                    0.0f))) : 
         (data[3 /* no_of_ips */] <1.5f ? 
             (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.18359375f ? 
                 (data[2 /* no_of_characters */] <60.5f ? 
                    0.017857144f : 
                    0.0f) : 
                 (data[10 /* 9_letter_word */] <0.22505188f ? 
                     (data[6 /* 5_letter_word */] <0.203125f ? 
                        0.023809524f : 
                        0.0f) : 
                    0.0f)) : 
            0.0f));
    return pred;
  } // constant pool size = 50B, number of visited nodes = 12, static init size = 0B
}

class log_drf_1_Tree_5_class_14 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.20703125f ? 
         (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <215.5f ? 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.18359375f ? 
                    0.0f : 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.1828125f ? 
                        0.0f : 
                        0.012f)) : 
                 (data[1 /* type_of_time */] <2.5f ? 
                     (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.1015625f ? 
                        0.0f : 
                        1.0f) : 
                    0.0f)) : 
            0.0f) : 
        0.0f);
    return pred;
  } // constant pool size = 30B, number of visited nodes = 7, static init size = 0B
}

class log_drf_1_Tree_5_class_15 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <1.5f ? 
         (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.20703125f ? 
             (Double.isNaN(data[15]) || data[15 /* 14_letter_word */] <0.10546875f ? 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.6328125f ? 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.4375f ? 
                        0.002698957f : 
                        2.8842193E-4f) : 
                     (data[7 /* 6_letter_word */] <0.70739746f ? 
                        0.24234694f : 
                        0.00892326f)) : 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.421875f ? 
                     (data[8 /* 7_letter_word */] <0.29003906f ? 
                        0.04347826f : 
                        0.0f) : 
                     (data[5 /* 4_letter_word */] <0.1953125f ? 
                        0.0f : 
                        0.09677419f))) : 
             (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.22460938f ? 
                 (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.03125f ? 
                     (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
                        0.0f : 
                        0.0038147715f) : 
                    0.0f) : 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.43359375f ? 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <120.5f ? 
                        0.0f : 
                        0.041666668f) : 
                    1.0f))) : 
         (data[3 /* no_of_ips */] <2.5f ? 
             (data[2 /* no_of_characters */] <100.5f ? 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.25f ? 
                     (data[5 /* 4_letter_word */] <0.7421875f ? 
                        0.0f : 
                        0.20795569f) : 
                    0.0f) : 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.546875f ? 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.1875f ? 
                        3.144654E-4f : 
                        0.0036452005f) : 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.1015625f ? 
                        0.0875f : 
                        1.0f))) : 
             (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.46289062f ? 
                0.0f : 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <170.5f ? 
                    0.0f : 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.1015625f ? 
                        0.0015576323f : 
                        0.0f)))));
    return pred;
  } // constant pool size = 98B, number of visited nodes = 24, static init size = 0B
}

class log_drf_1_Tree_5_class_16 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
         (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
            0.0f : 
             (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.013671875f ? 
                 (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.34765625f ? 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.31777954f ? 
                        5.4790766E-4f : 
                        0.006482982f) : 
                    0.0f) : 
                 (data[2 /* no_of_characters */] <90.5f ? 
                     (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.25f ? 
                        4.4782803E-4f : 
                        0.0f) : 
                    0.0f))) : 
        0.0f);
    return pred;
  } // constant pool size = 30B, number of visited nodes = 7, static init size = 0B
}

class log_drf_1_Tree_5_class_17 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <3.5f ? 
         (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.12109375f ? 
             (Double.isNaN(data[14]) || data[14 /* 13_letter_word */] <0.044921875f ? 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.03515625f ? 
                     (data[8 /* 7_letter_word */] <0.0625f ? 
                        0.006614129f : 
                        0.0f) : 
                    0.0f) : 
                 (data[5 /* 4_letter_word */] <0.46875f ? 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <530.0f ? 
                        0.0f : 
                        1.0f) : 
                    0.0f)) : 
            0.0f) : 
         (data[3 /* no_of_ips */] <4.5f ? 
             (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.125f ? 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <754.0f ? 
                    0.0f : 
                     (data[2 /* no_of_characters */] <1017.5f ? 
                        1.0f : 
                        0.9726027f)) : 
                0.0f) : 
            0.0f));
    return pred;
  } // constant pool size = 46B, number of visited nodes = 11, static init size = 0B
}

class log_drf_1_Tree_5_class_18 {
  static final double score0(double[] data) {
    double pred =     5.0E-6f;
    return pred;
  } // constant pool size = 2B, number of visited nodes = 0, static init size = 0B
}

class log_drf_1_Tree_5_class_19 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
        0.0f : 
         (data[6 /* 5_letter_word */] <0.028320312f ? 
             (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.22460938f ? 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.171875f ? 
                    0.0f : 
                     (data[8 /* 7_letter_word */] <0.23010254f ? 
                        0.010638298f : 
                        0.0f)) : 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.125f ? 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <140.5f ? 
                        0.757858f : 
                        0.003787879f) : 
                    0.0f)) : 
            0.0f));
    return pred;
  } // constant pool size = 30B, number of visited nodes = 7, static init size = 0B
}

class log_drf_1_Tree_5_class_20 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
         (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
            0.0f : 
             (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.53515625f ? 
                 (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.3671875f ? 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <33.5f ? 
                        0.7913666f : 
                        0.0f) : 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.25f ? 
                        0.97632575f : 
                        0.02631579f)) : 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.2890625f ? 
                     (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.0390625f ? 
                        0.98364335f : 
                        0.5f) : 
                    0.0f))) : 
         (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.10546875f ? 
             (data[1 /* type_of_time */] <4.5f ? 
                0.0f : 
                 (data[5 /* 4_letter_word */] <0.03125f ? 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.828125f ? 
                        0.04361522f : 
                        1.0f) : 
                     (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.07457387f ? 
                        0.0036822194f : 
                        0.2f))) : 
             (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.056640625f ? 
                 (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.16796875f ? 
                    0.0f : 
                    1.0f) : 
                 (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.15625f ? 
                     (data[8 /* 7_letter_word */] <0.203125f ? 
                        0.010989011f : 
                        0.9317507f) : 
                     (data[3 /* no_of_ips */] <2.5f ? 
                        0.07848101f : 
                        0.0021459227f)))));
    return pred;
  } // constant pool size = 74B, number of visited nodes = 18, static init size = 0B
}

class log_drf_1_Tree_5_class_21 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.1484375f ? 
         (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.105529785f ? 
             (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.18359375f ? 
                 (Double.isNaN(data[12]) || data[12 /* 11_letter_word */] <0.22265625f ? 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.1796875f ? 
                        0.0017538576f : 
                        0.0050509376f) : 
                     (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.125f ? 
                        0.0f : 
                        0.98717946f)) : 
                0.0f) : 
             (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.18164062f ? 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.73828125f ? 
                     (Double.isNaN(data[14]) || data[14 /* 13_letter_word */] <0.015625f ? 
                        0.0032258064f : 
                        0.0f) : 
                    0.40816328f) : 
                 (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <1.5f ? 
                    1.0f : 
                    0.0f))) : 
         (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <1.5f ? 
             (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.029296875f ? 
                5.29529E-4f : 
                0.0f) : 
            0.0f));
    return pred;
  } // constant pool size = 50B, number of visited nodes = 12, static init size = 0B
}

class log_drf_1_Tree_5_class_22 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.3227539f ? 
        2.61991E-5f : 
         (data[3 /* no_of_ips */] <0.5f ? 
             (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.625f ? 
                0.0f : 
                 (data[1 /* type_of_time */] <4.5f ? 
                    0.0f : 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <33.5f ? 
                        0.038961038f : 
                        0.0f))) : 
            0.0f));
    return pred;
  } // constant pool size = 22B, number of visited nodes = 5, static init size = 0B
}

class log_drf_1_Tree_5_class_23 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.1484375f ? 
         (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
             (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.58203125f ? 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <250.5f ? 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.44921875f ? 
                        1.0860829E-4f : 
                        0.002859371f) : 
                     (data[0 /* vlan */] <17.5f ? 
                        0.9005425f : 
                        0.0f)) : 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <17.5f ? 
                     (data[1 /* type_of_time */] <3.5f ? 
                        0.0f : 
                        0.99660856f) : 
                    0.0f)) : 
             (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.13392857f ? 
                0.0f : 
                 (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.07421875f ? 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.1484375f ? 
                        0.15183246f : 
                        0.0f) : 
                    0.0f))) : 
         (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.15527344f ? 
             (Double.isNaN(data[13]) || data[13 /* 12_letter_word */] <0.20703125f ? 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.68847656f ? 
                     (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                        0.0f : 
                        1.4731157E-4f) : 
                     (data[0 /* vlan */] <17.5f ? 
                        1.0f : 
                        0.0f)) : 
                 (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.125f ? 
                    0.625f : 
                    0.0f)) : 
             (Double.isNaN(data[12]) || data[12 /* 11_letter_word */] <0.046875f ? 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.2890625f ? 
                    0.0f : 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <17.5f ? 
                        0.17948718f : 
                        0.0f)) : 
                 (data[13 /* 12_letter_word */] <0.046875f ? 
                    0.0f : 
                    1.0f))));
    return pred;
  } // constant pool size = 86B, number of visited nodes = 21, static init size = 0B
}

class log_drf_1_Tree_5_class_24 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.9746094f ? 
        0.0f : 
         (data[3 /* no_of_ips */] <0.5f ? 
            0.0f : 
            1.7232465E-4f));
    return pred;
  } // constant pool size = 10B, number of visited nodes = 2, static init size = 0B
}

class log_drf_1_Tree_5_class_25 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <1.5f ? 
         (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
             (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.10546875f ? 
                 (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.4609375f ? 
                     (data[8 /* 7_letter_word */] <0.2578125f ? 
                        0.03583765f : 
                        0.001217419f) : 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.0390625f ? 
                        0.06328334f : 
                        0.0f)) : 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <33.5f ? 
                     (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.234375f ? 
                        9.651179E-4f : 
                        0.048109967f) : 
                     (data[0 /* vlan */] <59.5f ? 
                        0.9741774f : 
                        0.0f))) : 
             (data[1 /* type_of_time */] <4.5f ? 
                0.0f : 
                 (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.0625f ? 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.03125f ? 
                        0.6926682f : 
                        0.03713927f) : 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.1015625f ? 
                        0.063424945f : 
                        0.0f)))) : 
         (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <5.5f ? 
             (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.056640625f ? 
                 (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.1015625f ? 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <81.5f ? 
                        0.9996702f : 
                        0.010714286f) : 
                     (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.1015625f ? 
                        0.99760574f : 
                        0.0038910506f)) : 
                 (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.0390625f ? 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <180.5f ? 
                        0.8076728f : 
                        0.19306283f) : 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.28645834f ? 
                        0.046938777f : 
                        0.9965157f))) : 
             (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <6.5f ? 
                0.0f : 
                1.0f)));
    return pred;
  } // constant pool size = 90B, number of visited nodes = 22, static init size = 0B
}

class log_drf_1_Tree_5_class_26 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.027832031f ? 
         (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
             (data[2 /* no_of_characters */] <60.5f ? 
                 (data[5 /* 4_letter_word */] <0.3359375f ? 
                    0.0f : 
                     (data[2 /* no_of_characters */] <55.5f ? 
                        1.0f : 
                        0.99502486f)) : 
                0.0f) : 
            0.0f) : 
        0.0f);
    return pred;
  } // constant pool size = 22B, number of visited nodes = 5, static init size = 0B
}

class log_drf_1_Tree_5_class_27 {
  static final double score0(double[] data) {
    double pred =     1.0E-5f;
    return pred;
  } // constant pool size = 2B, number of visited nodes = 0, static init size = 0B
}

class log_drf_1_Tree_5_class_28 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <5.5f ? 
         (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <3.5f ? 
            0.0f : 
             (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.1328125f ? 
                0.0f : 
                 (data[7 /* 6_letter_word */] <0.16796875f ? 
                    0.0f : 
                    1.0f))) : 
         (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <6.5f ? 
            1.0f : 
            0.0f));
    return pred;
  } // constant pool size = 22B, number of visited nodes = 5, static init size = 0B
}

class log_drf_1_Tree_5_class_29 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[14]) || data[14 /* 13_letter_word */] <0.0063476562f ? 
         (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.19238281f ? 
             (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.1859951f ? 
                 (data[8 /* 7_letter_word */] <0.04296875f ? 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.11479385f ? 
                        7.2351046E-5f : 
                        0.002218935f) : 
                    0.0f) : 
                0.2f) : 
            0.0f) : 
        4.5228403E-4f);
    return pred;
  } // constant pool size = 22B, number of visited nodes = 5, static init size = 0B
}

class log_drf_1_Tree_5_class_30 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <2.5f ? 
         (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <1.5f ? 
            0.0f : 
             (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.24023438f ? 
                 (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.23828125f ? 
                    0.0f : 
                     (data[6 /* 5_letter_word */] <0.26208496f ? 
                        0.14285715f : 
                        0.0f)) : 
                 (data[7 /* 6_letter_word */] <0.26100922f ? 
                     (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.125f ? 
                        0.0f : 
                        1.0f) : 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.2890625f ? 
                        0.0f : 
                        0.029411765f)))) : 
         (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <3.5f ? 
             (data[1 /* type_of_time */] <2.0f ? 
                1.0f : 
                0.0f) : 
            0.0f));
    return pred;
  } // constant pool size = 42B, number of visited nodes = 10, static init size = 0B
}

class log_drf_1_Tree_5_class_31 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.1484375f ? 
         (Double.isNaN(data[13]) || data[13 /* 12_letter_word */] <0.23535156f ? 
             (Double.isNaN(data[15]) || data[15 /* 14_letter_word */] <0.15527344f ? 
                 (data[1 /* type_of_time */] <4.5f ? 
                    0.0f : 
                     (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.3125f ? 
                        0.0177779f : 
                        0.18022528f)) : 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.22265625f ? 
                     (Double.isNaN(data[15]) || data[15 /* 14_letter_word */] <0.41651154f ? 
                        1.0f : 
                        0.0f) : 
                    0.875f)) : 
             (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.125f ? 
                 (data[0 /* vlan */] <126.0f ? 
                     (data[7 /* 6_letter_word */] <0.390625f ? 
                        0.0f : 
                        0.9423077f) : 
                    0.0f) : 
                1.0f)) : 
         (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
             (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.3164215f ? 
                0.0f : 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.3671875f ? 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.578125f ? 
                        0.0050424878f : 
                        0.5f) : 
                     (data[0 /* vlan */] <130.0f ? 
                        0.5106383f : 
                        0.0f))) : 
             (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.3203125f ? 
                0.0f : 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.05078125f ? 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.2109375f ? 
                        0.0f : 
                        0.0058365758f) : 
                    0.0f))));
    return pred;
  } // constant pool size = 74B, number of visited nodes = 18, static init size = 0B
}

class log_drf_1_Tree_5_class_32 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
         (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
            0.0f : 
             (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.03125f ? 
                 (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.05859375f ? 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.0546875f ? 
                        0.004052936f : 
                        0.0f) : 
                    0.0f) : 
                0.0f)) : 
         (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.18359375f ? 
             (data[1 /* type_of_time */] <4.5f ? 
                0.0f : 
                 (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.22265625f ? 
                    0.0f : 
                     (data[3 /* no_of_ips */] <1.5f ? 
                        0.06206089f : 
                        0.0f))) : 
             (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.22460938f ? 
                 (data[3 /* no_of_ips */] <1.5f ? 
                     (data[11 /* 10_letter_word */] <0.171875f ? 
                        0.7372881f : 
                        0.0f) : 
                    0.0f) : 
                0.0f)));
    return pred;
  } // constant pool size = 50B, number of visited nodes = 12, static init size = 0B
}

class log_drf_1_Tree_5_class_33 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.1743164f ? 
         (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.08000851f ? 
             (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.015625f ? 
                 (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.46875f ? 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.4453125f ? 
                        2.1408692E-4f : 
                        0.001972819f) : 
                     (data[5 /* 4_letter_word */] <0.53515625f ? 
                        0.010139527f : 
                        0.0022368422f)) : 
                0.0f) : 
             (data[6 /* 5_letter_word */] <0.0918563f ? 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.13671875f ? 
                     (data[8 /* 7_letter_word */] <0.09375f ? 
                        0.0f : 
                        1.0f) : 
                    0.0f) : 
                 (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                    0.0f : 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.041666668f ? 
                        0.003003003f : 
                        0.16230367f)))) : 
         (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <1.5f ? 
             (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.31054688f ? 
                 (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.0234375f ? 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.22563171f ? 
                        8.0429815E-4f : 
                        0.006430868f) : 
                    0.0f) : 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.0859375f ? 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.2890625f ? 
                        0.0052173915f : 
                        1.0f) : 
                    0.0f)) : 
            0.0f));
    return pred;
  } // constant pool size = 70B, number of visited nodes = 17, static init size = 0B
}

class log_drf_1_Tree_5_class_34 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.12158203f ? 
        0.0f : 
         (data[6 /* 5_letter_word */] <0.12758684f ? 
             (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.0625f ? 
                0.0f : 
                0.33333334f) : 
             (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.15429688f ? 
                0.0f : 
                 (data[10 /* 9_letter_word */] <0.17455292f ? 
                     (data[5 /* 4_letter_word */] <0.25f ? 
                        0.0f : 
                        0.015384615f) : 
                    0.0f))));
    return pred;
  } // constant pool size = 26B, number of visited nodes = 6, static init size = 0B
}

class log_drf_1_Tree_5_class_35 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <2.5f ? 
         (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.53515625f ? 
             (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.234375f ? 
                1.07061795E-4f : 
                 (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.41600037f ? 
                     (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.3121338f ? 
                        0.0f : 
                        4.5228403E-4f) : 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.12890625f ? 
                        0.0f : 
                        0.6666667f))) : 
            0.0f) : 
        0.0f);
    return pred;
  } // constant pool size = 26B, number of visited nodes = 6, static init size = 0B
}

class log_drf_1_Tree_5_class_36 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.027832031f ? 
         (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
             (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.15429688f ? 
                0.0f : 
                 (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.46875f ? 
                    0.0f : 
                     (data[9 /* 8_letter_word */] <0.1807251f ? 
                        0.04519774f : 
                        0.0f))) : 
            0.0f) : 
        0.0f);
    return pred;
  } // constant pool size = 22B, number of visited nodes = 5, static init size = 0B
}

class log_drf_1_Tree_5_class_37 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
         (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
             (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.18359375f ? 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <260.5f ? 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <237.5f ? 
                        0.99864554f : 
                        0.99538845f) : 
                     (data[5 /* 4_letter_word */] <0.265625f ? 
                        0.9799789f : 
                        0.9991909f)) : 
                 (Double.isNaN(data[12]) || data[12 /* 11_letter_word */] <0.1015625f ? 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.1796875f ? 
                        1.0f : 
                        0.9892966f) : 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <130.0f ? 
                        0.0f : 
                        1.0f))) : 
             (data[2 /* no_of_characters */] <48.0f ? 
                 (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.125f ? 
                    0.112280704f : 
                    0.0f) : 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.04296875f ? 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <154.5f ? 
                        0.0f : 
                        0.26530612f) : 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.234375f ? 
                        0.0f : 
                        6.914036E-4f)))) : 
         (data[3 /* no_of_ips */] <1.5f ? 
             (data[2 /* no_of_characters */] <115.5f ? 
                 (data[6 /* 5_letter_word */] <0.74609375f ? 
                    0.0f : 
                    1.0f) : 
                 (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.18359375f ? 
                     (data[1 /* type_of_time */] <4.5f ? 
                        0.47368422f : 
                        0.0f) : 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.21875f ? 
                        0.0041208793f : 
                        0.625f))) : 
             (data[3 /* no_of_ips */] <2.5f ? 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.18359375f ? 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <280.5f ? 
                        0.0f : 
                        0.12f) : 
                     (data[1 /* type_of_time */] <4.5f ? 
                        0.95238096f : 
                        0.0f)) : 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.109375f ? 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.4609375f ? 
                        0.0f : 
                        2.5634453E-4f) : 
                     (data[8 /* 7_letter_word */] <0.15808105f ? 
                        0.0625f : 
                        0.0f)))));
    return pred;
  } // constant pool size = 110B, number of visited nodes = 27, static init size = 0B
}

class log_drf_1_Tree_5_class_38 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.027832031f ? 
         (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
            0.0f : 
             (data[2 /* no_of_characters */] <90.5f ? 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.125f ? 
                     (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.25f ? 
                        0.0020855058f : 
                        0.0f) : 
                    0.0f) : 
                0.0f)) : 
        0.0f);
    return pred;
  } // constant pool size = 22B, number of visited nodes = 5, static init size = 0B
}


class log_drf_1_Forest_6 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += log_drf_1_Tree_6_class_0.score0(fdata);
    preds[2] += log_drf_1_Tree_6_class_1.score0(fdata);
    preds[3] += log_drf_1_Tree_6_class_2.score0(fdata);
    preds[4] += log_drf_1_Tree_6_class_3.score0(fdata);
    preds[5] += log_drf_1_Tree_6_class_4.score0(fdata);
    preds[6] += log_drf_1_Tree_6_class_5.score0(fdata);
    preds[7] += log_drf_1_Tree_6_class_6.score0(fdata);
    preds[8] += log_drf_1_Tree_6_class_7.score0(fdata);
    preds[9] += log_drf_1_Tree_6_class_8.score0(fdata);
    preds[10] += log_drf_1_Tree_6_class_9.score0(fdata);
    preds[11] += log_drf_1_Tree_6_class_10.score0(fdata);
    preds[12] += log_drf_1_Tree_6_class_11.score0(fdata);
    preds[13] += log_drf_1_Tree_6_class_12.score0(fdata);
    preds[14] += log_drf_1_Tree_6_class_13.score0(fdata);
    preds[15] += log_drf_1_Tree_6_class_14.score0(fdata);
    preds[16] += log_drf_1_Tree_6_class_15.score0(fdata);
    preds[17] += log_drf_1_Tree_6_class_16.score0(fdata);
    preds[18] += log_drf_1_Tree_6_class_17.score0(fdata);
    preds[19] += log_drf_1_Tree_6_class_18.score0(fdata);
    preds[20] += log_drf_1_Tree_6_class_19.score0(fdata);
    preds[21] += log_drf_1_Tree_6_class_20.score0(fdata);
    preds[22] += log_drf_1_Tree_6_class_21.score0(fdata);
    preds[23] += log_drf_1_Tree_6_class_22.score0(fdata);
    preds[24] += log_drf_1_Tree_6_class_23.score0(fdata);
    preds[25] += log_drf_1_Tree_6_class_24.score0(fdata);
    preds[26] += log_drf_1_Tree_6_class_25.score0(fdata);
    preds[27] += log_drf_1_Tree_6_class_26.score0(fdata);
    preds[28] += log_drf_1_Tree_6_class_27.score0(fdata);
    preds[29] += log_drf_1_Tree_6_class_28.score0(fdata);
    preds[30] += log_drf_1_Tree_6_class_29.score0(fdata);
    preds[31] += log_drf_1_Tree_6_class_30.score0(fdata);
    preds[32] += log_drf_1_Tree_6_class_31.score0(fdata);
    preds[33] += log_drf_1_Tree_6_class_32.score0(fdata);
    preds[34] += log_drf_1_Tree_6_class_33.score0(fdata);
    preds[35] += log_drf_1_Tree_6_class_34.score0(fdata);
    preds[36] += log_drf_1_Tree_6_class_35.score0(fdata);
    preds[37] += log_drf_1_Tree_6_class_36.score0(fdata);
    preds[38] += log_drf_1_Tree_6_class_37.score0(fdata);
    preds[39] += log_drf_1_Tree_6_class_38.score0(fdata);
  }
}
class log_drf_1_Tree_6_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <1040.0f ? 
         (Double.isNaN(data[12]) || data[12 /* 11_letter_word */] <0.017578125f ? 
             (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.087890625f ? 
                 (Double.isNaN(data[4]) || data[4 /* no_of_macs */] <0.5f ? 
                    0.0f : 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.3671875f ? 
                        0.0f : 
                        0.6f)) : 
                 (Double.isNaN(data[13]) || data[13 /* 12_letter_word */] <0.01171875f ? 
                     (data[9 /* 8_letter_word */] <0.13064575f ? 
                        0.032520324f : 
                        1.759015E-4f) : 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.0390625f ? 
                        0.0f : 
                        0.25f))) : 
             (Double.isNaN(data[15]) || data[15 /* 14_letter_word */] <0.013671875f ? 
                 (data[12 /* 11_letter_word */] <0.040603638f ? 
                     (data[4 /* no_of_macs */] <0.5f ? 
                        0.0f : 
                        1.0f) : 
                    0.0f) : 
                0.6666667f)) : 
        0.84615386f);
    return pred;
  } // constant pool size = 46B, number of visited nodes = 11, static init size = 0B
}

class log_drf_1_Tree_6_class_1 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <261.5f ? 
         (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.7080078f ? 
             (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                0.0f : 
                 (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.15487671f ? 
                    0.0f : 
                     (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.0625f ? 
                        8.7126985E-4f : 
                        0.0f))) : 
             (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
                0.0f : 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <181.5f ? 
                     (data[6 /* 5_letter_word */] <0.7924118f ? 
                        0.04761905f : 
                        0.0f) : 
                     (data[8 /* 7_letter_word */] <0.125f ? 
                        0.0f : 
                        1.0f)))) : 
         (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.31640625f ? 
             (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.140625f ? 
                0.0f : 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.26820374f ? 
                    0.0f : 
                    0.4f)) : 
             (data[0 /* vlan */] <155.5f ? 
                 (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <1.5f ? 
                     (data[6 /* 5_letter_word */] <0.15625f ? 
                        0.0f : 
                        0.989726f) : 
                    0.0f) : 
                0.0f)));
    return pred;
  } // constant pool size = 62B, number of visited nodes = 15, static init size = 0B
}

class log_drf_1_Tree_6_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.47216797f ? 
         (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.13371944f ? 
             (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.19140625f ? 
                0.0f : 
                 (data[6 /* 5_letter_word */] <0.2109375f ? 
                     (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.07421875f ? 
                        1.137139E-4f : 
                        0.0f) : 
                    0.0f)) : 
             (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.5859375f ? 
                 (Double.isNaN(data[13]) || data[13 /* 12_letter_word */] <0.052734375f ? 
                     (data[7 /* 6_letter_word */] <0.15313976f ? 
                        0.028735632f : 
                        0.003669839f) : 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.2890625f ? 
                        0.006666667f : 
                        0.75f)) : 
                 (data[7 /* 6_letter_word */] <0.18348399f ? 
                     (data[0 /* vlan */] <81.5f ? 
                        0.0f : 
                        1.0f) : 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.38646775f ? 
                        0.19078948f : 
                        0.9298246f)))) : 
         (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.12109375f ? 
             (data[2 /* no_of_characters */] <140.5f ? 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.6328125f ? 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <113.5f ? 
                        0.0f : 
                        0.14285715f) : 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <139.0f ? 
                        0.032307692f : 
                        0.6666667f)) : 
                 (data[3 /* no_of_ips */] <1.5f ? 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <168.5f ? 
                        0.70772445f : 
                        0.0033670033f) : 
                    0.0f)) : 
             (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.125f ? 
                 (data[1 /* type_of_time */] <4.5f ? 
                    0.0f : 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <162.5f ? 
                        0.00152207f : 
                        1.0f)) : 
                0.0f)));
    return pred;
  } // constant pool size = 90B, number of visited nodes = 22, static init size = 0B
}

class log_drf_1_Tree_6_class_3 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* no_of_characters */] <158.5f ? 
         (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.3095703f ? 
             (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                0.0f : 
                 (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.22492218f ? 
                     (data[1 /* type_of_time */] <4.5f ? 
                        0.04494382f : 
                        0.0f) : 
                     (data[10 /* 9_letter_word */] <0.125f ? 
                        0.0f : 
                        0.1884058f))) : 
             (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.3671875f ? 
                0.0f : 
                 (data[6 /* 5_letter_word */] <0.44981384f ? 
                     (data[3 /* no_of_ips */] <0.5f ? 
                        0.0f : 
                        0.99642646f) : 
                     (data[3 /* no_of_ips */] <0.5f ? 
                        0.0f : 
                        0.96002424f)))) : 
         (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.119140625f ? 
             (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.19140625f ? 
                 (data[8 /* 7_letter_word */] <0.015625f ? 
                     (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                        0.0f : 
                        4.5620438E-4f) : 
                    0.0f) : 
                 (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                    0.0f : 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.3671875f ? 
                        0.0f : 
                        1.0f))) : 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <29.5f ? 
                 (data[7 /* 6_letter_word */] <0.1535492f ? 
                     (data[0 /* vlan */] <28.5f ? 
                        0.0f : 
                        1.0f) : 
                    1.2955046E-4f) : 
                0.0f)));
    return pred;
  } // constant pool size = 78B, number of visited nodes = 19, static init size = 0B
}

class log_drf_1_Tree_6_class_4 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* no_of_characters */] <113.5f ? 
         (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.29101562f ? 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <29.5f ? 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.4140625f ? 
                    0.0f : 
                     (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                        0.0029411765f : 
                        0.0f)) : 
                0.0f) : 
             (Double.isNaN(data[13]) || data[13 /* 12_letter_word */] <0.16796875f ? 
                 (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.16796875f ? 
                    0.0f : 
                     (data[2 /* no_of_characters */] <108.5f ? 
                        0.0f : 
                        0.9411765f)) : 
                0.0f)) : 
         (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.4140625f ? 
             (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.31054688f ? 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.24423218f ? 
                    0.0f : 
                     (data[7 /* 6_letter_word */] <0.26126927f ? 
                        4.3215213E-4f : 
                        0.0f)) : 
                 (data[3 /* no_of_ips */] <0.5f ? 
                     (data[5 /* 4_letter_word */] <0.078125f ? 
                        0.042857144f : 
                        0.0f) : 
                    0.0f)) : 
             (data[0 /* vlan */] <29.5f ? 
                 (data[7 /* 6_letter_word */] <0.4644165f ? 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <24.5f ? 
                        0.0f : 
                        1.0f) : 
                    0.0f) : 
                0.0f)));
    return pred;
  } // constant pool size = 70B, number of visited nodes = 17, static init size = 0B
}

class log_drf_1_Tree_6_class_5 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.095703125f ? 
         (Double.isNaN(data[12]) || data[12 /* 11_letter_word */] <0.29101562f ? 
             (data[0 /* vlan */] <85.5f ? 
                 (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.2578125f ? 
                     (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.046875f ? 
                        5.7670125E-4f : 
                        0.0f) : 
                    0.0f) : 
                0.0f) : 
             (data[5 /* 4_letter_word */] <0.41601562f ? 
                 (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.16796875f ? 
                    0.0f : 
                     (data[6 /* 5_letter_word */] <0.4143982f ? 
                        0.5f : 
                        0.0f)) : 
                0.0f)) : 
         (data[7 /* 6_letter_word */] <0.2334671f ? 
             (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.21679688f ? 
                 (data[8 /* 7_letter_word */] <0.27864584f ? 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.26123047f ? 
                        0.007874016f : 
                        1.0f) : 
                    0.0f) : 
                 (data[9 /* 8_letter_word */] <0.2404129f ? 
                    1.0f : 
                    0.0f)) : 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <81.5f ? 
                 (data[7 /* 6_letter_word */] <0.26041552f ? 
                     (data[6 /* 5_letter_word */] <0.0625f ? 
                        7.082153E-4f : 
                        0.0f) : 
                    0.0f) : 
                 (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
                    0.0f : 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.21875f ? 
                        0.0f : 
                        0.053097345f)))));
    return pred;
  } // constant pool size = 74B, number of visited nodes = 18, static init size = 0B
}

class log_drf_1_Tree_6_class_6 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* no_of_characters */] <98.5f ? 
         (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.10058594f ? 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <109.5f ? 
                 (data[0 /* vlan */] <18.5f ? 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.828125f ? 
                        0.06716418f : 
                        0.6666667f) : 
                     (data[2 /* no_of_characters */] <30.5f ? 
                        1.0f : 
                        0.0f)) : 
                 (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.5f ? 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.171875f ? 
                        0.0f : 
                        0.9856115f) : 
                    0.0f)) : 
             (data[5 /* 4_letter_word */] <0.125f ? 
                 (Double.isNaN(data[13]) || data[13 /* 12_letter_word */] <0.16796875f ? 
                     (data[0 /* vlan */] <17.5f ? 
                        0.5f : 
                        0.0f) : 
                    0.0f) : 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.4167862f ? 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <113.5f ? 
                        0.26666668f : 
                        0.8888889f) : 
                    0.0f))) : 
         (data[8 /* 7_letter_word */] <0.2607422f ? 
             (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.16210938f ? 
                0.0f : 
                 (data[9 /* 8_letter_word */] <0.17520142f ? 
                     (data[6 /* 5_letter_word */] <0.25f ? 
                        0.09917355f : 
                        0.0f) : 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.4609375f ? 
                        0.0f : 
                        0.019054879f))) : 
            0.0f));
    return pred;
  } // constant pool size = 74B, number of visited nodes = 18, static init size = 0B
}

class log_drf_1_Tree_6_class_7 {
  static final double score0(double[] data) {
    double pred =      (data[8 /* 7_letter_word */] <0.012207031f ? 
         (data[6 /* 5_letter_word */] <0.041992188f ? 
             (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.072265625f ? 
                 (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <1.5f ? 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.078125f ? 
                        0.0033835743f : 
                        0.0f) : 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <160.5f ? 
                        0.0f : 
                        0.14891042f)) : 
                0.0f) : 
            0.0f) : 
        0.0f);
    return pred;
  } // constant pool size = 26B, number of visited nodes = 6, static init size = 0B
}

class log_drf_1_Tree_6_class_8 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <900.5f ? 
         (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.028320312f ? 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <173.5f ? 
                0.0f : 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <187.5f ? 
                     (data[3 /* no_of_ips */] <0.5f ? 
                        0.010507881f : 
                        0.0f) : 
                    0.0f)) : 
            0.0f) : 
         (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.171875f ? 
             (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.5371094f ? 
                 (data[5 /* 4_letter_word */] <0.16784668f ? 
                     (data[3 /* no_of_ips */] <3.0f ? 
                        0.9714286f : 
                        0.023809524f) : 
                     (data[2 /* no_of_characters */] <949.5f ? 
                        1.0f : 
                        0.014285714f)) : 
                 (data[6 /* 5_letter_word */] <0.19921875f ? 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <154.5f ? 
                        0.0f : 
                        0.33333334f) : 
                     (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <3.5f ? 
                        1.0f : 
                        0.78571427f))) : 
             (data[5 /* 4_letter_word */] <0.03125f ? 
                 (data[7 /* 6_letter_word */] <0.41448975f ? 
                    0.0f : 
                    0.25f) : 
                0.0f)));
    return pred;
  } // constant pool size = 62B, number of visited nodes = 15, static init size = 0B
}

class log_drf_1_Tree_6_class_9 {
  static final double score0(double[] data) {
    double pred =      (data[8 /* 7_letter_word */] <0.20703125f ? 
         (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.095703125f ? 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <161.5f ? 
                0.0f : 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.22265625f ? 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.027832031f ? 
                        0.030232558f : 
                        0.0051282053f) : 
                     (data[1 /* type_of_time */] <3.5f ? 
                        1.0f : 
                        0.0f))) : 
             (data[1 /* type_of_time */] <3.5f ? 
                0.9716599f : 
                0.0f)) : 
         (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.3095703f ? 
             (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.056640625f ? 
                 (data[8 /* 7_letter_word */] <0.5503472f ? 
                     (data[9 /* 8_letter_word */] <0.072916664f ? 
                        0.020640144f : 
                        5.042017E-4f) : 
                    0.0f) : 
                0.0f) : 
             (data[1 /* type_of_time */] <3.5f ? 
                 (data[11 /* 10_letter_word */] <0.16666667f ? 
                    0.0f : 
                    1.0f) : 
                0.0f)));
    return pred;
  } // constant pool size = 54B, number of visited nodes = 13, static init size = 0B
}

class log_drf_1_Tree_6_class_10 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* no_of_characters */] <92.5f ? 
         (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.10058594f ? 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <165.5f ? 
                0.0f : 
                 (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.16796875f ? 
                    0.004132231f : 
                    0.5f)) : 
            0.0f) : 
        5.364749E-6f);
    return pred;
  } // constant pool size = 18B, number of visited nodes = 4, static init size = 0B
}

class log_drf_1_Tree_6_class_11 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.27929688f ? 
        0.0f : 
         (data[7 /* 6_letter_word */] <0.2926693f ? 
             (data[8 /* 7_letter_word */] <0.072265625f ? 
                0.0f : 
                 (data[6 /* 5_letter_word */] <0.072916664f ? 
                    0.0f : 
                    0.005235602f)) : 
            0.0f));
    return pred;
  } // constant pool size = 18B, number of visited nodes = 4, static init size = 0B
}

class log_drf_1_Tree_6_class_12 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <529.5f ? 
         (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.9277344f ? 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <592.5f ? 
                0.0f : 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.16670227f ? 
                    0.0f : 
                    1.0f)) : 
             (data[1 /* type_of_time */] <4.5f ? 
                0.0f : 
                0.011180124f)) : 
         (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.7939453f ? 
             (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.51171875f ? 
                0.0f : 
                0.90909094f) : 
            0.8f));
    return pred;
  } // constant pool size = 30B, number of visited nodes = 7, static init size = 0B
}

class log_drf_1_Tree_6_class_13 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* no_of_characters */] <54.0f ? 
         (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.16699219f ? 
             (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.6660156f ? 
                 (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.125f ? 
                     (data[0 /* vlan */] <106.0f ? 
                        0.0f : 
                        0.9032258f) : 
                    1.0f) : 
                 (data[0 /* vlan */] <25.5f ? 
                    0.0f : 
                    0.2f)) : 
            0.125f) : 
         (data[8 /* 7_letter_word */] <0.2109375f ? 
             (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.19140625f ? 
                3.9238766E-5f : 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.18374634f ? 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <589.0f ? 
                        0.0f : 
                        0.055555556f) : 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.2987976f ? 
                        0.057915058f : 
                        0.0f))) : 
            0.0f));
    return pred;
  } // constant pool size = 46B, number of visited nodes = 11, static init size = 0B
}

class log_drf_1_Tree_6_class_14 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.19726562f ? 
        0.0f : 
         (Double.isNaN(data[12]) || data[12 /* 11_letter_word */] <0.16210938f ? 
             (data[7 /* 6_letter_word */] <0.2078125f ? 
                 (data[1 /* type_of_time */] <2.5f ? 
                    0.6666667f : 
                    0.0f) : 
                0.0f) : 
             (data[0 /* vlan */] <29.5f ? 
                0.8666667f : 
                0.0f)));
    return pred;
  } // constant pool size = 22B, number of visited nodes = 5, static init size = 0B
}

class log_drf_1_Tree_6_class_15 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* no_of_characters */] <100.5f ? 
         (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.10058594f ? 
             (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <1.5f ? 
                0.0f : 
                0.09750182f) : 
            0.0f) : 
         (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.59472656f ? 
             (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
                0.0f : 
                 (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.4140625f ? 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.3828125f ? 
                        0.007662136f : 
                        0.0012161752f) : 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.0625f ? 
                        7.197697E-4f : 
                        0.0f))) : 
             (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.18359375f ? 
                 (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.265625f ? 
                     (data[1 /* type_of_time */] <4.5f ? 
                        0.0f : 
                        0.030901723f) : 
                     (data[0 /* vlan */] <81.5f ? 
                        0.0f : 
                        1.0f)) : 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.1015625f ? 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <89.5f ? 
                        0.0f : 
                        0.04761905f) : 
                     (data[3 /* no_of_ips */] <1.0f ? 
                        0.0f : 
                        1.0f)))));
    return pred;
  } // constant pool size = 62B, number of visited nodes = 15, static init size = 0B
}

class log_drf_1_Tree_6_class_16 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* no_of_characters */] <84.5f ? 
         (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.10058594f ? 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <29.5f ? 
                0.0f : 
                 (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.83203125f ? 
                     (data[1 /* type_of_time */] <4.5f ? 
                        0.0f : 
                        0.0014534884f) : 
                    0.05102041f)) : 
            0.0f) : 
         (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.171875f ? 
             (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.32421875f ? 
                0.0f : 
                 (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.30859375f ? 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.15576172f ? 
                        1.5642516E-4f : 
                        0.0010214505f) : 
                     (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.36691284f ? 
                        0.013761468f : 
                        0.0f))) : 
            0.0f));
    return pred;
  } // constant pool size = 42B, number of visited nodes = 10, static init size = 0B
}

class log_drf_1_Tree_6_class_17 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <659.0f ? 
         (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.9160156f ? 
            0.0f : 
             (data[0 /* vlan */] <19.5f ? 
                0.5f : 
                0.0f)) : 
         (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.0126953125f ? 
             (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.5332031f ? 
                 (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.36865997f ? 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.171875f ? 
                        0.79881656f : 
                        0.9354839f) : 
                     (data[3 /* no_of_ips */] <3.5f ? 
                        0.0f : 
                        0.9047619f)) : 
                 (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <3.5f ? 
                    0.0f : 
                    0.6f)) : 
             (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.39648438f ? 
                 (data[7 /* 6_letter_word */] <0.0390625f ? 
                    1.0f : 
                     (data[4 /* no_of_macs */] <0.5f ? 
                        0.14285715f : 
                        0.0f)) : 
                0.0f)));
    return pred;
  } // constant pool size = 50B, number of visited nodes = 12, static init size = 0B
}

class log_drf_1_Tree_6_class_18 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <330.5f ? 
        0.0f : 
         (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.07519531f ? 
            0.0f : 
             (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.296875f ? 
                0.0f : 
                 (data[3 /* no_of_ips */] <2.5f ? 
                    0.125f : 
                    0.0f))));
    return pred;
  } // constant pool size = 18B, number of visited nodes = 4, static init size = 0B
}

class log_drf_1_Tree_6_class_19 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.24365234f ? 
        1.2240801E-5f : 
         (data[7 /* 6_letter_word */] <0.26137924f ? 
             (data[0 /* vlan */] <19.5f ? 
                 (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.37109375f ? 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.0625f ? 
                        0.93235296f : 
                        0.0f) : 
                    0.0f) : 
                0.0f) : 
            0.0f));
    return pred;
  } // constant pool size = 22B, number of visited nodes = 5, static init size = 0B
}

class log_drf_1_Tree_6_class_20 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* no_of_characters */] <134.5f ? 
         (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.29101562f ? 
             (data[0 /* vlan */] <25.5f ? 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.22265625f ? 
                     (data[1 /* type_of_time */] <4.5f ? 
                        0.0f : 
                        0.98654115f) : 
                     (data[7 /* 6_letter_word */] <0.29553223f ? 
                        0.39932886f : 
                        0.94581646f)) : 
                0.0f) : 
             (Double.isNaN(data[13]) || data[13 /* 12_letter_word */] <0.16796875f ? 
                 (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.16796875f ? 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <57.5f ? 
                        0.9635385f : 
                        0.0f) : 
                     (data[3 /* no_of_ips */] <0.5f ? 
                        0.14814815f : 
                        0.0f)) : 
                0.0f)) : 
         (data[8 /* 7_letter_word */] <0.2607422f ? 
             (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.7734375f ? 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.22611237f ? 
                     (data[3 /* no_of_ips */] <0.5f ? 
                        0.25126162f : 
                        0.009104781f) : 
                     (data[2 /* no_of_characters */] <152.5f ? 
                        0.94988066f : 
                        0.23146944f)) : 
                 (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <1.5f ? 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <33.5f ? 
                        0.8290283f : 
                        0.0f) : 
                    0.0f)) : 
             (data[0 /* vlan */] <25.5f ? 
                 (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.0625f ? 
                     (Double.isNaN(data[15]) || data[15 /* 14_letter_word */] <0.072265625f ? 
                        0.19934854f : 
                        1.0f) : 
                    1.0f) : 
                0.0f)));
    return pred;
  } // constant pool size = 82B, number of visited nodes = 20, static init size = 0B
}

class log_drf_1_Tree_6_class_21 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <220.5f ? 
         (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.1171875f ? 
             (data[0 /* vlan */] <17.5f ? 
                 (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.055847168f ? 
                     (data[2 /* no_of_characters */] <115.5f ? 
                        0.056338027f : 
                        0.004824784f) : 
                    1.0f) : 
                 (Double.isNaN(data[13]) || data[13 /* 12_letter_word */] <0.1015625f ? 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <160.5f ? 
                        1.6149871E-4f : 
                        0.0018180015f) : 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.3671875f ? 
                        0.0031746032f : 
                        0.083333336f))) : 
             (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.3203125f ? 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.05859375f ? 
                     (data[6 /* 5_letter_word */] <0.4482422f ? 
                        0.0f : 
                        1.2728314E-4f) : 
                    0.0f) : 
                 (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.078125f ? 
                        0.0013858947f : 
                        0.0f) : 
                    0.0f))) : 
         (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.78515625f ? 
             (data[5 /* 4_letter_word */] <0.24609375f ? 
                 (data[7 /* 6_letter_word */] <0.02760315f ? 
                     (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
                        0.0016570009f : 
                        0.0f) : 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.46875f ? 
                        0.0f : 
                        0.006134969f)) : 
                 (data[1 /* type_of_time */] <3.5f ? 
                     (Double.isNaN(data[12]) || data[12 /* 11_letter_word */] <0.125f ? 
                        0.0f : 
                        1.0f) : 
                     (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                        0.011057762f : 
                        6.0551014E-4f))) : 
             (data[0 /* vlan */] <19.5f ? 
                0.32608697f : 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <91.0f ? 
                     (data[0 /* vlan */] <33.5f ? 
                        0.0f : 
                        0.035714287f) : 
                    0.0f))));
    return pred;
  } // constant pool size = 98B, number of visited nodes = 24, static init size = 0B
}

class log_drf_1_Tree_6_class_22 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <227.5f ? 
         (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.15527344f ? 
            0.0f : 
             (data[0 /* vlan */] <7.5f ? 
                0.23076923f : 
                0.0f)) : 
         (data[8 /* 7_letter_word */] <0.0126953125f ? 
             (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.64453125f ? 
                 (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.15625f ? 
                    0.0f : 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.4296875f ? 
                        0.0f : 
                        0.041666668f)) : 
                 (data[5 /* 4_letter_word */] <0.6903534f ? 
                     (data[2 /* no_of_characters */] <244.5f ? 
                        0.037037037f : 
                        0.0f) : 
                    0.0f)) : 
            0.0f));
    return pred;
  } // constant pool size = 38B, number of visited nodes = 9, static init size = 0B
}

class log_drf_1_Tree_6_class_23 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.42236328f ? 
         (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.1484375f ? 
             (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.58203125f ? 
                 (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.14205933f ? 
                     (Double.isNaN(data[12]) || data[12 /* 11_letter_word */] <0.1796875f ? 
                        1.10047324E-4f : 
                        0.0011273957f) : 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.2137146f ? 
                        0.0038910506f : 
                        0.75f)) : 
                0.5894344f) : 
             (Double.isNaN(data[13]) || data[13 /* 12_letter_word */] <0.046875f ? 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.3171875f ? 
                     (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                        0.0f : 
                        1.1057666E-4f) : 
                     (data[3 /* no_of_ips */] <1.5f ? 
                        0.0055910544f : 
                        0.0f)) : 
                 (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.25f ? 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.21496582f ? 
                        0.6923077f : 
                        0.0f) : 
                    1.0f))) : 
         (data[7 /* 6_letter_word */] <0.43646574f ? 
             (data[8 /* 7_letter_word */] <0.21484375f ? 
                0.0f : 
                1.0f) : 
             (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.29101562f ? 
                 (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                    0.0f : 
                     (data[6 /* 5_letter_word */] <0.3125f ? 
                        0.020889128f : 
                        0.0f)) : 
                 (data[0 /* vlan */] <17.5f ? 
                    1.0f : 
                    0.0f))));
    return pred;
  } // constant pool size = 74B, number of visited nodes = 18, static init size = 0B
}

class log_drf_1_Tree_6_class_24 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* no_of_characters */] <144.5f ? 
        4.096458E-5f : 
        0.0f);
    return pred;
  } // constant pool size = 6B, number of visited nodes = 1, static init size = 0B
}

class log_drf_1_Tree_6_class_25 {
  static final double score0(double[] data) {
    double pred =      (data[8 /* 7_letter_word */] <0.14404297f ? 
         (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.8496094f ? 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <29.5f ? 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.6328125f ? 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.13348389f ? 
                        4.316458E-4f : 
                        0.012038141f) : 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.125f ? 
                        0.04962406f : 
                        0.45454547f)) : 
                 (Double.isNaN(data[4]) || data[4 /* no_of_macs */] <0.5f ? 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <45.5f ? 
                        0.9705921f : 
                        0.0f) : 
                     (data[3 /* no_of_ips */] <1.5f ? 
                        0.0f : 
                        1.0f))) : 
             (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
                0.0f : 
                0.0011564036f)) : 
         (Double.isNaN(data[4]) || data[4 /* no_of_macs */] <0.5f ? 
             (data[2 /* no_of_characters */] <165.5f ? 
                 (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.6302083f ? 
                        0.019285357f : 
                        0.8305085f) : 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.15625f ? 
                        0.56616163f : 
                        0.96045196f)) : 
                 (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.70963544f ? 
                        0.010516903f : 
                        0.30232558f) : 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.6398628f ? 
                        0.1389566f : 
                        0.9853918f))) : 
             (data[0 /* vlan */] <21.5f ? 
                0.0f : 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <71.5f ? 
                    1.0f : 
                    0.0f))));
    return pred;
  } // constant pool size = 82B, number of visited nodes = 20, static init size = 0B
}

class log_drf_1_Tree_6_class_26 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* no_of_characters */] <57.5f ? 
         (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.125f ? 
             (data[8 /* 7_letter_word */] <0.16796875f ? 
                0.0f : 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <33.5f ? 
                     (data[0 /* vlan */] <22.0f ? 
                        0.0f : 
                        1.0f) : 
                    0.0f)) : 
            0.0f) : 
        0.0f);
    return pred;
  } // constant pool size = 22B, number of visited nodes = 5, static init size = 0B
}

class log_drf_1_Tree_6_class_27 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <256.5f ? 
        0.0f : 
        1.064396E-4f);
    return pred;
  } // constant pool size = 6B, number of visited nodes = 1, static init size = 0B
}

class log_drf_1_Tree_6_class_28 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <447.5f ? 
        0.0f : 
         (data[7 /* 6_letter_word */] <0.19726562f ? 
             (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.13407898f ? 
                0.0f : 
                 (data[5 /* 4_letter_word */] <0.37890625f ? 
                     (data[11 /* 10_letter_word */] <0.015625f ? 
                        0.7777778f : 
                        0.0f) : 
                    0.0f)) : 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <19.5f ? 
                 (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.03125f ? 
                    1.0f : 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.17049153f ? 
                        0.99346405f : 
                        1.0f)) : 
                0.0f)));
    return pred;
  } // constant pool size = 34B, number of visited nodes = 8, static init size = 0B
}

class log_drf_1_Tree_6_class_29 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <957.5f ? 
         (Double.isNaN(data[12]) || data[12 /* 11_letter_word */] <0.041015625f ? 
            8.021111E-6f : 
             (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.58203125f ? 
                0.0f : 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <77.5f ? 
                    0.0f : 
                    0.5f))) : 
         (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.018554688f ? 
            0.0f : 
             (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.41210938f ? 
                0.0f : 
                 (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.19140625f ? 
                    1.0f : 
                    0.5f))));
    return pred;
  } // constant pool size = 30B, number of visited nodes = 7, static init size = 0B
}

class log_drf_1_Tree_6_class_30 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <219.5f ? 
         (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.24023438f ? 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <177.5f ? 
                0.0f : 
                 (data[1 /* type_of_time */] <2.5f ? 
                    1.0f : 
                    0.0f)) : 
             (data[1 /* type_of_time */] <1.5f ? 
                1.0f : 
                0.0f)) : 
         (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.018554688f ? 
             (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.31054688f ? 
                 (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.30859375f ? 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <178.5f ? 
                        0.0f : 
                        0.08934708f) : 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.3125f ? 
                        0.06818182f : 
                        0.3106796f)) : 
                0.29787233f) : 
            0.0f));
    return pred;
  } // constant pool size = 42B, number of visited nodes = 10, static init size = 0B
}

class log_drf_1_Tree_6_class_31 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* no_of_characters */] <113.5f ? 
         (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.083984375f ? 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <65.5f ? 
                 (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.1015625f ? 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.4140625f ? 
                        0.0f : 
                        0.0022716946f) : 
                    0.0f) : 
                 (Double.isNaN(data[13]) || data[13 /* 12_letter_word */] <0.125f ? 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.4140625f ? 
                        0.087062255f : 
                        0.8767123f) : 
                    1.0f)) : 
             (Double.isNaN(data[13]) || data[13 /* 12_letter_word */] <0.41601562f ? 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.3671875f ? 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <65.5f ? 
                        0.0036656891f : 
                        0.38765433f) : 
                     (data[5 /* 4_letter_word */] <0.125f ? 
                        0.21978022f : 
                        0.9714286f)) : 
                1.0f)) : 
         (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.13378906f ? 
             (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.22460938f ? 
                 (Double.isNaN(data[4]) || data[4 /* no_of_macs */] <1.5f ? 
                     (data[0 /* vlan */] <146.5f ? 
                        4.092281E-4f : 
                        0.0f) : 
                     (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.04562378f ? 
                        0.0024019214f : 
                        0.0f)) : 
                 (data[10 /* 9_letter_word */] <0.27004242f ? 
                     (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.1796875f ? 
                        0.0f : 
                        0.9714286f) : 
                    0.0f)) : 
             (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.31054688f ? 
                 (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.53125f ? 
                        0.0042833607f : 
                        0.86f) : 
                     (Double.isNaN(data[12]) || data[12 /* 11_letter_word */] <0.0625f ? 
                        5.818464E-4f : 
                        0.0f)) : 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.41801453f ? 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.171875f ? 
                        0.2580645f : 
                        0.0f) : 
                    0.0f))));
    return pred;
  } // constant pool size = 98B, number of visited nodes = 24, static init size = 0B
}

class log_drf_1_Tree_6_class_32 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* no_of_characters */] <123.5f ? 
         (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.15527344f ? 
             (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.22460938f ? 
                0.0f : 
                 (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.22265625f ? 
                     (Double.isNaN(data[13]) || data[13 /* 12_letter_word */] <0.16796875f ? 
                        0.0f : 
                        0.04f) : 
                     (data[7 /* 6_letter_word */] <0.2730713f ? 
                        0.21461187f : 
                        0.03284072f))) : 
             (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                0.0f : 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <115.5f ? 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <112.0f ? 
                        0.65753424f : 
                        1.0f) : 
                    0.0f))) : 
        0.0f);
    return pred;
  } // constant pool size = 38B, number of visited nodes = 9, static init size = 0B
}

class log_drf_1_Tree_6_class_33 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* no_of_characters */] <69.5f ? 
         (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.41601562f ? 
             (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.29101562f ? 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.16738129f ? 
                    0.0f : 
                    0.11111111f) : 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <61.5f ? 
                     (data[0 /* vlan */] <25.5f ? 
                        1.0f : 
                        0.75f) : 
                    0.0f)) : 
            0.9007092f) : 
         (Double.isNaN(data[4]) || data[4 /* no_of_macs */] <1.5f ? 
             (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.73046875f ? 
                 (data[8 /* 7_letter_word */] <0.29296875f ? 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.08010864f ? 
                        4.913522E-4f : 
                        0.009851185f) : 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.23397827f ? 
                        2.8197608E-5f : 
                        2.4037498E-4f)) : 
                 (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.125f ? 
                     (data[5 /* 4_letter_word */] <0.9368286f ? 
                        0.0f : 
                        0.004157339f) : 
                     (data[0 /* vlan */] <33.5f ? 
                        0.0f : 
                        0.8333333f))) : 
             (data[0 /* vlan */] <23.5f ? 
                 (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.1171875f ? 
                    1.0f : 
                    0.0f) : 
                0.0f)));
    return pred;
  } // constant pool size = 66B, number of visited nodes = 16, static init size = 0B
}

class log_drf_1_Tree_6_class_34 {
  static final double score0(double[] data) {
    double pred =      (data[8 /* 7_letter_word */] <0.16992188f ? 
        2.0691725E-5f : 
        0.0f);
    return pred;
  } // constant pool size = 6B, number of visited nodes = 1, static init size = 0B
}

class log_drf_1_Tree_6_class_35 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* no_of_characters */] <88.5f ? 
         (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.10058594f ? 
             (data[0 /* vlan */] <19.5f ? 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <9.0f ? 
                    0.0f : 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <84.5f ? 
                        0.102564104f : 
                        0.6666667f)) : 
                0.0f) : 
            0.0f) : 
         (data[8 /* 7_letter_word */] <0.16992188f ? 
             (data[1 /* type_of_time */] <4.5f ? 
                0.0f : 
                 (data[2 /* no_of_characters */] <135.5f ? 
                     (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.21875f ? 
                        3.2935906E-4f : 
                        0.0023201855f) : 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.078125f ? 
                        9.306221E-5f : 
                        4.7415838E-4f))) : 
             (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.24023438f ? 
                0.0f : 
                3.7568563E-5f)));
    return pred;
  } // constant pool size = 46B, number of visited nodes = 11, static init size = 0B
}

class log_drf_1_Tree_6_class_36 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* no_of_characters */] <131.5f ? 
         (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.15527344f ? 
            0.0f : 
             (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.083984375f ? 
                0.0f : 
                 (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.44921875f ? 
                    0.0f : 
                    0.7692308f))) : 
        0.0f);
    return pred;
  } // constant pool size = 18B, number of visited nodes = 4, static init size = 0B
}

class log_drf_1_Tree_6_class_37 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.29296875f ? 
         (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.9736328f ? 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <165.5f ? 
                 (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.34609604f ? 
                     (data[1 /* type_of_time */] <4.5f ? 
                        0.73830444f : 
                        0.0f) : 
                     (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.0625f ? 
                        0.0011720582f : 
                        0.0f)) : 
                 (Double.isNaN(data[13]) || data[13 /* 12_letter_word */] <0.15625f ? 
                     (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                        0.87393767f : 
                        0.07619048f) : 
                    1.0f)) : 
             (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
                 (data[2 /* no_of_characters */] <110.5f ? 
                     (data[0 /* vlan */] <98.0f ? 
                        0.33333334f : 
                        1.0f) : 
                    1.0f) : 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <126.0f ? 
                    0.0f : 
                     (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <1.0f ? 
                        0.74509805f : 
                        0.0f)))) : 
         (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.05078125f ? 
             (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.02734375f ? 
                 (Double.isNaN(data[15]) || data[15 /* 14_letter_word */] <0.083984375f ? 
                     (data[0 /* vlan */] <154.5f ? 
                        0.04568668f : 
                        0.9950663f) : 
                     (Double.isNaN(data[15]) || data[15 /* 14_letter_word */] <0.22373962f ? 
                        0.0f : 
                        0.05f)) : 
                 (data[1 /* type_of_time */] <4.5f ? 
                    1.0f : 
                    0.0f)) : 
             (data[1 /* type_of_time */] <4.5f ? 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.30820212f ? 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.0546875f ? 
                        0.99875313f : 
                        1.0f) : 
                     (data[7 /* 6_letter_word */] <0.3670127f ? 
                        0.74626863f : 
                        0.99752474f)) : 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.3683594f ? 
                     (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                        6.131208E-4f : 
                        0.0f) : 
                    0.0f))));
    return pred;
  } // constant pool size = 102B, number of visited nodes = 25, static init size = 0B
}

class log_drf_1_Tree_6_class_38 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* no_of_characters */] <93.5f ? 
         (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.41601562f ? 
             (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.1015625f ? 
                 (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.83203125f ? 
                    0.0f : 
                    6.086427E-4f) : 
                0.0f) : 
             (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.37304688f ? 
                0.0f : 
                0.11111111f)) : 
        0.0f);
    return pred;
  } // constant pool size = 22B, number of visited nodes = 5, static init size = 0B
}


class log_drf_1_Forest_7 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += log_drf_1_Tree_7_class_0.score0(fdata);
    preds[2] += log_drf_1_Tree_7_class_1.score0(fdata);
    preds[3] += log_drf_1_Tree_7_class_2.score0(fdata);
    preds[4] += log_drf_1_Tree_7_class_3.score0(fdata);
    preds[5] += log_drf_1_Tree_7_class_4.score0(fdata);
    preds[6] += log_drf_1_Tree_7_class_5.score0(fdata);
    preds[7] += log_drf_1_Tree_7_class_6.score0(fdata);
    preds[8] += log_drf_1_Tree_7_class_7.score0(fdata);
    preds[9] += log_drf_1_Tree_7_class_8.score0(fdata);
    preds[10] += log_drf_1_Tree_7_class_9.score0(fdata);
    preds[11] += log_drf_1_Tree_7_class_10.score0(fdata);
    preds[12] += log_drf_1_Tree_7_class_11.score0(fdata);
    preds[13] += log_drf_1_Tree_7_class_12.score0(fdata);
    preds[14] += log_drf_1_Tree_7_class_13.score0(fdata);
    preds[15] += log_drf_1_Tree_7_class_14.score0(fdata);
    preds[16] += log_drf_1_Tree_7_class_15.score0(fdata);
    preds[17] += log_drf_1_Tree_7_class_16.score0(fdata);
    preds[18] += log_drf_1_Tree_7_class_17.score0(fdata);
    preds[19] += log_drf_1_Tree_7_class_18.score0(fdata);
    preds[20] += log_drf_1_Tree_7_class_19.score0(fdata);
    preds[21] += log_drf_1_Tree_7_class_20.score0(fdata);
    preds[22] += log_drf_1_Tree_7_class_21.score0(fdata);
    preds[23] += log_drf_1_Tree_7_class_22.score0(fdata);
    preds[24] += log_drf_1_Tree_7_class_23.score0(fdata);
    preds[25] += log_drf_1_Tree_7_class_24.score0(fdata);
    preds[26] += log_drf_1_Tree_7_class_25.score0(fdata);
    preds[27] += log_drf_1_Tree_7_class_26.score0(fdata);
    preds[28] += log_drf_1_Tree_7_class_27.score0(fdata);
    preds[29] += log_drf_1_Tree_7_class_28.score0(fdata);
    preds[30] += log_drf_1_Tree_7_class_29.score0(fdata);
    preds[31] += log_drf_1_Tree_7_class_30.score0(fdata);
    preds[32] += log_drf_1_Tree_7_class_31.score0(fdata);
    preds[33] += log_drf_1_Tree_7_class_32.score0(fdata);
    preds[34] += log_drf_1_Tree_7_class_33.score0(fdata);
    preds[35] += log_drf_1_Tree_7_class_34.score0(fdata);
    preds[36] += log_drf_1_Tree_7_class_35.score0(fdata);
    preds[37] += log_drf_1_Tree_7_class_36.score0(fdata);
    preds[38] += log_drf_1_Tree_7_class_37.score0(fdata);
    preds[39] += log_drf_1_Tree_7_class_38.score0(fdata);
  }
}
class log_drf_1_Tree_7_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.07421875f ? 
        0.0f : 
         (Double.isNaN(data[4]) || data[4 /* no_of_macs */] <0.5f ? 
            0.0f : 
             (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.013671875f ? 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <69.5f ? 
                    0.0f : 
                     (data[5 /* 4_letter_word */] <0.234375f ? 
                        0.5f : 
                        1.0f)) : 
                1.0f)));
    return pred;
  } // constant pool size = 22B, number of visited nodes = 5, static init size = 0B
}

class log_drf_1_Tree_7_class_1 {
  static final double score0(double[] data) {
    double pred =      (data[8 /* 7_letter_word */] <0.23925781f ? 
        0.0f : 
         (data[1 /* type_of_time */] <3.5f ? 
             (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.3671875f ? 
                0.0f : 
                 (data[2 /* no_of_characters */] <250.5f ? 
                    0.0f : 
                    1.0f)) : 
             (data[0 /* vlan */] <153.5f ? 
                 (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.1328125f ? 
                    0.0f : 
                     (data[7 /* 6_letter_word */] <0.0546875f ? 
                        0.30222222f : 
                        0.0f)) : 
                0.0f)));
    return pred;
  } // constant pool size = 30B, number of visited nodes = 7, static init size = 0B
}

class log_drf_1_Tree_7_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.47216797f ? 
         (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
            0.0f : 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <150.5f ? 
                 (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.4609375f ? 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <113.5f ? 
                        0.0f : 
                        0.28361583f) : 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.0859375f ? 
                        0.0f : 
                        0.25925925f)) : 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <137.5f ? 
                    0.0f : 
                     (data[3 /* no_of_ips */] <0.5f ? 
                        0.0373444f : 
                        0.005805515f)))) : 
         (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.44921875f ? 
             (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.7319603f ? 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <137.5f ? 
                    0.0f : 
                     (data[8 /* 7_letter_word */] <0.1328125f ? 
                        0.085020244f : 
                        0.0015174507f)) : 
                 (data[7 /* 6_letter_word */] <0.80315834f ? 
                    0.22222222f : 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.078125f ? 
                        0.05418423f : 
                        0.0f))) : 
             (data[3 /* no_of_ips */] <0.5f ? 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <129.5f ? 
                    0.0f : 
                     (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
                        0.0f : 
                        1.0f)) : 
                0.754717f)));
    return pred;
  } // constant pool size = 70B, number of visited nodes = 17, static init size = 0B
}

class log_drf_1_Tree_7_class_3 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.29296875f ? 
         (data[0 /* vlan */] <29.5f ? 
             (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.4921875f ? 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <150.5f ? 
                    0.0f : 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.26779175f ? 
                        0.025582945f : 
                        0.19482496f)) : 
                 (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.22265625f ? 
                    0.0f : 
                     (data[3 /* no_of_ips */] <0.5f ? 
                        0.0f : 
                        0.98308104f))) : 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <150.5f ? 
                0.0f : 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.02734375f ? 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <164.5f ? 
                        0.0014376997f : 
                        0.0f) : 
                    0.0f))) : 
        0.0f);
    return pred;
  } // constant pool size = 42B, number of visited nodes = 10, static init size = 0B
}

class log_drf_1_Tree_7_class_4 {
  static final double score0(double[] data) {
    double pred =      (data[8 /* 7_letter_word */] <0.12402344f ? 
         (data[0 /* vlan */] <27.5f ? 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <24.5f ? 
                0.0f : 
                 (data[7 /* 6_letter_word */] <0.2734375f ? 
                     (data[2 /* no_of_characters */] <100.5f ? 
                        0.33333334f : 
                        0.020833334f) : 
                     (data[1 /* type_of_time */] <3.5f ? 
                        0.0f : 
                        0.014084507f))) : 
            0.0f) : 
         (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.28808594f ? 
             (data[2 /* no_of_characters */] <115.5f ? 
                 (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.30859375f ? 
                    0.0f : 
                     (data[7 /* 6_letter_word */] <0.088541664f ? 
                        0.76744187f : 
                        0.0f)) : 
                 (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                    0.0f : 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.26785713f ? 
                        0.0f : 
                        0.25f))) : 
             (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                0.0f : 
                 (data[8 /* 7_letter_word */] <0.13428879f ? 
                    0.5f : 
                    0.0f))));
    return pred;
  } // constant pool size = 58B, number of visited nodes = 14, static init size = 0B
}

class log_drf_1_Tree_7_class_5 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.095703125f ? 
         (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
            0.0f : 
             (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.107421875f ? 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <35.5f ? 
                    0.0f : 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.6328125f ? 
                        0.0f : 
                        0.0011363636f)) : 
                 (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.15625f ? 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <59.5f ? 
                        0.0f : 
                        0.032894738f) : 
                     (data[6 /* 5_letter_word */] <0.18408203f ? 
                        0.030927835f : 
                        0.001843318f)))) : 
         (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <305.5f ? 
                 (data[7 /* 6_letter_word */] <0.24053192f ? 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <83.5f ? 
                        0.025487257f : 
                        0.0f) : 
                     (data[8 /* 7_letter_word */] <0.046875f ? 
                        0.0013944571f : 
                        1.4799467E-4f)) : 
                 (data[7 /* 6_letter_word */] <0.19107819f ? 
                     (data[6 /* 5_letter_word */] <0.1328125f ? 
                        0.45f : 
                        0.0f) : 
                    0.0f)) : 
            0.0f));
    return pred;
  } // constant pool size = 62B, number of visited nodes = 15, static init size = 0B
}

class log_drf_1_Tree_7_class_6 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.26123047f ? 
         (Double.isNaN(data[0]) || data[0 /* vlan */] <85.5f ? 
             (data[0 /* vlan */] <18.5f ? 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.92578125f ? 
                     (data[2 /* no_of_characters */] <100.5f ? 
                        0.04511278f : 
                        0.0f) : 
                     (data[2 /* no_of_characters */] <40.5f ? 
                        1.0f : 
                        0.0f)) : 
                0.0f) : 
             (data[2 /* no_of_characters */] <100.5f ? 
                 (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.125f ? 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.7421875f ? 
                        0.0f : 
                        0.84615386f) : 
                     (data[0 /* vlan */] <115.5f ? 
                        0.22424242f : 
                        0.9361702f)) : 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.1653099f ? 
                    0.0f : 
                     (data[0 /* vlan */] <152.0f ? 
                        0.22115384f : 
                        0.0f)))) : 
         (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.0625f ? 
             (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
                0.0f : 
                 (data[2 /* no_of_characters */] <60.5f ? 
                    0.9f : 
                    0.0f)) : 
            0.0f));
    return pred;
  } // constant pool size = 62B, number of visited nodes = 15, static init size = 0B
}

class log_drf_1_Tree_7_class_7 {
  static final double score0(double[] data) {
    double pred =      (data[8 /* 7_letter_word */] <0.012207031f ? 
         (Double.isNaN(data[0]) || data[0 /* vlan */] <185.5f ? 
            0.0f : 
             (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.7480469f ? 
                0.0f : 
                 (data[2 /* no_of_characters */] <150.5f ? 
                    0.6666667f : 
                    1.0f))) : 
        0.0f);
    return pred;
  } // constant pool size = 18B, number of visited nodes = 4, static init size = 0B
}

class log_drf_1_Tree_7_class_8 {
  static final double score0(double[] data) {
    double pred =      (data[8 /* 7_letter_word */] <0.16992188f ? 
         (Double.isNaN(data[0]) || data[0 /* vlan */] <177.5f ? 
            0.0f : 
             (data[0 /* vlan */] <181.5f ? 
                 (data[2 /* no_of_characters */] <883.5f ? 
                     (data[0 /* vlan */] <180.5f ? 
                        0.0f : 
                        0.019480519f) : 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.515625f ? 
                        0.2987805f : 
                        0.9655172f)) : 
                0.0f)) : 
        9.676514E-6f);
    return pred;
  } // constant pool size = 26B, number of visited nodes = 6, static init size = 0B
}

class log_drf_1_Tree_7_class_9 {
  static final double score0(double[] data) {
    double pred =      (data[8 /* 7_letter_word */] <0.20703125f ? 
         (data[1 /* type_of_time */] <3.5f ? 
             (data[0 /* vlan */] <123.5f ? 
                0.0f : 
                 (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.6328125f ? 
                     (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.29166666f ? 
                        0.9984399f : 
                        0.0f) : 
                    0.045454547f)) : 
            0.0f) : 
         (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.41601562f ? 
             (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <4.5f ? 
                0.0f : 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <98.0f ? 
                    0.0f : 
                    1.0f)) : 
             (Double.isNaN(data[1]) || data[1 /* type_of_time */] <3.5f ? 
                1.0f : 
                0.0f)));
    return pred;
  } // constant pool size = 38B, number of visited nodes = 9, static init size = 0B
}

class log_drf_1_Tree_7_class_10 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.6455078f ? 
        5.9287013E-6f : 
         (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
            0.0f : 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <127.5f ? 
                0.0f : 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <120.5f ? 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <90.5f ? 
                        0.6666667f : 
                        1.0f) : 
                    0.0f))));
    return pred;
  } // constant pool size = 22B, number of visited nodes = 5, static init size = 0B
}

class log_drf_1_Tree_7_class_11 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.27929688f ? 
        0.0f : 
        3.5023815E-5f);
    return pred;
  } // constant pool size = 6B, number of visited nodes = 1, static init size = 0B
}

class log_drf_1_Tree_7_class_12 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.92822266f ? 
         (Double.isNaN(data[0]) || data[0 /* vlan */] <593.5f ? 
            0.0f : 
             (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.1015625f ? 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.16679001f ? 
                    0.0f : 
                    1.0f) : 
                0.0f)) : 
         (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
            0.0f : 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <333.0f ? 
                0.0f : 
                1.0f)));
    return pred;
  } // constant pool size = 26B, number of visited nodes = 6, static init size = 0B
}

class log_drf_1_Tree_7_class_13 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.26123047f ? 
         (Double.isNaN(data[0]) || data[0 /* vlan */] <593.5f ? 
             (data[0 /* vlan */] <3.5f ? 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.125f ? 
                    0.0f : 
                    1.0f) : 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.19238281f ? 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.0234375f ? 
                        5.0430954E-4f : 
                        0.0f) : 
                     (data[6 /* 5_letter_word */] <0.15625f ? 
                        0.0f : 
                        0.024310118f))) : 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <33.0f ? 
                1.0f : 
                 (data[2 /* no_of_characters */] <48.5f ? 
                    0.0f : 
                    0.06818182f))) : 
         (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
             (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.31640625f ? 
                0.0f : 
                 (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.16796875f ? 
                    0.0f : 
                    0.07692308f)) : 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <181.5f ? 
                0.0f : 
                0.5f)));
    return pred;
  } // constant pool size = 54B, number of visited nodes = 13, static init size = 0B
}

class log_drf_1_Tree_7_class_14 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.19726562f ? 
        0.0f : 
         (data[1 /* type_of_time */] <2.5f ? 
             (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.1015625f ? 
                 (data[7 /* 6_letter_word */] <0.22548676f ? 
                    0.5f : 
                    0.0f) : 
                1.0f) : 
            0.0f));
    return pred;
  } // constant pool size = 18B, number of visited nodes = 4, static init size = 0B
}

class log_drf_1_Tree_7_class_15 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.5942383f ? 
         (data[1 /* type_of_time */] <4.5f ? 
            0.0f : 
             (data[2 /* no_of_characters */] <100.5f ? 
                 (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.1015625f ? 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <99.0f ? 
                        0.0f : 
                        0.17121892f) : 
                    0.0f) : 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <125.5f ? 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <32.5f ? 
                        2.3165845E-5f : 
                        0.007186291f) : 
                     (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.21875f ? 
                        0.03437816f : 
                        1.0f)))) : 
         (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.26660156f ? 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <210.5f ? 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <113.5f ? 
                    0.0f : 
                     (data[0 /* vlan */] <152.0f ? 
                        0.22413793f : 
                        0.0f)) : 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.18359375f ? 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <89.5f ? 
                        0.0f : 
                        0.14102565f) : 
                     (data[1 /* type_of_time */] <4.5f ? 
                        0.0f : 
                        1.0f))) : 
             (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <1.0f ? 
                 (data[2 /* no_of_characters */] <275.5f ? 
                    0.0f : 
                    1.0f) : 
                0.0f)));
    return pred;
  } // constant pool size = 70B, number of visited nodes = 17, static init size = 0B
}

class log_drf_1_Tree_7_class_16 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.52734375f ? 
         (Double.isNaN(data[0]) || data[0 /* vlan */] <83.5f ? 
             (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.4921875f ? 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <62.5f ? 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.30859375f ? 
                        0.0f : 
                        1.4972301E-4f) : 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.2109375f ? 
                        0.03529412f : 
                        0.0f)) : 
                 (data[2 /* no_of_characters */] <80.5f ? 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <30.5f ? 
                        0.0f : 
                        0.44444445f) : 
                     (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.3125f ? 
                        2.6922248E-4f : 
                        0.2f))) : 
            0.0f) : 
        0.0f);
    return pred;
  } // constant pool size = 38B, number of visited nodes = 9, static init size = 0B
}

class log_drf_1_Tree_7_class_17 {
  static final double score0(double[] data) {
    double pred =      (data[8 /* 7_letter_word */] <0.122558594f ? 
         (Double.isNaN(data[0]) || data[0 /* vlan */] <177.5f ? 
             (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.116334915f ? 
                 (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.06640625f ? 
                     (data[1 /* type_of_time */] <2.5f ? 
                        0.00862069f : 
                        0.0f) : 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <719.0f ? 
                        0.0f : 
                        0.14285715f)) : 
                1.0f) : 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <659.5f ? 
                0.0f : 
                 (data[6 /* 5_letter_word */] <0.14453125f ? 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <884.0f ? 
                        1.0f : 
                        0.102564104f) : 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.46533203f ? 
                        0.30136988f : 
                        0.8875f)))) : 
         (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <3.5f ? 
            0.0f : 
             (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <4.5f ? 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.125f ? 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <679.5f ? 
                        0.0f : 
                        1.0f) : 
                    0.0f) : 
                0.0f)));
    return pred;
  } // constant pool size = 58B, number of visited nodes = 14, static init size = 0B
}

class log_drf_1_Tree_7_class_18 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.30566406f ? 
        0.0f : 
         (data[0 /* vlan */] <18.5f ? 
             (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.0390625f ? 
                0.0f : 
                 (data[10 /* 9_letter_word */] <0.1390686f ? 
                    0.11111111f : 
                    0.0f)) : 
            0.0f));
    return pred;
  } // constant pool size = 18B, number of visited nodes = 4, static init size = 0B
}

class log_drf_1_Tree_7_class_19 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.24365234f ? 
         (data[0 /* vlan */] <17.5f ? 
             (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.18359375f ? 
                0.0f : 
                0.0028571428f) : 
            0.0f) : 
         (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.23535156f ? 
            0.0f : 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <145.5f ? 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <17.5f ? 
                    1.0f : 
                    0.0f) : 
                0.0f)));
    return pred;
  } // constant pool size = 26B, number of visited nodes = 6, static init size = 0B
}

class log_drf_1_Tree_7_class_20 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.26123047f ? 
         (data[0 /* vlan */] <23.5f ? 
             (data[0 /* vlan */] <18.5f ? 
                0.0f : 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.04296875f ? 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.3125f ? 
                        0.99977076f : 
                        0.9986245f) : 
                    1.0f)) : 
            0.0f) : 
         (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <1.5f ? 
             (data[2 /* no_of_characters */] <135.5f ? 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <25.5f ? 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.125f ? 
                        0.99579674f : 
                        0.99907833f) : 
                    0.0f) : 
                 (data[0 /* vlan */] <25.5f ? 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.0625f ? 
                        0.049932525f : 
                        0.6744931f) : 
                    0.0f)) : 
             (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.0625f ? 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.58444214f ? 
                    0.0f : 
                     (data[8 /* 7_letter_word */] <0.7078109f ? 
                        0.8333333f : 
                        0.0f)) : 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <25.5f ? 
                    1.0f : 
                    0.0f))));
    return pred;
  } // constant pool size = 62B, number of visited nodes = 15, static init size = 0B
}

class log_drf_1_Tree_7_class_21 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.24365234f ? 
         (data[0 /* vlan */] <17.5f ? 
             (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.17382812f ? 
                 (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.53515625f ? 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.171875f ? 
                        0.01901975f : 
                        0.0022624435f) : 
                    0.0f) : 
                0.0f) : 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <260.5f ? 
                 (Double.isNaN(data[13]) || data[13 /* 12_letter_word */] <0.18359375f ? 
                     (data[0 /* vlan */] <160.5f ? 
                        2.185458E-4f : 
                        0.0012995853f) : 
                     (data[0 /* vlan */] <65.5f ? 
                        0.093023255f : 
                        0.00952381f)) : 
                 (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.15625f ? 
                     (data[2 /* no_of_characters */] <275.5f ? 
                        0.024296675f : 
                        8.802817E-4f) : 
                     (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.0859375f ? 
                        0.0f : 
                        0.9583333f)))) : 
         (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.19140625f ? 
             (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <1.5f ? 
                 (data[0 /* vlan */] <17.5f ? 
                     (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                        0.004145078f : 
                        0.3043478f) : 
                     (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.13494319f ? 
                        0.0013282564f : 
                        0.06f)) : 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.46523857f ? 
                    0.0f : 
                     (data[6 /* 5_letter_word */] <0.4140625f ? 
                        0.0f : 
                        4.3421623E-4f))) : 
             (Double.isNaN(data[12]) || data[12 /* 11_letter_word */] <0.125f ? 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.5509186f ? 
                     (data[11 /* 10_letter_word */] <0.23721313f ? 
                        0.14285715f : 
                        0.0f) : 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.1015625f ? 
                        0.0f : 
                        1.0f)) : 
                1.0f)));
    return pred;
  } // constant pool size = 94B, number of visited nodes = 23, static init size = 0B
}

class log_drf_1_Tree_7_class_22 {
  static final double score0(double[] data) {
    double pred =      (data[8 /* 7_letter_word */] <0.16992188f ? 
         (data[0 /* vlan */] <5.5f ? 
             (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.083984375f ? 
                0.0f : 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <130.5f ? 
                    0.0f : 
                    0.6f)) : 
             (data[0 /* vlan */] <25.5f ? 
                 (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.31640625f ? 
                    0.0f : 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.6328125f ? 
                        0.0f : 
                        0.024390243f)) : 
                0.0f)) : 
        0.0f);
    return pred;
  } // constant pool size = 30B, number of visited nodes = 7, static init size = 0B
}

class log_drf_1_Tree_7_class_23 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.42236328f ? 
         (data[0 /* vlan */] <17.5f ? 
             (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.31054688f ? 
                 (data[7 /* 6_letter_word */] <0.10724068f ? 
                     (data[2 /* no_of_characters */] <140.5f ? 
                        0.60477614f : 
                        0.007982969f) : 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.265625f ? 
                        0.0024937657f : 
                        0.39130434f)) : 
                 (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.25f ? 
                     (data[9 /* 8_letter_word */] <0.4140625f ? 
                        0.0f : 
                        1.0f) : 
                    0.0f)) : 
            0.0f) : 
         (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.12695312f ? 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <240.5f ? 
                 (data[0 /* vlan */] <17.5f ? 
                    0.04605263f : 
                    0.0f) : 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.69196427f ? 
                    0.0f : 
                     (data[0 /* vlan */] <25.5f ? 
                        0.5882353f : 
                        0.0f))) : 
             (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.1546402f ? 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <17.5f ? 
                    1.0f : 
                    0.0f) : 
                0.0f)));
    return pred;
  } // constant pool size = 62B, number of visited nodes = 15, static init size = 0B
}

class log_drf_1_Tree_7_class_24 {
  static final double score0(double[] data) {
    double pred =      (data[8 /* 7_letter_word */] <0.012207031f ? 
         (data[0 /* vlan */] <11.5f ? 
             (data[5 /* 4_letter_word */] <0.072265625f ? 
                 (data[7 /* 6_letter_word */] <0.16796875f ? 
                    0.6666667f : 
                    0.0f) : 
                0.0f) : 
            0.0f) : 
        0.0f);
    return pred;
  } // constant pool size = 18B, number of visited nodes = 4, static init size = 0B
}

class log_drf_1_Tree_7_class_25 {
  static final double score0(double[] data) {
    double pred =      (data[8 /* 7_letter_word */] <0.14404297f ? 
         (data[0 /* vlan */] <29.5f ? 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <24.5f ? 
                0.0f : 
                 (data[5 /* 4_letter_word */] <0.44921875f ? 
                     (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <1.5f ? 
                        0.098958336f : 
                        1.0f) : 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.125f ? 
                        9.096422E-4f : 
                        0.07272727f))) : 
             (data[1 /* type_of_time */] <4.5f ? 
                0.0f : 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.01953125f ? 
                     (data[3 /* no_of_ips */] <0.5f ? 
                        0.49342892f : 
                        0.93550754f) : 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.296875f ? 
                        0.8954469f : 
                        0.4403081f)))) : 
         (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
             (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.6328125f ? 
                 (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.70963544f ? 
                     (Double.isNaN(data[15]) || data[15 /* 14_letter_word */] <0.0859375f ? 
                        0.0094323475f : 
                        0.4269006f) : 
                     (data[8 /* 7_letter_word */] <0.22428894f ? 
                        0.0f : 
                        0.19444445f)) : 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <89.5f ? 
                    1.0f : 
                    0.0f)) : 
             (data[0 /* vlan */] <25.5f ? 
                0.0f : 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.18359375f ? 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <220.5f ? 
                        0.94304633f : 
                        0.084367245f) : 
                     (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.05859375f ? 
                        0.65543646f : 
                        0.010309278f)))));
    return pred;
  } // constant pool size = 82B, number of visited nodes = 20, static init size = 0B
}

class log_drf_1_Tree_7_class_26 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.31689453f ? 
        0.0f : 
         (data[0 /* vlan */] <29.5f ? 
             (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.6328125f ? 
                0.0f : 
                 (data[0 /* vlan */] <28.0f ? 
                    0.0f : 
                    0.997669f)) : 
            0.0f));
    return pred;
  } // constant pool size = 18B, number of visited nodes = 4, static init size = 0B
}

class log_drf_1_Tree_7_class_27 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.24365234f ? 
        0.0f : 
         (data[0 /* vlan */] <18.5f ? 
             (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.48046875f ? 
                0.0f : 
                 (data[7 /* 6_letter_word */] <0.26137924f ? 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.125f ? 
                        0.0f : 
                        1.0f) : 
                    0.0f)) : 
            0.0f));
    return pred;
  } // constant pool size = 22B, number of visited nodes = 5, static init size = 0B
}

class log_drf_1_Tree_7_class_28 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.39453125f ? 
         (data[0 /* vlan */] <17.5f ? 
             (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.18359375f ? 
                 (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.19140625f ? 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.3515625f ? 
                        0.024696356f : 
                        0.0f) : 
                     (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <4.0f ? 
                        0.0f : 
                        1.0f)) : 
                 (data[7 /* 6_letter_word */] <0.2250061f ? 
                    0.99714285f : 
                    0.0f)) : 
            0.0f) : 
         (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <5.5f ? 
            0.0f : 
             (data[2 /* no_of_characters */] <377.5f ? 
                0.0f : 
                1.0f)));
    return pred;
  } // constant pool size = 38B, number of visited nodes = 9, static init size = 0B
}

class log_drf_1_Tree_7_class_29 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.018066406f ? 
         (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
            0.0f : 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <420.5f ? 
                 (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.04296875f ? 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <115.5f ? 
                        0.0f : 
                        0.0032626428f) : 
                    0.0f) : 
                 (data[2 /* no_of_characters */] <433.0f ? 
                    1.0f : 
                    0.0f))) : 
         (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.51464844f ? 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <953.5f ? 
                0.0f : 
                 (Double.isNaN(data[12]) || data[12 /* 11_letter_word */] <0.02734375f ? 
                    0.0f : 
                     (data[10 /* 9_letter_word */] <0.09375f ? 
                        0.5f : 
                        0.0f))) : 
             (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.024414062f ? 
                0.0f : 
                 (data[7 /* 6_letter_word */] <0.106287f ? 
                    1.0f : 
                    0.0f))));
    return pred;
  } // constant pool size = 50B, number of visited nodes = 12, static init size = 0B
}

class log_drf_1_Tree_7_class_30 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.3540039f ? 
         (data[1 /* type_of_time */] <1.5f ? 
            1.0f : 
            0.0f) : 
         (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <2.5f ? 
            0.0f : 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <173.5f ? 
                0.0f : 
                0.8333333f)));
    return pred;
  } // constant pool size = 18B, number of visited nodes = 4, static init size = 0B
}

class log_drf_1_Tree_7_class_31 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[15]) || data[15 /* 14_letter_word */] <0.22485352f ? 
         (data[1 /* type_of_time */] <4.5f ? 
            0.0f : 
             (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.38671875f ? 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <65.5f ? 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.2109375f ? 
                        1.3290097E-4f : 
                        7.116172E-4f) : 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.8984375f ? 
                        0.13192183f : 
                        0.44408944f)) : 
                 (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.38671875f ? 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <65.5f ? 
                        8.9621794E-4f : 
                        0.6490939f) : 
                     (data[2 /* no_of_characters */] <98.5f ? 
                        0.96f : 
                        0.0f)))) : 
         (data[5 /* 4_letter_word */] <0.125f ? 
            0.0f : 
             (data[2 /* no_of_characters */] <100.5f ? 
                1.0f : 
                 (data[5 /* 4_letter_word */] <0.29101562f ? 
                    0.8636364f : 
                    1.0f))));
    return pred;
  } // constant pool size = 50B, number of visited nodes = 12, static init size = 0B
}

class log_drf_1_Tree_7_class_32 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.5942383f ? 
         (data[0 /* vlan */] <29.5f ? 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <28.5f ? 
                 (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.03125f ? 
                     (Double.isNaN(data[13]) || data[13 /* 12_letter_word */] <0.2890625f ? 
                        0.0f : 
                        0.14285715f) : 
                    0.0f) : 
                 (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.125f ? 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.4140625f ? 
                        0.009226401f : 
                        1.0f) : 
                    1.0f)) : 
            0.0f) : 
         (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.18359375f ? 
            0.0f : 
             (data[2 /* no_of_characters */] <120.5f ? 
                 (data[10 /* 9_letter_word */] <0.1015625f ? 
                    0.0f : 
                    1.0f) : 
                0.0f)));
    return pred;
  } // constant pool size = 42B, number of visited nodes = 10, static init size = 0B
}

class log_drf_1_Tree_7_class_33 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.47216797f ? 
         (data[0 /* vlan */] <17.5f ? 
             (data[0 /* vlan */] <2.0f ? 
                1.0f : 
                 (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.41015625f ? 
                     (data[2 /* no_of_characters */] <120.5f ? 
                        0.03773585f : 
                        2.1092597E-4f) : 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <280.5f ? 
                        0.014190317f : 
                        0.7777778f))) : 
             (data[2 /* no_of_characters */] <115.5f ? 
                 (data[1 /* type_of_time */] <2.5f ? 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.5f ? 
                        0.0f : 
                        0.33333334f) : 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <33.5f ? 
                        0.0f : 
                        0.0038037775f)) : 
                0.0f)) : 
         (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.44921875f ? 
             (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                 (data[2 /* no_of_characters */] <90.5f ? 
                     (data[2 /* no_of_characters */] <86.0f ? 
                        0.33333334f : 
                        0.0f) : 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.0625f ? 
                        3.900156E-4f : 
                        0.0f)) : 
                0.0f) : 
             (data[0 /* vlan */] <19.5f ? 
                1.0f : 
                0.0f)));
    return pred;
  } // constant pool size = 66B, number of visited nodes = 16, static init size = 0B
}

class log_drf_1_Tree_7_class_34 {
  static final double score0(double[] data) {
    double pred =      (data[8 /* 7_letter_word */] <0.16992188f ? 
         (data[0 /* vlan */] <9.5f ? 
             (data[5 /* 4_letter_word */] <0.29101562f ? 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <115.5f ? 
                    0.0f : 
                    0.5f) : 
                0.0f) : 
             (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.16527557f ? 
                0.0f : 
                 (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.25f ? 
                    0.0f : 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.4140625f ? 
                        0.025f : 
                        0.0f)))) : 
        0.0f);
    return pred;
  } // constant pool size = 30B, number of visited nodes = 7, static init size = 0B
}

class log_drf_1_Tree_7_class_35 {
  static final double score0(double[] data) {
    double pred =      (data[8 /* 7_letter_word */] <0.16992188f ? 
         (data[0 /* vlan */] <18.5f ? 
             (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.15498734f ? 
                 (data[6 /* 5_letter_word */] <0.03125f ? 
                     (data[1 /* type_of_time */] <4.5f ? 
                        0.0f : 
                        0.0046997387f) : 
                     (data[2 /* no_of_characters */] <140.5f ? 
                        0.11111111f : 
                        1.4583637E-4f)) : 
                 (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.0859375f ? 
                     (data[2 /* no_of_characters */] <250.5f ? 
                        1.0f : 
                        0.0f) : 
                    0.0f)) : 
            0.0f) : 
         (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.05078125f ? 
             (data[2 /* no_of_characters */] <90.5f ? 
                 (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.25f ? 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <87.0f ? 
                        0.0f : 
                        0.022727273f) : 
                    0.0f) : 
                0.0f) : 
            0.0f));
    return pred;
  } // constant pool size = 50B, number of visited nodes = 12, static init size = 0B
}

class log_drf_1_Tree_7_class_36 {
  static final double score0(double[] data) {
    double pred =      (data[8 /* 7_letter_word */] <0.16992188f ? 
         (data[0 /* vlan */] <5.5f ? 
             (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.083984375f ? 
                0.0f : 
                0.72727275f) : 
            0.0f) : 
        0.0f);
    return pred;
  } // constant pool size = 14B, number of visited nodes = 3, static init size = 0B
}

class log_drf_1_Tree_7_class_37 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.29296875f ? 
         (data[1 /* type_of_time */] <4.5f ? 
             (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.18359375f ? 
                 (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.18359375f ? 
                     (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <2.0f ? 
                        0.998609f : 
                        0.0f) : 
                     (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.111979164f ? 
                        0.75115883f : 
                        1.0f)) : 
                 (Double.isNaN(data[1]) || data[1 /* type_of_time */] <3.5f ? 
                     (Double.isNaN(data[12]) || data[12 /* 11_letter_word */] <0.125f ? 
                        0.02153846f : 
                        0.0f) : 
                    1.0f)) : 
             (Double.isNaN(data[12]) || data[12 /* 11_letter_word */] <0.7480469f ? 
                 (data[3 /* no_of_ips */] <0.5f ? 
                     (data[2 /* no_of_characters */] <59.5f ? 
                        0.07530121f : 
                        0.0032840723f) : 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.4609375f ? 
                        0.0f : 
                        4.8828125E-4f)) : 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <94.0f ? 
                    0.0f : 
                    1.0f))) : 
         (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
             (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.29101562f ? 
                 (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.22395833f ? 
                        0.99875563f : 
                        0.99749845f) : 
                     (data[0 /* vlan */] <17.5f ? 
                        0.2f : 
                        0.0f)) : 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <154.5f ? 
                     (data[1 /* type_of_time */] <3.5f ? 
                        1.0f : 
                        0.0f) : 
                    1.0f)) : 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <155.5f ? 
                0.0f : 
                 (Double.isNaN(data[1]) || data[1 /* type_of_time */] <3.5f ? 
                    0.0f : 
                     (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <3.0f ? 
                        0.9066667f : 
                        0.0f)))));
    return pred;
  } // constant pool size = 94B, number of visited nodes = 23, static init size = 0B
}

class log_drf_1_Tree_7_class_38 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.47216797f ? 
         (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
            0.0f : 
             (data[2 /* no_of_characters */] <90.5f ? 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <65.5f ? 
                    0.0f : 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.12541962f ? 
                        0.0031347962f : 
                        0.0f)) : 
                0.0f)) : 
         (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
             (data[2 /* no_of_characters */] <95.5f ? 
                0.004784689f : 
                0.0f) : 
            0.0f));
    return pred;
  } // constant pool size = 30B, number of visited nodes = 7, static init size = 0B
}


class log_drf_1_Forest_8 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += log_drf_1_Tree_8_class_0.score0(fdata);
    preds[2] += log_drf_1_Tree_8_class_1.score0(fdata);
    preds[3] += log_drf_1_Tree_8_class_2.score0(fdata);
    preds[4] += log_drf_1_Tree_8_class_3.score0(fdata);
    preds[5] += log_drf_1_Tree_8_class_4.score0(fdata);
    preds[6] += log_drf_1_Tree_8_class_5.score0(fdata);
    preds[7] += log_drf_1_Tree_8_class_6.score0(fdata);
    preds[8] += log_drf_1_Tree_8_class_7.score0(fdata);
    preds[9] += log_drf_1_Tree_8_class_8.score0(fdata);
    preds[10] += log_drf_1_Tree_8_class_9.score0(fdata);
    preds[11] += log_drf_1_Tree_8_class_10.score0(fdata);
    preds[12] += log_drf_1_Tree_8_class_11.score0(fdata);
    preds[13] += log_drf_1_Tree_8_class_12.score0(fdata);
    preds[14] += log_drf_1_Tree_8_class_13.score0(fdata);
    preds[15] += log_drf_1_Tree_8_class_14.score0(fdata);
    preds[16] += log_drf_1_Tree_8_class_15.score0(fdata);
    preds[17] += log_drf_1_Tree_8_class_16.score0(fdata);
    preds[18] += log_drf_1_Tree_8_class_17.score0(fdata);
    preds[19] += log_drf_1_Tree_8_class_18.score0(fdata);
    preds[20] += log_drf_1_Tree_8_class_19.score0(fdata);
    preds[21] += log_drf_1_Tree_8_class_20.score0(fdata);
    preds[22] += log_drf_1_Tree_8_class_21.score0(fdata);
    preds[23] += log_drf_1_Tree_8_class_22.score0(fdata);
    preds[24] += log_drf_1_Tree_8_class_23.score0(fdata);
    preds[25] += log_drf_1_Tree_8_class_24.score0(fdata);
    preds[26] += log_drf_1_Tree_8_class_25.score0(fdata);
    preds[27] += log_drf_1_Tree_8_class_26.score0(fdata);
    preds[28] += log_drf_1_Tree_8_class_27.score0(fdata);
    preds[29] += log_drf_1_Tree_8_class_28.score0(fdata);
    preds[30] += log_drf_1_Tree_8_class_29.score0(fdata);
    preds[31] += log_drf_1_Tree_8_class_30.score0(fdata);
    preds[32] += log_drf_1_Tree_8_class_31.score0(fdata);
    preds[33] += log_drf_1_Tree_8_class_32.score0(fdata);
    preds[34] += log_drf_1_Tree_8_class_33.score0(fdata);
    preds[35] += log_drf_1_Tree_8_class_34.score0(fdata);
    preds[36] += log_drf_1_Tree_8_class_35.score0(fdata);
    preds[37] += log_drf_1_Tree_8_class_36.score0(fdata);
    preds[38] += log_drf_1_Tree_8_class_37.score0(fdata);
    preds[39] += log_drf_1_Tree_8_class_38.score0(fdata);
  }
}
class log_drf_1_Tree_8_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.013183594f ? 
         (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <200.5f ? 
            0.0f : 
             (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.4921875f ? 
                0.0f : 
                 (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
                    0.0f : 
                     (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.052734375f ? 
                        0.0038986355f : 
                        0.0f)))) : 
         (data[9 /* 8_letter_word */] <0.1240077f ? 
             (Double.isNaN(data[14]) || data[14 /* 13_letter_word */] <0.015625f ? 
                 (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.11981f ? 
                     (Double.isNaN(data[4]) || data[4 /* no_of_macs */] <0.5f ? 
                        0.0f : 
                        0.14285715f) : 
                    1.0f) : 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.23207721f ? 
                    1.0f : 
                    0.5f)) : 
             (Double.isNaN(data[12]) || data[12 /* 11_letter_word */] <0.0234375f ? 
                 (Double.isNaN(data[13]) || data[13 /* 12_letter_word */] <0.01171875f ? 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <599.5f ? 
                        1.4023771E-4f : 
                        0.09090909f) : 
                     (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.0546875f ? 
                        0.0f : 
                        0.33333334f)) : 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <345.5f ? 
                    0.0f : 
                    0.5f))));
    return pred;
  } // constant pool size = 62B, number of visited nodes = 15, static init size = 0B
}

class log_drf_1_Tree_8_class_1 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.39208984f ? 
         (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <262.5f ? 
             (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.70703125f ? 
                0.0f : 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <171.5f ? 
                    0.0f : 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <187.5f ? 
                        0.5f : 
                        0.0f))) : 
             (data[7 /* 6_letter_word */] <0.025390625f ? 
                 (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.0859375f ? 
                    0.0f : 
                     (data[9 /* 8_letter_word */] <0.18121338f ? 
                        1.0f : 
                        0.0f)) : 
                0.0f)) : 
         (Double.isNaN(data[0]) || data[0 /* vlan */] <141.5f ? 
            0.0f : 
             (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.15527344f ? 
                 (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
                     (data[1 /* type_of_time */] <3.5f ? 
                        0.24637681f : 
                        0.0f) : 
                     (data[0 /* vlan */] <155.5f ? 
                        0.9957983f : 
                        0.0f)) : 
                0.0f)));
    return pred;
  } // constant pool size = 54B, number of visited nodes = 13, static init size = 0B
}

class log_drf_1_Tree_8_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.49560547f ? 
         (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
            0.0f : 
             (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.73046875f ? 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <137.5f ? 
                    0.0f : 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.1796875f ? 
                        0.052238807f : 
                        0.34615386f)) : 
                 (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.12583733f ? 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <140.5f ? 
                        0.026133744f : 
                        0.13348946f) : 
                     (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                        1.0f : 
                        0.0f)))) : 
         (Double.isNaN(data[0]) || data[0 /* vlan */] <181.5f ? 
             (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.1328125f ? 
                0.0f : 
                 (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.15429688f ? 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.07421875f ? 
                        0.08424111f : 
                        0.9026549f) : 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <114.0f ? 
                        0.0f : 
                        0.045454547f))) : 
             (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.10058594f ? 
                 (data[1 /* type_of_time */] <4.5f ? 
                    0.0f : 
                     (data[7 /* 6_letter_word */] <0.25f ? 
                        0.0f : 
                        1.0f)) : 
                0.0f)));
    return pred;
  } // constant pool size = 66B, number of visited nodes = 16, static init size = 0B
}

class log_drf_1_Tree_8_class_3 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.39208984f ? 
         (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <295.5f ? 
             (data[2 /* no_of_characters */] <104.5f ? 
                 (data[1 /* type_of_time */] <4.5f ? 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.171875f ? 
                        0.02200489f : 
                        0.0f) : 
                    0.0f) : 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.46875f ? 
                    0.0f : 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.52685547f ? 
                        2.5169898E-4f : 
                        0.0f))) : 
             (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.35351562f ? 
                0.0f : 
                 (data[8 /* 7_letter_word */] <0.23046875f ? 
                    0.0f : 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <98.0f ? 
                        1.0f : 
                        0.0f)))) : 
         (data[0 /* vlan */] <29.5f ? 
             (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.0390625f ? 
                 (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.22265625f ? 
                    0.0f : 
                     (data[2 /* no_of_characters */] <130.5f ? 
                        0.0f : 
                        0.9120235f)) : 
                0.0f) : 
             (data[0 /* vlan */] <156.5f ? 
                 (data[2 /* no_of_characters */] <90.5f ? 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.16796875f ? 
                        8.7412586E-4f : 
                        0.0f) : 
                    0.0f) : 
                0.0f)));
    return pred;
  } // constant pool size = 70B, number of visited nodes = 17, static init size = 0B
}

class log_drf_1_Tree_8_class_4 {
  static final double score0(double[] data) {
    double pred =      (data[1 /* type_of_time */] <4.5f ? 
        0.0f : 
         (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.3095703f ? 
             (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.421875f ? 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.24389648f ? 
                     (data[5 /* 4_letter_word */] <0.0625f ? 
                        1.11141984E-4f : 
                        0.0f) : 
                     (data[7 /* 6_letter_word */] <0.26144347f ? 
                        9.0307044E-4f : 
                        0.0f)) : 
                 (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.265625f ? 
                    0.0f : 
                     (data[3 /* no_of_ips */] <0.5f ? 
                        0.0032258064f : 
                        0.0070422534f))) : 
             (data[10 /* 9_letter_word */] <0.36620712f ? 
                 (data[2 /* no_of_characters */] <120.5f ? 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.16796875f ? 
                        0.7941176f : 
                        0.0f) : 
                    0.0f) : 
                0.0f)));
    return pred;
  } // constant pool size = 46B, number of visited nodes = 11, static init size = 0B
}

class log_drf_1_Tree_8_class_5 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.27929688f ? 
         (data[2 /* no_of_characters */] <108.5f ? 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <104.5f ? 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <33.5f ? 
                    0.0f : 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.21875f ? 
                        0.0f : 
                        0.022988506f)) : 
                 (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.125f ? 
                    0.0f : 
                     (data[8 /* 7_letter_word */] <0.171875f ? 
                        0.5f : 
                        0.0f))) : 
            0.0f) : 
         (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.08984375f ? 
             (Double.isNaN(data[12]) || data[12 /* 11_letter_word */] <0.29101562f ? 
                 (data[2 /* no_of_characters */] <150.5f ? 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.15625f ? 
                        0.0011629987f : 
                        0.0f) : 
                    0.0f) : 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <33.5f ? 
                    0.0f : 
                    0.6666667f)) : 
             (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.087890625f ? 
                0.0f : 
                 (data[6 /* 5_letter_word */] <0.09520569f ? 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.2265625f ? 
                        0.0f : 
                        1.0f) : 
                     (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.067708336f ? 
                        0.009296149f : 
                        0.6923077f)))));
    return pred;
  } // constant pool size = 66B, number of visited nodes = 16, static init size = 0B
}

class log_drf_1_Tree_8_class_6 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.1616211f ? 
         (data[2 /* no_of_characters */] <70.5f ? 
             (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.16796875f ? 
                 (data[0 /* vlan */] <17.5f ? 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.7421875f ? 
                        0.034246575f : 
                        1.0f) : 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.6640625f ? 
                        0.007575758f : 
                        0.8f)) : 
                1.0f) : 
             (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.27929688f ? 
                 (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
                    0.0f : 
                     (data[2 /* no_of_characters */] <108.5f ? 
                        0.0010247652f : 
                        0.0f)) : 
                 (data[2 /* no_of_characters */] <99.5f ? 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <93.5f ? 
                        0.0f : 
                        0.35643566f) : 
                    0.0f))) : 
         (data[0 /* vlan */] <133.5f ? 
             (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.22460938f ? 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <131.5f ? 
                    0.0f : 
                    1.0f) : 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <122.5f ? 
                    0.0f : 
                    1.0f)) : 
            0.0f));
    return pred;
  } // constant pool size = 62B, number of visited nodes = 15, static init size = 0B
}

class log_drf_1_Tree_8_class_7 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.94970703f ? 
        0.0f : 
         (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <165.5f ? 
             (data[3 /* no_of_ips */] <0.5f ? 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <153.5f ? 
                    0.0f : 
                     (data[1 /* type_of_time */] <4.5f ? 
                        0.0f : 
                        0.1875f)) : 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <178.5f ? 
                    0.0f : 
                    1.0f)) : 
             (data[2 /* no_of_characters */] <186.5f ? 
                 (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <2.5f ? 
                     (data[0 /* vlan */] <178.5f ? 
                        0.0f : 
                        1.0f) : 
                    0.0f) : 
                 (data[2 /* no_of_characters */] <193.5f ? 
                     (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <1.0f ? 
                        0.0f : 
                        1.0f) : 
                    0.0f))));
    return pred;
  } // constant pool size = 46B, number of visited nodes = 11, static init size = 0B
}

class log_drf_1_Tree_8_class_8 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.53759766f ? 
         (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <901.5f ? 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <638.0f ? 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <178.5f ? 
                    0.0f : 
                     (data[2 /* no_of_characters */] <137.5f ? 
                        0.00486618f : 
                        0.0f)) : 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.0390625f ? 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.21875f ? 
                        0.006756757f : 
                        0.0f) : 
                    0.0f)) : 
             (data[6 /* 5_letter_word */] <0.03515625f ? 
                 (Double.isNaN(data[13]) || data[13 /* 12_letter_word */] <0.03125f ? 
                     (data[1 /* type_of_time */] <4.5f ? 
                        0.0f : 
                        0.9375f) : 
                    0.0f) : 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.17578125f ? 
                     (data[2 /* no_of_characters */] <937.5f ? 
                        1.0f : 
                        0.05109489f) : 
                    0.0f))) : 
         (Double.isNaN(data[0]) || data[0 /* vlan */] <173.5f ? 
            0.0f : 
             (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.17109375f ? 
                 (data[0 /* vlan */] <181.5f ? 
                     (data[2 /* no_of_characters */] <569.5f ? 
                        0.0f : 
                        0.97619045f) : 
                    0.0f) : 
                0.0f)));
    return pred;
  } // constant pool size = 66B, number of visited nodes = 16, static init size = 0B
}

class log_drf_1_Tree_8_class_9 {
  static final double score0(double[] data) {
    double pred =      (data[1 /* type_of_time */] <3.5f ? 
         (data[1 /* type_of_time */] <2.5f ? 
            0.0f : 
             (data[10 /* 9_letter_word */] <0.05078125f ? 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <211.0f ? 
                    1.0f : 
                    0.0f) : 
                1.0f)) : 
        0.0f);
    return pred;
  } // constant pool size = 18B, number of visited nodes = 4, static init size = 0B
}

class log_drf_1_Tree_8_class_10 {
  static final double score0(double[] data) {
    double pred =      (data[1 /* type_of_time */] <4.5f ? 
        0.0f : 
         (Double.isNaN(data[0]) || data[0 /* vlan */] <154.5f ? 
            0.0f : 
             (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.46289062f ? 
                0.0f : 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.25f ? 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.328125f ? 
                        0.33333334f : 
                        1.0f) : 
                    0.5f))));
    return pred;
  } // constant pool size = 22B, number of visited nodes = 5, static init size = 0B
}

class log_drf_1_Tree_8_class_11 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.14111328f ? 
        0.0f : 
         (data[9 /* 8_letter_word */] <0.14866209f ? 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <123.5f ? 
                0.0f : 
                 (data[8 /* 7_letter_word */] <0.21484375f ? 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.07217407f ? 
                        0.0f : 
                        0.33333334f) : 
                    0.0f)) : 
            0.0f));
    return pred;
  } // constant pool size = 22B, number of visited nodes = 5, static init size = 0B
}

class log_drf_1_Tree_8_class_12 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.5830078f ? 
         (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <425.0f ? 
            0.0f : 
             (data[2 /* no_of_characters */] <434.5f ? 
                 (data[7 /* 6_letter_word */] <0.55859375f ? 
                    0.0f : 
                    1.0f) : 
                 (data[6 /* 5_letter_word */] <0.03125f ? 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <589.0f ? 
                        0.0f : 
                        1.0f) : 
                    0.0f))) : 
         (Double.isNaN(data[0]) || data[0 /* vlan */] <582.5f ? 
            0.0f : 
            1.0f));
    return pred;
  } // constant pool size = 30B, number of visited nodes = 7, static init size = 0B
}

class log_drf_1_Tree_8_class_13 {
  static final double score0(double[] data) {
    double pred =      (data[1 /* type_of_time */] <4.5f ? 
        0.0f : 
         (Double.isNaN(data[0]) || data[0 /* vlan */] <593.5f ? 
             (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.19335938f ? 
                 (data[2 /* no_of_characters */] <30.5f ? 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.5f ? 
                        0.85f : 
                        1.0f) : 
                    0.0f) : 
                 (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.234375f ? 
                    0.0f : 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.234375f ? 
                        0.0017059554f : 
                        0.21447028f))) : 
             (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.16796875f ? 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <30.5f ? 
                    1.0f : 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <58.0f ? 
                        0.057142857f : 
                        1.0f)) : 
                0.0f)));
    return pred;
  } // constant pool size = 42B, number of visited nodes = 10, static init size = 0B
}

class log_drf_1_Tree_8_class_14 {
  static final double score0(double[] data) {
    double pred =      (data[1 /* type_of_time */] <2.5f ? 
         (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <220.5f ? 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <214.5f ? 
                 (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.1015625f ? 
                    0.0f : 
                     (data[11 /* 10_letter_word */] <0.22469075f ? 
                        1.0f : 
                        0.0f)) : 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <106.0f ? 
                    1.0f : 
                    0.0f)) : 
            0.0f) : 
        0.0f);
    return pred;
  } // constant pool size = 26B, number of visited nodes = 6, static init size = 0B
}

class log_drf_1_Tree_8_class_15 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.94970703f ? 
         (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
            0.0f : 
             (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.59375f ? 
                 (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.4340458f ? 
                     (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.3125f ? 
                        0.0021886681f : 
                        0.035233572f) : 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <280.5f ? 
                        0.0f : 
                        0.008658009f)) : 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <113.5f ? 
                    0.0f : 
                     (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <1.5f ? 
                        0.44444445f : 
                        1.0f)))) : 
         (data[0 /* vlan */] <28.5f ? 
            0.0f : 
             (Double.isNaN(data[4]) || data[4 /* no_of_macs */] <0.5f ? 
                 (data[3 /* no_of_ips */] <1.5f ? 
                    0.0f : 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <99.5f ? 
                        0.082122095f : 
                        0.30236796f)) : 
                0.0f)));
    return pred;
  } // constant pool size = 50B, number of visited nodes = 12, static init size = 0B
}

class log_drf_1_Tree_8_class_16 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.94970703f ? 
         (data[2 /* no_of_characters */] <105.5f ? 
             (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.29101562f ? 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <103.5f ? 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <65.5f ? 
                        0.0f : 
                        0.0013850415f) : 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.4140625f ? 
                        0.0f : 
                        0.009803922f)) : 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.16796875f ? 
                     (data[11 /* 10_letter_word */] <0.4128723f ? 
                        0.33333334f : 
                        0.0f) : 
                    0.0f)) : 
            2.8165841E-5f) : 
         (data[0 /* vlan */] <28.5f ? 
            0.0f : 
             (data[2 /* no_of_characters */] <80.5f ? 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <78.5f ? 
                    0.0f : 
                    1.0f) : 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <31.0f ? 
                    0.0f : 
                     (data[0 /* vlan */] <38.5f ? 
                        0.33333334f : 
                        0.0f)))));
    return pred;
  } // constant pool size = 54B, number of visited nodes = 13, static init size = 0B
}

class log_drf_1_Tree_8_class_17 {
  static final double score0(double[] data) {
    double pred =      (data[1 /* type_of_time */] <4.5f ? 
        1.01495025E-5f : 
         (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <3.5f ? 
             (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.064453125f ? 
                 (data[5 /* 4_letter_word */] <0.03125f ? 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <659.5f ? 
                        0.0f : 
                        0.8238636f) : 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.058410645f ? 
                        0.0f : 
                        0.5f)) : 
                0.0f) : 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <991.0f ? 
                0.0f : 
                 (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <4.5f ? 
                     (data[2 /* no_of_characters */] <1019.0f ? 
                        1.0f : 
                        0.972973f) : 
                    0.0f))));
    return pred;
  } // constant pool size = 38B, number of visited nodes = 9, static init size = 0B
}

class log_drf_1_Tree_8_class_18 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.07470703f ? 
        0.0f : 
         (data[9 /* 8_letter_word */] <0.08012867f ? 
            0.1f : 
            0.0f));
    return pred;
  } // constant pool size = 10B, number of visited nodes = 2, static init size = 0B
}

class log_drf_1_Tree_8_class_19 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.24023438f ? 
         (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.1937828f ? 
            0.0f : 
             (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.15039062f ? 
                0.0f : 
                 (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.1015625f ? 
                    0.0f : 
                     (data[5 /* 4_letter_word */] <0.30015868f ? 
                        1.0f : 
                        0.0f)))) : 
         (data[0 /* vlan */] <17.5f ? 
             (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.22460938f ? 
                0.0f : 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <205.5f ? 
                     (data[2 /* no_of_characters */] <124.5f ? 
                        0.16666667f : 
                        1.0f) : 
                    0.0f)) : 
            0.0f));
    return pred;
  } // constant pool size = 38B, number of visited nodes = 9, static init size = 0B
}

class log_drf_1_Tree_8_class_20 {
  static final double score0(double[] data) {
    double pred =      (data[1 /* type_of_time */] <4.5f ? 
        0.0f : 
         (data[0 /* vlan */] <23.5f ? 
             (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <3.5f ? 
                 (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.078125f ? 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.4609375f ? 
                        0.9933591f : 
                        0.8981946f) : 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.296875f ? 
                        0.524173f : 
                        0.93729556f)) : 
                0.0f) : 
            0.0f));
    return pred;
  } // constant pool size = 26B, number of visited nodes = 6, static init size = 0B
}

class log_drf_1_Tree_8_class_21 {
  static final double score0(double[] data) {
    double pred =      (data[1 /* type_of_time */] <3.5f ? 
         (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <220.5f ? 
            0.0f : 
             (data[6 /* 5_letter_word */] <0.05078125f ? 
                 (data[0 /* vlan */] <57.5f ? 
                    0.0f : 
                    1.0f) : 
                0.0f)) : 
         (data[0 /* vlan */] <11.5f ? 
             (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.78515625f ? 
                0.0f : 
                0.30952382f) : 
             (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.1484375f ? 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <260.5f ? 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.105529785f ? 
                        0.0014519517f : 
                        0.023076924f) : 
                     (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.15625f ? 
                        0.013627254f : 
                        0.17460318f)) : 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.1328125f ? 
                     (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.015625f ? 
                        2.1457692E-4f : 
                        0.0f) : 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.0390625f ? 
                        8.665511E-4f : 
                        0.0f)))));
    return pred;
  } // constant pool size = 54B, number of visited nodes = 13, static init size = 0B
}

class log_drf_1_Tree_8_class_22 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.49560547f ? 
        6.8407408E-6f : 
         (data[0 /* vlan */] <7.5f ? 
             (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.083984375f ? 
                0.0f : 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <130.5f ? 
                    0.0f : 
                    0.5f)) : 
             (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.31640625f ? 
                0.0f : 
                 (data[0 /* vlan */] <24.0f ? 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <220.5f ? 
                        0.0f : 
                        0.08f) : 
                    0.0f))));
    return pred;
  } // constant pool size = 30B, number of visited nodes = 7, static init size = 0B
}

class log_drf_1_Tree_8_class_23 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.5830078f ? 
         (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <257.5f ? 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <243.5f ? 
                 (data[0 /* vlan */] <17.5f ? 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.3671875f ? 
                        0.0018836826f : 
                        0.5833333f) : 
                    0.0f) : 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.69140625f ? 
                    0.0f : 
                    1.0f)) : 
             (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.421875f ? 
                 (Double.isNaN(data[13]) || data[13 /* 12_letter_word */] <0.07421875f ? 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.2578125f ? 
                        0.00246063f : 
                        0.0f) : 
                     (Double.isNaN(data[13]) || data[13 /* 12_letter_word */] <0.117001005f ? 
                        1.0f : 
                        0.0f)) : 
                 (data[8 /* 7_letter_word */] <0.265625f ? 
                    0.0f : 
                     (data[9 /* 8_letter_word */] <0.07421875f ? 
                        0.0f : 
                        1.0f)))) : 
         (Double.isNaN(data[0]) || data[0 /* vlan */] <18.5f ? 
             (data[9 /* 8_letter_word */] <0.8333333f ? 
                1.0f : 
                0.9895735f) : 
            0.0f));
    return pred;
  } // constant pool size = 58B, number of visited nodes = 14, static init size = 0B
}

class log_drf_1_Tree_8_class_24 {
  static final double score0(double[] data) {
    double pred =      (data[1 /* type_of_time */] <4.5f ? 
        0.0f : 
         (data[0 /* vlan */] <11.5f ? 
             (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                0.0f : 
                 (data[2 /* no_of_characters */] <180.5f ? 
                    1.0f : 
                    0.0f)) : 
            0.0f));
    return pred;
  } // constant pool size = 18B, number of visited nodes = 4, static init size = 0B
}

class log_drf_1_Tree_8_class_25 {
  static final double score0(double[] data) {
    double pred =      (data[1 /* type_of_time */] <4.5f ? 
        0.0f : 
         (Double.isNaN(data[0]) || data[0 /* vlan */] <29.5f ? 
             (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <1.5f ? 
                 (data[2 /* no_of_characters */] <110.5f ? 
                     (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.125f ? 
                        0.0022164013f : 
                        0.112426035f) : 
                     (data[2 /* no_of_characters */] <125.5f ? 
                        1.9076688E-4f : 
                        0.0f)) : 
                 (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.2890625f ? 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.6171875f ? 
                        0.01956915f : 
                        0.9726027f) : 
                    0.16388889f)) : 
             (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.44140625f ? 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <45.5f ? 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.15625f ? 
                        0.9553914f : 
                        0.9892396f) : 
                     (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.046875f ? 
                        0.0f : 
                        0.0025906735f)) : 
                 (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.88871765f ? 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.2734375f ? 
                        0.9910686f : 
                        0.9948696f) : 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <140.5f ? 
                        0.0f : 
                        0.0754717f)))));
    return pred;
  } // constant pool size = 62B, number of visited nodes = 15, static init size = 0B
}

class log_drf_1_Tree_8_class_26 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.6513672f ? 
        0.0f : 
         (data[2 /* no_of_characters */] <63.5f ? 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <29.5f ? 
                0.99763596f : 
                0.0f) : 
            0.0f));
    return pred;
  } // constant pool size = 14B, number of visited nodes = 3, static init size = 0B
}

class log_drf_1_Tree_8_class_27 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.49560547f ? 
        0.0f : 
         (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <255.5f ? 
            0.0f : 
             (data[0 /* vlan */] <19.5f ? 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.22265625f ? 
                    0.0f : 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.106770836f ? 
                        0.1f : 
                        0.0f)) : 
                0.0f)));
    return pred;
  } // constant pool size = 22B, number of visited nodes = 5, static init size = 0B
}

class log_drf_1_Tree_8_class_28 {
  static final double score0(double[] data) {
    double pred =      (data[1 /* type_of_time */] <4.5f ? 
        0.0f : 
         (data[0 /* vlan */] <17.5f ? 
             (data[3 /* no_of_ips */] <3.0f ? 
                0.0f : 
                1.0f) : 
            0.0f));
    return pred;
  } // constant pool size = 14B, number of visited nodes = 3, static init size = 0B
}

class log_drf_1_Tree_8_class_29 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.51464844f ? 
        1.1759933E-5f : 
         (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.018554688f ? 
             (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.7753353f ? 
                0.0f : 
                 (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.14973958f ? 
                    0.0f : 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <19.0f ? 
                        0.0f : 
                        0.33333334f))) : 
             (Double.isNaN(data[12]) || data[12 /* 11_letter_word */] <0.009765625f ? 
                0.0f : 
                1.0f)));
    return pred;
  } // constant pool size = 26B, number of visited nodes = 6, static init size = 0B
}

class log_drf_1_Tree_8_class_30 {
  static final double score0(double[] data) {
    double pred =      (data[1 /* type_of_time */] <1.5f ? 
        1.0f : 
        0.0f);
    return pred;
  } // constant pool size = 6B, number of visited nodes = 1, static init size = 0B
}

class log_drf_1_Tree_8_class_31 {
  static final double score0(double[] data) {
    double pred =      (data[1 /* type_of_time */] <4.5f ? 
        0.0f : 
         (Double.isNaN(data[0]) || data[0 /* vlan */] <64.5f ? 
             (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.32226562f ? 
                0.0f : 
                 (Double.isNaN(data[13]) || data[13 /* 12_letter_word */] <0.22265625f ? 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.15625f ? 
                        0.00129887f : 
                        0.0f) : 
                     (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.125f ? 
                        0.0f : 
                        0.5f))) : 
             (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.34960938f ? 
                 (data[5 /* 4_letter_word */] <0.07421875f ? 
                     (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.25f ? 
                        0.13157895f : 
                        1.0f) : 
                     (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <1.5f ? 
                        0.45028248f : 
                        0.0f)) : 
                 (data[0 /* vlan */] <99.0f ? 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.1015625f ? 
                        0.8095238f : 
                        1.0f) : 
                    0.0f))));
    return pred;
  } // constant pool size = 50B, number of visited nodes = 12, static init size = 0B
}

class log_drf_1_Tree_8_class_32 {
  static final double score0(double[] data) {
    double pred =      (data[1 /* type_of_time */] <4.5f ? 
        0.0f : 
         (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.19140625f ? 
             (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.2421875f ? 
                0.0f : 
                 (data[2 /* no_of_characters */] <130.5f ? 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.21875f ? 
                        0.0f : 
                        0.043691702f) : 
                    0.0f)) : 
             (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.5488281f ? 
                 (data[10 /* 9_letter_word */] <0.446875f ? 
                    0.0f : 
                     (data[6 /* 5_letter_word */] <0.125f ? 
                        0.037456445f : 
                        0.0f)) : 
                 (data[0 /* vlan */] <21.5f ? 
                    0.0f : 
                    1.0f))));
    return pred;
  } // constant pool size = 38B, number of visited nodes = 9, static init size = 0B
}

class log_drf_1_Tree_8_class_33 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.40820312f ? 
         (data[2 /* no_of_characters */] <58.5f ? 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <52.5f ? 
                 (data[0 /* vlan */] <106.0f ? 
                     (data[8 /* 7_letter_word */] <0.125f ? 
                        0.44444445f : 
                        0.010869565f) : 
                    0.0f) : 
                 (data[5 /* 4_letter_word */] <0.12596893f ? 
                    1.0f : 
                    0.5f)) : 
             (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.47070312f ? 
                 (data[2 /* no_of_characters */] <106.5f ? 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.22642517f ? 
                        5.502366E-4f : 
                        0.0073710075f) : 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.3515625f ? 
                        2.490722E-5f : 
                        0.0f)) : 
                 (data[0 /* vlan */] <9.5f ? 
                    1.0f : 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.4140625f ? 
                        0.0f : 
                        0.010920437f)))) : 
         (data[0 /* vlan */] <3.5f ? 
            1.0f : 
             (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.080078125f ? 
                 (data[2 /* no_of_characters */] <90.5f ? 
                     (data[0 /* vlan */] <20.5f ? 
                        0.93939394f : 
                        0.0012399256f) : 
                     (data[0 /* vlan */] <20.5f ? 
                        0.0012787724f : 
                        1.10318455E-4f)) : 
                 (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.04296875f ? 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.109375f ? 
                        0.0058651026f : 
                        0.17525773f) : 
                     (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.12869263f ? 
                        1.0f : 
                        0.0f)))));
    return pred;
  } // constant pool size = 82B, number of visited nodes = 20, static init size = 0B
}

class log_drf_1_Tree_8_class_34 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.24804688f ? 
        0.0f : 
         (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.24023438f ? 
            0.0f : 
             (data[0 /* vlan */] <9.5f ? 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <52.5f ? 
                    0.0f : 
                    0.5f) : 
                0.0f)));
    return pred;
  } // constant pool size = 18B, number of visited nodes = 4, static init size = 0B
}

class log_drf_1_Tree_8_class_35 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.8745117f ? 
         (data[2 /* no_of_characters */] <140.5f ? 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <126.5f ? 
                 (data[0 /* vlan */] <17.5f ? 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.2890625f ? 
                        0.0038387715f : 
                        0.22222222f) : 
                    0.0f) : 
                 (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <1.5f ? 
                     (data[2 /* no_of_characters */] <127.5f ? 
                        0.015873017f : 
                        3.911598E-4f) : 
                    0.0f)) : 
             (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.24023438f ? 
                0.0f : 
                 (data[2 /* no_of_characters */] <167.5f ? 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <164.5f ? 
                        0.0f : 
                        0.0040983604f) : 
                    0.0f))) : 
         (data[0 /* vlan */] <18.5f ? 
             (data[2 /* no_of_characters */] <93.0f ? 
                1.0f : 
                0.0f) : 
            0.0f));
    return pred;
  } // constant pool size = 50B, number of visited nodes = 12, static init size = 0B
}

class log_drf_1_Tree_8_class_36 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.1616211f ? 
        0.0f : 
         (data[9 /* 8_letter_word */] <0.1755395f ? 
             (data[0 /* vlan */] <9.5f ? 
                0.7692308f : 
                0.0f) : 
            0.0f));
    return pred;
  } // constant pool size = 14B, number of visited nodes = 3, static init size = 0B
}

class log_drf_1_Tree_8_class_37 {
  static final double score0(double[] data) {
    double pred =      (data[1 /* type_of_time */] <4.5f ? 
         (data[1 /* type_of_time */] <3.5f ? 
             (data[3 /* no_of_ips */] <0.5f ? 
                 (data[5 /* 4_letter_word */] <0.171875f ? 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.0625f ? 
                        0.9655172f : 
                        1.0f) : 
                     (data[11 /* 10_letter_word */] <0.1015625f ? 
                        0.7777778f : 
                        0.0f)) : 
                 (data[2 /* no_of_characters */] <111.5f ? 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <94.5f ? 
                        0.0f : 
                        0.25f) : 
                    0.0f)) : 
             (data[2 /* no_of_characters */] <107.5f ? 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <103.5f ? 
                    0.9972145f : 
                    0.8695652f) : 
                 (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.22265625f ? 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.9140625f ? 
                        0.9998604f : 
                        0.9980961f) : 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <237.5f ? 
                        0.9985078f : 
                        0.9919028f)))) : 
         (data[3 /* no_of_ips */] <0.5f ? 
             (Double.isNaN(data[12]) || data[12 /* 11_letter_word */] <0.7480469f ? 
                 (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.0078125f ? 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.96875f ? 
                        0.0030938042f : 
                        0.013799743f) : 
                    0.0f) : 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <94.0f ? 
                    0.0f : 
                    1.0f)) : 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <155.5f ? 
                0.0f : 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.4609375f ? 
                    0.0f : 
                     (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <3.5f ? 
                        0.001713796f : 
                        0.0f)))));
    return pred;
  } // constant pool size = 86B, number of visited nodes = 21, static init size = 0B
}

class log_drf_1_Tree_8_class_38 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.94970703f ? 
         (data[2 /* no_of_characters */] <93.5f ? 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <92.5f ? 
                0.0f : 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.4140625f ? 
                    0.0f : 
                    0.33333334f)) : 
            0.0f) : 
        1.7320516E-4f);
    return pred;
  } // constant pool size = 18B, number of visited nodes = 4, static init size = 0B
}


class log_drf_1_Forest_9 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += log_drf_1_Tree_9_class_0.score0(fdata);
    preds[2] += log_drf_1_Tree_9_class_1.score0(fdata);
    preds[3] += log_drf_1_Tree_9_class_2.score0(fdata);
    preds[4] += log_drf_1_Tree_9_class_3.score0(fdata);
    preds[5] += log_drf_1_Tree_9_class_4.score0(fdata);
    preds[6] += log_drf_1_Tree_9_class_5.score0(fdata);
    preds[7] += log_drf_1_Tree_9_class_6.score0(fdata);
    preds[8] += log_drf_1_Tree_9_class_7.score0(fdata);
    preds[9] += log_drf_1_Tree_9_class_8.score0(fdata);
    preds[10] += log_drf_1_Tree_9_class_9.score0(fdata);
    preds[11] += log_drf_1_Tree_9_class_10.score0(fdata);
    preds[12] += log_drf_1_Tree_9_class_11.score0(fdata);
    preds[13] += log_drf_1_Tree_9_class_12.score0(fdata);
    preds[14] += log_drf_1_Tree_9_class_13.score0(fdata);
    preds[15] += log_drf_1_Tree_9_class_14.score0(fdata);
    preds[16] += log_drf_1_Tree_9_class_15.score0(fdata);
    preds[17] += log_drf_1_Tree_9_class_16.score0(fdata);
    preds[18] += log_drf_1_Tree_9_class_17.score0(fdata);
    preds[19] += log_drf_1_Tree_9_class_18.score0(fdata);
    preds[20] += log_drf_1_Tree_9_class_19.score0(fdata);
    preds[21] += log_drf_1_Tree_9_class_20.score0(fdata);
    preds[22] += log_drf_1_Tree_9_class_21.score0(fdata);
    preds[23] += log_drf_1_Tree_9_class_22.score0(fdata);
    preds[24] += log_drf_1_Tree_9_class_23.score0(fdata);
    preds[25] += log_drf_1_Tree_9_class_24.score0(fdata);
    preds[26] += log_drf_1_Tree_9_class_25.score0(fdata);
    preds[27] += log_drf_1_Tree_9_class_26.score0(fdata);
    preds[28] += log_drf_1_Tree_9_class_27.score0(fdata);
    preds[29] += log_drf_1_Tree_9_class_28.score0(fdata);
    preds[30] += log_drf_1_Tree_9_class_29.score0(fdata);
    preds[31] += log_drf_1_Tree_9_class_30.score0(fdata);
    preds[32] += log_drf_1_Tree_9_class_31.score0(fdata);
    preds[33] += log_drf_1_Tree_9_class_32.score0(fdata);
    preds[34] += log_drf_1_Tree_9_class_33.score0(fdata);
    preds[35] += log_drf_1_Tree_9_class_34.score0(fdata);
    preds[36] += log_drf_1_Tree_9_class_35.score0(fdata);
    preds[37] += log_drf_1_Tree_9_class_36.score0(fdata);
    preds[38] += log_drf_1_Tree_9_class_37.score0(fdata);
    preds[39] += log_drf_1_Tree_9_class_38.score0(fdata);
  }
}
class log_drf_1_Tree_9_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[4]) || data[4 /* no_of_macs */] <2.5f ? 
         (Double.isNaN(data[14]) || data[14 /* 13_letter_word */] <0.0146484375f ? 
             (Double.isNaN(data[4]) || data[4 /* no_of_macs */] <0.5f ? 
                0.0f : 
                 (data[3 /* no_of_ips */] <0.5f ? 
                    1.0f : 
                    0.0f)) : 
             (Double.isNaN(data[4]) || data[4 /* no_of_macs */] <0.5f ? 
                0.0f : 
                1.0f)) : 
         (data[3 /* no_of_ips */] <1.0f ? 
            1.0f : 
            0.0f));
    return pred;
  } // constant pool size = 26B, number of visited nodes = 6, static init size = 0B
}

class log_drf_1_Tree_9_class_1 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.14160156f ? 
        0.0f : 
         (data[6 /* 5_letter_word */] <0.20698738f ? 
             (data[3 /* no_of_ips */] <1.5f ? 
                 (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.013020833f ? 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <260.5f ? 
                        0.004489338f : 
                        0.61020035f) : 
                    0.0f) : 
                0.0f) : 
             (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.01953125f ? 
                 (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.73669505f ? 
                    0.0f : 
                    0.0010991427f) : 
                0.0f)));
    return pred;
  } // constant pool size = 30B, number of visited nodes = 7, static init size = 0B
}

class log_drf_1_Tree_9_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.1484375f ? 
         (Double.isNaN(data[0]) || data[0 /* vlan */] <181.5f ? 
             (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.1328125f ? 
                0.0f : 
                 (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.5859375f ? 
                     (data[2 /* no_of_characters */] <160.5f ? 
                        0.012771997f : 
                        0.0f) : 
                     (data[0 /* vlan */] <90.0f ? 
                        0.0f : 
                        0.7854077f))) : 
             (data[7 /* 6_letter_word */] <0.4140625f ? 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.265625f ? 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <280.5f ? 
                        0.0f : 
                        0.04347826f) : 
                     (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                        0.0f : 
                        1.0f)) : 
                 (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.16796875f ? 
                     (data[1 /* type_of_time */] <4.5f ? 
                        0.0f : 
                        0.96816206f) : 
                    0.0f))) : 
         (Double.isNaN(data[4]) || data[4 /* no_of_macs */] <3.5f ? 
             (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                 (data[2 /* no_of_characters */] <130.5f ? 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.078125f ? 
                        0.0f : 
                        0.10481586f) : 
                     (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
                        0.0f : 
                        0.0019110019f)) : 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.18125f ? 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <178.5f ? 
                        0.0f : 
                        0.013513514f) : 
                     (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.0859375f ? 
                        0.0025641026f : 
                        0.33333334f))) : 
            0.5f));
    return pred;
  } // constant pool size = 82B, number of visited nodes = 20, static init size = 0B
}

class log_drf_1_Tree_9_class_3 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.3227539f ? 
         (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.24048948f ? 
            1.1084563E-4f : 
             (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.01953125f ? 
                 (data[2 /* no_of_characters */] <160.5f ? 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <153.5f ? 
                        0.0f : 
                        0.9893617f) : 
                    0.0f) : 
                0.0f)) : 
         (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <1.5f ? 
             (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.10546875f ? 
                    0.0f : 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.20833333f ? 
                        0.0f : 
                        0.52862597f)) : 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <140.5f ? 
                    0.0f : 
                     (data[0 /* vlan */] <17.5f ? 
                        0.0f : 
                        0.9810583f))) : 
            0.0f));
    return pred;
  } // constant pool size = 46B, number of visited nodes = 11, static init size = 0B
}

class log_drf_1_Tree_9_class_4 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.3095703f ? 
         (data[0 /* vlan */] <27.5f ? 
             (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.4140625f ? 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.1328125f ? 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.4765625f ? 
                        1.1946004E-4f : 
                        5.5824337E-4f) : 
                    0.0f) : 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <160.5f ? 
                    0.0f : 
                     (data[9 /* 8_letter_word */] <0.078125f ? 
                        0.012562814f : 
                        0.0f))) : 
            0.0f) : 
         (data[3 /* no_of_ips */] <0.5f ? 
             (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.29101562f ? 
                0.0f : 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.16796875f ? 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.171875f ? 
                        0.0f : 
                        0.962963f) : 
                    0.0f)) : 
            0.0f));
    return pred;
  } // constant pool size = 46B, number of visited nodes = 11, static init size = 0B
}

class log_drf_1_Tree_9_class_5 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.087402344f ? 
         (data[0 /* vlan */] <83.5f ? 
             (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.26757812f ? 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.22265625f ? 
                    0.0f : 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.6328125f ? 
                        1.2115338E-4f : 
                        0.0060753343f)) : 
                0.0f) : 
            0.0f) : 
         (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
             (data[0 /* vlan */] <85.5f ? 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <300.5f ? 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.46875f ? 
                        0.0025222064f : 
                        0.02173913f) : 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.046875f ? 
                        0.008368201f : 
                        0.5882353f)) : 
                0.0f) : 
            0.0f));
    return pred;
  } // constant pool size = 42B, number of visited nodes = 10, static init size = 0B
}

class log_drf_1_Tree_9_class_6 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.3486328f ? 
         (data[8 /* 7_letter_word */] <0.2607422f ? 
             (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <65.5f ? 
                     (data[2 /* no_of_characters */] <40.5f ? 
                        0.10344828f : 
                        4.673868E-4f) : 
                     (data[2 /* no_of_characters */] <120.5f ? 
                        0.22303207f : 
                        0.0f)) : 
                0.0f) : 
             (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.046875f ? 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.91625595f ? 
                    0.0f : 
                    5.763689E-4f) : 
                0.0f)) : 
        0.0f);
    return pred;
  } // constant pool size = 34B, number of visited nodes = 8, static init size = 0B
}

class log_drf_1_Tree_9_class_7 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.027832031f ? 
         (Double.isNaN(data[0]) || data[0 /* vlan */] <185.5f ? 
            0.0f : 
             (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.6660156f ? 
                0.0f : 
                 (data[3 /* no_of_ips */] <1.0f ? 
                    0.9767442f : 
                    1.0f))) : 
        0.0f);
    return pred;
  } // constant pool size = 18B, number of visited nodes = 4, static init size = 0B
}

class log_drf_1_Tree_9_class_8 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.27929688f ? 
         (Double.isNaN(data[0]) || data[0 /* vlan */] <173.5f ? 
            0.0f : 
             (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.072265625f ? 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <888.5f ? 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <187.5f ? 
                        0.0054744524f : 
                        0.0f) : 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.5f ? 
                        0.9189189f : 
                        1.0f)) : 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <849.0f ? 
                    0.0f : 
                    0.5f))) : 
         (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <1.5f ? 
             (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.46289062f ? 
                 (data[5 /* 4_letter_word */] <0.0625f ? 
                     (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
                        0.0f : 
                        0.0012943308f) : 
                    0.0f) : 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <599.5f ? 
                    0.0f : 
                    1.0f)) : 
             (data[6 /* 5_letter_word */] <0.2933731f ? 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.072265625f ? 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <106.0f ? 
                        0.0f : 
                        1.0f) : 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.078125f ? 
                        1.0f : 
                        0.0f)) : 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <714.0f ? 
                    0.0f : 
                     (data[2 /* no_of_characters */] <994.5f ? 
                        1.0f : 
                        0.034246575f)))));
    return pred;
  } // constant pool size = 74B, number of visited nodes = 18, static init size = 0B
}

class log_drf_1_Tree_9_class_9 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.095703125f ? 
         (Double.isNaN(data[0]) || data[0 /* vlan */] <163.5f ? 
            0.0f : 
             (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.22460938f ? 
                 (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.4140625f ? 
                     (data[8 /* 7_letter_word */] <0.1015625f ? 
                        9.7560976E-4f : 
                        0.0f) : 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <177.5f ? 
                        0.81632656f : 
                        0.0f)) : 
                 (data[1 /* type_of_time */] <3.5f ? 
                     (data[3 /* no_of_ips */] <2.5f ? 
                        0.8333333f : 
                        1.0f) : 
                    0.0f))) : 
         (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <2.5f ? 
             (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.19335938f ? 
                0.0f : 
                 (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.546875f ? 
                    0.0f : 
                    0.9787234f)) : 
             (data[6 /* 5_letter_word */] <0.26757812f ? 
                 (data[9 /* 8_letter_word */] <0.1015625f ? 
                     (data[1 /* type_of_time */] <4.0f ? 
                        0.9285714f : 
                        0.0f) : 
                     (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.0f ? 
                        1.0f : 
                        0.0f)) : 
                0.0f)));
    return pred;
  } // constant pool size = 62B, number of visited nodes = 15, static init size = 0B
}

class log_drf_1_Tree_9_class_10 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.027832031f ? 
         (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.6455078f ? 
             (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.47278404f ? 
                0.0f : 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.37109375f ? 
                    0.0f : 
                     (data[0 /* vlan */] <98.5f ? 
                        0.0f : 
                        0.0026525198f))) : 
             (data[2 /* no_of_characters */] <95.5f ? 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <88.0f ? 
                    0.0f : 
                     (data[8 /* 7_letter_word */] <0.8333333f ? 
                        1.0f : 
                        0.75f)) : 
                0.0f)) : 
        0.0f);
    return pred;
  } // constant pool size = 34B, number of visited nodes = 8, static init size = 0B
}

class log_drf_1_Tree_9_class_11 {
  static final double score0(double[] data) {
    double pred =     5.0E-6f;
    return pred;
  } // constant pool size = 2B, number of visited nodes = 0, static init size = 0B
}

class log_drf_1_Tree_9_class_12 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.027832031f ? 
         (Double.isNaN(data[0]) || data[0 /* vlan */] <593.5f ? 
            0.0f : 
             (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.1015625f ? 
                 (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                    0.0f : 
                    1.0f) : 
                0.0f)) : 
        0.0f);
    return pred;
  } // constant pool size = 18B, number of visited nodes = 4, static init size = 0B
}

class log_drf_1_Tree_9_class_13 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.2602539f ? 
         (Double.isNaN(data[0]) || data[0 /* vlan */] <593.5f ? 
             (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.03515625f ? 
                 (data[2 /* no_of_characters */] <40.5f ? 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.6171875f ? 
                        0.8888889f : 
                        0.0f) : 
                     (data[2 /* no_of_characters */] <56.5f ? 
                        0.13305613f : 
                        1.6118417E-4f)) : 
                0.0f) : 
             (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.16796875f ? 
                 (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.16796875f ? 
                    0.90123457f : 
                    1.0f) : 
                 (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.43359375f ? 
                    0.08695652f : 
                    0.0f))) : 
         (data[3 /* no_of_ips */] <0.5f ? 
             (data[2 /* no_of_characters */] <43.0f ? 
                1.0f : 
                 (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.018229166f ? 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <196.5f ? 
                        0.0f : 
                        0.002120891f) : 
                    0.0f)) : 
            0.0f));
    return pred;
  } // constant pool size = 54B, number of visited nodes = 13, static init size = 0B
}

class log_drf_1_Tree_9_class_14 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.19091797f ? 
         (data[0 /* vlan */] <27.5f ? 
             (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.19140625f ? 
                0.0f : 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.18359375f ? 
                    0.0f : 
                     (data[1 /* type_of_time */] <3.5f ? 
                        0.6666667f : 
                        0.0f))) : 
            0.0f) : 
         (data[3 /* no_of_ips */] <0.5f ? 
             (Double.isNaN(data[12]) || data[12 /* 11_letter_word */] <0.1015625f ? 
                0.0f : 
                 (Double.isNaN(data[1]) || data[1 /* type_of_time */] <3.0f ? 
                    1.0f : 
                    0.0f)) : 
            0.0f));
    return pred;
  } // constant pool size = 34B, number of visited nodes = 8, static init size = 0B
}

class log_drf_1_Tree_9_class_15 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.091796875f ? 
         (data[8 /* 7_letter_word */] <0.22460938f ? 
             (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.578125f ? 
                 (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.94921875f ? 
                     (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.3125f ? 
                        0.0010699765f : 
                        0.1265625f) : 
                     (Double.isNaN(data[4]) || data[4 /* no_of_macs */] <0.5f ? 
                        0.06292598f : 
                        0.0f)) : 
                 (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <1.5f ? 
                     (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.265625f ? 
                        0.008947369f : 
                        0.9f) : 
                     (data[7 /* 6_letter_word */] <0.6341553f ? 
                        1.0f : 
                        0.09859155f))) : 
             (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.58203125f ? 
                 (Double.isNaN(data[15]) || data[15 /* 14_letter_word */] <0.056640625f ? 
                     (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
                        0.0f : 
                        7.996801E-4f) : 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <138.5f ? 
                        0.040816326f : 
                        0.25f)) : 
                0.20673077f)) : 
         (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
             (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.38625336f ? 
                 (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.19140625f ? 
                     (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
                        0.0f : 
                        0.00391581f) : 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <32.0f ? 
                        0.0f : 
                        0.027722772f)) : 
                 (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.18489583f ? 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.21875f ? 
                        0.0f : 
                        0.040462427f) : 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.448587f ? 
                        0.58928573f : 
                        0.0f))) : 
             (data[2 /* no_of_characters */] <105.5f ? 
                 (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.25f ? 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.41818237f ? 
                        0.0f : 
                        0.11111111f) : 
                    0.0f) : 
                 (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.19140625f ? 
                     (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.046875f ? 
                        8.455945E-5f : 
                        0.0f) : 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <113.5f ? 
                        0.0f : 
                        0.0017921147f)))));
    return pred;
  } // constant pool size = 110B, number of visited nodes = 27, static init size = 0B
}

class log_drf_1_Tree_9_class_16 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.4140625f ? 
         (data[0 /* vlan */] <83.5f ? 
             (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                 (data[2 /* no_of_characters */] <80.5f ? 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <30.5f ? 
                        0.0f : 
                        0.31578946f) : 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.31875f ? 
                        2.4194524E-4f : 
                        0.0020993701f)) : 
                0.0f) : 
            0.0f) : 
        0.0f);
    return pred;
  } // constant pool size = 26B, number of visited nodes = 6, static init size = 0B
}

class log_drf_1_Tree_9_class_17 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.3227539f ? 
         (Double.isNaN(data[0]) || data[0 /* vlan */] <173.5f ? 
             (Double.isNaN(data[14]) || data[14 /* 13_letter_word */] <0.053710938f ? 
                0.0f : 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <689.5f ? 
                    0.0f : 
                    1.0f)) : 
             (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.072265625f ? 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <659.5f ? 
                    0.0f : 
                     (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.078125f ? 
                        0.7169811f : 
                        0.0f)) : 
                0.0f)) : 
         (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <3.5f ? 
            0.0f : 
             (data[3 /* no_of_ips */] <4.5f ? 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.0625f ? 
                    0.9836066f : 
                    0.95454544f) : 
                0.0f)));
    return pred;
  } // constant pool size = 42B, number of visited nodes = 10, static init size = 0B
}

class log_drf_1_Tree_9_class_18 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.07470703f ? 
        0.0f : 
         (data[0 /* vlan */] <17.5f ? 
             (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <300.5f ? 
                    0.0f : 
                    0.1f) : 
                0.0f) : 
            0.0f));
    return pred;
  } // constant pool size = 18B, number of visited nodes = 4, static init size = 0B
}

class log_drf_1_Tree_9_class_19 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.027832031f ? 
         (data[0 /* vlan */] <17.5f ? 
             (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.1015625f ? 
                0.0f : 
                 (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                    0.0f : 
                    0.9984326f)) : 
            0.0f) : 
        0.0f);
    return pred;
  } // constant pool size = 18B, number of visited nodes = 4, static init size = 0B
}

class log_drf_1_Tree_9_class_20 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.77490234f ? 
         (data[0 /* vlan */] <23.5f ? 
             (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.38671875f ? 
                 (data[2 /* no_of_characters */] <130.5f ? 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <121.5f ? 
                        0.9787301f : 
                        0.70912457f) : 
                     (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.1875f ? 
                        0.39507705f : 
                        0.7848444f)) : 
                 (data[5 /* 4_letter_word */] <0.07421875f ? 
                     (data[0 /* vlan */] <18.5f ? 
                        0.0f : 
                        1.0f) : 
                     (data[3 /* no_of_ips */] <3.5f ? 
                        0.7117347f : 
                        0.0f))) : 
            0.0f) : 
         (data[3 /* no_of_ips */] <0.5f ? 
             (data[1 /* type_of_time */] <4.5f ? 
                0.0f : 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <29.5f ? 
                    1.0f : 
                    0.0f)) : 
            0.049497973f));
    return pred;
  } // constant pool size = 50B, number of visited nodes = 12, static init size = 0B
}

class log_drf_1_Tree_9_class_21 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.1484375f ? 
         (data[0 /* vlan */] <11.5f ? 
             (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.76171875f ? 
                0.0f : 
                 (data[3 /* no_of_ips */] <0.5f ? 
                    0.0f : 
                    0.3877551f)) : 
             (Double.isNaN(data[12]) || data[12 /* 11_letter_word */] <0.22460938f ? 
                 (data[5 /* 4_letter_word */] <0.10546875f ? 
                     (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                        0.0013012362f : 
                        0.0032862306f) : 
                     (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.109375f ? 
                        0.0026184171f : 
                        0.011434511f)) : 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <220.5f ? 
                    0.0f : 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.064453125f ? 
                        0.98888886f : 
                        0.0f)))) : 
         (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
             (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.01953125f ? 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <169.0f ? 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.075f ? 
                        8.716876E-4f : 
                        0.0f) : 
                     (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
                        0.0021261517f : 
                        0.0f)) : 
                0.0f) : 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <265.5f ? 
                0.0f : 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <25.5f ? 
                    0.0f : 
                     (data[2 /* no_of_characters */] <277.5f ? 
                        0.0124223605f : 
                        0.0f)))));
    return pred;
  } // constant pool size = 74B, number of visited nodes = 18, static init size = 0B
}

class log_drf_1_Tree_9_class_22 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.16015625f ? 
         (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.32226562f ? 
            0.0f : 
             (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.17382812f ? 
                 (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.536705f ? 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.6328125f ? 
                        1.0055304E-4f : 
                        0.001170275f) : 
                    0.0f) : 
                0.0f)) : 
         (data[3 /* no_of_ips */] <0.5f ? 
             (data[0 /* vlan */] <7.5f ? 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <130.5f ? 
                    0.0f : 
                    0.5714286f) : 
                0.0f) : 
            0.0f));
    return pred;
  } // constant pool size = 34B, number of visited nodes = 8, static init size = 0B
}

class log_drf_1_Tree_9_class_23 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.1484375f ? 
         (data[0 /* vlan */] <17.5f ? 
             (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.037109375f ? 
                 (data[2 /* no_of_characters */] <130.5f ? 
                    0.0f : 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.4140625f ? 
                        0.7863291f : 
                        0.024390243f)) : 
                 (data[5 /* 4_letter_word */] <0.05859375f ? 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.3359375f ? 
                        1.0f : 
                        0.0f) : 
                     (data[10 /* 9_letter_word */] <0.15282185f ? 
                        0.024390243f : 
                        0.0f))) : 
            0.0f) : 
         (Double.isNaN(data[13]) || data[13 /* 12_letter_word */] <0.045898438f ? 
             (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.6894531f ? 
                 (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                    0.0f : 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.4453125f ? 
                        4.418913E-4f : 
                        0.03448276f)) : 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <220.5f ? 
                    0.0f : 
                    1.0f)) : 
             (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.12890625f ? 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <285.5f ? 
                     (data[13 /* 12_letter_word */] <0.29068756f ? 
                        0.8f : 
                        0.0f) : 
                    1.0f) : 
                0.0f)));
    return pred;
  } // constant pool size = 66B, number of visited nodes = 16, static init size = 0B
}

class log_drf_1_Tree_9_class_24 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.9746094f ? 
        0.0f : 
         (data[0 /* vlan */] <30.5f ? 
            2.9735354E-4f : 
            0.0f));
    return pred;
  } // constant pool size = 10B, number of visited nodes = 2, static init size = 0B
}

class log_drf_1_Tree_9_class_25 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[4]) || data[4 /* no_of_macs */] <0.5f ? 
         (data[0 /* vlan */] <40.5f ? 
             (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.44140625f ? 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <333.5f ? 
                     (Double.isNaN(data[12]) || data[12 /* 11_letter_word */] <0.15625f ? 
                        0.2565011f : 
                        0.9692924f) : 
                    0.0f) : 
                 (data[2 /* no_of_characters */] <133.5f ? 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <25.0f ? 
                        0.0f : 
                        0.9881423f) : 
                     (data[3 /* no_of_ips */] <1.5f ? 
                        0.14541484f : 
                        0.9876699f))) : 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <170.0f ? 
                0.0f : 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.5390625f ? 
                     (data[5 /* 4_letter_word */] <0.0625f ? 
                        0.0022624435f : 
                        0.0f) : 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <330.0f ? 
                        0.0f : 
                        1.0f)))) : 
         (data[3 /* no_of_ips */] <1.5f ? 
            0.0f : 
             (Double.isNaN(data[4]) || data[4 /* no_of_macs */] <3.0f ? 
                1.0f : 
                0.6666667f)));
    return pred;
  } // constant pool size = 58B, number of visited nodes = 14, static init size = 0B
}

class log_drf_1_Tree_9_class_26 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.027832031f ? 
         (data[0 /* vlan */] <29.5f ? 
             (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.64453125f ? 
                0.0f : 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.2890625f ? 
                    0.0f : 
                     (data[0 /* vlan */] <28.0f ? 
                        0.0f : 
                        0.9975845f))) : 
            0.0f) : 
        0.0f);
    return pred;
  } // constant pool size = 22B, number of visited nodes = 5, static init size = 0B
}

class log_drf_1_Tree_9_class_27 {
  static final double score0(double[] data) {
    double pred =     1.0E-5f;
    return pred;
  } // constant pool size = 2B, number of visited nodes = 0, static init size = 0B
}

class log_drf_1_Tree_9_class_28 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.14160156f ? 
        0.0f : 
         (data[0 /* vlan */] <18.5f ? 
             (data[3 /* no_of_ips */] <3.0f ? 
                0.0f : 
                1.0f) : 
            0.0f));
    return pred;
  } // constant pool size = 14B, number of visited nodes = 3, static init size = 0B
}

class log_drf_1_Tree_9_class_29 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.0063476562f ? 
         (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.115234375f ? 
            0.0f : 
             (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.0625f ? 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <410.5f ? 
                    0.0f : 
                     (data[2 /* no_of_characters */] <439.5f ? 
                        0.5f : 
                        0.0f)) : 
                 (data[7 /* 6_letter_word */] <0.07181222f ? 
                    1.0f : 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.2109375f ? 
                        0.0f : 
                        0.008695652f)))) : 
         (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.044921875f ? 
             (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.03515625f ? 
                 (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.7734375f ? 
                    0.0f : 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <17.5f ? 
                        0.0f : 
                        0.5f)) : 
                0.0f) : 
             (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.25976562f ? 
                0.0f : 
                 (data[8 /* 7_letter_word */] <0.063322365f ? 
                    0.5f : 
                    0.0f))));
    return pred;
  } // constant pool size = 54B, number of visited nodes = 13, static init size = 0B
}

class log_drf_1_Tree_9_class_30 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.24023438f ? 
         (Double.isNaN(data[0]) || data[0 /* vlan */] <173.5f ? 
            0.0f : 
             (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.20703125f ? 
                0.0f : 
                 (data[1 /* type_of_time */] <2.5f ? 
                    1.0f : 
                    0.0f))) : 
         (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <2.5f ? 
             (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.01953125f ? 
                 (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.4765625f ? 
                    0.0f : 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.203125f ? 
                        0.0f : 
                        0.078947365f)) : 
                0.0f) : 
             (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.22460938f ? 
                 (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.6328125f ? 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <178.5f ? 
                        0.0f : 
                        0.042918455f) : 
                     (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <3.5f ? 
                        0.4883721f : 
                        0.0f)) : 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <210.5f ? 
                    0.0f : 
                     (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.125f ? 
                        0.73417723f : 
                        1.0f)))));
    return pred;
  } // constant pool size = 58B, number of visited nodes = 14, static init size = 0B
}

class log_drf_1_Tree_9_class_31 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[13]) || data[13 /* 12_letter_word */] <0.23583984f ? 
         (Double.isNaN(data[0]) || data[0 /* vlan */] <64.5f ? 
             (Double.isNaN(data[4]) || data[4 /* no_of_macs */] <1.5f ? 
                 (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.3203125f ? 
                    0.0f : 
                     (data[2 /* no_of_characters */] <80.5f ? 
                        0.008264462f : 
                        2.9069767E-4f)) : 
                 (data[3 /* no_of_ips */] <1.5f ? 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.515625f ? 
                        0.0f : 
                        1.0f) : 
                    0.0f)) : 
             (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.1328125f ? 
                 (data[2 /* no_of_characters */] <110.5f ? 
                     (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.4140625f ? 
                        0.25692308f : 
                        1.0f) : 
                     (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
                        0.0f : 
                        0.08093023f)) : 
                 (Double.isNaN(data[15]) || data[15 /* 14_letter_word */] <0.13671875f ? 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.53125f ? 
                        0.07399814f : 
                        0.84615386f) : 
                    0.902439f))) : 
         (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.125f ? 
             (data[2 /* no_of_characters */] <90.5f ? 
                1.0f : 
                0.0f) : 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <105.5f ? 
                1.0f : 
                 (data[0 /* vlan */] <61.5f ? 
                    0.5f : 
                    1.0f))));
    return pred;
  } // constant pool size = 70B, number of visited nodes = 17, static init size = 0B
}

class log_drf_1_Tree_9_class_32 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.19091797f ? 
         (data[0 /* vlan */] <29.5f ? 
             (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.24023438f ? 
                0.0f : 
                 (data[6 /* 5_letter_word */] <0.03125f ? 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.041666668f ? 
                        0.033707865f : 
                        0.0f) : 
                    0.0f)) : 
            0.0f) : 
         (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <1.5f ? 
             (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.5488281f ? 
                 (data[2 /* no_of_characters */] <90.5f ? 
                     (data[9 /* 8_letter_word */] <0.25f ? 
                        0.27152318f : 
                        0.0f) : 
                    0.0f) : 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <140.5f ? 
                    1.0f : 
                    0.0f)) : 
            0.0f));
    return pred;
  } // constant pool size = 42B, number of visited nodes = 10, static init size = 0B
}

class log_drf_1_Tree_9_class_33 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.1743164f ? 
         (data[0 /* vlan */] <3.5f ? 
            1.0f : 
             (Double.isNaN(data[4]) || data[4 /* no_of_macs */] <1.5f ? 
                 (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.07747396f ? 
                     (data[2 /* no_of_characters */] <120.5f ? 
                        0.00368812f : 
                        0.0f) : 
                     (data[6 /* 5_letter_word */] <0.087229416f ? 
                        0.7692308f : 
                        0.014319809f)) : 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <280.5f ? 
                    0.0f : 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <628.0f ? 
                        0.95238096f : 
                        0.0f)))) : 
         (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <1.5f ? 
             (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.31640625f ? 
                 (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.3671875f ? 
                     (data[2 /* no_of_characters */] <100.5f ? 
                        0.0038046925f : 
                        0.0f) : 
                     (data[0 /* vlan */] <17.5f ? 
                        0.53125f : 
                        1.8274854E-4f)) : 
                 (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.2890625f ? 
                     (data[6 /* 5_letter_word */] <0.23237228f ? 
                        0.03846154f : 
                        6.993007E-4f) : 
                    0.023809524f)) : 
            0.0f));
    return pred;
  } // constant pool size = 62B, number of visited nodes = 15, static init size = 0B
}

class log_drf_1_Tree_9_class_34 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.123535156f ? 
        0.0f : 
         (data[0 /* vlan */] <9.5f ? 
            0.05882353f : 
             (data[10 /* 9_letter_word */] <0.17489052f ? 
                 (data[7 /* 6_letter_word */] <0.0390625f ? 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.225f ? 
                        0.0f : 
                        0.11111111f) : 
                    0.0f) : 
                0.0f)));
    return pred;
  } // constant pool size = 22B, number of visited nodes = 5, static init size = 0B
}

class log_drf_1_Tree_9_class_35 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.087402344f ? 
         (data[0 /* vlan */] <17.5f ? 
             (data[7 /* 6_letter_word */] <0.072265625f ? 
                 (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.1015625f ? 
                        0.0011156563f : 
                        0.0f) : 
                     (data[2 /* no_of_characters */] <220.5f ? 
                        0.8f : 
                        0.0f)) : 
                 (data[2 /* no_of_characters */] <145.5f ? 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.1171875f ? 
                        0.0013071896f : 
                        0.0f) : 
                    0.0f)) : 
            0.0f) : 
         (data[3 /* no_of_ips */] <0.5f ? 
             (data[0 /* vlan */] <13.5f ? 
                 (data[2 /* no_of_characters */] <90.5f ? 
                    1.0f : 
                     (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.21573639f ? 
                        0.0f : 
                        0.125f)) : 
                0.0f) : 
            0.0f));
    return pred;
  } // constant pool size = 50B, number of visited nodes = 12, static init size = 0B
}

class log_drf_1_Tree_9_class_36 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.16015625f ? 
        0.0f : 
         (data[0 /* vlan */] <7.5f ? 
            0.75f : 
            0.0f));
    return pred;
  } // constant pool size = 10B, number of visited nodes = 2, static init size = 0B
}

class log_drf_1_Tree_9_class_37 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.26757812f ? 
         (Double.isNaN(data[0]) || data[0 /* vlan */] <156.5f ? 
             (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.19075394f ? 
                 (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.15625f ? 
                     (data[2 /* no_of_characters */] <124.5f ? 
                        0.008908785f : 
                        0.053324424f) : 
                     (data[3 /* no_of_ips */] <0.5f ? 
                        0.5540685f : 
                        0.0f)) : 
                 (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.546875f ? 
                    0.0f : 
                     (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
                        1.0f : 
                        0.0f))) : 
             (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.31640625f ? 
                 (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.027175903f ? 
                     (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
                        0.9924768f : 
                        0.11342352f) : 
                     (data[1 /* type_of_time */] <3.5f ? 
                        0.0f : 
                        0.9922644f)) : 
                 (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.18359375f ? 
                     (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
                        0.88737863f : 
                        0.005479452f) : 
                     (data[3 /* no_of_ips */] <0.5f ? 
                        1.0f : 
                        0.0f)))) : 
         (data[3 /* no_of_ips */] <0.5f ? 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <125.5f ? 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.5807292f ? 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <24.5f ? 
                        0.0f : 
                        0.014925373f) : 
                    1.0f) : 
                 (data[10 /* 9_letter_word */] <0.36771393f ? 
                    0.9f : 
                    1.0f)) : 
            0.0f));
    return pred;
  } // constant pool size = 82B, number of visited nodes = 20, static init size = 0B
}

class log_drf_1_Tree_9_class_38 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.027832031f ? 
         (data[8 /* 7_letter_word */] <0.0390625f ? 
             (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.94921875f ? 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.4609375f ? 
                    0.0f : 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.5283203f ? 
                        4.191115E-4f : 
                        0.0f)) : 
                 (data[2 /* no_of_characters */] <90.5f ? 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <58.5f ? 
                        0.0f : 
                        0.02f) : 
                    0.0f)) : 
            0.0f) : 
        0.0f);
    return pred;
  } // constant pool size = 30B, number of visited nodes = 7, static init size = 0B
}


class log_drf_1_Forest_10 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += log_drf_1_Tree_10_class_0.score0(fdata);
    preds[2] += log_drf_1_Tree_10_class_1.score0(fdata);
    preds[3] += log_drf_1_Tree_10_class_2.score0(fdata);
    preds[4] += log_drf_1_Tree_10_class_3.score0(fdata);
    preds[5] += log_drf_1_Tree_10_class_4.score0(fdata);
    preds[6] += log_drf_1_Tree_10_class_5.score0(fdata);
    preds[7] += log_drf_1_Tree_10_class_6.score0(fdata);
    preds[8] += log_drf_1_Tree_10_class_7.score0(fdata);
    preds[9] += log_drf_1_Tree_10_class_8.score0(fdata);
    preds[10] += log_drf_1_Tree_10_class_9.score0(fdata);
    preds[11] += log_drf_1_Tree_10_class_10.score0(fdata);
    preds[12] += log_drf_1_Tree_10_class_11.score0(fdata);
    preds[13] += log_drf_1_Tree_10_class_12.score0(fdata);
    preds[14] += log_drf_1_Tree_10_class_13.score0(fdata);
    preds[15] += log_drf_1_Tree_10_class_14.score0(fdata);
    preds[16] += log_drf_1_Tree_10_class_15.score0(fdata);
    preds[17] += log_drf_1_Tree_10_class_16.score0(fdata);
    preds[18] += log_drf_1_Tree_10_class_17.score0(fdata);
    preds[19] += log_drf_1_Tree_10_class_18.score0(fdata);
    preds[20] += log_drf_1_Tree_10_class_19.score0(fdata);
    preds[21] += log_drf_1_Tree_10_class_20.score0(fdata);
    preds[22] += log_drf_1_Tree_10_class_21.score0(fdata);
    preds[23] += log_drf_1_Tree_10_class_22.score0(fdata);
    preds[24] += log_drf_1_Tree_10_class_23.score0(fdata);
    preds[25] += log_drf_1_Tree_10_class_24.score0(fdata);
    preds[26] += log_drf_1_Tree_10_class_25.score0(fdata);
    preds[27] += log_drf_1_Tree_10_class_26.score0(fdata);
    preds[28] += log_drf_1_Tree_10_class_27.score0(fdata);
    preds[29] += log_drf_1_Tree_10_class_28.score0(fdata);
    preds[30] += log_drf_1_Tree_10_class_29.score0(fdata);
    preds[31] += log_drf_1_Tree_10_class_30.score0(fdata);
    preds[32] += log_drf_1_Tree_10_class_31.score0(fdata);
    preds[33] += log_drf_1_Tree_10_class_32.score0(fdata);
    preds[34] += log_drf_1_Tree_10_class_33.score0(fdata);
    preds[35] += log_drf_1_Tree_10_class_34.score0(fdata);
    preds[36] += log_drf_1_Tree_10_class_35.score0(fdata);
    preds[37] += log_drf_1_Tree_10_class_36.score0(fdata);
    preds[38] += log_drf_1_Tree_10_class_37.score0(fdata);
    preds[39] += log_drf_1_Tree_10_class_38.score0(fdata);
  }
}
class log_drf_1_Tree_10_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <1040.0f ? 
         (Double.isNaN(data[12]) || data[12 /* 11_letter_word */] <0.017578125f ? 
             (data[1 /* type_of_time */] <4.5f ? 
                0.0f : 
                 (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.015625f ? 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.234375f ? 
                        0.0f : 
                        2.9761906E-4f) : 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <577.5f ? 
                        0.0f : 
                        0.5f))) : 
             (Double.isNaN(data[14]) || data[14 /* 13_letter_word */] <0.015625f ? 
                0.0f : 
                1.0f)) : 
         (data[2 /* no_of_characters */] <1150.5f ? 
            0.6f : 
            1.0f));
    return pred;
  } // constant pool size = 34B, number of visited nodes = 8, static init size = 0B
}

class log_drf_1_Tree_10_class_1 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <261.5f ? 
         (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.7080078f ? 
             (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                0.0f : 
                 (data[3 /* no_of_ips */] <1.5f ? 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.3125f ? 
                        0.0f : 
                        0.0020949722f) : 
                    0.0f)) : 
             (data[3 /* no_of_ips */] <0.5f ? 
                0.0f : 
                 (data[0 /* vlan */] <150.5f ? 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <86.5f ? 
                        0.0f : 
                        1.0f) : 
                    0.0f))) : 
         (data[2 /* no_of_characters */] <289.5f ? 
             (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                0.0f : 
                 (data[8 /* 7_letter_word */] <0.2421875f ? 
                    0.0f : 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <280.5f ? 
                        0.9948186f : 
                        0.9375f))) : 
             (data[2 /* no_of_characters */] <363.5f ? 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <362.5f ? 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.4453125f ? 
                        0.008645534f : 
                        0.0f) : 
                     (data[1 /* type_of_time */] <4.5f ? 
                        0.0f : 
                        0.8108108f)) : 
                0.0f)));
    return pred;
  } // constant pool size = 66B, number of visited nodes = 16, static init size = 0B
}

class log_drf_1_Tree_10_class_2 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* no_of_characters */] <158.5f ? 
         (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.15527344f ? 
             (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                 (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.53515625f ? 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.23413086f ? 
                        0.0028233025f : 
                        0.010626703f) : 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <113.5f ? 
                        0.0f : 
                        0.54594594f)) : 
                 (data[3 /* no_of_ips */] <1.5f ? 
                     (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.1015625f ? 
                        0.22107142f : 
                        0.0f) : 
                    0.0f)) : 
             (data[3 /* no_of_ips */] <0.5f ? 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.07421875f ? 
                    0.0f : 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <113.5f ? 
                        0.0f : 
                        0.30612245f)) : 
                 (data[2 /* no_of_characters */] <134.5f ? 
                     (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
                        0.0f : 
                        0.0023640662f) : 
                    0.0f))) : 
         (Double.isNaN(data[0]) || data[0 /* vlan */] <181.5f ? 
             (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
                0.0f : 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <136.5f ? 
                    0.0f : 
                     (data[0 /* vlan */] <142.0f ? 
                        0.013422819f : 
                        0.0f))) : 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <607.0f ? 
                 (Double.isNaN(data[14]) || data[14 /* 13_letter_word */] <0.100260414f ? 
                     (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
                        0.0f : 
                        0.12432432f) : 
                    1.0f) : 
                1.0f)));
    return pred;
  } // constant pool size = 82B, number of visited nodes = 20, static init size = 0B
}

class log_drf_1_Tree_10_class_3 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.3227539f ? 
         (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.24048948f ? 
             (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                0.0f : 
                 (data[2 /* no_of_characters */] <110.5f ? 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <102.5f ? 
                        1.7528483E-4f : 
                        0.0066740825f) : 
                    0.0f)) : 
             (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                0.0f : 
                 (data[3 /* no_of_ips */] <1.5f ? 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.046875f ? 
                        0.8630137f : 
                        0.0f) : 
                    0.0f))) : 
         (data[0 /* vlan */] <29.5f ? 
             (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                 (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.046875f ? 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <28.0f ? 
                        0.0f : 
                        1.0f) : 
                    0.0f) : 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <175.5f ? 
                     (data[2 /* no_of_characters */] <140.5f ? 
                        0.0f : 
                        0.9843609f) : 
                    0.0f)) : 
            0.0f));
    return pred;
  } // constant pool size = 58B, number of visited nodes = 14, static init size = 0B
}

class log_drf_1_Tree_10_class_4 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* no_of_characters */] <113.5f ? 
         (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.29101562f ? 
             (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <97.5f ? 
                    0.0f : 
                     (data[2 /* no_of_characters */] <103.5f ? 
                        0.004178273f : 
                        0.0f)) : 
                0.0f) : 
             (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                 (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.16796875f ? 
                    0.0f : 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <108.5f ? 
                        0.0f : 
                        0.93333334f)) : 
                0.0f)) : 
         (data[0 /* vlan */] <27.5f ? 
             (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <1.5f ? 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <24.5f ? 
                    0.0f : 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.28125f ? 
                        0.094736844f : 
                        0.75f)) : 
                0.0f) : 
            0.0f));
    return pred;
  } // constant pool size = 50B, number of visited nodes = 12, static init size = 0B
}

class log_drf_1_Tree_10_class_5 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.087402344f ? 
         (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.35351562f ? 
             (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.30932617f ? 
                    0.0f : 
                     (data[2 /* no_of_characters */] <160.5f ? 
                        0.0032585084f : 
                        0.0f)) : 
                0.0f) : 
            0.0f) : 
         (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <205.5f ? 
             (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.46875f ? 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.41601562f ? 
                        4.5150802E-5f : 
                        0.0041002277f) : 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.21875f ? 
                        0.0f : 
                        0.71428573f)) : 
                0.0f) : 
             (data[3 /* no_of_ips */] <0.5f ? 
                 (Double.isNaN(data[14]) || data[14 /* 13_letter_word */] <0.0065104165f ? 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.2109375f ? 
                        0.00772698f : 
                        0.12658228f) : 
                    0.0f) : 
                0.0f)));
    return pred;
  } // constant pool size = 54B, number of visited nodes = 13, static init size = 0B
}

class log_drf_1_Tree_10_class_6 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* no_of_characters */] <98.5f ? 
         (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.10058594f ? 
             (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <90.5f ? 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.2890625f ? 
                        0.004581152f : 
                        0.017264277f) : 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.265625f ? 
                        0.018604651f : 
                        0.7413793f)) : 
                0.0f) : 
             (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                 (data[2 /* no_of_characters */] <78.5f ? 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.12760417f ? 
                        0.8857143f : 
                        0.0f) : 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <113.5f ? 
                        0.0f : 
                        0.9915254f)) : 
                0.0f)) : 
         (data[2 /* no_of_characters */] <117.5f ? 
             (data[3 /* no_of_ips */] <0.5f ? 
                 (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.1015625f ? 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.3125f ? 
                        0.0f : 
                        0.03780069f) : 
                    0.0f) : 
                0.0f) : 
            0.0f));
    return pred;
  } // constant pool size = 58B, number of visited nodes = 14, static init size = 0B
}

class log_drf_1_Tree_10_class_7 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* no_of_characters */] <154.5f ? 
         (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.05078125f ? 
             (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.0859375f ? 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.8984375f ? 
                        0.0f : 
                        0.0016515277f) : 
                    0.0f) : 
                0.0f) : 
            0.0f) : 
         (Double.isNaN(data[0]) || data[0 /* vlan */] <185.5f ? 
            0.0f : 
             (data[3 /* no_of_ips */] <1.5f ? 
                 (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.74609375f ? 
                    0.0f : 
                    1.0f) : 
                1.0f)));
    return pred;
  } // constant pool size = 34B, number of visited nodes = 8, static init size = 0B
}

class log_drf_1_Tree_10_class_8 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <900.5f ? 
         (data[8 /* 7_letter_word */] <0.03125f ? 
             (data[3 /* no_of_ips */] <0.5f ? 
                 (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.02734375f ? 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <732.5f ? 
                        1.7176228E-4f : 
                        0.33333334f) : 
                    0.0f) : 
                0.0f) : 
            0.0f) : 
         (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <1011.5f ? 
             (Double.isNaN(data[14]) || data[14 /* 13_letter_word */] <0.005998884f ? 
                 (data[6 /* 5_letter_word */] <0.2109375f ? 
                     (data[0 /* vlan */] <172.5f ? 
                        0.0f : 
                        0.96428573f) : 
                    1.0f) : 
                0.0f) : 
             (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <4.5f ? 
                 (data[0 /* vlan */] <173.5f ? 
                    0.0f : 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.5390625f ? 
                        0.020408163f : 
                        0.5f)) : 
                1.0f)));
    return pred;
  } // constant pool size = 50B, number of visited nodes = 12, static init size = 0B
}

class log_drf_1_Tree_10_class_9 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* no_of_characters */] <141.5f ? 
         (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.22460938f ? 
             (data[1 /* type_of_time */] <3.5f ? 
                 (data[3 /* no_of_ips */] <0.5f ? 
                    0.0f : 
                    1.0f) : 
                0.0f) : 
             (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <2.5f ? 
                 (data[1 /* type_of_time */] <3.5f ? 
                     (data[7 /* 6_letter_word */] <0.1953125f ? 
                        0.0f : 
                        1.0f) : 
                    0.0f) : 
                 (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.0f ? 
                    1.0f : 
                    0.0f))) : 
         (data[8 /* 7_letter_word */] <0.20703125f ? 
             (data[1 /* type_of_time */] <3.5f ? 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <208.5f ? 
                     (data[0 /* vlan */] <96.5f ? 
                        0.0f : 
                        1.0f) : 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.042053223f ? 
                        0.0f : 
                        0.7246377f)) : 
                0.0f) : 
             (data[2 /* no_of_characters */] <155.5f ? 
                 (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <3.5f ? 
                    0.0f : 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <96.5f ? 
                        0.0f : 
                        1.0f)) : 
                 (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.2890625f ? 
                     (data[8 /* 7_letter_word */] <0.26278687f ? 
                        0.0066401064f : 
                        0.0f) : 
                     (data[5 /* 4_letter_word */] <0.171875f ? 
                        0.48051947f : 
                        0.0f)))));
    return pred;
  } // constant pool size = 78B, number of visited nodes = 19, static init size = 0B
}

class log_drf_1_Tree_10_class_10 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* no_of_characters */] <92.5f ? 
         (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.5830078f ? 
            0.0f : 
             (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                0.0f : 
                 (data[2 /* no_of_characters */] <85.0f ? 
                    0.0f : 
                    1.0f))) : 
         (data[2 /* no_of_characters */] <111.5f ? 
             (data[3 /* no_of_ips */] <0.5f ? 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.4140625f ? 
                    0.0f : 
                     (data[9 /* 8_letter_word */] <0.125f ? 
                        0.0043668123f : 
                        0.0f)) : 
                0.0f) : 
            0.0f));
    return pred;
  } // constant pool size = 34B, number of visited nodes = 8, static init size = 0B
}

class log_drf_1_Tree_10_class_11 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* no_of_characters */] <134.5f ? 
        1.8135326E-5f : 
        0.0f);
    return pred;
  } // constant pool size = 6B, number of visited nodes = 1, static init size = 0B
}

class log_drf_1_Tree_10_class_12 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <529.5f ? 
         (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.5830078f ? 
             (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                0.0f : 
                 (data[3 /* no_of_ips */] <1.5f ? 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <414.5f ? 
                        0.0f : 
                        0.9375f) : 
                    0.0f)) : 
             (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                0.0f : 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <300.5f ? 
                    0.0f : 
                    1.0f))) : 
         (Double.isNaN(data[0]) || data[0 /* vlan */] <590.5f ? 
            0.0f : 
            1.0f));
    return pred;
  } // constant pool size = 34B, number of visited nodes = 8, static init size = 0B
}

class log_drf_1_Tree_10_class_13 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* no_of_characters */] <54.0f ? 
         (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.6660156f ? 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <36.5f ? 
                 (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.125f ? 
                     (data[0 /* vlan */] <90.0f ? 
                        0.0f : 
                        1.0f) : 
                    1.0f) : 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <9.5f ? 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.2890625f ? 
                        0.96363634f : 
                        0.0f) : 
                     (data[0 /* vlan */] <521.0f ? 
                        0.0f : 
                        0.037037037f))) : 
            0.1f) : 
         (Double.isNaN(data[0]) || data[0 /* vlan */] <593.5f ? 
             (data[1 /* type_of_time */] <4.5f ? 
                0.0f : 
                 (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.19140625f ? 
                    0.0f : 
                     (data[9 /* 8_letter_word */] <0.21035767f ? 
                        0.053639848f : 
                        0.0f))) : 
             (data[2 /* no_of_characters */] <320.0f ? 
                1.0f : 
                0.025f)));
    return pred;
  } // constant pool size = 54B, number of visited nodes = 13, static init size = 0B
}

class log_drf_1_Tree_10_class_14 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <215.5f ? 
        1.7675027E-5f : 
         (data[2 /* no_of_characters */] <218.5f ? 
             (data[1 /* type_of_time */] <3.0f ? 
                1.0f : 
                0.0f) : 
             (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                 (Double.isNaN(data[12]) || data[12 /* 11_letter_word */] <0.18359375f ? 
                    0.0f : 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <244.0f ? 
                        0.02970297f : 
                        0.0f)) : 
                0.0f)));
    return pred;
  } // constant pool size = 26B, number of visited nodes = 6, static init size = 0B
}

class log_drf_1_Tree_10_class_15 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* no_of_characters */] <100.5f ? 
         (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.10058594f ? 
             (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <1.5f ? 
                0.0f : 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.16796875f ? 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.25f ? 
                        0.09536585f : 
                        0.0f) : 
                    0.0f)) : 
            0.0f) : 
         (data[0 /* vlan */] <141.5f ? 
             (data[3 /* no_of_ips */] <0.5f ? 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <376.5f ? 
                     (data[2 /* no_of_characters */] <122.5f ? 
                        0.0028790787f : 
                        0.012769447f) : 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <137.5f ? 
                        0.0f : 
                        0.975f)) : 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.5859375f ? 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.1328125f ? 
                        4.7147572E-5f : 
                        0.0034680075f) : 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <211.5f ? 
                        0.0f : 
                        0.5f))) : 
            0.0f));
    return pred;
  } // constant pool size = 54B, number of visited nodes = 13, static init size = 0B
}

class log_drf_1_Tree_10_class_16 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* no_of_characters */] <84.5f ? 
         (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.41601562f ? 
             (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <77.0f ? 
                    0.0f : 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <57.5f ? 
                        0.0036231885f : 
                        0.0f)) : 
                0.0f) : 
             (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.7490692f ? 
                     (data[0 /* vlan */] <65.5f ? 
                        0.2f : 
                        0.0f) : 
                    0.0f) : 
                0.0f)) : 
         (data[2 /* no_of_characters */] <112.5f ? 
             (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                 (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.30859375f ? 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.8984375f ? 
                        1.393534E-4f : 
                        0.003816794f) : 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <52.5f ? 
                        0.0f : 
                        0.016393442f)) : 
                0.0f) : 
             (data[2 /* no_of_characters */] <158.5f ? 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <156.5f ? 
                    0.0f : 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <157.5f ? 
                        0.0016722408f : 
                        0.0f)) : 
                0.0f)));
    return pred;
  } // constant pool size = 66B, number of visited nodes = 16, static init size = 0B
}

class log_drf_1_Tree_10_class_17 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <659.0f ? 
         (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.9160156f ? 
            0.0f : 
             (data[1 /* type_of_time */] <3.0f ? 
                0.5f : 
                0.0f)) : 
         (data[2 /* no_of_characters */] <717.0f ? 
            0.9784173f : 
             (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <3.5f ? 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.25390625f ? 
                     (data[2 /* no_of_characters */] <883.5f ? 
                        0.1875f : 
                        0.0f) : 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.1328125f ? 
                        0.0f : 
                        1.0f)) : 
                0.9230769f)));
    return pred;
  } // constant pool size = 34B, number of visited nodes = 8, static init size = 0B
}

class log_drf_1_Tree_10_class_18 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <330.5f ? 
        0.0f : 
         (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.07421875f ? 
            0.0f : 
             (data[2 /* no_of_characters */] <334.5f ? 
                 (data[1 /* type_of_time */] <4.5f ? 
                    0.0f : 
                    0.5f) : 
                0.0f)));
    return pred;
  } // constant pool size = 18B, number of visited nodes = 4, static init size = 0B
}

class log_drf_1_Tree_10_class_19 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* no_of_characters */] <136.5f ? 
         (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.22460938f ? 
             (data[3 /* no_of_ips */] <0.5f ? 
                0.0f : 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <133.0f ? 
                    0.0f : 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.10002136f ? 
                        0.0f : 
                        0.2857143f))) : 
             (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                0.0f : 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.37109375f ? 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <17.5f ? 
                        0.9984686f : 
                        0.0f) : 
                    0.0f))) : 
         (data[2 /* no_of_characters */] <139.5f ? 
             (data[3 /* no_of_ips */] <1.5f ? 
                 (data[0 /* vlan */] <16.5f ? 
                     (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                        0.0f : 
                        1.0f) : 
                    0.0f) : 
                0.0f) : 
            0.0f));
    return pred;
  } // constant pool size = 50B, number of visited nodes = 12, static init size = 0B
}

class log_drf_1_Tree_10_class_20 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* no_of_characters */] <134.5f ? 
         (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.29101562f ? 
             (data[3 /* no_of_ips */] <0.5f ? 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.83203125f ? 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.078125f ? 
                        0.8397436f : 
                        0.38847184f) : 
                    0.8799222f) : 
                 (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.2890625f ? 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <33.5f ? 
                        0.03431195f : 
                        0.0f) : 
                     (data[8 /* 7_letter_word */] <0.171875f ? 
                        0.0f : 
                        0.93333334f))) : 
             (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <25.5f ? 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.265625f ? 
                        0.9923928f : 
                        0.95238096f) : 
                    0.0f) : 
                0.0f)) : 
         (data[0 /* vlan */] <24.5f ? 
             (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <3.5f ? 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.3515625f ? 
                     (data[1 /* type_of_time */] <4.5f ? 
                        0.0f : 
                        0.58889955f) : 
                     (data[0 /* vlan */] <17.0f ? 
                        0.0f : 
                        0.99912894f)) : 
                0.0f) : 
            0.0f));
    return pred;
  } // constant pool size = 66B, number of visited nodes = 16, static init size = 0B
}

class log_drf_1_Tree_10_class_21 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <220.5f ? 
         (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.31640625f ? 
             (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                 (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.05859375f ? 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.10134888f ? 
                        9.859423E-4f : 
                        0.0f) : 
                     (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.2109375f ? 
                        0.0012676344f : 
                        0.020100502f)) : 
                 (data[3 /* no_of_ips */] <1.5f ? 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.546875f ? 
                        6.355663E-5f : 
                        0.06666667f) : 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.4609375f ? 
                        0.0f : 
                        6.6401064E-4f))) : 
             (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <129.0f ? 
                     (data[0 /* vlan */] <17.5f ? 
                        0.82857144f : 
                        0.0f) : 
                    0.0f) : 
                0.0f)) : 
         (data[2 /* no_of_characters */] <223.5f ? 
             (data[1 /* type_of_time */] <3.5f ? 
                 (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.37109375f ? 
                    1.0f : 
                    0.0f) : 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.83203125f ? 
                     (data[0 /* vlan */] <154.5f ? 
                        0.0f : 
                        0.0022050717f) : 
                    0.0375f)) : 
             (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.15429688f ? 
                 (Double.isNaN(data[14]) || data[14 /* 13_letter_word */] <0.0065104165f ? 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.78125f ? 
                        0.003486098f : 
                        0.12931034f) : 
                    0.0f) : 
                 (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
                    0.0f : 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <26.5f ? 
                        0.0f : 
                        0.5294118f)))));
    return pred;
  } // constant pool size = 90B, number of visited nodes = 22, static init size = 0B
}

class log_drf_1_Tree_10_class_22 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <227.5f ? 
         (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.15527344f ? 
            0.0f : 
             (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
                0.0f : 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.15625f ? 
                    0.0f : 
                     (data[8 /* 7_letter_word */] <0.1841634f ? 
                        0.069767445f : 
                        0.0f)))) : 
         (data[2 /* no_of_characters */] <230.5f ? 
             (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                 (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.30859375f ? 
                    0.0f : 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.5f ? 
                        0.0f : 
                        0.33333334f)) : 
                0.0f) : 
            0.0f));
    return pred;
  } // constant pool size = 38B, number of visited nodes = 9, static init size = 0B
}

class log_drf_1_Tree_10_class_23 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <257.5f ? 
         (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.5830078f ? 
             (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
                0.0f : 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.64453125f ? 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.36437988f ? 
                        4.2422314E-5f : 
                        0.0051739006f) : 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <241.5f ? 
                        0.0031282585f : 
                        0.6530612f))) : 
             (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.16796875f ? 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <129.5f ? 
                        0.0f : 
                        0.9194991f) : 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <17.5f ? 
                        1.0f : 
                        0.0f)) : 
                0.0f)) : 
         (data[2 /* no_of_characters */] <261.5f ? 
             (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
                0.0f : 
                 (data[2 /* no_of_characters */] <258.5f ? 
                     (data[9 /* 8_letter_word */] <0.1328125f ? 
                        0.0f : 
                        0.5f) : 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.3125f ? 
                        0.9915651f : 
                        0.0f))) : 
             (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.15429688f ? 
                0.0f : 
                 (Double.isNaN(data[12]) || data[12 /* 11_letter_word */] <0.046875f ? 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.2890625f ? 
                        0.0f : 
                        0.19512194f) : 
                    1.0f))));
    return pred;
  } // constant pool size = 74B, number of visited nodes = 18, static init size = 0B
}

class log_drf_1_Tree_10_class_24 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.9746094f ? 
        0.0f : 
        2.0702505E-4f);
    return pred;
  } // constant pool size = 6B, number of visited nodes = 1, static init size = 0B
}

class log_drf_1_Tree_10_class_25 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.44970703f ? 
         (Double.isNaN(data[12]) || data[12 /* 11_letter_word */] <0.15527344f ? 
             (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.09375f ? 
                     (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
                        0.0f : 
                        0.039145224f) : 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <33.5f ? 
                        0.0030499934f : 
                        0.36267096f)) : 
                 (Double.isNaN(data[4]) || data[4 /* no_of_macs */] <0.5f ? 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.8671875f ? 
                        0.21350965f : 
                        0.85955054f) : 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <290.5f ? 
                        0.99908507f : 
                        0.0f))) : 
             (data[3 /* no_of_ips */] <0.5f ? 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.2890625f ? 
                    0.0f : 
                     (data[6 /* 5_letter_word */] <0.084375f ? 
                        0.0f : 
                        1.0f)) : 
                1.0f)) : 
         (data[2 /* no_of_characters */] <130.5f ? 
             (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <1.5f ? 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.37304688f ? 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.25f ? 
                        2.0828994E-4f : 
                        0.039473683f) : 
                    0.071428575f) : 
                1.0f) : 
             (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.33203125f ? 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.4140625f ? 
                     (Double.isNaN(data[4]) || data[4 /* no_of_macs */] <0.5f ? 
                        0.41147506f : 
                        1.0f) : 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <102.5f ? 
                        0.993819f : 
                        0.0f)) : 
                1.0f)));
    return pred;
  } // constant pool size = 82B, number of visited nodes = 20, static init size = 0B
}

class log_drf_1_Tree_10_class_26 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* no_of_characters */] <57.5f ? 
         (data[8 /* 7_letter_word */] <0.29101562f ? 
            0.0f : 
             (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.66627884f ? 
                0.99761903f : 
                0.0f)) : 
        0.0f);
    return pred;
  } // constant pool size = 14B, number of visited nodes = 3, static init size = 0B
}

class log_drf_1_Tree_10_class_27 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <256.5f ? 
        0.0f : 
         (data[6 /* 5_letter_word */] <0.028320312f ? 
             (data[8 /* 7_letter_word */] <0.26757812f ? 
                 (data[1 /* type_of_time */] <4.5f ? 
                    0.0f : 
                     (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                        0.0031948881f : 
                        0.0f)) : 
                0.0f) : 
            0.0f));
    return pred;
  } // constant pool size = 22B, number of visited nodes = 5, static init size = 0B
}

class log_drf_1_Tree_10_class_28 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <447.5f ? 
        0.0f : 
         (data[6 /* 5_letter_word */] <0.14160156f ? 
            0.0f : 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <19.5f ? 
                1.0f : 
                0.0f)));
    return pred;
  } // constant pool size = 14B, number of visited nodes = 3, static init size = 0B
}

class log_drf_1_Tree_10_class_29 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <957.5f ? 
         (Double.isNaN(data[12]) || data[12 /* 11_letter_word */] <0.041015625f ? 
             (data[1 /* type_of_time */] <4.5f ? 
                0.0f : 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.03125f ? 
                     (data[3 /* no_of_ips */] <0.5f ? 
                        9.886308E-5f : 
                        0.0f) : 
                    0.0f)) : 
             (data[3 /* no_of_ips */] <0.5f ? 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <412.5f ? 
                    0.0f : 
                     (data[12 /* 11_letter_word */] <0.10095215f ? 
                        0.5f : 
                        0.0f)) : 
                0.0f)) : 
         (data[2 /* no_of_characters */] <962.0f ? 
            1.0f : 
             (data[3 /* no_of_ips */] <0.5f ? 
                 (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.046875f ? 
                    0.0f : 
                     (data[4 /* no_of_macs */] <0.5f ? 
                        1.0f : 
                        0.0f)) : 
                0.0f)));
    return pred;
  } // constant pool size = 50B, number of visited nodes = 12, static init size = 0B
}

class log_drf_1_Tree_10_class_30 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <219.5f ? 
         (data[8 /* 7_letter_word */] <0.23535156f ? 
            0.0f : 
             (data[1 /* type_of_time */] <1.5f ? 
                1.0f : 
                0.0f)) : 
         (Double.isNaN(data[0]) || data[0 /* vlan */] <173.5f ? 
            0.0f : 
             (data[3 /* no_of_ips */] <2.5f ? 
                0.0f : 
                 (data[5 /* 4_letter_word */] <0.125f ? 
                    0.0f : 
                     (data[2 /* no_of_characters */] <584.0f ? 
                        1.0f : 
                        0.0f)))));
    return pred;
  } // constant pool size = 30B, number of visited nodes = 7, static init size = 0B
}

class log_drf_1_Tree_10_class_31 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[15]) || data[15 /* 14_letter_word */] <0.22485352f ? 
         (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.1484375f ? 
             (data[1 /* type_of_time */] <4.5f ? 
                0.0f : 
                 (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.30859375f ? 
                     (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <1.5f ? 
                        0.026705276f : 
                        0.0f) : 
                     (data[8 /* 7_letter_word */] <0.0859375f ? 
                        0.33507854f : 
                        0.0f))) : 
             (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.15625f ? 
                    0.0f : 
                     (data[2 /* no_of_characters */] <120.5f ? 
                        0.26440677f : 
                        0.0f)) : 
                 (data[3 /* no_of_ips */] <1.5f ? 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <300.5f ? 
                        1.0199918E-4f : 
                        0.015625f) : 
                    0.0f))) : 
         (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <117.0f ? 
             (data[15 /* 14_letter_word */] <0.29149055f ? 
                0.8611111f : 
                1.0f) : 
            0.0f));
    return pred;
  } // constant pool size = 54B, number of visited nodes = 13, static init size = 0B
}

class log_drf_1_Tree_10_class_32 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* no_of_characters */] <123.5f ? 
         (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.072265625f ? 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <111.5f ? 
                 (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                     (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.1015625f ? 
                        1.2075836E-4f : 
                        0.0f) : 
                     (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.4140625f ? 
                        0.0f : 
                        0.975f)) : 
                 (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <121.5f ? 
                        0.0f : 
                        0.08958333f) : 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <58.5f ? 
                        0.2457421f : 
                        0.0f))) : 
            0.0f) : 
        0.0f);
    return pred;
  } // constant pool size = 38B, number of visited nodes = 9, static init size = 0B
}

class log_drf_1_Tree_10_class_33 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* no_of_characters */] <69.5f ? 
         (data[8 /* 7_letter_word */] <0.125f ? 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <67.5f ? 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <34.5f ? 
                    0.0f : 
                     (data[0 /* vlan */] <17.5f ? 
                        0.6666667f : 
                        0.041237112f)) : 
                 (data[5 /* 4_letter_word */] <0.4140625f ? 
                    0.0f : 
                    1.0f)) : 
            0.0f) : 
         (data[0 /* vlan */] <7.5f ? 
            0.33333334f : 
             (data[1 /* type_of_time */] <4.5f ? 
                 (data[1 /* type_of_time */] <2.5f ? 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.078125f ? 
                        0.0070422534f : 
                        0.0f) : 
                    0.0f) : 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <277.5f ? 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.703125f ? 
                        5.238028E-4f : 
                        0.0068453248f) : 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.40625f ? 
                        3.36984E-4f : 
                        0.12588653f)))));
    return pred;
  } // constant pool size = 54B, number of visited nodes = 13, static init size = 0B
}

class log_drf_1_Tree_10_class_34 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.12158203f ? 
        0.0f : 
         (data[6 /* 5_letter_word */] <0.12758684f ? 
             (data[0 /* vlan */] <19.5f ? 
                0.33333334f : 
                0.0f) : 
             (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                 (data[8 /* 7_letter_word */] <0.17578125f ? 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.15655518f ? 
                        0.0f : 
                        0.011764706f) : 
                    0.0f) : 
                0.0f)));
    return pred;
  } // constant pool size = 26B, number of visited nodes = 6, static init size = 0B
}

class log_drf_1_Tree_10_class_35 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* no_of_characters */] <88.5f ? 
         (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.29101562f ? 
             (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                 (data[2 /* no_of_characters */] <85.0f ? 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.7421875f ? 
                        0.0f : 
                        0.0093896715f) : 
                    0.0f) : 
                0.0f) : 
             (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.8310623f ? 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <84.5f ? 
                        0.0f : 
                        0.25f) : 
                     (data[0 /* vlan */] <17.5f ? 
                        0.14285715f : 
                        0.0f)) : 
                0.0f)) : 
         (data[0 /* vlan */] <11.5f ? 
             (data[3 /* no_of_ips */] <0.5f ? 
                 (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.37109375f ? 
                    0.0f : 
                     (data[1 /* type_of_time */] <3.5f ? 
                        0.0f : 
                        0.5f)) : 
                0.0f) : 
             (data[2 /* no_of_characters */] <140.5f ? 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <126.5f ? 
                    0.0f : 
                     (data[0 /* vlan */] <27.5f ? 
                        0.0012549675f : 
                        0.0f)) : 
                 (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                    0.0f : 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.078125f ? 
                        1.0432968E-4f : 
                        0.001002004f)))));
    return pred;
  } // constant pool size = 74B, number of visited nodes = 18, static init size = 0B
}

class log_drf_1_Tree_10_class_36 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* no_of_characters */] <131.5f ? 
         (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.15527344f ? 
            0.0f : 
             (data[0 /* vlan */] <7.5f ? 
                0.13432837f : 
                0.0f)) : 
        0.0f);
    return pred;
  } // constant pool size = 14B, number of visited nodes = 3, static init size = 0B
}

class log_drf_1_Tree_10_class_37 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* no_of_characters */] <164.5f ? 
         (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.9160156f ? 
             (data[1 /* type_of_time */] <4.5f ? 
                 (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.7421875f ? 
                        1.0f : 
                        0.8f) : 
                     (data[2 /* no_of_characters */] <124.0f ? 
                        0.045454547f : 
                        0.003051882f)) : 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <154.5f ? 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.46875f ? 
                        0.0f : 
                        5.9090013E-4f) : 
                     (data[2 /* no_of_characters */] <140.5f ? 
                        0.23151125f : 
                        0.0f))) : 
             (data[3 /* no_of_ips */] <0.5f ? 
                0.093404956f : 
                 (data[0 /* vlan */] <90.0f ? 
                    0.0f : 
                     (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <1.5f ? 
                        1.0f : 
                        0.0f)))) : 
         (data[0 /* vlan */] <165.5f ? 
             (data[1 /* type_of_time */] <4.5f ? 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.3671875f ? 
                     (data[1 /* type_of_time */] <3.5f ? 
                        0.26696834f : 
                        1.0f) : 
                    0.0f) : 
                0.0f) : 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <486.5f ? 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <186.5f ? 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <173.5f ? 
                        0.99137235f : 
                        0.6686217f) : 
                    0.0f) : 
                 (data[1 /* type_of_time */] <4.5f ? 
                    0.94736844f : 
                    0.0f))));
    return pred;
  } // constant pool size = 82B, number of visited nodes = 20, static init size = 0B
}

class log_drf_1_Tree_10_class_38 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* no_of_characters */] <93.5f ? 
         (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.10058594f ? 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <85.5f ? 
                0.0f : 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <89.5f ? 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.6640625f ? 
                        0.0f : 
                        0.016666668f) : 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.4140625f ? 
                        0.0f : 
                        0.25f))) : 
            0.0f) : 
        0.0f);
    return pred;
  } // constant pool size = 26B, number of visited nodes = 6, static init size = 0B
}


class log_drf_1_Forest_11 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += log_drf_1_Tree_11_class_0.score0(fdata);
    preds[2] += log_drf_1_Tree_11_class_1.score0(fdata);
    preds[3] += log_drf_1_Tree_11_class_2.score0(fdata);
    preds[4] += log_drf_1_Tree_11_class_3.score0(fdata);
    preds[5] += log_drf_1_Tree_11_class_4.score0(fdata);
    preds[6] += log_drf_1_Tree_11_class_5.score0(fdata);
    preds[7] += log_drf_1_Tree_11_class_6.score0(fdata);
    preds[8] += log_drf_1_Tree_11_class_7.score0(fdata);
    preds[9] += log_drf_1_Tree_11_class_8.score0(fdata);
    preds[10] += log_drf_1_Tree_11_class_9.score0(fdata);
    preds[11] += log_drf_1_Tree_11_class_10.score0(fdata);
    preds[12] += log_drf_1_Tree_11_class_11.score0(fdata);
    preds[13] += log_drf_1_Tree_11_class_12.score0(fdata);
    preds[14] += log_drf_1_Tree_11_class_13.score0(fdata);
    preds[15] += log_drf_1_Tree_11_class_14.score0(fdata);
    preds[16] += log_drf_1_Tree_11_class_15.score0(fdata);
    preds[17] += log_drf_1_Tree_11_class_16.score0(fdata);
    preds[18] += log_drf_1_Tree_11_class_17.score0(fdata);
    preds[19] += log_drf_1_Tree_11_class_18.score0(fdata);
    preds[20] += log_drf_1_Tree_11_class_19.score0(fdata);
    preds[21] += log_drf_1_Tree_11_class_20.score0(fdata);
    preds[22] += log_drf_1_Tree_11_class_21.score0(fdata);
    preds[23] += log_drf_1_Tree_11_class_22.score0(fdata);
    preds[24] += log_drf_1_Tree_11_class_23.score0(fdata);
    preds[25] += log_drf_1_Tree_11_class_24.score0(fdata);
    preds[26] += log_drf_1_Tree_11_class_25.score0(fdata);
    preds[27] += log_drf_1_Tree_11_class_26.score0(fdata);
    preds[28] += log_drf_1_Tree_11_class_27.score0(fdata);
    preds[29] += log_drf_1_Tree_11_class_28.score0(fdata);
    preds[30] += log_drf_1_Tree_11_class_29.score0(fdata);
    preds[31] += log_drf_1_Tree_11_class_30.score0(fdata);
    preds[32] += log_drf_1_Tree_11_class_31.score0(fdata);
    preds[33] += log_drf_1_Tree_11_class_32.score0(fdata);
    preds[34] += log_drf_1_Tree_11_class_33.score0(fdata);
    preds[35] += log_drf_1_Tree_11_class_34.score0(fdata);
    preds[36] += log_drf_1_Tree_11_class_35.score0(fdata);
    preds[37] += log_drf_1_Tree_11_class_36.score0(fdata);
    preds[38] += log_drf_1_Tree_11_class_37.score0(fdata);
    preds[39] += log_drf_1_Tree_11_class_38.score0(fdata);
  }
}
class log_drf_1_Tree_11_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <1040.0f ? 
         (Double.isNaN(data[4]) || data[4 /* no_of_macs */] <0.5f ? 
            0.0f : 
             (data[3 /* no_of_ips */] <0.5f ? 
                1.0f : 
                0.0f)) : 
         (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.2421875f ? 
            1.0f : 
            0.0f));
    return pred;
  } // constant pool size = 18B, number of visited nodes = 4, static init size = 0B
}

class log_drf_1_Tree_11_class_1 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <261.5f ? 
         (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
            0.0f : 
             (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.04296875f ? 
                 (data[3 /* no_of_ips */] <0.5f ? 
                    0.0f : 
                     (data[3 /* no_of_ips */] <1.5f ? 
                        0.002195815f : 
                        0.0f)) : 
                0.0f)) : 
         (data[2 /* no_of_characters */] <289.5f ? 
             (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.1328125f ? 
                0.0f : 
                 (data[8 /* 7_letter_word */] <0.31640625f ? 
                     (data[2 /* no_of_characters */] <267.5f ? 
                        0.057142857f : 
                        0.0f) : 
                     (data[3 /* no_of_ips */] <0.5f ? 
                        0.0f : 
                        0.9962406f))) : 
             (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.3671875f ? 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <137.5f ? 
                    0.0f : 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.109375f ? 
                        0.0f : 
                        0.0116959065f)) : 
                 (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
                     (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                        0.0f : 
                        1.0f) : 
                     (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.03125f ? 
                        0.80487806f : 
                        0.0f)))));
    return pred;
  } // constant pool size = 66B, number of visited nodes = 16, static init size = 0B
}

class log_drf_1_Tree_11_class_2 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* no_of_characters */] <158.5f ? 
         (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.36621094f ? 
             (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                 (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.22265625f ? 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <113.5f ? 
                        0.0f : 
                        0.057990745f) : 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.19454956f ? 
                        0.0f : 
                        0.0020920502f)) : 
                 (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.1015625f ? 
                    0.0f : 
                     (data[5 /* 4_letter_word */] <0.22790527f ? 
                        0.5f : 
                        8.516437E-5f))) : 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <145.0f ? 
                 (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.1015625f ? 
                     (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <1.5f ? 
                        0.050678372f : 
                        0.0f) : 
                     (data[9 /* 8_letter_word */] <0.4159546f ? 
                        0.020661157f : 
                        0.0f)) : 
                 (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.0859375f ? 
                     (data[5 /* 4_letter_word */] <0.3671875f ? 
                        0.24074075f : 
                        0.96405226f) : 
                    0.0f))) : 
         (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.4638672f ? 
             (data[8 /* 7_letter_word */] <0.35351562f ? 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <1090.0f ? 
                     (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.15625f ? 
                        2.2116554E-4f : 
                        0.0019071837f) : 
                     (data[5 /* 4_letter_word */] <0.203125f ? 
                        0.5f : 
                        0.0f)) : 
                0.0f) : 
             (data[2 /* no_of_characters */] <167.5f ? 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.8743439f ? 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <178.5f ? 
                        0.0f : 
                        0.18478261f) : 
                    0.1f) : 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <733.0f ? 
                     (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.2265625f ? 
                        9.4250706E-4f : 
                        0.048780486f) : 
                     (data[2 /* no_of_characters */] <958.0f ? 
                        0.33333334f : 
                        0.0f)))));
    return pred;
  } // constant pool size = 102B, number of visited nodes = 25, static init size = 0B
}

class log_drf_1_Tree_11_class_3 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.3227539f ? 
         (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
             (data[2 /* no_of_characters */] <105.5f ? 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <103.5f ? 
                     (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                        0.0f : 
                        0.5f) : 
                    0.26666668f) : 
                0.0f) : 
             (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.24080467f ? 
                 (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.23828125f ? 
                    0.0f : 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.21875f ? 
                        0.0f : 
                        3.9588282E-4f)) : 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <25.5f ? 
                    0.0f : 
                     (data[3 /* no_of_ips */] <0.5f ? 
                        0.0f : 
                        0.30668843f)))) : 
         (data[2 /* no_of_characters */] <140.5f ? 
            0.0f : 
             (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.30859375f ? 
                 (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.072265625f ? 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <33.5f ? 
                        0.4469802f : 
                        0.0f) : 
                    0.0f) : 
                0.0f)));
    return pred;
  } // constant pool size = 58B, number of visited nodes = 14, static init size = 0B
}

class log_drf_1_Tree_11_class_4 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* no_of_characters */] <113.5f ? 
         (data[1 /* type_of_time */] <4.5f ? 
            0.0f : 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <109.5f ? 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <25.5f ? 
                    0.0f : 
                     (data[3 /* no_of_ips */] <0.5f ? 
                        5.402485E-4f : 
                        0.0f)) : 
                 (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.2890625f ? 
                    0.0f : 
                     (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.4159546f ? 
                        1.0f : 
                        0.0f)))) : 
         (data[2 /* no_of_characters */] <118.5f ? 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <117.5f ? 
                 (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.265625f ? 
                    0.0f : 
                     (data[10 /* 9_letter_word */] <0.41479492f ? 
                        1.0f : 
                        0.0f)) : 
                 (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.4140625f ? 
                    0.0f : 
                     (data[6 /* 5_letter_word */] <0.3671875f ? 
                        0.07692308f : 
                        0.0f))) : 
             (data[8 /* 7_letter_word */] <0.14453125f ? 
                 (data[6 /* 5_letter_word */] <0.1484375f ? 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.12176514f ? 
                        0.0f : 
                        0.011185682f) : 
                    0.0f) : 
                0.0f)));
    return pred;
  } // constant pool size = 66B, number of visited nodes = 16, static init size = 0B
}

class log_drf_1_Tree_11_class_5 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.087402344f ? 
         (data[1 /* type_of_time */] <4.5f ? 
            0.0f : 
             (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.02734375f ? 
                 (data[3 /* no_of_ips */] <0.5f ? 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.3125f ? 
                        0.0f : 
                        0.0023322103f) : 
                    0.0f) : 
                0.0f)) : 
         (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.095703125f ? 
             (Double.isNaN(data[12]) || data[12 /* 11_letter_word */] <0.29101562f ? 
                 (data[0 /* vlan */] <17.5f ? 
                     (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
                        0.0f : 
                        0.012048192f) : 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.15625f ? 
                        3.81461E-5f : 
                        2.4303305E-4f)) : 
                 (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.16796875f ? 
                    0.0f : 
                    1.0f)) : 
             (data[7 /* 6_letter_word */] <0.18344715f ? 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.1792096f ? 
                     (data[6 /* 5_letter_word */] <0.28703308f ? 
                        0.062200956f : 
                        0.0f) : 
                    1.0f) : 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <60.5f ? 
                    0.0f : 
                     (data[0 /* vlan */] <84.5f ? 
                        0.31707317f : 
                        0.0f)))));
    return pred;
  } // constant pool size = 66B, number of visited nodes = 16, static init size = 0B
}

class log_drf_1_Tree_11_class_6 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* no_of_characters */] <98.5f ? 
         (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.10058594f ? 
             (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.29101562f ? 
                 (data[0 /* vlan */] <17.5f ? 
                    0.13333334f : 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.828125f ? 
                        0.0f : 
                        0.0234375f)) : 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <109.5f ? 
                    0.0f : 
                     (data[2 /* no_of_characters */] <71.0f ? 
                        0.9f : 
                        0.99130434f))) : 
             (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.1015625f ? 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <109.5f ? 
                     (data[0 /* vlan */] <18.5f ? 
                        0.034013607f : 
                        0.0f) : 
                     (data[10 /* 9_letter_word */] <0.125f ? 
                        0.4347826f : 
                        1.0f)) : 
                 (data[1 /* type_of_time */] <4.0f ? 
                    0.0f : 
                     (data[7 /* 6_letter_word */] <0.26922607f ? 
                        0.5576923f : 
                        0.83928573f)))) : 
         (data[2 /* no_of_characters */] <117.5f ? 
             (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.15429688f ? 
                0.0f : 
                 (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.0859375f ? 
                     (Double.isNaN(data[15]) || data[15 /* 14_letter_word */] <0.16796875f ? 
                        0.015873017f : 
                        0.0f) : 
                     (data[9 /* 8_letter_word */] <0.20715332f ? 
                        0.94736844f : 
                        0.0f))) : 
            0.0f));
    return pred;
  } // constant pool size = 74B, number of visited nodes = 18, static init size = 0B
}

class log_drf_1_Tree_11_class_7 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* no_of_characters */] <154.5f ? 
        2.349155E-5f : 
         (data[8 /* 7_letter_word */] <0.0126953125f ? 
             (data[6 /* 5_letter_word */] <0.04296875f ? 
                 (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.94921875f ? 
                    0.0f : 
                    0.088975936f) : 
                0.0f) : 
            0.0f));
    return pred;
  } // constant pool size = 18B, number of visited nodes = 4, static init size = 0B
}

class log_drf_1_Tree_11_class_8 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <900.5f ? 
         (data[1 /* type_of_time */] <4.5f ? 
            0.0f : 
             (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.0390625f ? 
                 (data[3 /* no_of_ips */] <0.5f ? 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.03125f ? 
                        3.7730153E-4f : 
                        0.0f) : 
                    0.0f) : 
                0.0f)) : 
         (data[2 /* no_of_characters */] <1011.5f ? 
             (data[6 /* 5_letter_word */] <0.27929688f ? 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.01953125f ? 
                     (data[2 /* no_of_characters */] <949.5f ? 
                        0.78571427f : 
                        1.0f) : 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <964.5f ? 
                        0.0f : 
                        0.5f)) : 
                1.0f) : 
             (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.09277344f ? 
                 (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <4.5f ? 
                     (data[3 /* no_of_ips */] <2.5f ? 
                        0.27272728f : 
                        0.016949153f) : 
                    1.0f) : 
                0.0f)));
    return pred;
  } // constant pool size = 54B, number of visited nodes = 13, static init size = 0B
}

class log_drf_1_Tree_11_class_9 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* no_of_characters */] <141.5f ? 
         (data[1 /* type_of_time */] <3.5f ? 
             (data[3 /* no_of_ips */] <1.5f ? 
                 (data[2 /* no_of_characters */] <85.5f ? 
                    0.5f : 
                    0.0f) : 
                1.0f) : 
            0.0f) : 
         (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.3203125f ? 
             (data[5 /* 4_letter_word */] <0.20703125f ? 
                 (data[1 /* type_of_time */] <3.5f ? 
                     (Double.isNaN(data[12]) || data[12 /* 11_letter_word */] <0.078125f ? 
                        0.917603f : 
                        0.0f) : 
                    0.0f) : 
                 (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                    0.0f : 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <248.5f ? 
                        0.0f : 
                        0.0026642985f))) : 
             (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.18359375f ? 
                 (data[1 /* type_of_time */] <3.5f ? 
                     (data[0 /* vlan */] <98.0f ? 
                        0.0f : 
                        0.96875f) : 
                    0.0f) : 
                 (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <2.5f ? 
                    0.0f : 
                     (data[11 /* 10_letter_word */] <0.1015625f ? 
                        0.0f : 
                        1.0f)))));
    return pred;
  } // constant pool size = 62B, number of visited nodes = 15, static init size = 0B
}

class log_drf_1_Tree_11_class_10 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* no_of_characters */] <92.5f ? 
         (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.10058594f ? 
             (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.83203125f ? 
                0.0f : 
                0.030303031f) : 
            0.0f) : 
         (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.4716797f ? 
            0.0f : 
             (data[2 /* no_of_characters */] <111.5f ? 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <110.5f ? 
                    0.0f : 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.25f ? 
                        0.0121951215f : 
                        0.0f)) : 
                0.0f)));
    return pred;
  } // constant pool size = 30B, number of visited nodes = 7, static init size = 0B
}

class log_drf_1_Tree_11_class_11 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* no_of_characters */] <134.5f ? 
         (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.26757812f ? 
            0.0f : 
             (data[7 /* 6_letter_word */] <0.30906296f ? 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.072916664f ? 
                    0.0f : 
                    0.5f) : 
                0.0f)) : 
        0.0f);
    return pred;
  } // constant pool size = 18B, number of visited nodes = 4, static init size = 0B
}

class log_drf_1_Tree_11_class_12 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <529.5f ? 
         (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.9277344f ? 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <433.5f ? 
                0.0f : 
                 (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.5f ? 
                    0.0f : 
                    1.0f)) : 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <369.5f ? 
                0.0f : 
                1.0f)) : 
         (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.7939453f ? 
             (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.5f ? 
                0.0f : 
                0.90909094f) : 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <762.0f ? 
                1.0f : 
                0.0f)));
    return pred;
  } // constant pool size = 34B, number of visited nodes = 8, static init size = 0B
}

class log_drf_1_Tree_11_class_13 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* no_of_characters */] <54.0f ? 
         (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.16699219f ? 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <27.5f ? 
                1.0f : 
                 (data[5 /* 4_letter_word */] <0.125f ? 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.5f ? 
                        0.125f : 
                        0.0f) : 
                    1.0f)) : 
             (data[7 /* 6_letter_word */] <0.74944687f ? 
                0.0f : 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <31.5f ? 
                    0.0f : 
                    0.33333334f))) : 
         (data[2 /* no_of_characters */] <85.5f ? 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <582.5f ? 
                 (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.3671875f ? 
                    0.0f : 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.1015625f ? 
                        0.0f : 
                        0.125f)) : 
                1.0f) : 
             (data[8 /* 7_letter_word */] <0.2109375f ? 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <593.0f ? 
                    0.0f : 
                    0.046511628f) : 
                0.0f)));
    return pred;
  } // constant pool size = 54B, number of visited nodes = 13, static init size = 0B
}

class log_drf_1_Tree_11_class_14 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <215.5f ? 
         (data[1 /* type_of_time */] <2.5f ? 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <171.5f ? 
                0.0f : 
                 (data[2 /* no_of_characters */] <195.5f ? 
                    0.5f : 
                    0.0f)) : 
            0.0f) : 
         (data[2 /* no_of_characters */] <218.5f ? 
             (data[5 /* 4_letter_word */] <0.22460938f ? 
                 (data[0 /* vlan */] <33.5f ? 
                     (data[1 /* type_of_time */] <3.5f ? 
                        1.0f : 
                        0.0f) : 
                    0.0f) : 
                0.0f) : 
             (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.19140625f ? 
                0.0f : 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <25.5f ? 
                    0.0f : 
                     (data[10 /* 9_letter_word */] <0.21368408f ? 
                        0.09090909f : 
                        0.0f)))));
    return pred;
  } // constant pool size = 46B, number of visited nodes = 11, static init size = 0B
}

class log_drf_1_Tree_11_class_15 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* no_of_characters */] <100.5f ? 
         (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.083984375f ? 
             (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.1015625f ? 
                 (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <1.5f ? 
                    0.0f : 
                     (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <2.5f ? 
                        0.14000688f : 
                        0.0f)) : 
                0.0f) : 
            0.0f) : 
         (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.59472656f ? 
             (data[2 /* no_of_characters */] <133.5f ? 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.30897903f ? 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.15448952f ? 
                        0.0f : 
                        0.0076923077f) : 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <125.5f ? 
                        0.007591442f : 
                        0.21818182f)) : 
                 (data[0 /* vlan */] <150.5f ? 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <124.5f ? 
                        4.0468352E-4f : 
                        0.11342155f) : 
                    0.0f)) : 
             (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.18359375f ? 
                 (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.265625f ? 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <211.5f ? 
                        0.0074884794f : 
                        0.049723756f) : 
                     (data[1 /* type_of_time */] <3.5f ? 
                        0.0f : 
                        0.7916667f)) : 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <202.0f ? 
                    0.0f : 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <154.5f ? 
                        1.0f : 
                        0.0f)))));
    return pred;
  } // constant pool size = 74B, number of visited nodes = 18, static init size = 0B
}

class log_drf_1_Tree_11_class_16 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* no_of_characters */] <84.5f ? 
         (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.125f ? 
             (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.83203125f ? 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.4140625f ? 
                    0.0f : 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.25350952f ? 
                        0.0f : 
                        0.027027028f)) : 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <77.0f ? 
                    0.0f : 
                    0.125f)) : 
            0.0f) : 
         (data[2 /* no_of_characters */] <105.5f ? 
             (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.31054688f ? 
                 (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                     (data[9 /* 8_letter_word */] <0.1015625f ? 
                        6.7001674E-4f : 
                        3.1065548E-4f) : 
                    0.0f) : 
                 (data[1 /* type_of_time */] <4.5f ? 
                    0.0f : 
                     (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.25f ? 
                        0.0034802784f : 
                        0.0f))) : 
             (data[8 /* 7_letter_word */] <0.013671875f ? 
                 (data[3 /* no_of_ips */] <0.5f ? 
                     (data[1 /* type_of_time */] <4.5f ? 
                        0.0f : 
                        2.3450324E-4f) : 
                    0.0f) : 
                 (data[2 /* no_of_characters */] <142.5f ? 
                     (data[8 /* 7_letter_word */] <0.4683075f ? 
                        0.0f : 
                        3.649635E-4f) : 
                    0.0f))));
    return pred;
  } // constant pool size = 70B, number of visited nodes = 17, static init size = 0B
}

class log_drf_1_Tree_11_class_17 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <659.0f ? 
         (data[1 /* type_of_time */] <2.5f ? 
             (data[2 /* no_of_characters */] <96.5f ? 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <93.0f ? 
                    0.0f : 
                    0.2f) : 
                0.0f) : 
            0.0f) : 
         (data[2 /* no_of_characters */] <717.0f ? 
             (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.029296875f ? 
                1.0f : 
                0.0f) : 
             (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.29101562f ? 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.25390625f ? 
                     (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <3.5f ? 
                        0.0091743115f : 
                        0.8557692f) : 
                     (data[3 /* no_of_ips */] <2.5f ? 
                        0.375f : 
                        1.0f)) : 
                 (data[3 /* no_of_ips */] <2.5f ? 
                    0.0f : 
                    1.0f))));
    return pred;
  } // constant pool size = 46B, number of visited nodes = 11, static init size = 0B
}

class log_drf_1_Tree_11_class_18 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <330.5f ? 
        0.0f : 
         (data[7 /* 6_letter_word */] <0.3203125f ? 
             (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.29466248f ? 
                0.0f : 
                0.33333334f) : 
            0.0f));
    return pred;
  } // constant pool size = 14B, number of visited nodes = 3, static init size = 0B
}

class log_drf_1_Tree_11_class_19 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* no_of_characters */] <136.5f ? 
         (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.22460938f ? 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <135.0f ? 
                0.0f : 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.15529633f ? 
                    0.0f : 
                     (data[2 /* no_of_characters */] <135.5f ? 
                        0.0f : 
                        0.33333334f))) : 
             (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.125f ? 
                0.0f : 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <17.5f ? 
                    1.0f : 
                    0.0f))) : 
         (data[2 /* no_of_characters */] <139.5f ? 
             (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.22460938f ? 
                0.0f : 
                 (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.125f ? 
                    0.0f : 
                     (data[3 /* no_of_ips */] <0.5f ? 
                        0.0f : 
                        1.0f))) : 
             (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.234375f ? 
                0.0f : 
                 (data[3 /* no_of_ips */] <1.5f ? 
                     (data[2 /* no_of_characters */] <161.5f ? 
                        0.006535948f : 
                        0.0f) : 
                    0.0f))));
    return pred;
  } // constant pool size = 58B, number of visited nodes = 14, static init size = 0B
}

class log_drf_1_Tree_11_class_20 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* no_of_characters */] <134.5f ? 
         (data[1 /* type_of_time */] <4.5f ? 
            0.0f : 
             (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.29101562f ? 
                 (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.0625f ? 
                        0.9313612f : 
                        0.4253773f) : 
                     (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.2890625f ? 
                        0.06339862f : 
                        0.6820513f)) : 
                 (data[2 /* no_of_characters */] <82.5f ? 
                    0.0f : 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <33.5f ? 
                        0.9822848f : 
                        0.0f)))) : 
         (data[8 /* 7_letter_word */] <0.2607422f ? 
             (data[6 /* 5_letter_word */] <0.03125f ? 
                 (data[0 /* vlan */] <25.5f ? 
                     (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.1796875f ? 
                        0.62392473f : 
                        0.24242425f) : 
                    0.0f) : 
                 (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.23828125f ? 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.2362976f ? 
                        0.04165853f : 
                        0.6353791f) : 
                     (data[3 /* no_of_ips */] <0.5f ? 
                        0.84949833f : 
                        0.0f))) : 
             (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.1171875f ? 
                 (data[2 /* no_of_characters */] <152.5f ? 
                     (data[8 /* 7_letter_word */] <0.3693182f ? 
                        0.49341318f : 
                        0.018795386f) : 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.0625f ? 
                        0.0012865091f : 
                        0.01012534f)) : 
                 (data[2 /* no_of_characters */] <206.5f ? 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.15625f ? 
                        0.90234745f : 
                        0.11643836f) : 
                     (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
                        0.0f : 
                        0.9756098f)))));
    return pred;
  } // constant pool size = 90B, number of visited nodes = 22, static init size = 0B
}

class log_drf_1_Tree_11_class_21 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <220.5f ? 
         (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.5498047f ? 
             (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                 (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.30859375f ? 
                     (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.2109375f ? 
                        0.0011651934f : 
                        0.012162162f) : 
                     (data[0 /* vlan */] <17.5f ? 
                        0.014418605f : 
                        1.7473353E-4f)) : 
                 (Double.isNaN(data[13]) || data[13 /* 12_letter_word */] <0.1953125f ? 
                     (data[6 /* 5_letter_word */] <0.0625f ? 
                        6.583712E-5f : 
                        0.0f) : 
                     (data[5 /* 4_letter_word */] <0.4140625f ? 
                        0.0f : 
                        0.03125f))) : 
             (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.1015625f ? 
                0.0f : 
                 (data[11 /* 10_letter_word */] <0.26633707f ? 
                    1.0f : 
                    0.0f))) : 
         (data[2 /* no_of_characters */] <223.5f ? 
             (data[8 /* 7_letter_word */] <0.072265625f ? 
                 (data[12 /* 11_letter_word */] <0.125f ? 
                    0.0f : 
                    0.9880952f) : 
                 (data[2 /* no_of_characters */] <221.5f ? 
                    0.0f : 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.078125f ? 
                        0.0051369863f : 
                        0.0f))) : 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <331.5f ? 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.78515625f ? 
                     (data[5 /* 4_letter_word */] <0.234375f ? 
                        0.001017294f : 
                        0.011306109f) : 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.078125f ? 
                        0.0f : 
                        0.40425533f)) : 
                0.0f)));
    return pred;
  } // constant pool size = 82B, number of visited nodes = 20, static init size = 0B
}

class log_drf_1_Tree_11_class_22 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <227.5f ? 
         (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
            0.0f : 
             (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.15429688f ? 
                0.0f : 
                 (data[10 /* 9_letter_word */] <0.1807251f ? 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.0859375f ? 
                        0.0f : 
                        0.1875f) : 
                    0.0f))) : 
         (data[2 /* no_of_characters */] <230.5f ? 
             (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.31054688f ? 
                0.0f : 
                 (data[0 /* vlan */] <25.5f ? 
                     (data[2 /* no_of_characters */] <228.5f ? 
                        0.0f : 
                        1.0f) : 
                    0.0f)) : 
            0.0f));
    return pred;
  } // constant pool size = 38B, number of visited nodes = 9, static init size = 0B
}

class log_drf_1_Tree_11_class_23 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <257.5f ? 
         (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
            0.0f : 
             (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.58203125f ? 
                 (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.3660431f ? 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.15625f ? 
                        0.0015273925f : 
                        8.206138E-5f) : 
                     (Double.isNaN(data[13]) || data[13 /* 12_letter_word */] <0.125f ? 
                        0.0037626629f : 
                        1.0f)) : 
                 (data[2 /* no_of_characters */] <133.5f ? 
                    0.0f : 
                     (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                        0.9743829f : 
                        0.0f)))) : 
         (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.42285156f ? 
             (Double.isNaN(data[13]) || data[13 /* 12_letter_word */] <0.07421875f ? 
                 (data[0 /* vlan */] <17.5f ? 
                     (data[0 /* vlan */] <12.5f ? 
                        1.0f : 
                        0.0012591815f) : 
                    0.0f) : 
                 (data[12 /* 11_letter_word */] <0.046875f ? 
                    0.0f : 
                    1.0f)) : 
             (data[8 /* 7_letter_word */] <0.26757812f ? 
                0.0f : 
                0.99802953f)));
    return pred;
  } // constant pool size = 58B, number of visited nodes = 14, static init size = 0B
}

class log_drf_1_Tree_11_class_24 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.9746094f ? 
        0.0f : 
         (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
            0.0f : 
             (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                0.0f : 
                 (data[0 /* vlan */] <17.5f ? 
                    1.0f : 
                    0.0f))));
    return pred;
  } // constant pool size = 18B, number of visited nodes = 4, static init size = 0B
}

class log_drf_1_Tree_11_class_25 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.44970703f ? 
         (Double.isNaN(data[4]) || data[4 /* no_of_macs */] <0.5f ? 
             (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.1484375f ? 
                 (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
                    0.0f : 
                     (data[5 /* 4_letter_word */] <0.21875f ? 
                        0.069889426f : 
                        0.4478182f)) : 
                 (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <260.5f ? 
                        0.016178047f : 
                        0.15752213f) : 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.40625f ? 
                        0.11205074f : 
                        0.9641256f))) : 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <233.0f ? 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <202.5f ? 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <161.5f ? 
                        1.0f : 
                        0.9975845f) : 
                     (data[4 /* no_of_macs */] <1.5f ? 
                        0.84615386f : 
                        1.0f)) : 
                0.0f)) : 
         (data[2 /* no_of_characters */] <130.5f ? 
             (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.37304688f ? 
                 (data[6 /* 5_letter_word */] <0.87317467f ? 
                     (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <1.0f ? 
                        0.0051150895f : 
                        1.0f) : 
                    0.0f) : 
                 (data[2 /* no_of_characters */] <113.0f ? 
                    1.0f : 
                     (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <1.0f ? 
                        0.0f : 
                        1.0f))) : 
             (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.29101562f ? 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.35351562f ? 
                     (data[3 /* no_of_ips */] <1.5f ? 
                        0.1267041f : 
                        0.9763056f) : 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <98.0f ? 
                        0.99025255f : 
                        0.0f)) : 
                 (data[2 /* no_of_characters */] <176.5f ? 
                     (data[0 /* vlan */] <106.0f ? 
                        1.0f : 
                        0.0f) : 
                     (data[0 /* vlan */] <98.0f ? 
                        0.125f : 
                        0.0f)))));
    return pred;
  } // constant pool size = 102B, number of visited nodes = 25, static init size = 0B
}

class log_drf_1_Tree_11_class_26 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* no_of_characters */] <57.5f ? 
         (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.16699219f ? 
             (data[5 /* 4_letter_word */] <0.5f ? 
                0.0f : 
                 (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.83203125f ? 
                    0.9950372f : 
                    0.0f)) : 
            0.0f) : 
        0.0f);
    return pred;
  } // constant pool size = 18B, number of visited nodes = 4, static init size = 0B
}

class log_drf_1_Tree_11_class_27 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <256.5f ? 
        0.0f : 
        1.064396E-4f);
    return pred;
  } // constant pool size = 6B, number of visited nodes = 1, static init size = 0B
}

class log_drf_1_Tree_11_class_28 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <447.5f ? 
        0.0f : 
         (data[7 /* 6_letter_word */] <0.19726562f ? 
             (data[2 /* no_of_characters */] <508.0f ? 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <491.5f ? 
                    0.0f : 
                     (data[7 /* 6_letter_word */] <0.15396342f ? 
                        0.75f : 
                        1.0f)) : 
                0.0f) : 
             (data[3 /* no_of_ips */] <5.0f ? 
                 (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.1484375f ? 
                    0.0f : 
                    0.969697f) : 
                1.0f)));
    return pred;
  } // constant pool size = 30B, number of visited nodes = 7, static init size = 0B
}

class log_drf_1_Tree_11_class_29 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <957.5f ? 
         (data[1 /* type_of_time */] <4.5f ? 
            0.0f : 
             (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.025390625f ? 
                 (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.7734375f ? 
                    0.0f : 
                    1.4617747E-4f) : 
                 (data[9 /* 8_letter_word */] <0.048233032f ? 
                    1.0f : 
                    0.0f))) : 
         (data[2 /* no_of_characters */] <962.0f ? 
            1.0f : 
             (data[2 /* no_of_characters */] <975.5f ? 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.01953125f ? 
                    0.0f : 
                    0.5f) : 
                0.0f)));
    return pred;
  } // constant pool size = 34B, number of visited nodes = 8, static init size = 0B
}

class log_drf_1_Tree_11_class_30 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <219.5f ? 
         (data[1 /* type_of_time */] <1.5f ? 
            1.0f : 
            0.0f) : 
         (data[2 /* no_of_characters */] <240.5f ? 
             (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.22460938f ? 
                0.0f : 
                 (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.30859375f ? 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.19528198f ? 
                        0.0f : 
                        0.13235295f) : 
                     (data[0 /* vlan */] <178.5f ? 
                        0.0f : 
                        1.0f))) : 
            0.0f));
    return pred;
  } // constant pool size = 30B, number of visited nodes = 7, static init size = 0B
}

class log_drf_1_Tree_11_class_31 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* no_of_characters */] <113.5f ? 
         (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.083984375f ? 
             (Double.isNaN(data[15]) || data[15 /* 14_letter_word */] <0.16699219f ? 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.4140625f ? 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.1015625f ? 
                        0.014031652f : 
                        2.7510317E-4f) : 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <33.5f ? 
                        0.0f : 
                        0.9003559f)) : 
                1.0f) : 
             (Double.isNaN(data[13]) || data[13 /* 12_letter_word */] <0.41601562f ? 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <61.5f ? 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <34.5f ? 
                        0.0f : 
                        0.19512194f) : 
                     (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.125f ? 
                        0.5744681f : 
                        0.0f)) : 
                1.0f)) : 
         (data[2 /* no_of_characters */] <139.5f ? 
             (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.15429688f ? 
                 (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.2890625f ? 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.53125f ? 
                        0.0039128736f : 
                        0.025874127f) : 
                     (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <1.5f ? 
                        0.42231077f : 
                        0.0f)) : 
                0.0f) : 
             (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.234375f ? 
                 (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                    0.0f : 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.828125f ? 
                        3.3962447E-4f : 
                        0.008264462f)) : 
                 (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.125f ? 
                    0.0f : 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.4140625f ? 
                        0.0f : 
                        1.0f)))));
    return pred;
  } // constant pool size = 82B, number of visited nodes = 20, static init size = 0B
}

class log_drf_1_Tree_11_class_32 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* no_of_characters */] <123.5f ? 
         (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.22460938f ? 
             (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.47070312f ? 
                0.0f : 
                 (data[2 /* no_of_characters */] <91.5f ? 
                     (data[0 /* vlan */] <33.5f ? 
                        0.4431818f : 
                        0.0f) : 
                    0.0f)) : 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <121.5f ? 
                 (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.125f ? 
                     (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                        3.448276E-4f : 
                        0.05283505f) : 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.125f ? 
                        0.0f : 
                        1.0f)) : 
                 (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.44921875f ? 
                    0.0f : 
                    0.9777778f))) : 
        0.0f);
    return pred;
  } // constant pool size = 42B, number of visited nodes = 10, static init size = 0B
}

class log_drf_1_Tree_11_class_33 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* no_of_characters */] <69.5f ? 
         (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.41601562f ? 
             (data[5 /* 4_letter_word */] <0.5f ? 
                 (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.2890625f ? 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.12646484f ? 
                        0.010344828f : 
                        0.0f) : 
                     (data[0 /* vlan */] <73.5f ? 
                        1.0f : 
                        0.0f)) : 
                0.0f) : 
             (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.7490692f ? 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <45.5f ? 
                    1.0f : 
                    0.0f) : 
                0.14285715f)) : 
         (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <282.5f ? 
             (data[8 /* 7_letter_word */] <0.04296875f ? 
                 (data[2 /* no_of_characters */] <84.5f ? 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.171875f ? 
                        0.026022306f : 
                        0.0f) : 
                     (data[6 /* 5_letter_word */] <0.046875f ? 
                        8.287293E-4f : 
                        3.8629427E-4f)) : 
                 (data[2 /* no_of_characters */] <96.5f ? 
                     (data[8 /* 7_letter_word */] <0.28970337f ? 
                        0.04761905f : 
                        0.0063897762f) : 
                     (data[8 /* 7_letter_word */] <0.35699463f ? 
                        1.0005003E-4f : 
                        0.0f))) : 
             (data[2 /* no_of_characters */] <380.5f ? 
                 (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.078125f ? 
                    0.0f : 
                     (data[5 /* 4_letter_word */] <0.40625f ? 
                        0.03448276f : 
                        0.75757575f)) : 
                0.0f)));
    return pred;
  } // constant pool size = 78B, number of visited nodes = 19, static init size = 0B
}

class log_drf_1_Tree_11_class_34 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.12158203f ? 
        0.0f : 
         (data[1 /* type_of_time */] <4.5f ? 
            0.0f : 
             (data[6 /* 5_letter_word */] <0.12844467f ? 
                 (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.0625f ? 
                    0.0f : 
                    0.5f) : 
                 (data[3 /* no_of_ips */] <0.5f ? 
                     (data[0 /* vlan */] <17.5f ? 
                        0.0091743115f : 
                        0.0f) : 
                    0.0f))));
    return pred;
  } // constant pool size = 26B, number of visited nodes = 6, static init size = 0B
}

class log_drf_1_Tree_11_class_35 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* no_of_characters */] <88.5f ? 
         (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.125f ? 
             (data[0 /* vlan */] <19.5f ? 
                 (data[6 /* 5_letter_word */] <0.1015625f ? 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <84.5f ? 
                        0.10810811f : 
                        0.4f) : 
                    0.0f) : 
                0.0f) : 
            0.0f) : 
         (data[8 /* 7_letter_word */] <0.16992188f ? 
             (data[2 /* no_of_characters */] <135.5f ? 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <126.5f ? 
                     (data[1 /* type_of_time */] <4.5f ? 
                        0.0f : 
                        1.5168752E-4f) : 
                     (data[2 /* no_of_characters */] <127.5f ? 
                        0.020547945f : 
                        3.635042E-4f)) : 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.16394806f ? 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <260.5f ? 
                        7.994564E-5f : 
                        3.1816735E-4f) : 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.109375f ? 
                        0.0f : 
                        0.008064516f))) : 
            0.0f));
    return pred;
  } // constant pool size = 54B, number of visited nodes = 13, static init size = 0B
}

class log_drf_1_Tree_11_class_36 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* no_of_characters */] <131.5f ? 
         (data[1 /* type_of_time */] <4.5f ? 
            0.0f : 
             (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.15429688f ? 
                0.0f : 
                 (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.15625f ? 
                    0.0f : 
                     (data[3 /* no_of_ips */] <0.5f ? 
                        0.125f : 
                        0.0f)))) : 
        0.0f);
    return pred;
  } // constant pool size = 22B, number of visited nodes = 5, static init size = 0B
}

class log_drf_1_Tree_11_class_37 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* no_of_characters */] <164.5f ? 
         (data[1 /* type_of_time */] <4.5f ? 
             (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <1.5f ? 
                 (data[1 /* type_of_time */] <3.5f ? 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.828125f ? 
                        0.9746835f : 
                        0.5f) : 
                     (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                        1.0f : 
                        0.9990822f)) : 
                 (data[3 /* no_of_ips */] <2.5f ? 
                     (data[7 /* 6_letter_word */] <0.1015625f ? 
                        1.0f : 
                        0.0f) : 
                    0.0f)) : 
             (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                 (Double.isNaN(data[12]) || data[12 /* 11_letter_word */] <0.74609375f ? 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.0625f ? 
                        0.006278752f : 
                        1.2141816E-4f) : 
                    0.28f) : 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.44921875f ? 
                    0.0f : 
                     (data[6 /* 5_letter_word */] <0.3671875f ? 
                        0.0f : 
                        0.0016797313f)))) : 
         (data[8 /* 7_letter_word */] <0.29296875f ? 
             (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.16210938f ? 
                 (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.19140625f ? 
                     (data[1 /* type_of_time */] <4.5f ? 
                        0.90039575f : 
                        0.0f) : 
                     (data[0 /* vlan */] <17.5f ? 
                        0.9967949f : 
                        0.19354838f)) : 
                 (data[9 /* 8_letter_word */] <0.17520142f ? 
                     (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                        0.96863693f : 
                        0.0f) : 
                     (data[1 /* type_of_time */] <4.5f ? 
                        0.7866109f : 
                        0.0f))) : 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <195.5f ? 
                 (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.0859375f ? 
                     (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
                        0.99749434f : 
                        0.0f) : 
                    0.0f) : 
                 (data[0 /* vlan */] <154.5f ? 
                    0.0f : 
                     (data[1 /* type_of_time */] <3.5f ? 
                        0.0f : 
                        0.9930298f)))));
    return pred;
  } // constant pool size = 106B, number of visited nodes = 26, static init size = 0B
}

class log_drf_1_Tree_11_class_38 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* no_of_characters */] <93.5f ? 
        2.1266038E-4f : 
        0.0f);
    return pred;
  } // constant pool size = 6B, number of visited nodes = 1, static init size = 0B
}


class log_drf_1_Forest_12 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += log_drf_1_Tree_12_class_0.score0(fdata);
    preds[2] += log_drf_1_Tree_12_class_1.score0(fdata);
    preds[3] += log_drf_1_Tree_12_class_2.score0(fdata);
    preds[4] += log_drf_1_Tree_12_class_3.score0(fdata);
    preds[5] += log_drf_1_Tree_12_class_4.score0(fdata);
    preds[6] += log_drf_1_Tree_12_class_5.score0(fdata);
    preds[7] += log_drf_1_Tree_12_class_6.score0(fdata);
    preds[8] += log_drf_1_Tree_12_class_7.score0(fdata);
    preds[9] += log_drf_1_Tree_12_class_8.score0(fdata);
    preds[10] += log_drf_1_Tree_12_class_9.score0(fdata);
    preds[11] += log_drf_1_Tree_12_class_10.score0(fdata);
    preds[12] += log_drf_1_Tree_12_class_11.score0(fdata);
    preds[13] += log_drf_1_Tree_12_class_12.score0(fdata);
    preds[14] += log_drf_1_Tree_12_class_13.score0(fdata);
    preds[15] += log_drf_1_Tree_12_class_14.score0(fdata);
    preds[16] += log_drf_1_Tree_12_class_15.score0(fdata);
    preds[17] += log_drf_1_Tree_12_class_16.score0(fdata);
    preds[18] += log_drf_1_Tree_12_class_17.score0(fdata);
    preds[19] += log_drf_1_Tree_12_class_18.score0(fdata);
    preds[20] += log_drf_1_Tree_12_class_19.score0(fdata);
    preds[21] += log_drf_1_Tree_12_class_20.score0(fdata);
    preds[22] += log_drf_1_Tree_12_class_21.score0(fdata);
    preds[23] += log_drf_1_Tree_12_class_22.score0(fdata);
    preds[24] += log_drf_1_Tree_12_class_23.score0(fdata);
    preds[25] += log_drf_1_Tree_12_class_24.score0(fdata);
    preds[26] += log_drf_1_Tree_12_class_25.score0(fdata);
    preds[27] += log_drf_1_Tree_12_class_26.score0(fdata);
    preds[28] += log_drf_1_Tree_12_class_27.score0(fdata);
    preds[29] += log_drf_1_Tree_12_class_28.score0(fdata);
    preds[30] += log_drf_1_Tree_12_class_29.score0(fdata);
    preds[31] += log_drf_1_Tree_12_class_30.score0(fdata);
    preds[32] += log_drf_1_Tree_12_class_31.score0(fdata);
    preds[33] += log_drf_1_Tree_12_class_32.score0(fdata);
    preds[34] += log_drf_1_Tree_12_class_33.score0(fdata);
    preds[35] += log_drf_1_Tree_12_class_34.score0(fdata);
    preds[36] += log_drf_1_Tree_12_class_35.score0(fdata);
    preds[37] += log_drf_1_Tree_12_class_36.score0(fdata);
    preds[38] += log_drf_1_Tree_12_class_37.score0(fdata);
    preds[39] += log_drf_1_Tree_12_class_38.score0(fdata);
  }
}
class log_drf_1_Tree_12_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.18652344f ? 
        0.0f : 
         (Double.isNaN(data[14]) || data[14 /* 13_letter_word */] <0.0146484375f ? 
             (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.029296875f ? 
                 (data[8 /* 7_letter_word */] <0.2265625f ? 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <97.5f ? 
                        0.0f : 
                        9.84252E-4f) : 
                    0.0f) : 
                 (data[3 /* no_of_ips */] <0.5f ? 
                     (data[10 /* 9_letter_word */] <0.069132484f ? 
                        0.9f : 
                        0.0015673981f) : 
                    0.0f)) : 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <664.5f ? 
                0.0f : 
                 (data[4 /* no_of_macs */] <0.5f ? 
                    0.0f : 
                    1.0f))));
    return pred;
  } // constant pool size = 38B, number of visited nodes = 9, static init size = 0B
}

class log_drf_1_Tree_12_class_1 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
        0.0f : 
         (Double.isNaN(data[0]) || data[0 /* vlan */] <141.5f ? 
            0.0f : 
             (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.072265625f ? 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <245.5f ? 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <176.5f ? 
                        0.0f : 
                        0.033333335f) : 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.21875f ? 
                        0.9354839f : 
                        0.0f)) : 
                0.0f)));
    return pred;
  } // constant pool size = 26B, number of visited nodes = 6, static init size = 0B
}

class log_drf_1_Tree_12_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.49560547f ? 
         (Double.isNaN(data[0]) || data[0 /* vlan */] <181.5f ? 
             (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.6328125f ? 
                 (data[0 /* vlan */] <141.5f ? 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <137.0f ? 
                        0.0f : 
                        0.2631579f) : 
                    0.0f) : 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <113.5f ? 
                    0.0f : 
                     (data[1 /* type_of_time */] <4.5f ? 
                        0.0f : 
                        0.26708075f))) : 
             (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                0.0f : 
                 (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.03125f ? 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <410.5f ? 
                        0.9714286f : 
                        0.041666668f) : 
                    1.0f))) : 
         (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.38671875f ? 
             (data[1 /* type_of_time */] <4.5f ? 
                0.0f : 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <137.5f ? 
                    0.0f : 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.07421875f ? 
                        0.1627907f : 
                        0.9680851f))) : 
            0.44158554f));
    return pred;
  } // constant pool size = 58B, number of visited nodes = 14, static init size = 0B
}

class log_drf_1_Tree_12_class_3 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.3227539f ? 
         (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.24048948f ? 
             (data[2 /* no_of_characters */] <105.5f ? 
                 (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.1015625f ? 
                     (data[1 /* type_of_time */] <4.5f ? 
                        0.026402641f : 
                        0.0f) : 
                    0.0f) : 
                 (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.23828125f ? 
                    0.0f : 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <37.5f ? 
                        2.0222447E-4f : 
                        0.0f))) : 
             (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                0.0f : 
                 (data[3 /* no_of_ips */] <1.5f ? 
                     (data[10 /* 9_letter_word */] <0.125f ? 
                        0.0f : 
                        1.0f) : 
                    0.0f))) : 
         (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.15527344f ? 
             (data[1 /* type_of_time */] <4.5f ? 
                0.0f : 
                 (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.0625f ? 
                    0.0f : 
                     (data[3 /* no_of_ips */] <0.5f ? 
                        0.17859446f : 
                        0.9013194f))) : 
            0.0f));
    return pred;
  } // constant pool size = 58B, number of visited nodes = 14, static init size = 0B
}

class log_drf_1_Tree_12_class_4 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.3227539f ? 
         (data[0 /* vlan */] <27.5f ? 
             (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.4140625f ? 
                 (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <1.5f ? 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <24.5f ? 
                        0.0f : 
                        0.04225352f) : 
                    0.0f) : 
                 (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.072021484f ? 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <26.0f ? 
                        0.0f : 
                        0.01010101f) : 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.265625f ? 
                        0.0f : 
                        0.33333334f))) : 
            0.0f) : 
         (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.29101562f ? 
            0.0f : 
             (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.16796875f ? 
                0.0f : 
                1.0f)));
    return pred;
  } // constant pool size = 42B, number of visited nodes = 10, static init size = 0B
}

class log_drf_1_Tree_12_class_5 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.27929688f ? 
         (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.22460938f ? 
            0.0f : 
             (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.43554688f ? 
                 (data[6 /* 5_letter_word */] <0.052734375f ? 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <35.5f ? 
                        0.0f : 
                        3.9793077E-4f) : 
                    0.0f) : 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <59.5f ? 
                    0.0f : 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.12890625f ? 
                        0.0f : 
                        1.0f)))) : 
         (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.08984375f ? 
             (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.13541667f ? 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <33.5f ? 
                    0.0f : 
                     (data[0 /* vlan */] <104.0f ? 
                        0.0034330555f : 
                        0.0f)) : 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.1328125f ? 
                    0.0f : 
                     (data[2 /* no_of_characters */] <160.5f ? 
                        0.12328767f : 
                        0.0f))) : 
             (data[1 /* type_of_time */] <4.5f ? 
                0.0f : 
                 (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.08203125f ? 
                    0.0f : 
                     (data[9 /* 8_letter_word */] <0.11237589f ? 
                        0.25641027f : 
                        0.028571429f)))));
    return pred;
  } // constant pool size = 66B, number of visited nodes = 16, static init size = 0B
}

class log_drf_1_Tree_12_class_6 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.24804688f ? 
         (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.8330078f ? 
             (data[2 /* no_of_characters */] <40.5f ? 
                 (data[0 /* vlan */] <103.5f ? 
                    1.0f : 
                    0.0f) : 
                0.0f) : 
             (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                0.005816369f : 
                0.0f)) : 
         (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.16015625f ? 
             (data[1 /* type_of_time */] <4.5f ? 
                0.0f : 
                 (data[5 /* 4_letter_word */] <0.4419098f ? 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <65.5f ? 
                        0.0f : 
                        0.06306306f) : 
                     (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.1875f ? 
                        0.0f : 
                        0.01735358f))) : 
             (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.22460938f ? 
                 (data[2 /* no_of_characters */] <80.5f ? 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.25195312f ? 
                        1.0f : 
                        0.0f) : 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.15820312f ? 
                        0.014413317f : 
                        0.076258995f)) : 
                0.0f)));
    return pred;
  } // constant pool size = 58B, number of visited nodes = 14, static init size = 0B
}

class log_drf_1_Tree_12_class_7 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.94970703f ? 
        0.0f : 
         (Double.isNaN(data[0]) || data[0 /* vlan */] <184.5f ? 
            0.0f : 
            1.0f));
    return pred;
  } // constant pool size = 10B, number of visited nodes = 2, static init size = 0B
}

class log_drf_1_Tree_12_class_8 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <2.5f ? 
         (Double.isNaN(data[0]) || data[0 /* vlan */] <177.5f ? 
            0.0f : 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <886.0f ? 
                 (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.125f ? 
                        0.004938272f : 
                        0.0f) : 
                    0.0f) : 
                 (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.0625f ? 
                    1.0f : 
                    0.33333334f))) : 
         (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.18359375f ? 
             (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.15527344f ? 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <174.5f ? 
                    0.0f : 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <998.5f ? 
                        0.59585494f : 
                        0.05882353f)) : 
                0.0f) : 
            0.0f));
    return pred;
  } // constant pool size = 42B, number of visited nodes = 10, static init size = 0B
}

class log_drf_1_Tree_12_class_9 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <2.5f ? 
         (Double.isNaN(data[0]) || data[0 /* vlan */] <160.5f ? 
            0.0f : 
             (data[2 /* no_of_characters */] <120.5f ? 
                 (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.125f ? 
                     (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <1.5f ? 
                        0.0010245901f : 
                        1.0f) : 
                    0.95454544f) : 
                 (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.03125f ? 
                     (data[1 /* type_of_time */] <3.5f ? 
                        0.21428572f : 
                        0.0f) : 
                    0.0f))) : 
         (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.18359375f ? 
             (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.7480469f ? 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <94.0f ? 
                    0.0f : 
                     (Double.isNaN(data[1]) || data[1 /* type_of_time */] <3.5f ? 
                        0.6569343f : 
                        0.0f)) : 
                1.0f) : 
             (data[1 /* type_of_time */] <4.0f ? 
                1.0f : 
                0.0f)));
    return pred;
  } // constant pool size = 50B, number of visited nodes = 12, static init size = 0B
}

class log_drf_1_Tree_12_class_10 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
         (data[2 /* no_of_characters */] <113.5f ? 
             (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.083984375f ? 
                1.1613053E-4f : 
                0.0f) : 
            0.0f) : 
         (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.045898438f ? 
             (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.8730469f ? 
                0.0f : 
                 (data[4 /* no_of_macs */] <0.5f ? 
                     (data[3 /* no_of_ips */] <1.5f ? 
                        0.2857143f : 
                        0.0f) : 
                    0.0f)) : 
            0.0f));
    return pred;
  } // constant pool size = 30B, number of visited nodes = 7, static init size = 0B
}

class log_drf_1_Tree_12_class_11 {
  static final double score0(double[] data) {
    double pred =     5.0E-6f;
    return pred;
  } // constant pool size = 2B, number of visited nodes = 0, static init size = 0B
}

class log_drf_1_Tree_12_class_12 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
        0.0f : 
         (Double.isNaN(data[0]) || data[0 /* vlan */] <593.5f ? 
            0.0f : 
             (data[7 /* 6_letter_word */] <0.16796875f ? 
                0.0f : 
                0.9782609f)));
    return pred;
  } // constant pool size = 14B, number of visited nodes = 3, static init size = 0B
}

class log_drf_1_Tree_12_class_13 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.2553711f ? 
         (Double.isNaN(data[0]) || data[0 /* vlan */] <590.5f ? 
             (data[2 /* no_of_characters */] <58.0f ? 
                 (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.2890625f ? 
                     (data[6 /* 5_letter_word */] <0.125f ? 
                        0.75f : 
                        1.0f) : 
                    0.0f) : 
                0.0f) : 
             (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                0.88429755f : 
                0.0625f)) : 
         (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.19140625f ? 
             (data[1 /* type_of_time */] <4.5f ? 
                0.0f : 
                 (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.4765625f ? 
                     (data[2 /* no_of_characters */] <60.5f ? 
                        0.001968504f : 
                        0.0f) : 
                     (data[3 /* no_of_ips */] <0.5f ? 
                        0.0010718113f : 
                        0.0f))) : 
             (data[9 /* 8_letter_word */] <0.21089935f ? 
                 (data[0 /* vlan */] <17.5f ? 
                     (data[7 /* 6_letter_word */] <0.10078125f ? 
                        1.0f : 
                        0.0f) : 
                    0.0f) : 
                0.0f)));
    return pred;
  } // constant pool size = 58B, number of visited nodes = 14, static init size = 0B
}

class log_drf_1_Tree_12_class_14 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.1977539f ? 
        0.0f : 
         (data[0 /* vlan */] <27.5f ? 
             (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.19140625f ? 
                 (data[5 /* 4_letter_word */] <0.20715523f ? 
                     (data[1 /* type_of_time */] <3.5f ? 
                        1.0f : 
                        0.0f) : 
                    0.0f) : 
                 (data[10 /* 9_letter_word */] <0.224823f ? 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.1f ? 
                        0.015037594f : 
                        0.0f) : 
                    0.0f)) : 
            0.0f));
    return pred;
  } // constant pool size = 30B, number of visited nodes = 7, static init size = 0B
}

class log_drf_1_Tree_12_class_15 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.94970703f ? 
         (data[0 /* vlan */] <141.5f ? 
             (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.5859375f ? 
                 (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.30859375f ? 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.2109375f ? 
                        0.0022253455f : 
                        8.904719E-5f) : 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <135.5f ? 
                        0.0f : 
                        1.0f)) : 
                 (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <1.5f ? 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <113.5f ? 
                        0.0f : 
                        0.7114094f) : 
                     (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <2.5f ? 
                        0.43589744f : 
                        0.0f))) : 
            0.0f) : 
        0.05568546f);
    return pred;
  } // constant pool size = 38B, number of visited nodes = 9, static init size = 0B
}

class log_drf_1_Tree_12_class_16 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.94970703f ? 
         (data[0 /* vlan */] <83.5f ? 
             (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.15395641f ? 
                0.0f : 
                 (data[3 /* no_of_ips */] <0.5f ? 
                     (data[1 /* type_of_time */] <4.5f ? 
                        0.0f : 
                        0.0012367734f) : 
                    0.0f)) : 
            0.0f) : 
        6.0621806E-4f);
    return pred;
  } // constant pool size = 22B, number of visited nodes = 5, static init size = 0B
}

class log_drf_1_Tree_12_class_17 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <3.5f ? 
         (Double.isNaN(data[0]) || data[0 /* vlan */] <177.5f ? 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <1111.0f ? 
                 (Double.isNaN(data[14]) || data[14 /* 13_letter_word */] <0.05078125f ? 
                    0.0f : 
                     (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                        0.0f : 
                        0.16666667f)) : 
                 (data[5 /* 4_letter_word */] <0.2265625f ? 
                    0.5f : 
                    0.0f)) : 
             (data[3 /* no_of_ips */] <0.5f ? 
                 (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.1015625f ? 
                     (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
                        0.0f : 
                        0.30666667f) : 
                    0.0f) : 
                 (data[7 /* 6_letter_word */] <0.07421875f ? 
                     (data[5 /* 4_letter_word */] <0.125f ? 
                        0.30769232f : 
                        0.0f) : 
                    0.0f))) : 
         (data[7 /* 6_letter_word */] <0.072265625f ? 
             (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <4.5f ? 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.4140625f ? 
                     (data[0 /* vlan */] <178.5f ? 
                        0.0f : 
                        0.9918033f) : 
                     (data[4 /* no_of_macs */] <0.5f ? 
                        0.019607844f : 
                        0.0f)) : 
                0.0f) : 
             (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.31054688f ? 
                0.0f : 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <106.0f ? 
                    0.0f : 
                    1.0f))));
    return pred;
  } // constant pool size = 74B, number of visited nodes = 18, static init size = 0B
}

class log_drf_1_Tree_12_class_18 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.4580078f ? 
        0.0f : 
         (data[0 /* vlan */] <18.5f ? 
             (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.0390625f ? 
                0.0f : 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.13671875f ? 
                    0.0f : 
                    0.5f)) : 
            0.0f));
    return pred;
  } // constant pool size = 18B, number of visited nodes = 4, static init size = 0B
}

class log_drf_1_Tree_12_class_19 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
        0.0f : 
         (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.22460938f ? 
             (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.1829338f ? 
                0.0f : 
                 (data[3 /* no_of_ips */] <1.5f ? 
                     (data[7 /* 6_letter_word */] <0.296875f ? 
                        0.16666667f : 
                        0.0f) : 
                    0.0f)) : 
             (data[2 /* no_of_characters */] <140.5f ? 
                 (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <1.5f ? 
                     (data[11 /* 10_letter_word */] <0.125f ? 
                        0.0f : 
                        0.92406875f) : 
                    0.0f) : 
                 (data[6 /* 5_letter_word */] <0.064453125f ? 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.12890625f ? 
                        0.0f : 
                        0.014492754f) : 
                    0.0f))));
    return pred;
  } // constant pool size = 42B, number of visited nodes = 10, static init size = 0B
}

class log_drf_1_Tree_12_class_20 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
         (data[2 /* no_of_characters */] <135.5f ? 
             (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.44921875f ? 
                 (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.4609375f ? 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <33.5f ? 
                        0.86593026f : 
                        0.0f) : 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <131.5f ? 
                        0.93041235f : 
                        0.3f)) : 
                 (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.125f ? 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.25f ? 
                        0.94503665f : 
                        0.98870057f) : 
                    1.0f)) : 
             (data[2 /* no_of_characters */] <158.5f ? 
                 (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.18359375f ? 
                     (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.203125f ? 
                        0.22276913f : 
                        0.73714286f) : 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.3671875f ? 
                        0.88584137f : 
                        0.0024671052f)) : 
                 (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
                    0.0f : 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <33.5f ? 
                        0.59982514f : 
                        0.0f)))) : 
         (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.10546875f ? 
             (data[3 /* no_of_ips */] <1.5f ? 
                 (data[0 /* vlan */] <25.5f ? 
                     (data[7 /* 6_letter_word */] <0.046875f ? 
                        0.90263695f : 
                        0.0081411125f) : 
                    0.0f) : 
                 (data[0 /* vlan */] <25.5f ? 
                     (data[2 /* no_of_characters */] <330.5f ? 
                        0.9166667f : 
                        0.0f) : 
                    0.0f)) : 
             (data[6 /* 5_letter_word */] <0.056640625f ? 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.18359375f ? 
                     (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.065104164f ? 
                        0.8762963f : 
                        1.0f) : 
                    0.3617021f) : 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.1328125f ? 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.265625f ? 
                        0.0f : 
                        1.0f) : 
                     (data[10 /* 9_letter_word */] <0.15438843f ? 
                        1.0f : 
                        0.09090909f)))));
    return pred;
  } // constant pool size = 106B, number of visited nodes = 26, static init size = 0B
}

class log_drf_1_Tree_12_class_21 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.1484375f ? 
         (data[0 /* vlan */] <11.5f ? 
             (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.13392857f ? 
                0.0f : 
                0.45945945f) : 
             (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.15429688f ? 
                 (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.23828125f ? 
                     (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                        0.0019572838f : 
                        7.242703E-5f) : 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.203125f ? 
                        0.0014258556f : 
                        0.0086f)) : 
                 (data[11 /* 10_letter_word */] <0.26661682f ? 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <33.0f ? 
                        0.018008474f : 
                        0.25986078f) : 
                    0.0f))) : 
         (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.17675781f ? 
             (data[3 /* no_of_ips */] <0.5f ? 
                 (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.3203125f ? 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.9733887f ? 
                        0.0f : 
                        5.906675E-4f) : 
                     (data[0 /* vlan */] <17.5f ? 
                        0.0f : 
                        0.0018524756f)) : 
                 (data[6 /* 5_letter_word */] <0.17504883f ? 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.453125f ? 
                        0.0f : 
                        0.022222223f) : 
                     (data[6 /* 5_letter_word */] <0.31039238f ? 
                        3.950227E-4f : 
                        5.712327E-5f))) : 
            0.0f));
    return pred;
  } // constant pool size = 70B, number of visited nodes = 17, static init size = 0B
}

class log_drf_1_Tree_12_class_22 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.49560547f ? 
         (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.4765625f ? 
            0.0f : 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <325.5f ? 
                0.0f : 
                 (data[3 /* no_of_ips */] <2.5f ? 
                     (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                        0.0f : 
                        0.1f) : 
                    0.0f))) : 
        1.3007042E-4f);
    return pred;
  } // constant pool size = 22B, number of visited nodes = 5, static init size = 0B
}

class log_drf_1_Tree_12_class_23 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.13378906f ? 
         (data[0 /* vlan */] <17.5f ? 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <415.0f ? 
                 (data[9 /* 8_letter_word */] <0.1171875f ? 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.171875f ? 
                        0.0f : 
                        0.53333336f) : 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.515625f ? 
                        0.9942492f : 
                        0.0f)) : 
                0.0f) : 
            0.0f) : 
         (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.26757812f ? 
             (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.17447917f ? 
                0.0f : 
                 (Double.isNaN(data[13]) || data[13 /* 12_letter_word */] <0.046875f ? 
                    0.0f : 
                    1.0f)) : 
             (Double.isNaN(data[15]) || data[15 /* 14_letter_word */] <0.083984375f ? 
                 (data[9 /* 8_letter_word */] <0.2920761f ? 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.21875f ? 
                        0.6666667f : 
                        0.0f) : 
                     (data[5 /* 4_letter_word */] <0.26913452f ? 
                        0.033333335f : 
                        0.0f)) : 
                0.027027028f)));
    return pred;
  } // constant pool size = 54B, number of visited nodes = 13, static init size = 0B
}

class log_drf_1_Tree_12_class_24 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.9746094f ? 
        0.0f : 
         (data[0 /* vlan */] <12.5f ? 
            1.0f : 
            0.0f));
    return pred;
  } // constant pool size = 10B, number of visited nodes = 2, static init size = 0B
}

class log_drf_1_Tree_12_class_25 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <1.5f ? 
         (data[0 /* vlan */] <40.5f ? 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <155.5f ? 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <25.0f ? 
                    0.0f : 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <29.5f ? 
                        0.008547009f : 
                        0.96995234f)) : 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <29.0f ? 
                    0.0f : 
                     (data[0 /* vlan */] <29.5f ? 
                        0.0f : 
                        0.984127f))) : 
             (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.05078125f ? 
                0.0f : 
                 (data[11 /* 10_letter_word */] <0.05819702f ? 
                    1.0f : 
                    0.0f))) : 
         (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.13378906f ? 
             (data[1 /* type_of_time */] <4.5f ? 
                0.0f : 
                 (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.4609375f ? 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <180.5f ? 
                        0.8614103f : 
                        0.30165914f) : 
                     (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <3.5f ? 
                        1.0f : 
                        0.012820513f))) : 
             (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.46289062f ? 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <25.5f ? 
                    0.0f : 
                     (data[1 /* type_of_time */] <4.5f ? 
                        0.0f : 
                        0.9166667f)) : 
                 (data[0 /* vlan */] <21.5f ? 
                    0.0f : 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <649.5f ? 
                        0.9987474f : 
                        0.0f)))));
    return pred;
  } // constant pool size = 78B, number of visited nodes = 19, static init size = 0B
}

class log_drf_1_Tree_12_class_26 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.6513672f ? 
        0.0f : 
         (data[0 /* vlan */] <29.5f ? 
             (data[2 /* no_of_characters */] <63.0f ? 
                0.9977273f : 
                0.0f) : 
            0.0f));
    return pred;
  } // constant pool size = 14B, number of visited nodes = 3, static init size = 0B
}

class log_drf_1_Tree_12_class_27 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.49560547f ? 
        0.0f : 
         (data[0 /* vlan */] <18.5f ? 
             (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.125f ? 
                0.0f : 
                 (data[7 /* 6_letter_word */] <0.26123047f ? 
                    0.071428575f : 
                    0.0f)) : 
            0.0f));
    return pred;
  } // constant pool size = 18B, number of visited nodes = 4, static init size = 0B
}

class log_drf_1_Tree_12_class_28 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <5.5f ? 
         (data[0 /* vlan */] <17.5f ? 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <430.0f ? 
                0.0f : 
                 (data[3 /* no_of_ips */] <2.5f ? 
                    0.0f : 
                    1.0f)) : 
            0.0f) : 
         (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.4638672f ? 
            1.0f : 
             (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <6.5f ? 
                1.0f : 
                0.0f)));
    return pred;
  } // constant pool size = 26B, number of visited nodes = 6, static init size = 0B
}

class log_drf_1_Tree_12_class_29 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.51464844f ? 
         (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.22460938f ? 
            0.0f : 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <826.5f ? 
                0.0f : 
                 (data[3 /* no_of_ips */] <2.0f ? 
                    0.5f : 
                    0.0f))) : 
         (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.018554688f ? 
            0.0f : 
             (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.024088541f ? 
                 (data[9 /* 8_letter_word */] <0.116896056f ? 
                    0.5f : 
                    0.0f) : 
                 (data[0 /* vlan */] <85.5f ? 
                    0.0f : 
                    1.0f))));
    return pred;
  } // constant pool size = 34B, number of visited nodes = 8, static init size = 0B
}

class log_drf_1_Tree_12_class_30 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <2.5f ? 
         (Double.isNaN(data[0]) || data[0 /* vlan */] <177.5f ? 
            0.0f : 
             (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.22460938f ? 
                 (data[1 /* type_of_time */] <2.5f ? 
                    1.0f : 
                    0.0f) : 
                 (data[6 /* 5_letter_word */] <0.2912445f ? 
                     (data[2 /* no_of_characters */] <193.0f ? 
                        0.0f : 
                        1.0f) : 
                    0.0f))) : 
         (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.05078125f ? 
             (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.22460938f ? 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <174.5f ? 
                    0.0f : 
                     (data[6 /* 5_letter_word */] <0.3515625f ? 
                        0.32407406f : 
                        0.0f)) : 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <174.5f ? 
                    0.0f : 
                     (Double.isNaN(data[1]) || data[1 /* type_of_time */] <3.0f ? 
                        1.0f : 
                        0.0f))) : 
            0.0f));
    return pred;
  } // constant pool size = 50B, number of visited nodes = 12, static init size = 0B
}

class log_drf_1_Tree_12_class_31 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.12109375f ? 
         (data[0 /* vlan */] <109.5f ? 
             (data[2 /* no_of_characters */] <95.5f ? 
                 (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.125f ? 
                    0.06641431f : 
                    0.0f) : 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <84.5f ? 
                    0.0f : 
                     (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                        0.0f : 
                        1.0f))) : 
            0.0f) : 
         (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.3095703f ? 
             (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.5644531f ? 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <81.5f ? 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <37.0f ? 
                        6.905839E-5f : 
                        0.008196721f) : 
                     (Double.isNaN(data[13]) || data[13 /* 12_letter_word */] <0.203125f ? 
                        0.02057271f : 
                        0.3617021f)) : 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.07324219f ? 
                     (data[3 /* no_of_ips */] <0.5f ? 
                        0.24342105f : 
                        0.0f) : 
                    1.0f)) : 
             (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                 (data[0 /* vlan */] <109.5f ? 
                     (data[7 /* 6_letter_word */] <0.25195312f ? 
                        0.0f : 
                        0.9512195f) : 
                    0.0f) : 
                 (data[0 /* vlan */] <57.5f ? 
                    0.0f : 
                     (data[1 /* type_of_time */] <4.5f ? 
                        0.0f : 
                        1.0f)))));
    return pred;
  } // constant pool size = 74B, number of visited nodes = 18, static init size = 0B
}

class log_drf_1_Tree_12_class_32 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
         (data[2 /* no_of_characters */] <123.5f ? 
             (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.072265625f ? 
                 (data[1 /* type_of_time */] <4.5f ? 
                    0.0f : 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.4453125f ? 
                        0.0f : 
                        0.028928336f)) : 
                0.0f) : 
            0.0f) : 
         (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.59472656f ? 
             (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.46289062f ? 
                 (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.22265625f ? 
                    0.0f : 
                     (data[3 /* no_of_ips */] <1.5f ? 
                        0.058628317f : 
                        0.0f)) : 
                 (data[5 /* 4_letter_word */] <0.0859375f ? 
                     (data[1 /* type_of_time */] <4.5f ? 
                        0.0f : 
                        0.15282393f) : 
                    0.0f)) : 
             (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <1.5f ? 
                 (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.1015625f ? 
                    0.0f : 
                    1.0f) : 
                0.0f)));
    return pred;
  } // constant pool size = 54B, number of visited nodes = 13, static init size = 0B
}

class log_drf_1_Tree_12_class_33 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.40820312f ? 
         (data[0 /* vlan */] <7.5f ? 
             (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.125f ? 
                0.0f : 
                1.0f) : 
             (data[8 /* 7_letter_word */] <0.25976562f ? 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <40.0f ? 
                     (data[1 /* type_of_time */] <3.0f ? 
                        0.009345794f : 
                        6.108362E-5f) : 
                     (data[0 /* vlan */] <63.0f ? 
                        1.0f : 
                        0.0010327669f)) : 
                 (data[0 /* vlan */] <112.0f ? 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.234375f ? 
                        0.0f : 
                        2.5150905E-4f) : 
                    0.0f))) : 
         (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.4638672f ? 
             (data[1 /* type_of_time */] <4.5f ? 
                0.0f : 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <300.5f ? 
                     (data[0 /* vlan */] <17.5f ? 
                        0.45454547f : 
                        0.0015807037f) : 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.078125f ? 
                        0.0f : 
                        0.7804878f))) : 
            0.08973438f));
    return pred;
  } // constant pool size = 58B, number of visited nodes = 14, static init size = 0B
}

class log_drf_1_Tree_12_class_34 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.12158203f ? 
        0.0f : 
         (data[6 /* 5_letter_word */] <0.12758684f ? 
             (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.0625f ? 
                0.0f : 
                0.5f) : 
             (data[2 /* no_of_characters */] <120.5f ? 
                 (data[3 /* no_of_ips */] <0.5f ? 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.072916664f ? 
                        2.853067E-4f : 
                        0.0f) : 
                    0.0f) : 
                0.0f)));
    return pred;
  } // constant pool size = 26B, number of visited nodes = 6, static init size = 0B
}

class log_drf_1_Tree_12_class_35 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <2.5f ? 
         (data[0 /* vlan */] <17.5f ? 
             (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.29101562f ? 
                 (data[2 /* no_of_characters */] <110.5f ? 
                     (data[1 /* type_of_time */] <3.5f ? 
                        0.0f : 
                        0.027131783f) : 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.3671875f ? 
                        0.0012350761f : 
                        0.05263158f)) : 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.16796875f ? 
                    0.0f : 
                    0.33333334f)) : 
            0.0f) : 
        0.0f);
    return pred;
  } // constant pool size = 30B, number of visited nodes = 7, static init size = 0B
}

class log_drf_1_Tree_12_class_36 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.49560547f ? 
        0.0f : 
         (data[0 /* vlan */] <7.5f ? 
             (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.083984375f ? 
                0.0f : 
                1.0f) : 
            0.0f));
    return pred;
  } // constant pool size = 14B, number of visited nodes = 3, static init size = 0B
}

class log_drf_1_Tree_12_class_37 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
         (data[2 /* no_of_characters */] <158.5f ? 
             (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.072265625f ? 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.05078125f ? 
                     (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.0859375f ? 
                        0.25497276f : 
                        0.8191304f) : 
                     (data[1 /* type_of_time */] <4.5f ? 
                        1.0f : 
                        0.0014174344f)) : 
                 (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.5868683f ? 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <122.5f ? 
                        0.0010422094f : 
                        0.042198233f) : 
                     (data[1 /* type_of_time */] <3.5f ? 
                        0.8333333f : 
                        2.95858E-4f))) : 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <259.5f ? 
                 (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.0625f ? 
                     (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.0390625f ? 
                        0.9336228f : 
                        0.7541045f) : 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.3125f ? 
                        0.20798668f : 
                        0.9830508f)) : 
                 (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
                     (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.050223213f ? 
                        0.9931998f : 
                        1.0f) : 
                    0.0f))) : 
         (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.045898438f ? 
             (data[1 /* type_of_time */] <4.5f ? 
                 (data[1 /* type_of_time */] <3.5f ? 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.6640625f ? 
                        0.0f : 
                        1.0f) : 
                    0.99857247f) : 
                0.0f) : 
             (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.31640625f ? 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <154.5f ? 
                    0.0f : 
                     (Double.isNaN(data[13]) || data[13 /* 12_letter_word */] <0.03125f ? 
                        0.005550416f : 
                        0.0f)) : 
                 (data[1 /* type_of_time */] <4.5f ? 
                     (data[1 /* type_of_time */] <3.5f ? 
                        0.0f : 
                        1.0f) : 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.078125f ? 
                        3.9354584E-4f : 
                        0.0f)))));
    return pred;
  } // constant pool size = 102B, number of visited nodes = 25, static init size = 0B
}

class log_drf_1_Tree_12_class_38 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.94970703f ? 
         (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.44921875f ? 
            0.0f : 
             (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.41601562f ? 
                0.0f : 
                0.00155521f)) : 
        1.7320516E-4f);
    return pred;
  } // constant pool size = 14B, number of visited nodes = 3, static init size = 0B
}


class log_drf_1_Forest_13 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += log_drf_1_Tree_13_class_0.score0(fdata);
    preds[2] += log_drf_1_Tree_13_class_1.score0(fdata);
    preds[3] += log_drf_1_Tree_13_class_2.score0(fdata);
    preds[4] += log_drf_1_Tree_13_class_3.score0(fdata);
    preds[5] += log_drf_1_Tree_13_class_4.score0(fdata);
    preds[6] += log_drf_1_Tree_13_class_5.score0(fdata);
    preds[7] += log_drf_1_Tree_13_class_6.score0(fdata);
    preds[8] += log_drf_1_Tree_13_class_7.score0(fdata);
    preds[9] += log_drf_1_Tree_13_class_8.score0(fdata);
    preds[10] += log_drf_1_Tree_13_class_9.score0(fdata);
    preds[11] += log_drf_1_Tree_13_class_10.score0(fdata);
    preds[12] += log_drf_1_Tree_13_class_11.score0(fdata);
    preds[13] += log_drf_1_Tree_13_class_12.score0(fdata);
    preds[14] += log_drf_1_Tree_13_class_13.score0(fdata);
    preds[15] += log_drf_1_Tree_13_class_14.score0(fdata);
    preds[16] += log_drf_1_Tree_13_class_15.score0(fdata);
    preds[17] += log_drf_1_Tree_13_class_16.score0(fdata);
    preds[18] += log_drf_1_Tree_13_class_17.score0(fdata);
    preds[19] += log_drf_1_Tree_13_class_18.score0(fdata);
    preds[20] += log_drf_1_Tree_13_class_19.score0(fdata);
    preds[21] += log_drf_1_Tree_13_class_20.score0(fdata);
    preds[22] += log_drf_1_Tree_13_class_21.score0(fdata);
    preds[23] += log_drf_1_Tree_13_class_22.score0(fdata);
    preds[24] += log_drf_1_Tree_13_class_23.score0(fdata);
    preds[25] += log_drf_1_Tree_13_class_24.score0(fdata);
    preds[26] += log_drf_1_Tree_13_class_25.score0(fdata);
    preds[27] += log_drf_1_Tree_13_class_26.score0(fdata);
    preds[28] += log_drf_1_Tree_13_class_27.score0(fdata);
    preds[29] += log_drf_1_Tree_13_class_28.score0(fdata);
    preds[30] += log_drf_1_Tree_13_class_29.score0(fdata);
    preds[31] += log_drf_1_Tree_13_class_30.score0(fdata);
    preds[32] += log_drf_1_Tree_13_class_31.score0(fdata);
    preds[33] += log_drf_1_Tree_13_class_32.score0(fdata);
    preds[34] += log_drf_1_Tree_13_class_33.score0(fdata);
    preds[35] += log_drf_1_Tree_13_class_34.score0(fdata);
    preds[36] += log_drf_1_Tree_13_class_35.score0(fdata);
    preds[37] += log_drf_1_Tree_13_class_36.score0(fdata);
    preds[38] += log_drf_1_Tree_13_class_37.score0(fdata);
    preds[39] += log_drf_1_Tree_13_class_38.score0(fdata);
  }
}
class log_drf_1_Tree_13_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[12]) || data[12 /* 11_letter_word */] <0.017578125f ? 
         (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <1050.0f ? 
             (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.087890625f ? 
                 (Double.isNaN(data[4]) || data[4 /* no_of_macs */] <0.5f ? 
                    0.0f : 
                     (data[3 /* no_of_ips */] <0.5f ? 
                        1.0f : 
                        0.0f)) : 
                 (Double.isNaN(data[13]) || data[13 /* 12_letter_word */] <0.01171875f ? 
                     (data[0 /* vlan */] <129.5f ? 
                        5.1207026E-4f : 
                        0.0f) : 
                     (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.0625f ? 
                        0.0f : 
                        0.5f))) : 
             (data[14 /* 13_letter_word */] <0.04296875f ? 
                0.5f : 
                1.0f)) : 
         (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <523.5f ? 
            0.0f : 
             (data[7 /* 6_letter_word */] <0.140625f ? 
                0.0f : 
                1.0f)));
    return pred;
  } // constant pool size = 46B, number of visited nodes = 11, static init size = 0B
}

class log_drf_1_Tree_13_class_1 {
  static final double score0(double[] data) {
    double pred =      (data[1 /* type_of_time */] <4.5f ? 
         (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <277.5f ? 
            0.0f : 
             (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                0.0f : 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <154.5f ? 
                    1.0f : 
                    0.0f))) : 
         (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.018554688f ? 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <260.5f ? 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.234375f ? 
                    0.0f : 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <113.5f ? 
                        0.0f : 
                        0.33333334f)) : 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.30859375f ? 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.26760864f ? 
                        0.0f : 
                        0.41666666f) : 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <162.5f ? 
                        0.94244605f : 
                        0.0f))) : 
            0.0f));
    return pred;
  } // constant pool size = 46B, number of visited nodes = 11, static init size = 0B
}

class log_drf_1_Tree_13_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.47216797f ? 
         (data[2 /* no_of_characters */] <150.5f ? 
             (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.5644531f ? 
                 (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.4609375f ? 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.41412354f ? 
                        0.002189944f : 
                        1.0f) : 
                     (data[6 /* 5_letter_word */] <0.54937744f ? 
                        7.2223024E-4f : 
                        0.0f)) : 
                 (data[5 /* 4_letter_word */] <0.6342087f ? 
                     (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                        0.7126437f : 
                        0.0f) : 
                     (data[1 /* type_of_time */] <4.5f ? 
                        0.0f : 
                        0.020509383f))) : 
             (Double.isNaN(data[4]) || data[4 /* no_of_macs */] <3.5f ? 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <1088.5f ? 
                     (Double.isNaN(data[14]) || data[14 /* 13_letter_word */] <0.18489583f ? 
                        1.7286582E-4f : 
                        0.0013525699f) : 
                     (data[4 /* no_of_macs */] <1.5f ? 
                        0.5f : 
                        0.0f)) : 
                 (data[0 /* vlan */] <73.5f ? 
                    0.0f : 
                    0.5f))) : 
         (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <158.5f ? 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <175.5f ? 
                 (Double.isNaN(data[13]) || data[13 /* 12_letter_word */] <0.1015625f ? 
                     (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                        0.02461768f : 
                        0.0f) : 
                    0.0f) : 
                 (data[1 /* type_of_time */] <4.5f ? 
                    0.0f : 
                     (data[5 /* 4_letter_word */] <0.25f ? 
                        0.984375f : 
                        1.0f))) : 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <181.5f ? 
                0.0f : 
                 (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                    0.0f : 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <591.0f ? 
                        1.0f : 
                        0.0f)))));
    return pred;
  } // constant pool size = 94B, number of visited nodes = 23, static init size = 0B
}

class log_drf_1_Tree_13_class_3 {
  static final double score0(double[] data) {
    double pred =      (data[1 /* type_of_time */] <4.5f ? 
         (data[2 /* no_of_characters */] <105.5f ? 
             (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                0.0f : 
                 (data[7 /* 6_letter_word */] <0.16796875f ? 
                    0.9f : 
                    0.0f)) : 
            0.0f) : 
         (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.15527344f ? 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <140.5f ? 
                0.0f : 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.29296875f ? 
                     (data[5 /* 4_letter_word */] <0.0625f ? 
                        0.0f : 
                        0.5094832f) : 
                    0.0f)) : 
             (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.4720459f ? 
                0.0f : 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.22265625f ? 
                    0.0f : 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <140.5f ? 
                        0.0f : 
                        0.004347826f)))));
    return pred;
  } // constant pool size = 46B, number of visited nodes = 11, static init size = 0B
}

class log_drf_1_Tree_13_class_4 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.3095703f ? 
         (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.87402344f ? 
             (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.27929688f ? 
                0.0f : 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.2421875f ? 
                    0.0f : 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.48199463f ? 
                        2.480159E-4f : 
                        0.0018365473f))) : 
            8.378718E-4f) : 
         (data[10 /* 9_letter_word */] <0.36688137f ? 
             (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.25f ? 
                0.0f : 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <33.5f ? 
                     (data[8 /* 7_letter_word */] <0.171875f ? 
                        0.0f : 
                        1.0f) : 
                    0.0f)) : 
            0.0f));
    return pred;
  } // constant pool size = 38B, number of visited nodes = 9, static init size = 0B
}

class log_drf_1_Tree_13_class_5 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.095703125f ? 
         (data[2 /* no_of_characters */] <140.5f ? 
            0.0f : 
             (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.5917969f ? 
                 (data[0 /* vlan */] <109.5f ? 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <62.0f ? 
                        2.955665E-4f : 
                        0.0882353f) : 
                    0.0f) : 
                 (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.22265625f ? 
                     (data[0 /* vlan */] <113.5f ? 
                        0.0025673942f : 
                        0.0f) : 
                    0.0f))) : 
         (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.07519531f ? 
             (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.35546875f ? 
                 (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.030548096f ? 
                     (data[2 /* no_of_characters */] <105.5f ? 
                        0.010398613f : 
                        1.1044842E-4f) : 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.234375f ? 
                        0.0f : 
                        3.5460992E-4f)) : 
                 (data[3 /* no_of_ips */] <0.5f ? 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.046875f ? 
                        0.0f : 
                        0.03409091f) : 
                    0.0f)) : 
             (data[10 /* 9_letter_word */] <0.08017349f ? 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <52.0f ? 
                    0.0f : 
                    1.0f) : 
                 (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.015625f ? 
                     (data[8 /* 7_letter_word */] <0.046875f ? 
                        0.0071748877f : 
                        0.0f) : 
                    0.0f))));
    return pred;
  } // constant pool size = 74B, number of visited nodes = 18, static init size = 0B
}

class log_drf_1_Tree_13_class_6 {
  static final double score0(double[] data) {
    double pred =      (data[1 /* type_of_time */] <4.5f ? 
        0.0f : 
         (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.3486328f ? 
             (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.15456963f ? 
                 (data[2 /* no_of_characters */] <80.5f ? 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.828125f ? 
                        0.034855768f : 
                        0.18367347f) : 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.234375f ? 
                        2.4560973E-4f : 
                        0.008970909f)) : 
                 (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.265625f ? 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.171875f ? 
                        0.028740263f : 
                        0.0f) : 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.4140625f ? 
                        0.021868788f : 
                        0.79310346f))) : 
             (data[0 /* vlan */] <19.5f ? 
                 (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.0625f ? 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <14.5f ? 
                        0.0f : 
                        1.0f) : 
                    0.0f) : 
                0.0f)));
    return pred;
  } // constant pool size = 50B, number of visited nodes = 12, static init size = 0B
}

class log_drf_1_Tree_13_class_7 {
  static final double score0(double[] data) {
    double pred =      (data[1 /* type_of_time */] <4.5f ? 
        0.0f : 
         (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.018554688f ? 
             (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.02734375f ? 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <150.5f ? 
                    0.0f : 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <178.5f ? 
                        0.0f : 
                        0.27827647f)) : 
                0.0f) : 
            0.0f));
    return pred;
  } // constant pool size = 22B, number of visited nodes = 5, static init size = 0B
}

class log_drf_1_Tree_13_class_8 {
  static final double score0(double[] data) {
    double pred =      (data[1 /* type_of_time */] <4.5f ? 
        0.0f : 
         (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.17480469f ? 
             (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.042676926f ? 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <883.5f ? 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.046875f ? 
                        1.535155E-4f : 
                        0.0f) : 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.25f ? 
                        0.56439394f : 
                        0.0f)) : 
                 (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.84765625f ? 
                     (data[8 /* 7_letter_word */] <0.03125f ? 
                        0.08695652f : 
                        0.0f) : 
                    1.0f)) : 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <173.5f ? 
                0.0f : 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.2890625f ? 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <587.0f ? 
                        0.004037685f : 
                        0.0f) : 
                    0.5f))));
    return pred;
  } // constant pool size = 46B, number of visited nodes = 11, static init size = 0B
}

class log_drf_1_Tree_13_class_9 {
  static final double score0(double[] data) {
    double pred =      (data[1 /* type_of_time */] <3.5f ? 
         (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <202.0f ? 
             (data[9 /* 8_letter_word */] <0.1015625f ? 
                 (data[1 /* type_of_time */] <2.5f ? 
                    0.0f : 
                    1.0f) : 
                 (data[2 /* no_of_characters */] <106.5f ? 
                    0.0f : 
                     (data[3 /* no_of_ips */] <1.0f ? 
                        0.0f : 
                        1.0f))) : 
             (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <4.0f ? 
                 (Double.isNaN(data[1]) || data[1 /* type_of_time */] <2.5f ? 
                    0.0f : 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.4453125f ? 
                        0.0f : 
                        0.42857143f)) : 
                1.0f)) : 
        0.0f);
    return pred;
  } // constant pool size = 38B, number of visited nodes = 9, static init size = 0B
}

class log_drf_1_Tree_13_class_10 {
  static final double score0(double[] data) {
    double pred =      (data[1 /* type_of_time */] <4.5f ? 
        0.0f : 
         (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.0068359375f ? 
            9.004953E-5f : 
            0.0f));
    return pred;
  } // constant pool size = 10B, number of visited nodes = 2, static init size = 0B
}

class log_drf_1_Tree_13_class_11 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.27929688f ? 
        0.0f : 
        3.5023815E-5f);
    return pred;
  } // constant pool size = 6B, number of visited nodes = 1, static init size = 0B
}

class log_drf_1_Tree_13_class_12 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.92822266f ? 
         (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <529.5f ? 
             (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.58203125f ? 
                0.0f : 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.16679001f ? 
                    0.0f : 
                    0.875f)) : 
             (data[5 /* 4_letter_word */] <0.03125f ? 
                 (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.0859375f ? 
                    0.048780486f : 
                    0.0f) : 
                0.0f)) : 
         (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <369.0f ? 
            0.0f : 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <514.0f ? 
                1.0f : 
                0.8f)));
    return pred;
  } // constant pool size = 34B, number of visited nodes = 8, static init size = 0B
}

class log_drf_1_Tree_13_class_13 {
  static final double score0(double[] data) {
    double pred =      (data[1 /* type_of_time */] <4.5f ? 
        0.0f : 
         (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.018554688f ? 
             (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.02734375f ? 
                 (data[2 /* no_of_characters */] <40.5f ? 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <36.5f ? 
                        0.9711191f : 
                        0.0f) : 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.1796875f ? 
                        3.5558085E-5f : 
                        0.009466796f)) : 
                0.0f) : 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <590.5f ? 
                0.0f : 
                 (data[7 /* 6_letter_word */] <0.66646194f ? 
                    0.0f : 
                     (data[2 /* no_of_characters */] <459.5f ? 
                        0.11111111f : 
                        0.0f)))));
    return pred;
  } // constant pool size = 38B, number of visited nodes = 9, static init size = 0B
}

class log_drf_1_Tree_13_class_14 {
  static final double score0(double[] data) {
    double pred =      (data[1 /* type_of_time */] <2.5f ? 
         (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <220.5f ? 
             (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.1015625f ? 
                 (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.18359375f ? 
                    0.0f : 
                     (data[6 /* 5_letter_word */] <0.21548462f ? 
                        1.0f : 
                        0.0f)) : 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.43359375f ? 
                    0.9230769f : 
                    0.0f)) : 
            0.0f) : 
        0.0f);
    return pred;
  } // constant pool size = 26B, number of visited nodes = 6, static init size = 0B
}

class log_drf_1_Tree_13_class_15 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.5942383f ? 
         (data[2 /* no_of_characters */] <100.5f ? 
             (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.8984375f ? 
                0.0f : 
                0.095343135f) : 
             (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.43554688f ? 
                 (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.42193604f ? 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.3156891f ? 
                        7.894812E-4f : 
                        0.0082011605f) : 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <89.5f ? 
                        0.0f : 
                        0.24390244f)) : 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <289.5f ? 
                    0.0f : 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.04296875f ? 
                        0.0073099416f : 
                        0.0f)))) : 
         (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <210.5f ? 
             (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                 (data[7 /* 6_letter_word */] <0.87478447f ? 
                    0.0f : 
                    0.008026755f) : 
                0.0f) : 
             (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.6901312f ? 
                 (data[1 /* type_of_time */] <4.5f ? 
                    0.0f : 
                     (data[0 /* vlan */] <81.5f ? 
                        0.0f : 
                        1.0f)) : 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <89.5f ? 
                    0.0f : 
                     (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <1.5f ? 
                        0.03448276f : 
                        1.0f)))));
    return pred;
  } // constant pool size = 70B, number of visited nodes = 17, static init size = 0B
}

class log_drf_1_Tree_13_class_16 {
  static final double score0(double[] data) {
    double pred =      (data[1 /* type_of_time */] <4.5f ? 
        0.0f : 
         (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.018554688f ? 
             (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.02734375f ? 
                 (data[2 /* no_of_characters */] <80.5f ? 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <79.5f ? 
                        0.0f : 
                        0.6f) : 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.4609375f ? 
                        1.0249752E-4f : 
                        0.0010446592f)) : 
                0.0f) : 
            0.0f));
    return pred;
  } // constant pool size = 26B, number of visited nodes = 6, static init size = 0B
}

class log_drf_1_Tree_13_class_17 {
  static final double score0(double[] data) {
    double pred =      (data[1 /* type_of_time */] <4.5f ? 
         (data[2 /* no_of_characters */] <95.5f ? 
             (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.16796875f ? 
                 (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.5f ? 
                    0.0f : 
                    0.5f) : 
                0.0f) : 
            0.0f) : 
         (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.018554688f ? 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <659.5f ? 
                0.0f : 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.25f ? 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.515625f ? 
                        0.8263889f : 
                        0.03968254f) : 
                    0.95652175f)) : 
             (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.32226562f ? 
                 (Double.isNaN(data[14]) || data[14 /* 13_letter_word */] <0.05078125f ? 
                    0.0f : 
                     (data[7 /* 6_letter_word */] <0.31415442f ? 
                        0.33333334f : 
                        0.0f)) : 
                 (data[6 /* 5_letter_word */] <0.34923857f ? 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <968.5f ? 
                        0.0f : 
                        1.0f) : 
                     (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.0390625f ? 
                        0.0013797862f : 
                        0.0f)))));
    return pred;
  } // constant pool size = 58B, number of visited nodes = 14, static init size = 0B
}

class log_drf_1_Tree_13_class_18 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.07470703f ? 
        0.0f : 
         (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <328.0f ? 
            0.0f : 
             (data[2 /* no_of_characters */] <335.0f ? 
                 (data[0 /* vlan */] <94.0f ? 
                    0.5f : 
                    0.0f) : 
                0.0f)));
    return pred;
  } // constant pool size = 18B, number of visited nodes = 4, static init size = 0B
}

class log_drf_1_Tree_13_class_19 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.24365234f ? 
         (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.18359375f ? 
            0.0f : 
             (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.1015625f ? 
                0.0f : 
                 (data[0 /* vlan */] <17.5f ? 
                    1.0f : 
                    0.0f))) : 
         (data[2 /* no_of_characters */] <138.5f ? 
             (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.234375f ? 
                0.0f : 
                 (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                    0.0f : 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.29092407f ? 
                        0.85122895f : 
                        0.0f))) : 
             (data[7 /* 6_letter_word */] <0.26137924f ? 
                 (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.2421875f ? 
                    0.0f : 
                     (Double.isNaN(data[12]) || data[12 /* 11_letter_word */] <0.015625f ? 
                        8.097166E-4f : 
                        0.0f)) : 
                0.0f)));
    return pred;
  } // constant pool size = 46B, number of visited nodes = 11, static init size = 0B
}

class log_drf_1_Tree_13_class_20 {
  static final double score0(double[] data) {
    double pred =      (data[1 /* type_of_time */] <4.5f ? 
        0.0f : 
         (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.38183594f ? 
             (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.41601562f ? 
                 (data[2 /* no_of_characters */] <130.5f ? 
                     (Double.isNaN(data[4]) || data[4 /* no_of_macs */] <0.5f ? 
                        0.6241874f : 
                        0.0f) : 
                     (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.23697917f ? 
                        0.22946803f : 
                        0.59830266f)) : 
                 (data[6 /* 5_letter_word */] <0.125f ? 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.390625f ? 
                        1.0f : 
                        0.85714287f) : 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.125f ? 
                        0.066706374f : 
                        0.0f))) : 
             (data[0 /* vlan */] <19.5f ? 
                0.0f : 
                 (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.2890625f ? 
                     (data[2 /* no_of_characters */] <140.5f ? 
                        0.518f : 
                        0.076541275f) : 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <35.5f ? 
                        0.9948454f : 
                        0.0f)))));
    return pred;
  } // constant pool size = 54B, number of visited nodes = 13, static init size = 0B
}

class log_drf_1_Tree_13_class_21 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[12]) || data[12 /* 11_letter_word */] <0.22460938f ? 
         (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <215.5f ? 
             (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.31640625f ? 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <161.5f ? 
                     (data[3 /* no_of_ips */] <0.5f ? 
                        4.3685292E-4f : 
                        0.0f) : 
                     (Double.isNaN(data[13]) || data[13 /* 12_letter_word */] <0.171875f ? 
                        0.0015529932f : 
                        0.020689655f)) : 
                 (data[0 /* vlan */] <17.5f ? 
                     (Double.isNaN(data[13]) || data[13 /* 12_letter_word */] <0.125f ? 
                        0.013564078f : 
                        0.0f) : 
                    0.0f)) : 
             (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.10546875f ? 
                 (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.17578125f ? 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.14282227f ? 
                        0.0045867264f : 
                        0.03417266f) : 
                     (data[2 /* no_of_characters */] <312.5f ? 
                        0.0020491802f : 
                        0.0f)) : 
                 (data[5 /* 4_letter_word */] <0.53515625f ? 
                     (data[6 /* 5_letter_word */] <0.1328125f ? 
                        0.17610063f : 
                        0.0f) : 
                    0.0f))) : 
         (data[1 /* type_of_time */] <3.5f ? 
            1.0f : 
            0.0f));
    return pred;
  } // constant pool size = 62B, number of visited nodes = 15, static init size = 0B
}

class log_drf_1_Tree_13_class_22 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.16015625f ? 
         (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <227.5f ? 
            0.0f : 
             (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.64453125f ? 
                0.0f : 
                 (data[2 /* no_of_characters */] <235.5f ? 
                     (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <1.5f ? 
                        0.033898305f : 
                        0.0f) : 
                    0.0f))) : 
         (data[10 /* 9_letter_word */] <0.17409897f ? 
             (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.083984375f ? 
                0.0f : 
                 (data[8 /* 7_letter_word */] <0.0859375f ? 
                    0.0f : 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.0859375f ? 
                        0.21428572f : 
                        0.0f))) : 
            0.0f));
    return pred;
  } // constant pool size = 38B, number of visited nodes = 9, static init size = 0B
}

class log_drf_1_Tree_13_class_23 {
  static final double score0(double[] data) {
    double pred =      (data[1 /* type_of_time */] <4.5f ? 
        0.0f : 
         (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.42285156f ? 
             (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.09580231f ? 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <130.5f ? 
                    0.0f : 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.3125f ? 
                        0.066518985f : 
                        0.20549004f)) : 
                 (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.4609375f ? 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.265625f ? 
                        1.6791202E-4f : 
                        0.014430014f) : 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.31770834f ? 
                        0.0f : 
                        0.11111111f))) : 
             (data[0 /* vlan */] <19.5f ? 
                 (data[8 /* 7_letter_word */] <0.14453125f ? 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.63477325f ? 
                        0.0f : 
                        0.6060606f) : 
                    1.0f) : 
                0.0f)));
    return pred;
  } // constant pool size = 46B, number of visited nodes = 11, static init size = 0B
}

class log_drf_1_Tree_13_class_24 {
  static final double score0(double[] data) {
    double pred =      (data[1 /* type_of_time */] <4.5f ? 
        0.0f : 
         (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.018554688f ? 
            4.7222158E-5f : 
            0.0f));
    return pred;
  } // constant pool size = 10B, number of visited nodes = 2, static init size = 0B
}

class log_drf_1_Tree_13_class_25 {
  static final double score0(double[] data) {
    double pred =      (data[1 /* type_of_time */] <4.5f ? 
        0.0f : 
         (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.44921875f ? 
             (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.41601562f ? 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <250.5f ? 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.4453125f ? 
                        0.4069374f : 
                        0.04456594f) : 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.4609375f ? 
                        0.03175874f : 
                        0.2897474f)) : 
                 (data[6 /* 5_letter_word */] <0.125f ? 
                    0.0f : 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.125f ? 
                        0.93329364f : 
                        1.0f))) : 
             (data[0 /* vlan */] <29.5f ? 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <95.5f ? 
                    0.0f : 
                     (data[5 /* 4_letter_word */] <0.16796875f ? 
                        0.028571429f : 
                        0.0f)) : 
                 (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.25f ? 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <58.5f ? 
                        1.0f : 
                        0.0f) : 
                    1.0f))));
    return pred;
  } // constant pool size = 54B, number of visited nodes = 13, static init size = 0B
}

class log_drf_1_Tree_13_class_26 {
  static final double score0(double[] data) {
    double pred =      (data[1 /* type_of_time */] <4.5f ? 
        0.0f : 
         (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.018554688f ? 
             (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.02734375f ? 
                 (data[2 /* no_of_characters */] <60.5f ? 
                     (data[2 /* no_of_characters */] <54.0f ? 
                        0.0f : 
                        0.8983402f) : 
                    0.0f) : 
                0.0f) : 
            0.0f));
    return pred;
  } // constant pool size = 22B, number of visited nodes = 5, static init size = 0B
}

class log_drf_1_Tree_13_class_27 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.24365234f ? 
        0.0f : 
         (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <255.5f ? 
            0.0f : 
             (data[2 /* no_of_characters */] <259.5f ? 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <17.5f ? 
                    0.007575758f : 
                    0.0f) : 
                0.0f)));
    return pred;
  } // constant pool size = 18B, number of visited nodes = 4, static init size = 0B
}

class log_drf_1_Tree_13_class_28 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.39453125f ? 
         (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <446.0f ? 
            0.0f : 
             (data[3 /* no_of_ips */] <5.5f ? 
                 (data[0 /* vlan */] <17.5f ? 
                    0.962963f : 
                    0.0f) : 
                1.0f)) : 
         (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <492.0f ? 
             (Double.isNaN(data[14]) || data[14 /* 13_letter_word */] <0.1015625f ? 
                0.0f : 
                 (Double.isNaN(data[14]) || data[14 /* 13_letter_word */] <0.22451782f ? 
                    0.25f : 
                    0.0f)) : 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <97.5f ? 
                1.0f : 
                0.0f)));
    return pred;
  } // constant pool size = 34B, number of visited nodes = 8, static init size = 0B
}

class log_drf_1_Tree_13_class_29 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[12]) || data[12 /* 11_letter_word */] <0.0087890625f ? 
         (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <185.5f ? 
            0.0f : 
             (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.7734375f ? 
                0.0f : 
                 (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.1015625f ? 
                    0.0f : 
                    0.5f))) : 
         (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <956.5f ? 
            0.0f : 
             (Double.isNaN(data[4]) || data[4 /* no_of_macs */] <1.0f ? 
                1.0f : 
                0.0f)));
    return pred;
  } // constant pool size = 26B, number of visited nodes = 6, static init size = 0B
}

class log_drf_1_Tree_13_class_30 {
  static final double score0(double[] data) {
    double pred =      (data[1 /* type_of_time */] <1.5f ? 
        1.0f : 
        0.0f);
    return pred;
  } // constant pool size = 6B, number of visited nodes = 1, static init size = 0B
}

class log_drf_1_Tree_13_class_31 {
  static final double score0(double[] data) {
    double pred =      (data[1 /* type_of_time */] <4.5f ? 
        0.0f : 
         (Double.isNaN(data[13]) || data[13 /* 12_letter_word */] <0.23535156f ? 
             (Double.isNaN(data[15]) || data[15 /* 14_letter_word */] <0.22460938f ? 
                 (data[2 /* no_of_characters */] <130.5f ? 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.3671875f ? 
                        0.015877148f : 
                        0.12640195f) : 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.234375f ? 
                        0.003173115f : 
                        2.0247014E-4f)) : 
                 (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.125f ? 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <120.5f ? 
                        0.9714286f : 
                        0.0f) : 
                    0.0f)) : 
             (data[0 /* vlan */] <59.5f ? 
                0.0f : 
                1.0f)));
    return pred;
  } // constant pool size = 38B, number of visited nodes = 9, static init size = 0B
}

class log_drf_1_Tree_13_class_32 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.5942383f ? 
         (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.23535156f ? 
             (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.49414062f ? 
                 (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.44921875f ? 
                     (data[2 /* no_of_characters */] <98.5f ? 
                        4.0273863E-4f : 
                        0.0f) : 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <57.5f ? 
                        0.009294567f : 
                        0.0f)) : 
                 (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.04296875f ? 
                     (Double.isNaN(data[4]) || data[4 /* no_of_macs */] <0.5f ? 
                        0.0016301463f : 
                        0.0f) : 
                    0.0f)) : 
             (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.18554688f ? 
                0.0f : 
                 (data[0 /* vlan */] <25.5f ? 
                    0.0f : 
                     (data[0 /* vlan */] <58.0f ? 
                        0.6883117f : 
                        0.0f)))) : 
         (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.10058594f ? 
            0.0f : 
             (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.26650938f ? 
                1.0f : 
                0.0f)));
    return pred;
  } // constant pool size = 54B, number of visited nodes = 13, static init size = 0B
}

class log_drf_1_Tree_13_class_33 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.47216797f ? 
         (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <280.5f ? 
             (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.70703125f ? 
                 (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.31640625f ? 
                     (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
                        0.0f : 
                        2.8087915E-4f) : 
                     (data[2 /* no_of_characters */] <57.5f ? 
                        0.125f : 
                        4.9435295E-4f)) : 
                 (data[5 /* 4_letter_word */] <0.7745514f ? 
                     (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
                        0.0f : 
                        0.09774436f) : 
                    0.004450007f)) : 
             (Double.isNaN(data[4]) || data[4 /* no_of_macs */] <1.5f ? 
                 (data[2 /* no_of_characters */] <379.5f ? 
                     (data[8 /* 7_letter_word */] <0.2578125f ? 
                        0.09041591f : 
                        0.0035149385f) : 
                    0.0f) : 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <61.5f ? 
                     (data[7 /* 6_letter_word */] <0.04795456f ? 
                        0.0f : 
                        1.0f) : 
                    0.0f))) : 
         (data[2 /* no_of_characters */] <70.5f ? 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <11.5f ? 
                1.0f : 
                0.0f) : 
             (data[0 /* vlan */] <9.5f ? 
                1.0f : 
                 (Double.isNaN(data[13]) || data[13 /* 12_letter_word */] <0.03125f ? 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.4140625f ? 
                        1.2992075E-4f : 
                        0.007800312f) : 
                    0.0f))));
    return pred;
  } // constant pool size = 74B, number of visited nodes = 18, static init size = 0B
}

class log_drf_1_Tree_13_class_34 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.123535156f ? 
        0.0f : 
         (data[2 /* no_of_characters */] <118.5f ? 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <115.5f ? 
                0.0f : 
                0.16666667f) : 
            0.0f));
    return pred;
  } // constant pool size = 14B, number of visited nodes = 3, static init size = 0B
}

class log_drf_1_Tree_13_class_35 {
  static final double score0(double[] data) {
    double pred =      (data[1 /* type_of_time */] <4.5f ? 
        0.0f : 
         (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.018554688f ? 
             (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.41601562f ? 
                 (data[0 /* vlan */] <17.5f ? 
                     (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.2265625f ? 
                        0.005588994f : 
                        1.0f) : 
                    0.0f) : 
                0.0f) : 
             (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.5371094f ? 
                0.0f : 
                 (data[5 /* 4_letter_word */] <0.55124664f ? 
                    0.5f : 
                    0.0f))));
    return pred;
  } // constant pool size = 30B, number of visited nodes = 7, static init size = 0B
}

class log_drf_1_Tree_13_class_36 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.16015625f ? 
        0.0f : 
         (data[2 /* no_of_characters */] <133.5f ? 
             (data[10 /* 9_letter_word */] <0.18312073f ? 
                0.71428573f : 
                0.0f) : 
            0.0f));
    return pred;
  } // constant pool size = 14B, number of visited nodes = 3, static init size = 0B
}

class log_drf_1_Tree_13_class_37 {
  static final double score0(double[] data) {
    double pred =      (data[1 /* type_of_time */] <4.5f ? 
         (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.18359375f ? 
             (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <2.5f ? 
                 (Double.isNaN(data[12]) || data[12 /* 11_letter_word */] <0.18359375f ? 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <267.5f ? 
                        0.9968346f : 
                        0.9788868f) : 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.125f ? 
                        0.6756757f : 
                        1.0f)) : 
                0.0f) : 
             (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.1015625f ? 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <174.5f ? 
                     (data[3 /* no_of_ips */] <1.5f ? 
                        1.0f : 
                        0.0f) : 
                    1.0f) : 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.1015625f ? 
                     (data[5 /* 4_letter_word */] <0.2914022f ? 
                        0.994012f : 
                        1.0f) : 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <230.0f ? 
                        0.0f : 
                        1.0f)))) : 
         (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.018554688f ? 
             (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.8984375f ? 
                 (Double.isNaN(data[12]) || data[12 /* 11_letter_word */] <0.74609375f ? 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <154.5f ? 
                        0.0f : 
                        0.08283313f) : 
                    0.17391305f) : 
                 (data[2 /* no_of_characters */] <90.5f ? 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <98.0f ? 
                        0.0f : 
                        0.72f) : 
                    0.0f)) : 
             (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.92715836f ? 
                 (Double.isNaN(data[14]) || data[14 /* 13_letter_word */] <0.0078125f ? 
                     (data[5 /* 4_letter_word */] <0.03125f ? 
                        6.716819E-4f : 
                        0.0f) : 
                    0.0f) : 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <154.5f ? 
                    0.0f : 
                     (data[0 /* vlan */] <168.5f ? 
                        1.0f : 
                        0.0f)))));
    return pred;
  } // constant pool size = 94B, number of visited nodes = 23, static init size = 0B
}

class log_drf_1_Tree_13_class_38 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.47216797f ? 
         (data[2 /* no_of_characters */] <90.5f ? 
             (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                0.0f : 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <57.5f ? 
                    0.0f : 
                    0.074074075f)) : 
            0.0f) : 
         (data[2 /* no_of_characters */] <93.5f ? 
             (data[5 /* 4_letter_word */] <0.125f ? 
                 (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.25f ? 
                    0.0f : 
                    0.16666667f) : 
                0.0f) : 
            0.0f));
    return pred;
  } // constant pool size = 30B, number of visited nodes = 7, static init size = 0B
}


class log_drf_1_Forest_14 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += log_drf_1_Tree_14_class_0.score0(fdata);
    preds[2] += log_drf_1_Tree_14_class_1.score0(fdata);
    preds[3] += log_drf_1_Tree_14_class_2.score0(fdata);
    preds[4] += log_drf_1_Tree_14_class_3.score0(fdata);
    preds[5] += log_drf_1_Tree_14_class_4.score0(fdata);
    preds[6] += log_drf_1_Tree_14_class_5.score0(fdata);
    preds[7] += log_drf_1_Tree_14_class_6.score0(fdata);
    preds[8] += log_drf_1_Tree_14_class_7.score0(fdata);
    preds[9] += log_drf_1_Tree_14_class_8.score0(fdata);
    preds[10] += log_drf_1_Tree_14_class_9.score0(fdata);
    preds[11] += log_drf_1_Tree_14_class_10.score0(fdata);
    preds[12] += log_drf_1_Tree_14_class_11.score0(fdata);
    preds[13] += log_drf_1_Tree_14_class_12.score0(fdata);
    preds[14] += log_drf_1_Tree_14_class_13.score0(fdata);
    preds[15] += log_drf_1_Tree_14_class_14.score0(fdata);
    preds[16] += log_drf_1_Tree_14_class_15.score0(fdata);
    preds[17] += log_drf_1_Tree_14_class_16.score0(fdata);
    preds[18] += log_drf_1_Tree_14_class_17.score0(fdata);
    preds[19] += log_drf_1_Tree_14_class_18.score0(fdata);
    preds[20] += log_drf_1_Tree_14_class_19.score0(fdata);
    preds[21] += log_drf_1_Tree_14_class_20.score0(fdata);
    preds[22] += log_drf_1_Tree_14_class_21.score0(fdata);
    preds[23] += log_drf_1_Tree_14_class_22.score0(fdata);
    preds[24] += log_drf_1_Tree_14_class_23.score0(fdata);
    preds[25] += log_drf_1_Tree_14_class_24.score0(fdata);
    preds[26] += log_drf_1_Tree_14_class_25.score0(fdata);
    preds[27] += log_drf_1_Tree_14_class_26.score0(fdata);
    preds[28] += log_drf_1_Tree_14_class_27.score0(fdata);
    preds[29] += log_drf_1_Tree_14_class_28.score0(fdata);
    preds[30] += log_drf_1_Tree_14_class_29.score0(fdata);
    preds[31] += log_drf_1_Tree_14_class_30.score0(fdata);
    preds[32] += log_drf_1_Tree_14_class_31.score0(fdata);
    preds[33] += log_drf_1_Tree_14_class_32.score0(fdata);
    preds[34] += log_drf_1_Tree_14_class_33.score0(fdata);
    preds[35] += log_drf_1_Tree_14_class_34.score0(fdata);
    preds[36] += log_drf_1_Tree_14_class_35.score0(fdata);
    preds[37] += log_drf_1_Tree_14_class_36.score0(fdata);
    preds[38] += log_drf_1_Tree_14_class_37.score0(fdata);
    preds[39] += log_drf_1_Tree_14_class_38.score0(fdata);
  }
}
class log_drf_1_Tree_14_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[12]) || data[12 /* 11_letter_word */] <0.017578125f ? 
         (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <1100.0f ? 
             (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.013671875f ? 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <516.5f ? 
                     (data[0 /* vlan */] <129.5f ? 
                        7.098744E-5f : 
                        0.0f) : 
                     (data[7 /* 6_letter_word */] <0.2890625f ? 
                        0.006369427f : 
                        0.0f)) : 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.0703125f ? 
                    0.0f : 
                     (Double.isNaN(data[4]) || data[4 /* no_of_macs */] <0.5f ? 
                        0.0f : 
                        1.0f))) : 
            1.0f) : 
         (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.013671875f ? 
            0.0f : 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <519.5f ? 
                0.0f : 
                 (data[8 /* 7_letter_word */] <0.055664062f ? 
                    0.0f : 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.09260917f ? 
                        1.0f : 
                        0.6666667f)))));
    return pred;
  } // constant pool size = 50B, number of visited nodes = 12, static init size = 0B
}

class log_drf_1_Tree_14_class_1 {
  static final double score0(double[] data) {
    double pred =      (data[8 /* 7_letter_word */] <0.23925781f ? 
        0.0f : 
         (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <260.5f ? 
             (data[8 /* 7_letter_word */] <0.26154518f ? 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <177.0f ? 
                    0.0f : 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.0625f ? 
                        0.03125f : 
                        0.0f)) : 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <259.0f ? 
                    0.0f : 
                     (data[9 /* 8_letter_word */] <0.046875f ? 
                        0.037037037f : 
                        0.0f))) : 
             (data[0 /* vlan */] <155.5f ? 
                 (data[7 /* 6_letter_word */] <0.0625f ? 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <296.5f ? 
                        0.9532374f : 
                        0.5555556f) : 
                    0.0f) : 
                0.0f)));
    return pred;
  } // constant pool size = 42B, number of visited nodes = 10, static init size = 0B
}

class log_drf_1_Tree_14_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.47216797f ? 
         (data[2 /* no_of_characters */] <150.5f ? 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <135.5f ? 
                0.0f : 
                 (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.07421875f ? 
                     (data[0 /* vlan */] <149.5f ? 
                        0.75490195f : 
                        0.0f) : 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <142.5f ? 
                        0.0011520737f : 
                        0.98058254f))) : 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <670.5f ? 
                 (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
                    0.0f : 
                     (data[2 /* no_of_characters */] <159.5f ? 
                        0.0021820448f : 
                        2.501407E-4f)) : 
                 (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.0546875f ? 
                    0.0f : 
                     (Double.isNaN(data[13]) || data[13 /* 12_letter_word */] <0.0390625f ? 
                        0.0f : 
                        0.75f)))) : 
         (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.44921875f ? 
             (data[2 /* no_of_characters */] <150.5f ? 
                 (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.1015625f ? 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.1015625f ? 
                        0.04029304f : 
                        0.002570694f) : 
                    0.0f) : 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <733.0f ? 
                     (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.22265625f ? 
                        0.001384658f : 
                        0.048387095f) : 
                     (data[6 /* 5_letter_word */] <0.25f ? 
                        1.0f : 
                        0.0f))) : 
             (data[3 /* no_of_ips */] <0.5f ? 
                 (data[1 /* type_of_time */] <4.5f ? 
                    0.0f : 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <129.5f ? 
                        0.0f : 
                        1.0f)) : 
                0.7430639f)));
    return pred;
  } // constant pool size = 86B, number of visited nodes = 21, static init size = 0B
}

class log_drf_1_Tree_14_class_3 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.29296875f ? 
         (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <140.5f ? 
             (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.083984375f ? 
                 (data[2 /* no_of_characters */] <105.0f ? 
                     (data[1 /* type_of_time */] <4.5f ? 
                        0.010050251f : 
                        0.0f) : 
                    0.0f) : 
                0.0f) : 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <29.5f ? 
                 (data[2 /* no_of_characters */] <149.5f ? 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.084821425f ? 
                        0.7834127f : 
                        0.0f) : 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.03125f ? 
                        0.10561555f : 
                        3.2754667E-4f)) : 
                0.0f)) : 
        0.0f);
    return pred;
  } // constant pool size = 38B, number of visited nodes = 9, static init size = 0B
}

class log_drf_1_Tree_14_class_4 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.3095703f ? 
         (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
             (data[0 /* vlan */] <29.5f ? 
                 (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.234375f ? 
                    0.0f : 
                     (data[2 /* no_of_characters */] <120.5f ? 
                        6.317119E-4f : 
                        0.0f)) : 
                0.0f) : 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <165.5f ? 
                0.0f : 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.1171875f ? 
                    0.0f : 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.421875f ? 
                        5.945303E-4f : 
                        0.07042254f)))) : 
         (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.29101562f ? 
            0.0f : 
             (data[2 /* no_of_characters */] <118.0f ? 
                 (data[8 /* 7_letter_word */] <0.41666666f ? 
                     (data[2 /* no_of_characters */] <98.5f ? 
                        0.0f : 
                        1.0f) : 
                    0.0f) : 
                0.0f)));
    return pred;
  } // constant pool size = 50B, number of visited nodes = 12, static init size = 0B
}

class log_drf_1_Tree_14_class_5 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.095703125f ? 
         (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <285.5f ? 
             (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
                0.0f : 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.15625f ? 
                     (Double.isNaN(data[12]) || data[12 /* 11_letter_word */] <0.25f ? 
                        6.3219115E-5f : 
                        0.0013157895f) : 
                     (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.0625f ? 
                        0.0014840799f : 
                        0.0f))) : 
             (data[2 /* no_of_characters */] <294.5f ? 
                 (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.05078125f ? 
                    0.0f : 
                    0.6666667f) : 
                0.0f)) : 
         (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.27441406f ? 
             (data[2 /* no_of_characters */] <110.5f ? 
                 (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.22265625f ? 
                     (data[9 /* 8_letter_word */] <0.2890625f ? 
                        0.0028818443f : 
                        0.0f) : 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.41362f ? 
                        0.0f : 
                        0.11111111f)) : 
                0.0f) : 
             (data[7 /* 6_letter_word */] <0.15575409f ? 
                 (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.1328125f ? 
                     (data[2 /* no_of_characters */] <140.5f ? 
                        0.1f : 
                        0.0f) : 
                     (data[3 /* no_of_ips */] <1.0f ? 
                        1.0f : 
                        0.0f)) : 
                 (data[7 /* 6_letter_word */] <0.23358843f ? 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.21875f ? 
                        0.0036253775f : 
                        0.32f) : 
                    0.0f))));
    return pred;
  } // constant pool size = 78B, number of visited nodes = 19, static init size = 0B
}

class log_drf_1_Tree_14_class_6 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.26123047f ? 
         (data[2 /* no_of_characters */] <98.5f ? 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <85.5f ? 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.87109375f ? 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.12930298f ? 
                        0.0010477299f : 
                        0.0f) : 
                     (data[0 /* vlan */] <10.5f ? 
                        0.0f : 
                        0.8f)) : 
                 (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.1015625f ? 
                     (data[0 /* vlan */] <152.0f ? 
                        0.24229075f : 
                        0.0f) : 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.3671875f ? 
                        0.96190476f : 
                        0.0f))) : 
             (data[2 /* no_of_characters */] <117.5f ? 
                 (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.15625f ? 
                    0.0f : 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <113.5f ? 
                        0.0f : 
                        0.75757575f)) : 
                0.0f)) : 
         (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.91631126f ? 
            0.0f : 
             (data[2 /* no_of_characters */] <60.5f ? 
                0.9166667f : 
                0.0f)));
    return pred;
  } // constant pool size = 58B, number of visited nodes = 14, static init size = 0B
}

class log_drf_1_Tree_14_class_7 {
  static final double score0(double[] data) {
    double pred =      (data[8 /* 7_letter_word */] <0.012207031f ? 
         (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <153.5f ? 
             (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.8984375f ? 
                0.0f : 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <178.5f ? 
                    0.0f : 
                    0.6666667f)) : 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <185.5f ? 
                0.0f : 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <201.5f ? 
                    1.0f : 
                    0.0f))) : 
        0.0f);
    return pred;
  } // constant pool size = 26B, number of visited nodes = 6, static init size = 0B
}

class log_drf_1_Tree_14_class_8 {
  static final double score0(double[] data) {
    double pred =      (data[8 /* 7_letter_word */] <0.16992188f ? 
         (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <898.5f ? 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <177.5f ? 
                0.0f : 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <734.0f ? 
                     (data[3 /* no_of_ips */] <0.5f ? 
                        0.0011389522f : 
                        0.0f) : 
                    0.5f)) : 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <1011.5f ? 
                 (data[3 /* no_of_ips */] <0.5f ? 
                     (data[0 /* vlan */] <162.5f ? 
                        0.0f : 
                        1.0f) : 
                     (data[6 /* 5_letter_word */] <0.1484375f ? 
                        0.8888889f : 
                        1.0f)) : 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.04181671f ? 
                     (data[6 /* 5_letter_word */] <0.125f ? 
                        0.2857143f : 
                        0.026785715f) : 
                     (data[9 /* 8_letter_word */] <0.036458332f ? 
                        1.0f : 
                        0.0f)))) : 
        9.676514E-6f);
    return pred;
  } // constant pool size = 50B, number of visited nodes = 12, static init size = 0B
}

class log_drf_1_Tree_14_class_9 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.095703125f ? 
         (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.3095703f ? 
             (data[1 /* type_of_time */] <3.5f ? 
                 (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.18359375f ? 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.2890625f ? 
                        0.010948905f : 
                        0.53763443f) : 
                     (data[0 /* vlan */] <98.0f ? 
                        0.0f : 
                        1.0f)) : 
                0.0f) : 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <170.5f ? 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <154.5f ? 
                    0.0f : 
                     (Double.isNaN(data[1]) || data[1 /* type_of_time */] <3.5f ? 
                        1.0f : 
                        0.0f)) : 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <203.0f ? 
                     (Double.isNaN(data[1]) || data[1 /* type_of_time */] <3.5f ? 
                        1.0f : 
                        0.0f) : 
                    0.0f))) : 
         (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.18359375f ? 
             (data[2 /* no_of_characters */] <120.5f ? 
                 (data[1 /* type_of_time */] <4.0f ? 
                     (data[3 /* no_of_ips */] <1.0f ? 
                        0.0f : 
                        1.0f) : 
                    0.0f) : 
                 (data[2 /* no_of_characters */] <142.5f ? 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.365625f ? 
                        2.3752969E-4f : 
                        0.23809524f) : 
                    0.0f)) : 
             (data[1 /* type_of_time */] <3.5f ? 
                 (data[6 /* 5_letter_word */] <0.171875f ? 
                    0.97727275f : 
                    1.0f) : 
                0.0f)));
    return pred;
  } // constant pool size = 78B, number of visited nodes = 19, static init size = 0B
}

class log_drf_1_Tree_14_class_10 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.6455078f ? 
        5.9287013E-6f : 
         (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.3095703f ? 
             (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
                0.0f : 
                 (data[2 /* no_of_characters */] <90.5f ? 
                    0.009433962f : 
                    0.0f)) : 
             (data[2 /* no_of_characters */] <100.5f ? 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <89.0f ? 
                    0.0f : 
                    1.0f) : 
                0.0f)));
    return pred;
  } // constant pool size = 26B, number of visited nodes = 6, static init size = 0B
}

class log_drf_1_Tree_14_class_11 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.27929688f ? 
        0.0f : 
         (data[2 /* no_of_characters */] <135.5f ? 
             (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.072265625f ? 
                0.0f : 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <109.5f ? 
                    0.0f : 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.072916664f ? 
                        0.0f : 
                        0.5f))) : 
            0.0f));
    return pred;
  } // constant pool size = 22B, number of visited nodes = 5, static init size = 0B
}

class log_drf_1_Tree_14_class_12 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.92822266f ? 
         (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <529.5f ? 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <592.5f ? 
                0.0f : 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <323.0f ? 
                    0.0f : 
                    0.8888889f)) : 
             (data[2 /* no_of_characters */] <544.5f ? 
                 (data[7 /* 6_letter_word */] <0.36621284f ? 
                     (data[2 /* no_of_characters */] <538.0f ? 
                        0.75f : 
                        1.0f) : 
                    0.0f) : 
                0.0f)) : 
        0.011278195f);
    return pred;
  } // constant pool size = 30B, number of visited nodes = 7, static init size = 0B
}

class log_drf_1_Tree_14_class_13 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.26123047f ? 
         (data[2 /* no_of_characters */] <54.5f ? 
             (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.12500286f ? 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <29.0f ? 
                    1.0f : 
                     (data[0 /* vlan */] <581.5f ? 
                        0.15384616f : 
                        0.037037037f)) : 
                1.0f) : 
             (data[2 /* no_of_characters */] <83.5f ? 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.10000229f ? 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.7421875f ? 
                        0.0f : 
                        0.05263158f) : 
                     (data[6 /* 5_letter_word */] <0.1015625f ? 
                        0.0f : 
                        1.0f)) : 
                 (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.19140625f ? 
                    4.0074538E-5f : 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <589.0f ? 
                        1.764602E-4f : 
                        0.04347826f)))) : 
         (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.028320312f ? 
             (data[2 /* no_of_characters */] <48.0f ? 
                0.15384616f : 
                0.0f) : 
            0.0f));
    return pred;
  } // constant pool size = 54B, number of visited nodes = 13, static init size = 0B
}

class log_drf_1_Tree_14_class_14 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[12]) || data[12 /* 11_letter_word */] <0.18310547f ? 
         (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.19140625f ? 
            0.0f : 
             (data[1 /* type_of_time */] <2.5f ? 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <165.5f ? 
                    0.0f : 
                     (data[11 /* 10_letter_word */] <0.225f ? 
                        1.0f : 
                        0.0f)) : 
                0.0f)) : 
         (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.10058594f ? 
            0.0f : 
             (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.1015625f ? 
                0.0f : 
                0.90909094f)));
    return pred;
  } // constant pool size = 30B, number of visited nodes = 7, static init size = 0B
}

class log_drf_1_Tree_14_class_15 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.5942383f ? 
         (data[2 /* no_of_characters */] <100.5f ? 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <29.5f ? 
                0.0f : 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.125f ? 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.102134705f ? 
                        0.070181504f : 
                        0.0f) : 
                    0.0f)) : 
             (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.31054688f ? 
                 (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
                    0.0f : 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.09375f ? 
                        3.7287924E-4f : 
                        0.0057219556f)) : 
                 (data[6 /* 5_letter_word */] <0.0859375f ? 
                     (data[2 /* no_of_characters */] <137.5f ? 
                        0.13650794f : 
                        0.0f) : 
                    0.0017783047f))) : 
         (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.26660156f ? 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <210.5f ? 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.100260414f ? 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <113.5f ? 
                        0.0f : 
                        0.07058824f) : 
                    0.0f) : 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.6893387f ? 
                     (data[1 /* type_of_time */] <4.5f ? 
                        0.0f : 
                        0.9673913f) : 
                    0.056f)) : 
             (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <1.0f ? 
                 (data[1 /* type_of_time */] <3.5f ? 
                    0.0f : 
                    1.0f) : 
                0.0f)));
    return pred;
  } // constant pool size = 74B, number of visited nodes = 18, static init size = 0B
}

class log_drf_1_Tree_14_class_16 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.52734375f ? 
         (data[2 /* no_of_characters */] <80.5f ? 
             (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.83203125f ? 
                0.0f : 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <79.0f ? 
                    0.0f : 
                    0.8f)) : 
             (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.31054688f ? 
                 (data[2 /* no_of_characters */] <109.5f ? 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.1015625f ? 
                        5.3027895E-4f : 
                        0.0f) : 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.3203125f ? 
                        0.0f : 
                        7.780285E-5f)) : 
                 (data[3 /* no_of_ips */] <0.5f ? 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.088541664f ? 
                        0.004158004f : 
                        0.0f) : 
                    0.0f))) : 
        0.0f);
    return pred;
  } // constant pool size = 42B, number of visited nodes = 10, static init size = 0B
}

class log_drf_1_Tree_14_class_17 {
  static final double score0(double[] data) {
    double pred =      (data[8 /* 7_letter_word */] <0.122558594f ? 
         (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <659.0f ? 
             (data[1 /* type_of_time */] <2.5f ? 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.16796875f ? 
                    0.01010101f : 
                    0.0f) : 
                0.0f) : 
             (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.5136719f ? 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.042129517f ? 
                     (data[0 /* vlan */] <106.0f ? 
                        0.0f : 
                        0.8333333f) : 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.25f ? 
                        0.0f : 
                        0.5f)) : 
                 (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.01953125f ? 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <1020.5f ? 
                        0.0f : 
                        0.2173913f) : 
                    0.0f))) : 
         (data[8 /* 7_letter_word */] <0.3539152f ? 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <976.0f ? 
                0.0f : 
                 (data[6 /* 5_letter_word */] <0.234375f ? 
                    0.0f : 
                    1.0f)) : 
            0.0f));
    return pred;
  } // constant pool size = 54B, number of visited nodes = 13, static init size = 0B
}

class log_drf_1_Tree_14_class_18 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.07470703f ? 
        0.0f : 
        5.3321957E-5f);
    return pred;
  } // constant pool size = 6B, number of visited nodes = 1, static init size = 0B
}

class log_drf_1_Tree_14_class_19 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.24365234f ? 
         (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.18359375f ? 
            0.0f : 
             (data[0 /* vlan */] <17.5f ? 
                 (data[2 /* no_of_characters */] <449.5f ? 
                    0.16666667f : 
                    0.0f) : 
                0.0f)) : 
         (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.23535156f ? 
            0.0f : 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <140.5f ? 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.29387856f ? 
                     (data[2 /* no_of_characters */] <117.5f ? 
                        0.0f : 
                        0.98491704f) : 
                    0.0f) : 
                 (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.125f ? 
                    0.0f : 
                     (data[11 /* 10_letter_word */] <0.29296875f ? 
                        0.007575758f : 
                        0.0f)))));
    return pred;
  } // constant pool size = 42B, number of visited nodes = 10, static init size = 0B
}

class log_drf_1_Tree_14_class_20 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.26123047f ? 
         (data[3 /* no_of_ips */] <0.5f ? 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <25.5f ? 
                 (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.34765625f ? 
                     (data[1 /* type_of_time */] <4.5f ? 
                        0.0f : 
                        0.9006962f) : 
                     (data[0 /* vlan */] <17.5f ? 
                        0.0f : 
                        0.9997486f)) : 
                0.0f) : 
             (data[2 /* no_of_characters */] <115.5f ? 
                0.0f : 
                 (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.83203125f ? 
                     (data[2 /* no_of_characters */] <132.5f ? 
                        0.17863955f : 
                        0.00708521f) : 
                    1.0f))) : 
         (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.29101562f ? 
             (data[2 /* no_of_characters */] <135.5f ? 
                 (data[1 /* type_of_time */] <4.5f ? 
                    0.0f : 
                     (data[2 /* no_of_characters */] <101.5f ? 
                        0.050233644f : 
                        0.8762009f)) : 
                 (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.1171875f ? 
                     (data[2 /* no_of_characters */] <149.5f ? 
                        0.14285715f : 
                        0.0059285783f) : 
                     (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <1.0f ? 
                        0.027877055f : 
                        0.92518246f))) : 
             (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.16796875f ? 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <17.5f ? 
                    0.0f : 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <25.0f ? 
                        1.0f : 
                        0.0f)) : 
                0.715847f)));
    return pred;
  } // constant pool size = 78B, number of visited nodes = 19, static init size = 0B
}

class log_drf_1_Tree_14_class_21 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[12]) || data[12 /* 11_letter_word */] <0.22460938f ? 
         (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <237.5f ? 
             (data[0 /* vlan */] <17.5f ? 
                 (data[2 /* no_of_characters */] <127.5f ? 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.2890625f ? 
                        0.0f : 
                        0.74358976f) : 
                     (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.1796875f ? 
                        0.0f : 
                        0.03601695f)) : 
                 (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.8984375f ? 
                        7.845856E-4f : 
                        0.0020514624f) : 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.4609375f ? 
                        3.1904034E-5f : 
                        4.208754E-4f))) : 
             (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.16015625f ? 
                 (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.234375f ? 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.0146484375f ? 
                        0.004680709f : 
                        5.787037E-4f) : 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.0625f ? 
                        0.01205857f : 
                        0.0f)) : 
                 (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.15345982f ? 
                    0.0f : 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <303.0f ? 
                        0.95652175f : 
                        0.0f)))) : 
         (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.125f ? 
            0.0f : 
            1.0f));
    return pred;
  } // constant pool size = 66B, number of visited nodes = 16, static init size = 0B
}

class log_drf_1_Tree_14_class_22 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.16015625f ? 
         (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <227.5f ? 
            0.0f : 
             (data[0 /* vlan */] <25.5f ? 
                 (data[2 /* no_of_characters */] <236.5f ? 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.088541664f ? 
                        0.04255319f : 
                        0.0f) : 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.15625f ? 
                        0.0f : 
                        0.005952381f)) : 
                0.0f)) : 
         (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.4638672f ? 
            0.0f : 
             (data[10 /* 9_letter_word */] <0.18312073f ? 
                 (data[1 /* type_of_time */] <4.5f ? 
                    0.0f : 
                     (data[11 /* 10_letter_word */] <0.083984375f ? 
                        0.25f : 
                        0.0f)) : 
                0.0f)));
    return pred;
  } // constant pool size = 42B, number of visited nodes = 10, static init size = 0B
}

class log_drf_1_Tree_14_class_23 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.42236328f ? 
         (data[2 /* no_of_characters */] <153.5f ? 
             (data[0 /* vlan */] <17.5f ? 
                 (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.58203125f ? 
                     (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
                        0.0f : 
                        0.004813478f) : 
                     (data[2 /* no_of_characters */] <133.5f ? 
                        0.0f : 
                        1.0f)) : 
                0.0f) : 
             (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.16015625f ? 
                 (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.44921875f ? 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.26672363f ? 
                        3.3218177E-5f : 
                        0.004268293f) : 
                     (data[0 /* vlan */] <17.5f ? 
                        1.0f : 
                        0.0f)) : 
                 (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.44921875f ? 
                     (Double.isNaN(data[13]) || data[13 /* 12_letter_word */] <0.046875f ? 
                        2.2227161E-4f : 
                        0.90909094f) : 
                    1.0f))) : 
         (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.12695312f ? 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <240.5f ? 
                 (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.2890625f ? 
                    0.0f : 
                     (data[10 /* 9_letter_word */] <0.4159546f ? 
                        1.0f : 
                        0.0f)) : 
                 (data[2 /* no_of_characters */] <247.5f ? 
                     (data[2 /* no_of_characters */] <243.5f ? 
                        0.0f : 
                        0.7894737f) : 
                    0.0f)) : 
             (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.46410656f ? 
                 (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.14285715f ? 
                    1.0f : 
                    0.0f) : 
                0.0f)));
    return pred;
  } // constant pool size = 82B, number of visited nodes = 20, static init size = 0B
}

class log_drf_1_Tree_14_class_24 {
  static final double score0(double[] data) {
    double pred =      (data[8 /* 7_letter_word */] <0.012207031f ? 
         (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <143.5f ? 
            0.0f : 
             (data[5 /* 4_letter_word */] <0.056640625f ? 
                 (data[0 /* vlan */] <17.5f ? 
                     (data[0 /* vlan */] <12.5f ? 
                        0.03076923f : 
                        0.0f) : 
                    0.0f) : 
                0.0f)) : 
        0.0f);
    return pred;
  } // constant pool size = 22B, number of visited nodes = 5, static init size = 0B
}

class log_drf_1_Tree_14_class_25 {
  static final double score0(double[] data) {
    double pred =      (data[8 /* 7_letter_word */] <0.14404297f ? 
         (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <1.5f ? 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <29.5f ? 
                 (Double.isNaN(data[16]) || data[16 /* 15_letter_word */] <0.125f ? 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <24.0f ? 
                        0.0f : 
                        0.009932886f) : 
                    1.0f) : 
                 (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
                    0.0f : 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <160.5f ? 
                        0.51338714f : 
                        0.8178119f))) : 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <290.5f ? 
                 (data[1 /* type_of_time */] <4.5f ? 
                    0.0f : 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.828125f ? 
                        0.9984801f : 
                        0.8799908f)) : 
                0.0f)) : 
         (data[8 /* 7_letter_word */] <0.47171402f ? 
             (Double.isNaN(data[12]) || data[12 /* 11_letter_word */] <0.08203125f ? 
                 (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
                    0.0f : 
                     (data[0 /* vlan */] <17.5f ? 
                        0.0f : 
                        0.34766483f)) : 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <171.0f ? 
                     (data[5 /* 4_letter_word */] <0.24088542f ? 
                        0.0f : 
                        0.9986092f) : 
                    0.0f)) : 
             (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                 (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.44921875f ? 
                     (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
                        0.0f : 
                        0.0022307201f) : 
                    0.028753994f) : 
                 (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.109375f ? 
                     (data[5 /* 4_letter_word */] <0.13020833f ? 
                        0.75f : 
                        0.968143f) : 
                    0.041984733f))));
    return pred;
  } // constant pool size = 86B, number of visited nodes = 21, static init size = 0B
}

class log_drf_1_Tree_14_class_26 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.31689453f ? 
        0.0f : 
         (data[2 /* no_of_characters */] <58.5f ? 
             (data[5 /* 4_letter_word */] <0.5f ? 
                0.0f : 
                0.9953596f) : 
            0.0f));
    return pred;
  } // constant pool size = 14B, number of visited nodes = 3, static init size = 0B
}

class log_drf_1_Tree_14_class_27 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.24365234f ? 
        0.0f : 
         (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <255.5f ? 
            0.0f : 
             (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.46289062f ? 
                0.0f : 
                 (data[0 /* vlan */] <17.5f ? 
                     (data[2 /* no_of_characters */] <287.0f ? 
                        1.0f : 
                        0.0f) : 
                    0.0f))));
    return pred;
  } // constant pool size = 22B, number of visited nodes = 5, static init size = 0B
}

class log_drf_1_Tree_14_class_28 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.39453125f ? 
         (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <5.5f ? 
             (data[0 /* vlan */] <17.5f ? 
                 (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <3.0f ? 
                    0.0f : 
                    1.0f) : 
                0.0f) : 
            1.0f) : 
         (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.13085938f ? 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <494.5f ? 
                0.0f : 
                 (data[14 /* 13_letter_word */] <0.07421875f ? 
                    0.0f : 
                    1.0f)) : 
             (data[2 /* no_of_characters */] <477.0f ? 
                0.0f : 
                1.0f)));
    return pred;
  } // constant pool size = 34B, number of visited nodes = 8, static init size = 0B
}

class log_drf_1_Tree_14_class_29 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[12]) || data[12 /* 11_letter_word */] <0.0087890625f ? 
         (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.18359375f ? 
            0.0f : 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <133.5f ? 
                0.0f : 
                 (data[2 /* no_of_characters */] <195.5f ? 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.7734375f ? 
                        0.0f : 
                        1.0f) : 
                    0.0f))) : 
         (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.51464844f ? 
            0.0f : 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <348.0f ? 
                0.0f : 
                1.0f)));
    return pred;
  } // constant pool size = 30B, number of visited nodes = 7, static init size = 0B
}

class log_drf_1_Tree_14_class_30 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.3540039f ? 
         (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <203.5f ? 
             (data[1 /* type_of_time */] <1.5f ? 
                1.0f : 
                0.0f) : 
             (data[2 /* no_of_characters */] <241.5f ? 
                 (data[1 /* type_of_time */] <1.5f ? 
                    1.0f : 
                    0.0f) : 
                0.0f)) : 
         (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.23535156f ? 
            0.0f : 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <230.5f ? 
                0.0f : 
                 (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <2.5f ? 
                    0.0f : 
                    1.0f))));
    return pred;
  } // constant pool size = 34B, number of visited nodes = 8, static init size = 0B
}

class log_drf_1_Tree_14_class_31 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.13378906f ? 
         (data[2 /* no_of_characters */] <113.5f ? 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <65.5f ? 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.4140625f ? 
                    0.0f : 
                    0.0013723696f) : 
                 (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
                    0.0f : 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.4140625f ? 
                        0.28435373f : 
                        0.9775281f))) : 
             (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.22460938f ? 
                 (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
                    0.0f : 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <299.5f ? 
                        3.959525E-4f : 
                        0.0045871558f)) : 
                 (data[11 /* 10_letter_word */] <0.27004242f ? 
                     (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
                        0.0f : 
                        0.65957445f) : 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <33.5f ? 
                        0.0f : 
                        0.002247191f)))) : 
         (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.53515625f ? 
             (data[2 /* no_of_characters */] <105.5f ? 
                 (data[7 /* 6_letter_word */] <0.36725998f ? 
                     (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                        0.5604396f : 
                        0.15483871f) : 
                     (Double.isNaN(data[13]) || data[13 /* 12_letter_word */] <0.25f ? 
                        0.012211669f : 
                        1.0f)) : 
                 (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.31054688f ? 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.3515625f ? 
                        0.0042381044f : 
                        0.0f) : 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.4174107f ? 
                        0.20245399f : 
                        0.0f))) : 
             (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.17100906f ? 
                1.0f : 
                0.0f)));
    return pred;
  } // constant pool size = 86B, number of visited nodes = 21, static init size = 0B
}

class log_drf_1_Tree_14_class_32 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.5942383f ? 
         (data[2 /* no_of_characters */] <123.5f ? 
             (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.20703125f ? 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <121.5f ? 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.4453125f ? 
                        0.0f : 
                        0.015146633f) : 
                     (data[1 /* type_of_time */] <4.5f ? 
                        0.0f : 
                        0.05978261f)) : 
                 (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                    0.0f : 
                     (data[7 /* 6_letter_word */] <0.2890625f ? 
                        0.654321f : 
                        0.0f))) : 
            0.0f) : 
         (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.18359375f ? 
            0.0f : 
             (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.1015625f ? 
                0.0f : 
                1.0f)));
    return pred;
  } // constant pool size = 42B, number of visited nodes = 10, static init size = 0B
}

class log_drf_1_Tree_14_class_33 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.47216797f ? 
         (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <282.5f ? 
             (data[0 /* vlan */] <9.5f ? 
                 (data[9 /* 8_letter_word */] <0.140625f ? 
                    1.0f : 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <5.5f ? 
                        0.0f : 
                        0.6666667f)) : 
                 (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.828125f ? 
                        1.6693377E-5f : 
                        0.030303031f) : 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.703125f ? 
                        5.30455E-4f : 
                        0.0066821617f))) : 
             (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.080078125f ? 
                 (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.1171875f ? 
                    0.0f : 
                     (data[2 /* no_of_characters */] <329.5f ? 
                        0.5f : 
                        0.0f)) : 
                 (data[10 /* 9_letter_word */] <0.09577942f ? 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.21763992f ? 
                        0.972973f : 
                        0.0f) : 
                    0.0f))) : 
         (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.44921875f ? 
             (data[2 /* no_of_characters */] <85.5f ? 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <77.0f ? 
                     (data[0 /* vlan */] <17.5f ? 
                        0.33333334f : 
                        0.0f) : 
                    1.0f) : 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.52783775f ? 
                     (data[6 /* 5_letter_word */] <0.3671875f ? 
                        0.0f : 
                        4.0733197E-4f) : 
                    0.0f)) : 
             (data[3 /* no_of_ips */] <0.5f ? 
                 (data[1 /* type_of_time */] <4.5f ? 
                    0.0f : 
                     (data[0 /* vlan */] <17.5f ? 
                        1.0f : 
                        0.0f)) : 
                0.0f)));
    return pred;
  } // constant pool size = 90B, number of visited nodes = 22, static init size = 0B
}

class log_drf_1_Tree_14_class_34 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.123535156f ? 
        0.0f : 
         (data[10 /* 9_letter_word */] <0.12610292f ? 
             (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.0625f ? 
                0.0f : 
                 (data[8 /* 7_letter_word */] <0.24804688f ? 
                    0.5f : 
                    0.0f)) : 
            0.0f));
    return pred;
  } // constant pool size = 18B, number of visited nodes = 4, static init size = 0B
}

class log_drf_1_Tree_14_class_35 {
  static final double score0(double[] data) {
    double pred =      (data[8 /* 7_letter_word */] <0.16992188f ? 
         (data[2 /* no_of_characters */] <83.5f ? 
             (data[0 /* vlan */] <19.5f ? 
                 (data[5 /* 4_letter_word */] <0.16796875f ? 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.6640625f ? 
                        0.0f : 
                        1.0f) : 
                    0.0f) : 
                0.0f) : 
             (data[2 /* no_of_characters */] <125.5f ? 
                 (data[1 /* type_of_time */] <4.5f ? 
                    0.0f : 
                     (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.21875f ? 
                        0.0f : 
                        0.0011337869f)) : 
                 (data[6 /* 5_letter_word */] <0.17578125f ? 
                     (data[0 /* vlan */] <17.5f ? 
                        0.001623816f : 
                        0.0f) : 
                     (data[2 /* no_of_characters */] <144.0f ? 
                        3.1167213E-4f : 
                        0.0f)))) : 
         (data[8 /* 7_letter_word */] <0.35393333f ? 
             (data[2 /* no_of_characters */] <90.5f ? 
                 (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.16796875f ? 
                    0.0f : 
                    0.6666667f) : 
                0.0f) : 
             (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
                0.0f : 
                 (data[0 /* vlan */] <17.5f ? 
                    0.05263158f : 
                    0.0f))));
    return pred;
  } // constant pool size = 66B, number of visited nodes = 16, static init size = 0B
}

class log_drf_1_Tree_14_class_36 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.16015625f ? 
        0.0f : 
         (data[10 /* 9_letter_word */] <0.17409897f ? 
             (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.083984375f ? 
                0.0f : 
                 (data[0 /* vlan */] <13.5f ? 
                    0.72727275f : 
                    0.0f)) : 
            0.0f));
    return pred;
  } // constant pool size = 18B, number of visited nodes = 4, static init size = 0B
}

class log_drf_1_Tree_14_class_37 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.29296875f ? 
         (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <1.5f ? 
             (data[1 /* type_of_time */] <4.5f ? 
                 (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.0390625f ? 
                     (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.21875f ? 
                        0.98896754f : 
                        1.0f) : 
                     (data[2 /* no_of_characters */] <120.5f ? 
                        0.85714287f : 
                        0.9980592f)) : 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <154.5f ? 
                    0.0f : 
                     (data[2 /* no_of_characters */] <120.5f ? 
                        0.31034482f : 
                        0.0f))) : 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <170.5f ? 
                 (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.4140625f ? 
                    0.0f : 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.3671875f ? 
                        0.0f : 
                        9.718173E-4f)) : 
                 (data[1 /* type_of_time */] <4.5f ? 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.3671875f ? 
                        0.025280898f : 
                        1.0f) : 
                    0.0f))) : 
         (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.29101562f ? 
             (data[2 /* no_of_characters */] <135.5f ? 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <132.5f ? 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.87421876f ? 
                        0.005711954f : 
                        0.06259241f) : 
                     (data[1 /* type_of_time */] <4.5f ? 
                        1.0f : 
                        0.0f)) : 
                 (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
                     (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.4140625f ? 
                        0.99534136f : 
                        0.36842105f) : 
                    0.0f)) : 
             (data[1 /* type_of_time */] <4.5f ? 
                1.0f : 
                0.0f)));
    return pred;
  } // constant pool size = 86B, number of visited nodes = 21, static init size = 0B
}

class log_drf_1_Tree_14_class_38 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.47216797f ? 
         (data[2 /* no_of_characters */] <90.5f ? 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <85.5f ? 
                0.0f : 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <89.0f ? 
                    0.0f : 
                    0.083333336f)) : 
            0.0f) : 
         (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.41601562f ? 
            0.0f : 
             (data[2 /* no_of_characters */] <95.5f ? 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <83.5f ? 
                    0.0f : 
                    0.5f) : 
                0.0f)));
    return pred;
  } // constant pool size = 30B, number of visited nodes = 7, static init size = 0B
}


class log_drf_1_Forest_15 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += log_drf_1_Tree_15_class_0.score0(fdata);
    preds[2] += log_drf_1_Tree_15_class_1.score0(fdata);
    preds[3] += log_drf_1_Tree_15_class_2.score0(fdata);
    preds[4] += log_drf_1_Tree_15_class_3.score0(fdata);
    preds[5] += log_drf_1_Tree_15_class_4.score0(fdata);
    preds[6] += log_drf_1_Tree_15_class_5.score0(fdata);
    preds[7] += log_drf_1_Tree_15_class_6.score0(fdata);
    preds[8] += log_drf_1_Tree_15_class_7.score0(fdata);
    preds[9] += log_drf_1_Tree_15_class_8.score0(fdata);
    preds[10] += log_drf_1_Tree_15_class_9.score0(fdata);
    preds[11] += log_drf_1_Tree_15_class_10.score0(fdata);
    preds[12] += log_drf_1_Tree_15_class_11.score0(fdata);
    preds[13] += log_drf_1_Tree_15_class_12.score0(fdata);
    preds[14] += log_drf_1_Tree_15_class_13.score0(fdata);
    preds[15] += log_drf_1_Tree_15_class_14.score0(fdata);
    preds[16] += log_drf_1_Tree_15_class_15.score0(fdata);
    preds[17] += log_drf_1_Tree_15_class_16.score0(fdata);
    preds[18] += log_drf_1_Tree_15_class_17.score0(fdata);
    preds[19] += log_drf_1_Tree_15_class_18.score0(fdata);
    preds[20] += log_drf_1_Tree_15_class_19.score0(fdata);
    preds[21] += log_drf_1_Tree_15_class_20.score0(fdata);
    preds[22] += log_drf_1_Tree_15_class_21.score0(fdata);
    preds[23] += log_drf_1_Tree_15_class_22.score0(fdata);
    preds[24] += log_drf_1_Tree_15_class_23.score0(fdata);
    preds[25] += log_drf_1_Tree_15_class_24.score0(fdata);
    preds[26] += log_drf_1_Tree_15_class_25.score0(fdata);
    preds[27] += log_drf_1_Tree_15_class_26.score0(fdata);
    preds[28] += log_drf_1_Tree_15_class_27.score0(fdata);
    preds[29] += log_drf_1_Tree_15_class_28.score0(fdata);
    preds[30] += log_drf_1_Tree_15_class_29.score0(fdata);
    preds[31] += log_drf_1_Tree_15_class_30.score0(fdata);
    preds[32] += log_drf_1_Tree_15_class_31.score0(fdata);
    preds[33] += log_drf_1_Tree_15_class_32.score0(fdata);
    preds[34] += log_drf_1_Tree_15_class_33.score0(fdata);
    preds[35] += log_drf_1_Tree_15_class_34.score0(fdata);
    preds[36] += log_drf_1_Tree_15_class_35.score0(fdata);
    preds[37] += log_drf_1_Tree_15_class_36.score0(fdata);
    preds[38] += log_drf_1_Tree_15_class_37.score0(fdata);
    preds[39] += log_drf_1_Tree_15_class_38.score0(fdata);
  }
}
class log_drf_1_Tree_15_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[4]) || data[4 /* no_of_macs */] <2.5f ? 
         (Double.isNaN(data[14]) || data[14 /* 13_letter_word */] <0.0146484375f ? 
             (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.029296875f ? 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.46875f ? 
                     (data[8 /* 7_letter_word */] <0.234375f ? 
                        2.225932E-5f : 
                        0.0f) : 
                     (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                        4.6630917E-4f : 
                        0.0f)) : 
                 (data[10 /* 9_letter_word */] <0.074798584f ? 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.2734375f ? 
                        0.9f : 
                        0.0f) : 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <699.0f ? 
                        0.0f : 
                        0.06666667f))) : 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <584.5f ? 
                0.0f : 
                 (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                    1.0f : 
                    0.0f))) : 
         (data[9 /* 8_letter_word */] <0.037109375f ? 
            0.0f : 
            0.6666667f));
    return pred;
  } // constant pool size = 50B, number of visited nodes = 12, static init size = 0B
}

class log_drf_1_Tree_15_class_1 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.17480469f ? 
         (data[1 /* type_of_time */] <3.5f ? 
             (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.3671875f ? 
                0.0f : 
                 (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.083333336f ? 
                     (data[3 /* no_of_ips */] <1.5f ? 
                        0.6229508f : 
                        0.0f) : 
                    0.0f)) : 
             (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.140625f ? 
                0.0f : 
                 (data[6 /* 5_letter_word */] <0.20440674f ? 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.3203125f ? 
                        5.0658564E-4f : 
                        0.48658317f) : 
                     (data[3 /* no_of_ips */] <0.5f ? 
                        0.0f : 
                        6.672969E-4f)))) : 
        0.0f);
    return pred;
  } // constant pool size = 38B, number of visited nodes = 9, static init size = 0B
}

class log_drf_1_Tree_15_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.2109375f ? 
         (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.42285156f ? 
             (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.25976562f ? 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.11364746f ? 
                     (data[1 /* type_of_time */] <4.5f ? 
                        0.0f : 
                        0.0050737085f) : 
                     (data[8 /* 7_letter_word */] <0.11790848f ? 
                        1.0f : 
                        0.011122346f)) : 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.30859375f ? 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <669.5f ? 
                        1.2763242E-4f : 
                        0.10526316f) : 
                     (Double.isNaN(data[13]) || data[13 /* 12_letter_word */] <0.03125f ? 
                        0.004122295f : 
                        0.33333334f))) : 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <181.5f ? 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <137.0f ? 
                    0.0f : 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.3125f ? 
                        0.019174991f : 
                        0.0f)) : 
                 (data[3 /* no_of_ips */] <0.5f ? 
                    0.0f : 
                    0.84232956f))) : 
         (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.4638672f ? 
             (data[6 /* 5_letter_word */] <0.111328125f ? 
                0.0f : 
                 (data[0 /* vlan */] <154.5f ? 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <138.0f ? 
                        0.0f : 
                        1.0f) : 
                    0.0f)) : 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <113.5f ? 
                0.0f : 
                 (data[9 /* 8_letter_word */] <0.41666666f ? 
                     (data[2 /* no_of_characters */] <200.5f ? 
                        1.0f : 
                        0.0f) : 
                    0.25f))));
    return pred;
  } // constant pool size = 82B, number of visited nodes = 20, static init size = 0B
}

class log_drf_1_Tree_15_class_3 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.013183594f ? 
         (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.38671875f ? 
             (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.35351562f ? 
                 (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.051094055f ? 
                     (data[2 /* no_of_characters */] <120.5f ? 
                        7.728971E-4f : 
                        0.0f) : 
                    0.0f) : 
                 (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.063446045f ? 
                    0.0f : 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.46463013f ? 
                        0.6494382f : 
                        0.0f))) : 
             (data[0 /* vlan */] <29.5f ? 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.18303572f ? 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <28.0f ? 
                        0.0f : 
                        0.98673207f) : 
                    0.0f) : 
                 (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                    0.0f : 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.04464286f ? 
                        1.3745704E-4f : 
                        0.0f)))) : 
        2.1993974E-5f);
    return pred;
  } // constant pool size = 50B, number of visited nodes = 12, static init size = 0B
}

class log_drf_1_Tree_15_class_4 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.013183594f ? 
         (data[1 /* type_of_time */] <4.5f ? 
            0.0f : 
             (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.43554688f ? 
                 (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.30859375f ? 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <160.5f ? 
                        3.6919442E-5f : 
                        4.810005E-4f) : 
                     (data[6 /* 5_letter_word */] <0.4140625f ? 
                        0.020537125f : 
                        0.0f)) : 
                 (data[2 /* no_of_characters */] <110.5f ? 
                     (data[0 /* vlan */] <17.5f ? 
                        0.0f : 
                        0.0025773195f) : 
                    0.0f))) : 
         (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.833282f ? 
            0.0f : 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <25.5f ? 
                0.0f : 
                 (data[0 /* vlan */] <37.5f ? 
                    0.25f : 
                    0.0f))));
    return pred;
  } // constant pool size = 46B, number of visited nodes = 11, static init size = 0B
}

class log_drf_1_Tree_15_class_5 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.09033203f ? 
         (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.42285156f ? 
             (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.31640625f ? 
                0.0f : 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.0625f ? 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <200.5f ? 
                        0.0f : 
                        0.0029282577f) : 
                    0.0f)) : 
             (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.1328125f ? 
                 (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                     (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
                        0.0f : 
                        0.0024825097f) : 
                    0.0f) : 
                 (data[10 /* 9_letter_word */] <0.1543274f ? 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <109.5f ? 
                        1.0f : 
                        0.0f) : 
                    0.0f))) : 
         (data[9 /* 8_letter_word */] <0.1027689f ? 
             (Double.isNaN(data[4]) || data[4 /* no_of_macs */] <0.5f ? 
                 (data[0 /* vlan */] <85.5f ? 
                    1.0f : 
                    0.0f) : 
                0.0f) : 
             (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.46354166f ? 
                 (data[9 /* 8_letter_word */] <0.24296126f ? 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.171875f ? 
                        0.008170961f : 
                        0.0f) : 
                    0.0f) : 
                 (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.22265625f ? 
                    0.0f : 
                    0.8888889f))));
    return pred;
  } // constant pool size = 70B, number of visited nodes = 17, static init size = 0B
}

class log_drf_1_Tree_15_class_6 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.1616211f ? 
         (data[1 /* type_of_time */] <4.5f ? 
            0.0f : 
             (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.27929688f ? 
                 (data[0 /* vlan */] <17.5f ? 
                     (data[2 /* no_of_characters */] <60.5f ? 
                        1.0f : 
                        0.019646365f) : 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.8984375f ? 
                        0.0f : 
                        0.001957905f)) : 
                 (data[3 /* no_of_ips */] <0.5f ? 
                     (data[2 /* no_of_characters */] <100.5f ? 
                        0.20064725f : 
                        0.0f) : 
                    0.0f))) : 
         (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.3203125f ? 
             (data[2 /* no_of_characters */] <78.0f ? 
                 (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.66471356f ? 
                    0.0f : 
                     (data[0 /* vlan */] <91.5f ? 
                        0.0f : 
                        0.93333334f)) : 
                 (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.22460938f ? 
                    0.0f : 
                     (data[1 /* type_of_time */] <4.5f ? 
                        0.0f : 
                        0.033026114f))) : 
             (data[9 /* 8_letter_word */] <0.35384116f ? 
                 (data[0 /* vlan */] <109.5f ? 
                    0.0f : 
                     (data[2 /* no_of_characters */] <120.5f ? 
                        1.0f : 
                        0.0f)) : 
                 (data[1 /* type_of_time */] <4.5f ? 
                    0.0f : 
                     (data[5 /* 4_letter_word */] <0.44787598f ? 
                        0.0f : 
                        0.060344826f)))));
    return pred;
  } // constant pool size = 78B, number of visited nodes = 19, static init size = 0B
}

class log_drf_1_Tree_15_class_7 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.013183594f ? 
         (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.93652344f ? 
            0.0f : 
            0.021855671f) : 
        0.0f);
    return pred;
  } // constant pool size = 10B, number of visited nodes = 2, static init size = 0B
}

class log_drf_1_Tree_15_class_8 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.1484375f ? 
         (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.53808594f ? 
             (data[8 /* 7_letter_word */] <0.013671875f ? 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <178.5f ? 
                    0.0f : 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <589.5f ? 
                        0.04597701f : 
                        0.0f)) : 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.529953f ? 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.03125f ? 
                        6.534239E-5f : 
                        0.0f) : 
                    0.0f)) : 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <831.5f ? 
                0.0f : 
                 (data[3 /* no_of_ips */] <1.0f ? 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <92.5f ? 
                        0.0f : 
                        0.5f) : 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <1019.5f ? 
                        1.0f : 
                        0.6f)))) : 
         (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.8328476f ? 
            0.0f : 
            4.1701418E-4f));
    return pred;
  } // constant pool size = 50B, number of visited nodes = 12, static init size = 0B
}

class log_drf_1_Tree_15_class_9 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.19335938f ? 
         (data[1 /* type_of_time */] <3.5f ? 
             (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.44921875f ? 
                 (data[0 /* vlan */] <150.5f ? 
                    0.0f : 
                     (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.2890625f ? 
                        0.5681818f : 
                        1.0f)) : 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <215.5f ? 
                     (data[0 /* vlan */] <98.0f ? 
                        0.0f : 
                        1.0f) : 
                    0.0f)) : 
            0.0f) : 
         (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.18359375f ? 
             (data[8 /* 7_letter_word */] <0.2109375f ? 
                 (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <2.5f ? 
                    0.0f : 
                     (data[1 /* type_of_time */] <4.0f ? 
                        1.0f : 
                        0.0f)) : 
                 (data[8 /* 7_letter_word */] <0.2930603f ? 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <98.5f ? 
                        0.0f : 
                        0.33333334f) : 
                    0.0f)) : 
             (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.22460938f ? 
                 (data[1 /* type_of_time */] <3.5f ? 
                     (data[3 /* no_of_ips */] <2.5f ? 
                        0.0f : 
                        1.0f) : 
                    0.0f) : 
                 (Double.isNaN(data[1]) || data[1 /* type_of_time */] <3.5f ? 
                    1.0f : 
                    0.0f))));
    return pred;
  } // constant pool size = 70B, number of visited nodes = 17, static init size = 0B
}

class log_drf_1_Tree_15_class_10 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.013183594f ? 
         (data[1 /* type_of_time */] <4.5f ? 
            0.0f : 
             (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.05078125f ? 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <154.5f ? 
                    0.0f : 
                     (Double.isNaN(data[12]) || data[12 /* 11_letter_word */] <0.5f ? 
                        0.002255639f : 
                        0.0f)) : 
                0.0f)) : 
        0.0f);
    return pred;
  } // constant pool size = 22B, number of visited nodes = 5, static init size = 0B
}

class log_drf_1_Tree_15_class_11 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.14111328f ? 
        0.0f : 
         (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.26757812f ? 
            0.0f : 
             (data[5 /* 4_letter_word */] <0.29301834f ? 
                 (data[6 /* 5_letter_word */] <0.07421875f ? 
                    0.0f : 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.2130127f ? 
                        0.009615385f : 
                        0.0f)) : 
                0.0f)));
    return pred;
  } // constant pool size = 22B, number of visited nodes = 5, static init size = 0B
}

class log_drf_1_Tree_15_class_12 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.5830078f ? 
         (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
            0.0f : 
             (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.9277344f ? 
                0.0f : 
                0.013664597f)) : 
         (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.16699219f ? 
            0.0f : 
            1.0f));
    return pred;
  } // constant pool size = 18B, number of visited nodes = 4, static init size = 0B
}

class log_drf_1_Tree_15_class_13 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.26757812f ? 
         (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
            0.0f : 
             (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.19179916f ? 
                 (data[2 /* no_of_characters */] <30.5f ? 
                    0.9793388f : 
                     (data[2 /* no_of_characters */] <50.5f ? 
                        0.078947365f : 
                        3.8329596E-5f)) : 
                 (data[0 /* vlan */] <9.5f ? 
                    0.984375f : 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.1015625f ? 
                        0.0f : 
                        0.045673076f)))) : 
         (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.83263016f ? 
            0.0f : 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <173.5f ? 
                0.0f : 
                0.5f)));
    return pred;
  } // constant pool size = 38B, number of visited nodes = 9, static init size = 0B
}

class log_drf_1_Tree_15_class_14 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.013183594f ? 
         (data[1 /* type_of_time */] <2.5f ? 
             (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.18359375f ? 
                0.0f : 
                 (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.22265625f ? 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.1015625f ? 
                        0.0f : 
                        0.7894737f) : 
                    0.0f)) : 
            0.0f) : 
        0.0f);
    return pred;
  } // constant pool size = 22B, number of visited nodes = 5, static init size = 0B
}

class log_drf_1_Tree_15_class_15 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.2109375f ? 
         (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.93652344f ? 
             (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.47070312f ? 
                 (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.19198608f ? 
                     (Double.isNaN(data[15]) || data[15 /* 14_letter_word */] <0.22265625f ? 
                        0.004698171f : 
                        0.12195122f) : 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.0546875f ? 
                        0.124610595f : 
                        0.0f)) : 
                0.0f) : 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <100.5f ? 
                 (data[1 /* type_of_time */] <4.5f ? 
                    0.0f : 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <98.5f ? 
                        0.0f : 
                        0.32641196f)) : 
                0.0f)) : 
        2.496505E-5f);
    return pred;
  } // constant pool size = 38B, number of visited nodes = 9, static init size = 0B
}

class log_drf_1_Tree_15_class_16 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.013183594f ? 
         (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.93652344f ? 
             (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.34960938f ? 
                 (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
                    0.0f : 
                     (data[3 /* no_of_ips */] <0.5f ? 
                        5.8719906E-4f : 
                        0.0f)) : 
                0.0f) : 
             (data[2 /* no_of_characters */] <80.5f ? 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <61.5f ? 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <30.5f ? 
                        0.0f : 
                        1.0f) : 
                    0.0f) : 
                0.0f)) : 
         (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.4951172f ? 
            0.0f : 
             (data[9 /* 8_letter_word */] <0.45040092f ? 
                0.0f : 
                4.5146726E-4f)));
    return pred;
  } // constant pool size = 42B, number of visited nodes = 10, static init size = 0B
}

class log_drf_1_Tree_15_class_17 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.09765625f ? 
         (data[1 /* type_of_time */] <4.5f ? 
            0.0f : 
             (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.01953125f ? 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <178.5f ? 
                    0.0f : 
                     (data[2 /* no_of_characters */] <659.5f ? 
                        0.0f : 
                        0.60837436f)) : 
                 (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <3.5f ? 
                     (Double.isNaN(data[14]) || data[14 /* 13_letter_word */] <0.052734375f ? 
                        0.0f : 
                        0.33333334f) : 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <769.0f ? 
                        0.0f : 
                        1.0f)))) : 
         (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.32226562f ? 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <991.0f ? 
                0.0f : 
                 (data[3 /* no_of_ips */] <2.5f ? 
                    0.0f : 
                    1.0f)) : 
             (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.31640625f ? 
                0.0f : 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <102.0f ? 
                    0.0f : 
                    1.0f))));
    return pred;
  } // constant pool size = 54B, number of visited nodes = 13, static init size = 0B
}

class log_drf_1_Tree_15_class_18 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.07470703f ? 
        0.0f : 
         (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.4580078f ? 
            0.0f : 
             (data[5 /* 4_letter_word */] <0.49564743f ? 
                0.5f : 
                0.0f)));
    return pred;
  } // constant pool size = 14B, number of visited nodes = 3, static init size = 0B
}

class log_drf_1_Tree_15_class_19 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.24023438f ? 
         (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.18359375f ? 
            0.0f : 
             (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.18359375f ? 
                0.0f : 
                 (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.10041046f ? 
                    0.0f : 
                     (data[0 /* vlan */] <98.0f ? 
                        0.33333334f : 
                        0.0f)))) : 
         (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.22460938f ? 
            0.0f : 
             (data[0 /* vlan */] <19.5f ? 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.26777902f ? 
                     (data[11 /* 10_letter_word */] <0.125f ? 
                        0.0f : 
                        1.0f) : 
                    0.0f) : 
                0.0f)));
    return pred;
  } // constant pool size = 38B, number of visited nodes = 9, static init size = 0B
}

class log_drf_1_Tree_15_class_20 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.44970703f ? 
         (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
            0.0f : 
             (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.38085938f ? 
                 (data[0 /* vlan */] <25.5f ? 
                     (data[0 /* vlan */] <17.5f ? 
                        0.0f : 
                        0.99951434f) : 
                    0.0f) : 
                 (data[3 /* no_of_ips */] <0.5f ? 
                     (data[0 /* vlan */] <17.5f ? 
                        0.0f : 
                        0.6139113f) : 
                     (data[3 /* no_of_ips */] <1.5f ? 
                        9.67118E-4f : 
                        0.0f)))) : 
         (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.5829811f ? 
             (Double.isNaN(data[4]) || data[4 /* no_of_macs */] <0.5f ? 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <170.5f ? 
                     (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.125f ? 
                        0.90610546f : 
                        1.0f) : 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.125f ? 
                        0.1323764f : 
                        0.5f)) : 
                0.0f) : 
             (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.083984375f ? 
                 (data[0 /* vlan */] <17.5f ? 
                    0.0f : 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <33.5f ? 
                        0.99632895f : 
                        0.0f)) : 
                0.0f)));
    return pred;
  } // constant pool size = 66B, number of visited nodes = 16, static init size = 0B
}

class log_drf_1_Tree_15_class_21 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[4]) || data[4 /* no_of_macs */] <0.5f ? 
         (data[0 /* vlan */] <11.5f ? 
             (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.78515625f ? 
                0.0f : 
                0.44186047f) : 
             (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.15429688f ? 
                 (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.31640625f ? 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <220.5f ? 
                        8.348241E-4f : 
                        0.0035896727f) : 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.3125f ? 
                        0.0011415525f : 
                        0.009531071f)) : 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <35.5f ? 
                     (data[6 /* 5_letter_word */] <0.140625f ? 
                        0.011325783f : 
                        0.0f) : 
                     (data[0 /* vlan */] <109.5f ? 
                        0.3354232f : 
                        8.976661E-4f)))) : 
        0.0f);
    return pred;
  } // constant pool size = 42B, number of visited nodes = 10, static init size = 0B
}

class log_drf_1_Tree_15_class_22 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.1616211f ? 
         (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.6513672f ? 
            0.0f : 
             (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.31054688f ? 
                0.0f : 
                 (data[1 /* type_of_time */] <4.5f ? 
                    0.0f : 
                     (data[3 /* no_of_ips */] <0.5f ? 
                        0.015873017f : 
                        0.0f)))) : 
         (data[9 /* 8_letter_word */] <0.1755395f ? 
             (data[0 /* vlan */] <9.5f ? 
                0.15384616f : 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.04296875f ? 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <18.5f ? 
                        0.0f : 
                        0.0074074073f) : 
                    0.0f)) : 
            0.0f));
    return pred;
  } // constant pool size = 38B, number of visited nodes = 9, static init size = 0B
}

class log_drf_1_Tree_15_class_23 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.5830078f ? 
         (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.1171875f ? 
             (data[8 /* 7_letter_word */] <0.09375f ? 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.08972168f ? 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.26873016f ? 
                        7.9850387E-4f : 
                        0.0036363637f) : 
                     (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.1171875f ? 
                        0.0f : 
                        1.0f)) : 
                 (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.44864273f ? 
                    0.0f : 
                     (data[8 /* 7_letter_word */] <0.2919922f ? 
                        0.25f : 
                        0.030379746f))) : 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <255.5f ? 
                0.0f : 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <18.0f ? 
                     (data[8 /* 7_letter_word */] <0.1953125f ? 
                        0.0f : 
                        1.0f) : 
                    0.0f))) : 
         (data[9 /* 8_letter_word */] <0.83304024f ? 
             (data[8 /* 7_letter_word */] <0.25f ? 
                0.0f : 
                 (data[1 /* type_of_time */] <4.5f ? 
                    0.0f : 
                    1.0f)) : 
             (data[0 /* vlan */] <19.5f ? 
                 (data[0 /* vlan */] <13.5f ? 
                    0.0f : 
                     (data[2 /* no_of_characters */] <120.5f ? 
                        0.0f : 
                        1.0f)) : 
                0.0f)));
    return pred;
  } // constant pool size = 70B, number of visited nodes = 17, static init size = 0B
}

class log_drf_1_Tree_15_class_24 {
  static final double score0(double[] data) {
    double pred =     1.5E-5f;
    return pred;
  } // constant pool size = 2B, number of visited nodes = 0, static init size = 0B
}

class log_drf_1_Tree_15_class_25 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[4]) || data[4 /* no_of_macs */] <0.5f ? 
         (data[0 /* vlan */] <40.5f ? 
             (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.03125f ? 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <340.5f ? 
                     (data[2 /* no_of_characters */] <131.5f ? 
                        0.292687f : 
                        0.52258605f) : 
                    0.0f) : 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.4609375f ? 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <25.0f ? 
                        0.0f : 
                        0.8489305f) : 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.234375f ? 
                        0.29326922f : 
                        0.9695652f))) : 
             (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.033203125f ? 
                 (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
                    0.0f : 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <157.0f ? 
                        0.0f : 
                        5.924171E-4f)) : 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.53515625f ? 
                    0.0f : 
                    0.02631579f))) : 
         (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.0390625f ? 
             (data[4 /* no_of_macs */] <1.5f ? 
                1.0f : 
                 (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.53515625f ? 
                    1.0f : 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.078125f ? 
                        0.998f : 
                        0.0f))) : 
             (data[5 /* 4_letter_word */] <0.095703125f ? 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <180.5f ? 
                    1.0f : 
                    0.5f) : 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.3125f ? 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.3843149f ? 
                        0.0f : 
                        0.33333334f) : 
                    1.0f))));
    return pred;
  } // constant pool size = 82B, number of visited nodes = 20, static init size = 0B
}

class log_drf_1_Tree_15_class_26 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.013183594f ? 
         (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.6513672f ? 
            0.0f : 
             (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.69086075f ? 
                 (data[0 /* vlan */] <33.5f ? 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.171875f ? 
                        0.0f : 
                        0.28343728f) : 
                    0.0f) : 
                0.0f)) : 
        0.0f);
    return pred;
  } // constant pool size = 22B, number of visited nodes = 5, static init size = 0B
}

class log_drf_1_Tree_15_class_27 {
  static final double score0(double[] data) {
    double pred =     1.0E-5f;
    return pred;
  } // constant pool size = 2B, number of visited nodes = 0, static init size = 0B
}

class log_drf_1_Tree_15_class_28 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[14]) || data[14 /* 13_letter_word */] <0.09814453f ? 
         (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.32421875f ? 
             (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.24023438f ? 
                0.0f : 
                 (data[0 /* vlan */] <17.5f ? 
                     (data[0 /* vlan */] <13.5f ? 
                        0.0f : 
                        0.058080807f) : 
                    0.0f)) : 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <444.5f ? 
                0.0f : 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.013020833f ? 
                     (data[3 /* no_of_ips */] <5.5f ? 
                        0.10970464f : 
                        1.0f) : 
                     (data[0 /* vlan */] <17.5f ? 
                        0.6666667f : 
                        0.0f)))) : 
         (data[7 /* 6_letter_word */] <0.19628906f ? 
            0.0f : 
             (data[6 /* 5_letter_word */] <0.072265625f ? 
                0.0f : 
                 (data[5 /* 4_letter_word */] <0.0625f ? 
                     (Double.isNaN(data[14]) || data[14 /* 13_letter_word */] <0.22591145f ? 
                        1.0f : 
                        0.99441344f) : 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.41310373f ? 
                        0.99891835f : 
                        1.0f)))));
    return pred;
  } // constant pool size = 58B, number of visited nodes = 14, static init size = 0B
}

class log_drf_1_Tree_15_class_29 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.030761719f ? 
         (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.77441406f ? 
            0.0f : 
             (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.1015625f ? 
                0.0f : 
                0.14285715f)) : 
         (data[9 /* 8_letter_word */] <0.049692154f ? 
            1.0f : 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <953.5f ? 
                0.0f : 
                 (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.42773438f ? 
                    0.0f : 
                    1.0f))));
    return pred;
  } // constant pool size = 26B, number of visited nodes = 6, static init size = 0B
}

class log_drf_1_Tree_15_class_30 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.013183594f ? 
         (data[1 /* type_of_time */] <1.5f ? 
            1.0f : 
            0.0f) : 
        0.0f);
    return pred;
  } // constant pool size = 10B, number of visited nodes = 2, static init size = 0B
}

class log_drf_1_Tree_15_class_31 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.013183594f ? 
         (data[1 /* type_of_time */] <4.5f ? 
            0.0f : 
             (Double.isNaN(data[15]) || data[15 /* 14_letter_word */] <0.22460938f ? 
                 (Double.isNaN(data[13]) || data[13 /* 12_letter_word */] <0.234375f ? 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <65.5f ? 
                        4.0295217E-4f : 
                        0.2532176f) : 
                     (Double.isNaN(data[13]) || data[13 /* 12_letter_word */] <0.7487793f ? 
                        0.85046726f : 
                        0.0f)) : 
                 (data[0 /* vlan */] <61.5f ? 
                    0.0f : 
                    0.8684211f))) : 
         (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.32421875f ? 
             (data[2 /* no_of_characters */] <70.5f ? 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.4140625f ? 
                    0.0f : 
                    1.0f) : 
                 (data[8 /* 7_letter_word */] <0.032226562f ? 
                     (data[1 /* type_of_time */] <4.5f ? 
                        0.0f : 
                        1.4909796E-4f) : 
                    0.0f)) : 
             (Double.isNaN(data[15]) || data[15 /* 14_letter_word */] <0.25f ? 
                 (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                    0.0f : 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.3164522f ? 
                        0.011450382f : 
                        0.3611111f)) : 
                1.0f)));
    return pred;
  } // constant pool size = 62B, number of visited nodes = 15, static init size = 0B
}

class log_drf_1_Tree_15_class_32 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.26757812f ? 
         (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.23535156f ? 
             (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.19140625f ? 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.46875f ? 
                    0.0f : 
                     (data[3 /* no_of_ips */] <0.5f ? 
                        0.013222191f : 
                        0.0f)) : 
                 (data[10 /* 9_letter_word */] <0.21035767f ? 
                     (data[5 /* 4_letter_word */] <0.296875f ? 
                        0.102564104f : 
                        0.0f) : 
                     (data[2 /* no_of_characters */] <100.5f ? 
                        0.20725389f : 
                        0.0f))) : 
             (data[2 /* no_of_characters */] <115.5f ? 
                 (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.12542725f ? 
                    0.0f : 
                    1.0f) : 
                0.0f)) : 
         (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.31640625f ? 
            0.0f : 
             (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.41685268f ? 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <25.5f ? 
                    0.0f : 
                     (data[0 /* vlan */] <32.5f ? 
                        0.14285715f : 
                        0.0f)) : 
                0.0f)));
    return pred;
  } // constant pool size = 58B, number of visited nodes = 14, static init size = 0B
}

class log_drf_1_Tree_15_class_33 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[4]) || data[4 /* no_of_macs */] <1.5f ? 
         (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.40820312f ? 
             (data[8 /* 7_letter_word */] <0.25976562f ? 
                 (data[0 /* vlan */] <9.5f ? 
                     (data[9 /* 8_letter_word */] <0.125f ? 
                        1.0f : 
                        0.030303031f) : 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.4453125f ? 
                        2.61233E-4f : 
                        0.0024437928f)) : 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.69060516f ? 
                     (data[2 /* no_of_characters */] <100.5f ? 
                        0.0037523452f : 
                        6.817794E-5f) : 
                    0.0f)) : 
             (data[0 /* vlan */] <7.5f ? 
                 (data[7 /* 6_letter_word */] <0.25f ? 
                    0.0f : 
                    1.0f) : 
                 (data[0 /* vlan */] <16.0f ? 
                     (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
                        0.0f : 
                        0.6335878f) : 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.234375f ? 
                        2.1511545E-4f : 
                        0.007240547f)))) : 
         (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.045898438f ? 
            0.0f : 
             (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.099609375f ? 
                 (data[3 /* no_of_ips */] <0.5f ? 
                    0.0f : 
                    1.0f) : 
                0.0f)));
    return pred;
  } // constant pool size = 66B, number of visited nodes = 16, static init size = 0B
}

class log_drf_1_Tree_15_class_34 {
  static final double score0(double[] data) {
    double pred =     1.0E-5f;
    return pred;
  } // constant pool size = 2B, number of visited nodes = 0, static init size = 0B
}

class log_drf_1_Tree_15_class_35 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.8745117f ? 
         (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
            0.0f : 
             (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.01953125f ? 
                 (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.7734375f ? 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.1875f ? 
                        5.0975825E-4f : 
                        0.0f) : 
                    0.0f) : 
                0.0f)) : 
        0.0013287271f);
    return pred;
  } // constant pool size = 22B, number of visited nodes = 5, static init size = 0B
}

class log_drf_1_Tree_15_class_36 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.1616211f ? 
        0.0f : 
         (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.4951172f ? 
            0.0f : 
             (data[9 /* 8_letter_word */] <0.17472076f ? 
                 (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.0859375f ? 
                    0.0f : 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.0859375f ? 
                        0.84615386f : 
                        0.0f)) : 
                0.0f)));
    return pred;
  } // constant pool size = 22B, number of visited nodes = 5, static init size = 0B
}

class log_drf_1_Tree_15_class_37 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.29296875f ? 
         (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
             (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.05078125f ? 
                 (data[8 /* 7_letter_word */] <0.2578125f ? 
                     (data[1 /* type_of_time */] <3.5f ? 
                        0.27098322f : 
                        0.99911505f) : 
                     (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <2.5f ? 
                        0.9969402f : 
                        0.0f)) : 
                 (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <1.0f ? 
                     (data[10 /* 9_letter_word */] <0.22875977f ? 
                        0.9688249f : 
                        1.0f) : 
                    0.0f)) : 
             (data[5 /* 4_letter_word */] <0.03125f ? 
                 (data[2 /* no_of_characters */] <70.5f ? 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.5f ? 
                        0.10989011f : 
                        0.0f) : 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.03125f ? 
                        0.0042928834f : 
                        8.501336E-4f)) : 
                 (data[2 /* no_of_characters */] <80.5f ? 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <76.5f ? 
                        0.0f : 
                        0.11111111f) : 
                    0.0f))) : 
         (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.05078125f ? 
             (data[9 /* 8_letter_word */] <0.36699218f ? 
                 (data[1 /* type_of_time */] <4.5f ? 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <210.5f ? 
                        0.24293785f : 
                        1.0f) : 
                    0.0f) : 
                 (data[1 /* type_of_time */] <4.5f ? 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.1015625f ? 
                        0.4532374f : 
                        1.0f) : 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.8318573f ? 
                        0.0f : 
                        4.222973E-4f))) : 
             (data[1 /* type_of_time */] <4.5f ? 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <240.5f ? 
                    1.0f : 
                     (data[9 /* 8_letter_word */] <0.453125f ? 
                        1.0f : 
                        0.99115044f)) : 
                0.0f)));
    return pred;
  } // constant pool size = 98B, number of visited nodes = 24, static init size = 0B
}

class log_drf_1_Tree_15_class_38 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.44970703f ? 
         (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.93652344f ? 
            0.0f : 
            1.3745704E-4f) : 
        8.145976E-5f);
    return pred;
  } // constant pool size = 10B, number of visited nodes = 2, static init size = 0B
}


class log_drf_1_Forest_16 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += log_drf_1_Tree_16_class_0.score0(fdata);
    preds[2] += log_drf_1_Tree_16_class_1.score0(fdata);
    preds[3] += log_drf_1_Tree_16_class_2.score0(fdata);
    preds[4] += log_drf_1_Tree_16_class_3.score0(fdata);
    preds[5] += log_drf_1_Tree_16_class_4.score0(fdata);
    preds[6] += log_drf_1_Tree_16_class_5.score0(fdata);
    preds[7] += log_drf_1_Tree_16_class_6.score0(fdata);
    preds[8] += log_drf_1_Tree_16_class_7.score0(fdata);
    preds[9] += log_drf_1_Tree_16_class_8.score0(fdata);
    preds[10] += log_drf_1_Tree_16_class_9.score0(fdata);
    preds[11] += log_drf_1_Tree_16_class_10.score0(fdata);
    preds[12] += log_drf_1_Tree_16_class_11.score0(fdata);
    preds[13] += log_drf_1_Tree_16_class_12.score0(fdata);
    preds[14] += log_drf_1_Tree_16_class_13.score0(fdata);
    preds[15] += log_drf_1_Tree_16_class_14.score0(fdata);
    preds[16] += log_drf_1_Tree_16_class_15.score0(fdata);
    preds[17] += log_drf_1_Tree_16_class_16.score0(fdata);
    preds[18] += log_drf_1_Tree_16_class_17.score0(fdata);
    preds[19] += log_drf_1_Tree_16_class_18.score0(fdata);
    preds[20] += log_drf_1_Tree_16_class_19.score0(fdata);
    preds[21] += log_drf_1_Tree_16_class_20.score0(fdata);
    preds[22] += log_drf_1_Tree_16_class_21.score0(fdata);
    preds[23] += log_drf_1_Tree_16_class_22.score0(fdata);
    preds[24] += log_drf_1_Tree_16_class_23.score0(fdata);
    preds[25] += log_drf_1_Tree_16_class_24.score0(fdata);
    preds[26] += log_drf_1_Tree_16_class_25.score0(fdata);
    preds[27] += log_drf_1_Tree_16_class_26.score0(fdata);
    preds[28] += log_drf_1_Tree_16_class_27.score0(fdata);
    preds[29] += log_drf_1_Tree_16_class_28.score0(fdata);
    preds[30] += log_drf_1_Tree_16_class_29.score0(fdata);
    preds[31] += log_drf_1_Tree_16_class_30.score0(fdata);
    preds[32] += log_drf_1_Tree_16_class_31.score0(fdata);
    preds[33] += log_drf_1_Tree_16_class_32.score0(fdata);
    preds[34] += log_drf_1_Tree_16_class_33.score0(fdata);
    preds[35] += log_drf_1_Tree_16_class_34.score0(fdata);
    preds[36] += log_drf_1_Tree_16_class_35.score0(fdata);
    preds[37] += log_drf_1_Tree_16_class_36.score0(fdata);
    preds[38] += log_drf_1_Tree_16_class_37.score0(fdata);
    preds[39] += log_drf_1_Tree_16_class_38.score0(fdata);
  }
}
class log_drf_1_Tree_16_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[15]) || data[15 /* 14_letter_word */] <0.013183594f ? 
         (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <1040.0f ? 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <532.5f ? 
                 (Double.isNaN(data[4]) || data[4 /* no_of_macs */] <0.5f ? 
                    0.0f : 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.1171875f ? 
                        0.0f : 
                        0.0052253427f)) : 
                 (Double.isNaN(data[12]) || data[12 /* 11_letter_word */] <0.01171875f ? 
                     (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.015625f ? 
                        0.0021008404f : 
                        0.27586207f) : 
                     (data[4 /* no_of_macs */] <0.5f ? 
                        0.0f : 
                        1.0f))) : 
             (data[11 /* 10_letter_word */] <0.02734375f ? 
                0.0f : 
                1.0f)) : 
         (Double.isNaN(data[12]) || data[12 /* 11_letter_word */] <0.009765625f ? 
            0.0f : 
             (data[8 /* 7_letter_word */] <0.044921875f ? 
                0.0f : 
                1.0f)));
    return pred;
  } // constant pool size = 46B, number of visited nodes = 11, static init size = 0B
}

class log_drf_1_Tree_16_class_1 {
  static final double score0(double[] data) {
    double pred =      (data[8 /* 7_letter_word */] <0.23925781f ? 
        0.0f : 
         (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <260.5f ? 
             (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                0.0f : 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <137.5f ? 
                    0.0f : 
                     (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
                        0.0f : 
                        0.6666667f))) : 
             (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.13330078f ? 
                0.0f : 
                 (data[2 /* no_of_characters */] <293.5f ? 
                     (data[8 /* 7_letter_word */] <0.3165207f ? 
                        0.07317073f : 
                        0.9400749f) : 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <356.5f ? 
                        0.0f : 
                        0.5f)))));
    return pred;
  } // constant pool size = 38B, number of visited nodes = 9, static init size = 0B
}

class log_drf_1_Tree_16_class_2 {
  static final double score0(double[] data) {
    double pred =      (data[8 /* 7_letter_word */] <0.16992188f ? 
         (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.48046875f ? 
             (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.5800781f ? 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.13368988f ? 
                    0.0f : 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.1632843f ? 
                        0.0031710798f : 
                        0.077586204f)) : 
                 (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.22521973f ? 
                     (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                        0.020444978f : 
                        0.22077923f) : 
                     (data[1 /* type_of_time */] <4.5f ? 
                        0.0f : 
                        0.23529412f))) : 
             (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <1.5f ? 
                 (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.025390625f ? 
                     (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                        0.028001036f : 
                        0.10630194f) : 
                    0.0f) : 
                0.0f)) : 
         (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.13378906f ? 
             (data[8 /* 7_letter_word */] <0.20721054f ? 
                 (data[2 /* no_of_characters */] <230.5f ? 
                     (data[9 /* 8_letter_word */] <0.296875f ? 
                        0.009433962f : 
                        0.0f) : 
                    0.0f) : 
                0.0f) : 
             (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.46289062f ? 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <759.5f ? 
                     (data[7 /* 6_letter_word */] <0.15304565f ? 
                        0.007915568f : 
                        0.0017004737f) : 
                     (data[6 /* 5_letter_word */] <0.1640625f ? 
                        0.5f : 
                        1.0f)) : 
                0.13235295f)));
    return pred;
  } // constant pool size = 78B, number of visited nodes = 19, static init size = 0B
}

class log_drf_1_Tree_16_class_3 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.29296875f ? 
         (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.4921875f ? 
             (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.1484375f ? 
                 (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <1.5f ? 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.13336182f ? 
                        0.0096113f : 
                        0.8518519f) : 
                    0.0f) : 
                 (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.23828125f ? 
                    0.0f : 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.053833008f ? 
                        6.2150403E-4f : 
                        0.0f))) : 
             (data[2 /* no_of_characters */] <140.5f ? 
                0.0f : 
                 (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.02734375f ? 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.3203125f ? 
                        0.027453456f : 
                        0.8348774f) : 
                    0.0f))) : 
        0.0f);
    return pred;
  } // constant pool size = 42B, number of visited nodes = 10, static init size = 0B
}

class log_drf_1_Tree_16_class_4 {
  static final double score0(double[] data) {
    double pred =      (data[8 /* 7_letter_word */] <0.12402344f ? 
         (data[2 /* no_of_characters */] <118.5f ? 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <117.5f ? 
                1.2867253E-4f : 
                 (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <81.5f ? 
                        0.008583691f : 
                        0.0f) : 
                    0.0f)) : 
            0.0f) : 
         (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.42285156f ? 
             (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.29101562f ? 
                0.0f : 
                 (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.16796875f ? 
                    0.0f : 
                    0.96f)) : 
             (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.26757812f ? 
                0.0f : 
                0.3125f)));
    return pred;
  } // constant pool size = 38B, number of visited nodes = 9, static init size = 0B
}

class log_drf_1_Tree_16_class_5 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.3540039f ? 
         (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.27929688f ? 
             (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.47070312f ? 
                0.0f : 
                 (data[3 /* no_of_ips */] <0.5f ? 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.21875f ? 
                        0.0f : 
                        0.00672043f) : 
                    0.0f)) : 
             (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.08984375f ? 
                 (data[2 /* no_of_characters */] <148.5f ? 
                     (data[5 /* 4_letter_word */] <0.46510315f ? 
                        0.0047761193f : 
                        9.7190315E-4f) : 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <212.5f ? 
                        0.0f : 
                        4.0741495E-4f)) : 
                 (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.01953125f ? 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <273.5f ? 
                        0.0030924936f : 
                        0.05472637f) : 
                    0.0f))) : 
        0.0f);
    return pred;
  } // constant pool size = 46B, number of visited nodes = 11, static init size = 0B
}

class log_drf_1_Tree_16_class_6 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.26123047f ? 
         (data[2 /* no_of_characters */] <98.5f ? 
             (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.1015625f ? 
                 (Double.isNaN(data[4]) || data[4 /* no_of_macs */] <0.5f ? 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <113.5f ? 
                        0.0013124925f : 
                        0.17867036f) : 
                    0.0f) : 
                 (data[7 /* 6_letter_word */] <0.3121338f ? 
                     (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                        0.97115386f : 
                        0.0f) : 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.1015625f ? 
                        0.10913706f : 
                        0.0f))) : 
             (data[3 /* no_of_ips */] <0.5f ? 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <125.5f ? 
                    0.0f : 
                     (data[0 /* vlan */] <140.5f ? 
                        0.48913044f : 
                        0.0f)) : 
                0.0f)) : 
         (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.045898438f ? 
             (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.91631126f ? 
                0.0f : 
                6.9156295E-4f) : 
            0.0f));
    return pred;
  } // constant pool size = 54B, number of visited nodes = 13, static init size = 0B
}

class log_drf_1_Tree_16_class_7 {
  static final double score0(double[] data) {
    double pred =      (data[8 /* 7_letter_word */] <0.012207031f ? 
         (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.94921875f ? 
            0.0f : 
            0.021107456f) : 
        0.0f);
    return pred;
  } // constant pool size = 10B, number of visited nodes = 2, static init size = 0B
}

class log_drf_1_Tree_16_class_8 {
  static final double score0(double[] data) {
    double pred =      (data[8 /* 7_letter_word */] <0.16992188f ? 
         (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <896.5f ? 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <743.0f ? 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <639.0f ? 
                     (data[6 /* 5_letter_word */] <0.0390625f ? 
                        1.07894266E-4f : 
                        0.0f) : 
                     (data[2 /* no_of_characters */] <668.5f ? 
                        0.03846154f : 
                        0.0f)) : 
                 (data[14 /* 13_letter_word */] <0.01171875f ? 
                     (data[2 /* no_of_characters */] <815.0f ? 
                        0.5f : 
                        0.0f) : 
                    0.0f)) : 
             (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <3.5f ? 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <1024.5f ? 
                     (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.01850329f ? 
                        0.969697f : 
                        0.0f) : 
                    0.0f) : 
                 (data[6 /* 5_letter_word */] <0.4296875f ? 
                     (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.16666667f ? 
                        0.25641027f : 
                        0.0f) : 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.4140625f ? 
                        0.0f : 
                        0.055555556f)))) : 
        9.676514E-6f);
    return pred;
  } // constant pool size = 58B, number of visited nodes = 14, static init size = 0B
}

class log_drf_1_Tree_16_class_9 {
  static final double score0(double[] data) {
    double pred =      (data[8 /* 7_letter_word */] <0.20703125f ? 
         (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <138.5f ? 
             (data[1 /* type_of_time */] <3.5f ? 
                 (data[1 /* type_of_time */] <2.5f ? 
                    0.0f : 
                    1.0f) : 
                0.0f) : 
             (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.234375f ? 
                 (data[1 /* type_of_time */] <3.5f ? 
                     (data[9 /* 8_letter_word */] <0.1796875f ? 
                        0.35357141f : 
                        0.99312717f) : 
                    0.0f) : 
                 (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.26727295f ? 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <130.0f ? 
                        0.0f : 
                        0.86806285f) : 
                    0.0f))) : 
         (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.41601562f ? 
             (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.29169846f ? 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <190.5f ? 
                    0.0f : 
                     (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <4.5f ? 
                        0.0f : 
                        0.042735044f)) : 
                 (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <3.0f ? 
                    0.0f : 
                    1.0f)) : 
             (data[3 /* no_of_ips */] <2.0f ? 
                0.0f : 
                1.0f)));
    return pred;
  } // constant pool size = 62B, number of visited nodes = 15, static init size = 0B
}

class log_drf_1_Tree_16_class_10 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.6455078f ? 
         (data[2 /* no_of_characters */] <113.5f ? 
             (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.44921875f ? 
                0.0f : 
                 (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.5826111f ? 
                        0.0016835016f : 
                        0.0f) : 
                    0.0f)) : 
            0.0f) : 
        1.9151585E-4f);
    return pred;
  } // constant pool size = 22B, number of visited nodes = 5, static init size = 0B
}

class log_drf_1_Tree_16_class_11 {
  static final double score0(double[] data) {
    double pred =     5.0E-6f;
    return pred;
  } // constant pool size = 2B, number of visited nodes = 0, static init size = 0B
}

class log_drf_1_Tree_16_class_12 {
  static final double score0(double[] data) {
    double pred =      (data[8 /* 7_letter_word */] <0.012207031f ? 
         (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <424.0f ? 
            0.0f : 
             (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.83203125f ? 
                 (data[6 /* 5_letter_word */] <0.05859375f ? 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.16666667f ? 
                        0.0f : 
                        0.875f) : 
                    0.0f) : 
                0.9444444f)) : 
        0.0f);
    return pred;
  } // constant pool size = 22B, number of visited nodes = 5, static init size = 0B
}

class log_drf_1_Tree_16_class_13 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.26123047f ? 
         (data[2 /* no_of_characters */] <54.5f ? 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <36.5f ? 
                 (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.125f ? 
                    0.9832636f : 
                    1.0f) : 
                 (data[6 /* 5_letter_word */] <0.125f ? 
                    0.0f : 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.29101562f ? 
                        1.0f : 
                        0.0f))) : 
             (data[3 /* no_of_ips */] <0.5f ? 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.19184113f ? 
                     (data[2 /* no_of_characters */] <76.5f ? 
                        6.365372E-4f : 
                        4.0443258E-5f) : 
                     (data[2 /* no_of_characters */] <95.5f ? 
                        0.8666667f : 
                        0.0f)) : 
                0.0f)) : 
        2.0268148E-5f);
    return pred;
  } // constant pool size = 42B, number of visited nodes = 10, static init size = 0B
}

class log_drf_1_Tree_16_class_14 {
  static final double score0(double[] data) {
    double pred =      (data[8 /* 7_letter_word */] <0.20703125f ? 
         (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <173.5f ? 
            0.0f : 
             (Double.isNaN(data[12]) || data[12 /* 11_letter_word */] <0.18359375f ? 
                 (data[7 /* 6_letter_word */] <0.20703125f ? 
                     (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.18359375f ? 
                        0.0f : 
                        0.006048387f) : 
                    0.0f) : 
                 (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.1015625f ? 
                    0.0f : 
                    0.9f))) : 
        0.0f);
    return pred;
  } // constant pool size = 26B, number of visited nodes = 6, static init size = 0B
}

class log_drf_1_Tree_16_class_15 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.26123047f ? 
         (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.94921875f ? 
             (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.59375f ? 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.32006836f ? 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <65.5f ? 
                        3.1851192E-5f : 
                        0.0038672544f) : 
                     (data[6 /* 5_letter_word */] <0.1015625f ? 
                        0.0334011f : 
                        9.397392E-4f)) : 
                 (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.1816864f ? 
                     (data[1 /* type_of_time */] <4.5f ? 
                        0.0f : 
                        0.031521738f) : 
                     (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <1.5f ? 
                        0.021052632f : 
                        0.93333334f))) : 
             (data[3 /* no_of_ips */] <1.5f ? 
                0.0f : 
                 (Double.isNaN(data[4]) || data[4 /* no_of_macs */] <0.5f ? 
                    0.12754491f : 
                    0.0f))) : 
         (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.5830078f ? 
             (data[8 /* 7_letter_word */] <0.47189522f ? 
                 (Double.isNaN(data[15]) || data[15 /* 14_letter_word */] <0.10546875f ? 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.18674469f ? 
                        0.0f : 
                        0.0063630273f) : 
                     (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.0625f ? 
                        0.0f : 
                        0.07692308f)) : 
                0.0f) : 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <89.5f ? 
                0.0f : 
                0.8032787f)));
    return pred;
  } // constant pool size = 70B, number of visited nodes = 17, static init size = 0B
}

class log_drf_1_Tree_16_class_16 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.52734375f ? 
         (data[2 /* no_of_characters */] <113.5f ? 
             (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.083984375f ? 
                 (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.41610718f ? 
                        4.524887E-4f : 
                        0.005f) : 
                    0.0f) : 
                 (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.0859375f ? 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.3671875f ? 
                        0.004010695f : 
                        0.0f) : 
                    0.0f)) : 
             (data[2 /* no_of_characters */] <159.5f ? 
                 (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.2890625f ? 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <156.0f ? 
                        3.3497472E-5f : 
                        4.9115915E-4f) : 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <148.0f ? 
                        0.0f : 
                        0.0032258064f)) : 
                0.0f)) : 
        0.0f);
    return pred;
  } // constant pool size = 46B, number of visited nodes = 11, static init size = 0B
}

class log_drf_1_Tree_16_class_17 {
  static final double score0(double[] data) {
    double pred =      (data[8 /* 7_letter_word */] <0.122558594f ? 
         (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <659.0f ? 
             (data[1 /* type_of_time */] <2.5f ? 
                 (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.16796875f ? 
                     (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                        0.009615385f : 
                        0.0f) : 
                    0.0f) : 
                0.0f) : 
             (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <3.5f ? 
                 (data[2 /* no_of_characters */] <717.0f ? 
                    0.99264705f : 
                     (data[6 /* 5_letter_word */] <0.125f ? 
                        0.06557377f : 
                        0.0f)) : 
                 (data[6 /* 5_letter_word */] <0.4296875f ? 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.4375f ? 
                        0.975f : 
                        0.18181819f) : 
                     (data[2 /* no_of_characters */] <1016.5f ? 
                        0.96f : 
                        1.0f)))) : 
         (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.036132812f ? 
             (data[8 /* 7_letter_word */] <0.3539152f ? 
                 (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.04296875f ? 
                     (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <3.5f ? 
                        0.0f : 
                        0.95454544f) : 
                    0.0f) : 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <879.0f ? 
                    0.0f : 
                    0.25f)) : 
            0.0f));
    return pred;
  } // constant pool size = 66B, number of visited nodes = 16, static init size = 0B
}

class log_drf_1_Tree_16_class_18 {
  static final double score0(double[] data) {
    double pred =     5.0E-6f;
    return pred;
  } // constant pool size = 2B, number of visited nodes = 0, static init size = 0B
}

class log_drf_1_Tree_16_class_19 {
  static final double score0(double[] data) {
    double pred =      (data[8 /* 7_letter_word */] <0.012207031f ? 
         (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.24023438f ? 
            0.0f : 
             (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.24023438f ? 
                0.0f : 
                 (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.22265625f ? 
                    0.0f : 
                    0.93065184f))) : 
        1.9085972E-5f);
    return pred;
  } // constant pool size = 18B, number of visited nodes = 4, static init size = 0B
}

class log_drf_1_Tree_16_class_20 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.26123047f ? 
         (data[2 /* no_of_characters */] <88.5f ? 
             (data[2 /* no_of_characters */] <70.5f ? 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.125f ? 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <63.0f ? 
                        0.0f : 
                        0.54545456f) : 
                    0.0f) : 
                 (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.58203125f ? 
                     (data[1 /* type_of_time */] <4.5f ? 
                        0.0f : 
                        0.9289557f) : 
                     (data[2 /* no_of_characters */] <72.5f ? 
                        1.0f : 
                        0.0022675737f))) : 
             (data[3 /* no_of_ips */] <0.5f ? 
                 (data[5 /* 4_letter_word */] <0.05078125f ? 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.21875f ? 
                        0.66097593f : 
                        0.7240134f) : 
                     (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.15625f ? 
                        0.3310872f : 
                        0.100764416f)) : 
                 (data[2 /* no_of_characters */] <116.5f ? 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.7421875f ? 
                        0.0f : 
                        1.8328446E-4f) : 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.828125f ? 
                        0.018501468f : 
                        1.0f)))) : 
         (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.3095703f ? 
             (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.29101562f ? 
                 (data[0 /* vlan */] <25.5f ? 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.578125f ? 
                        0.92302436f : 
                        0.0019249278f) : 
                    0.0f) : 
                 (data[10 /* 9_letter_word */] <0.16796875f ? 
                     (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.41666666f ? 
                        0.0049261083f : 
                        0.0f) : 
                    1.0f)) : 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <27.5f ? 
                 (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.072265625f ? 
                     (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.171875f ? 
                        0.9910423f : 
                        1.0f) : 
                    0.0f) : 
                0.0f)));
    return pred;
  } // constant pool size = 98B, number of visited nodes = 24, static init size = 0B
}

class log_drf_1_Tree_16_class_21 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.29296875f ? 
         (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <215.5f ? 
             (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.31640625f ? 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.546875f ? 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <191.5f ? 
                        9.112655E-5f : 
                        5.9737155E-4f) : 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.10134888f ? 
                        0.0f : 
                        0.20833333f)) : 
                 (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.2890625f ? 
                     (data[2 /* no_of_characters */] <114.5f ? 
                        0.002719855f : 
                        3.3388982E-4f) : 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.171875f ? 
                        0.008205128f : 
                        0.29166666f))) : 
             (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.2109375f ? 
                 (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.15490723f ? 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.78125f ? 
                        0.0018157974f : 
                        0.1570248f) : 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.4453125f ? 
                        0.0f : 
                        0.32394367f)) : 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <224.5f ? 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.2890625f ? 
                        0.98888886f : 
                        0.0f) : 
                    0.0f))) : 
         (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.05078125f ? 
             (Double.isNaN(data[13]) || data[13 /* 12_letter_word */] <0.1015625f ? 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <260.5f ? 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.0625f ? 
                        0.0014333853f : 
                        1.5414259E-4f) : 
                     (data[2 /* no_of_characters */] <272.5f ? 
                        0.036608864f : 
                        0.0012861736f)) : 
                 (data[13 /* 12_letter_word */] <0.34902954f ? 
                    1.0f : 
                    0.0f)) : 
             (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.234375f ? 
                0.0f : 
                 (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.05078125f ? 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.26730347f ? 
                        0.0015649452f : 
                        0.0f) : 
                    0.0f))));
    return pred;
  } // constant pool size = 98B, number of visited nodes = 24, static init size = 0B
}

class log_drf_1_Tree_16_class_22 {
  static final double score0(double[] data) {
    double pred =      (data[8 /* 7_letter_word */] <0.16992188f ? 
         (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.15527344f ? 
            0.0f : 
             (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.171875f ? 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.16046143f ? 
                     (data[0 /* vlan */] <17.5f ? 
                        0.0016713092f : 
                        5.9210135E-5f) : 
                     (data[5 /* 4_letter_word */] <0.21466827f ? 
                        0.09090909f : 
                        0.0f)) : 
                0.0f)) : 
        0.0f);
    return pred;
  } // constant pool size = 26B, number of visited nodes = 6, static init size = 0B
}

class log_drf_1_Tree_16_class_23 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.3540039f ? 
         (data[5 /* 4_letter_word */] <0.13378906f ? 
             (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.58203125f ? 
                 (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.1171875f ? 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <240.5f ? 
                        5.328029E-4f : 
                        0.046860356f) : 
                     (data[0 /* vlan */] <17.5f ? 
                        0.98570067f : 
                        0.0f)) : 
                 (data[1 /* type_of_time */] <4.5f ? 
                    0.0f : 
                     (data[9 /* 8_letter_word */] <0.8302002f ? 
                        0.9829384f : 
                        0.4398305f))) : 
             (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.13671875f ? 
                 (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.140625f ? 
                    0.0f : 
                     (data[6 /* 5_letter_word */] <0.15092774f ? 
                        0.024590164f : 
                        5.7550646E-5f)) : 
                 (Double.isNaN(data[12]) || data[12 /* 11_letter_word */] <0.05859375f ? 
                     (data[10 /* 9_letter_word */] <0.15234375f ? 
                        0.030303031f : 
                        0.0f) : 
                     (Double.isNaN(data[1]) || data[1 /* type_of_time */] <3.5f ? 
                        0.0f : 
                        1.0f)))) : 
         (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.05078125f ? 
             (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.5268583f ? 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <190.5f ? 
                     (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                        8.141334E-4f : 
                        0.0f) : 
                    0.0f) : 
                0.0f) : 
            0.0f));
    return pred;
  } // constant pool size = 74B, number of visited nodes = 18, static init size = 0B
}

class log_drf_1_Tree_16_class_24 {
  static final double score0(double[] data) {
    double pred =      (data[8 /* 7_letter_word */] <0.012207031f ? 
         (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.9736328f ? 
            0.0f : 
            3.3021465E-4f) : 
        0.0f);
    return pred;
  } // constant pool size = 10B, number of visited nodes = 2, static init size = 0B
}

class log_drf_1_Tree_16_class_25 {
  static final double score0(double[] data) {
    double pred =      (data[8 /* 7_letter_word */] <0.14404297f ? 
         (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.94921875f ? 
             (data[1 /* type_of_time */] <4.5f ? 
                0.0f : 
                 (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <1.5f ? 
                     (Double.isNaN(data[12]) || data[12 /* 11_letter_word */] <0.4140625f ? 
                        0.09340901f : 
                        0.95710456f) : 
                     (data[7 /* 6_letter_word */] <0.1328125f ? 
                        0.97306573f : 
                        0.37643608f))) : 
             (data[3 /* no_of_ips */] <0.5f ? 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <33.5f ? 
                    0.0f : 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <65.0f ? 
                        1.0f : 
                        0.0f)) : 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <33.5f ? 
                     (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <2.5f ? 
                        0.8650249f : 
                        1.0f) : 
                    0.0f))) : 
         (Double.isNaN(data[12]) || data[12 /* 11_letter_word */] <0.12207031f ? 
             (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.26757812f ? 
                 (Double.isNaN(data[4]) || data[4 /* no_of_macs */] <0.5f ? 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.6328125f ? 
                        0.020713575f : 
                        0.70434785f) : 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.041015625f ? 
                        1.0f : 
                        0.0f)) : 
                 (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.36914062f ? 
                        0.007260002f : 
                        0.3108108f) : 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.046875f ? 
                        0.8165075f : 
                        0.19508196f))) : 
             (data[3 /* no_of_ips */] <0.5f ? 
                0.0f : 
                1.0f)));
    return pred;
  } // constant pool size = 82B, number of visited nodes = 20, static init size = 0B
}

class log_drf_1_Tree_16_class_26 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.31689453f ? 
        0.0f : 
         (data[2 /* no_of_characters */] <59.5f ? 
            0.9663677f : 
            0.0f));
    return pred;
  } // constant pool size = 10B, number of visited nodes = 2, static init size = 0B
}

class log_drf_1_Tree_16_class_27 {
  static final double score0(double[] data) {
    double pred =     1.0E-5f;
    return pred;
  } // constant pool size = 2B, number of visited nodes = 0, static init size = 0B
}

class log_drf_1_Tree_16_class_28 {
  static final double score0(double[] data) {
    double pred =      (data[8 /* 7_letter_word */] <0.012207031f ? 
         (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <447.5f ? 
            0.0f : 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <539.5f ? 
                 (data[6 /* 5_letter_word */] <0.07421875f ? 
                    0.0f : 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <17.5f ? 
                        1.0f : 
                        0.0f)) : 
                 (data[0 /* vlan */] <17.5f ? 
                    1.0f : 
                    0.0f))) : 
         (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.13378906f ? 
            0.0f : 
             (data[0 /* vlan */] <19.5f ? 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <435.0f ? 
                    0.0f : 
                     (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.013020833f ? 
                        1.0f : 
                        0.5f)) : 
                0.0f)));
    return pred;
  } // constant pool size = 42B, number of visited nodes = 10, static init size = 0B
}

class log_drf_1_Tree_16_class_29 {
  static final double score0(double[] data) {
    double pred =      (data[8 /* 7_letter_word */] <0.04296875f ? 
         (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <958.5f ? 
             (Double.isNaN(data[12]) || data[12 /* 11_letter_word */] <0.025390625f ? 
                 (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.18359375f ? 
                    0.0f : 
                     (data[1 /* type_of_time */] <4.5f ? 
                        0.0f : 
                        3.3783785E-4f)) : 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <293.0f ? 
                    0.0f : 
                    0.5f)) : 
             (data[2 /* no_of_characters */] <962.5f ? 
                1.0f : 
                 (data[0 /* vlan */] <158.0f ? 
                    0.07692308f : 
                    0.0f))) : 
        0.0f);
    return pred;
  } // constant pool size = 34B, number of visited nodes = 8, static init size = 0B
}

class log_drf_1_Tree_16_class_30 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.3540039f ? 
         (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <203.5f ? 
             (data[1 /* type_of_time */] <2.5f ? 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <193.5f ? 
                    0.0f : 
                    0.5f) : 
                0.0f) : 
             (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.29101562f ? 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <174.5f ? 
                    0.0f : 
                     (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.19552612f ? 
                        0.114754096f : 
                        1.0f)) : 
                 (data[2 /* no_of_characters */] <229.5f ? 
                    0.0f : 
                     (data[1 /* type_of_time */] <2.5f ? 
                        1.0f : 
                        0.0f)))) : 
        1.13114176E-4f);
    return pred;
  } // constant pool size = 38B, number of visited nodes = 9, static init size = 0B
}

class log_drf_1_Tree_16_class_31 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[15]) || data[15 /* 14_letter_word */] <0.22485352f ? 
         (data[2 /* no_of_characters */] <113.5f ? 
             (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.083984375f ? 
                 (Double.isNaN(data[13]) || data[13 /* 12_letter_word */] <0.125f ? 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <65.5f ? 
                        3.7551633E-4f : 
                        0.17292225f) : 
                     (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.171875f ? 
                        1.0f : 
                        0.0f)) : 
                 (data[7 /* 6_letter_word */] <0.22711182f ? 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.0859375f ? 
                        0.96153843f : 
                        0.0f) : 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <65.5f ? 
                        0.0028011205f : 
                        0.47596154f))) : 
             (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.234375f ? 
                 (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
                    0.0f : 
                     (data[6 /* 5_letter_word */] <0.15625f ? 
                        0.005390969f : 
                        1.396323E-4f)) : 
                 (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.44970703f ? 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.078125f ? 
                        0.10410765f : 
                        0.0f) : 
                    0.0f))) : 
         (Double.isNaN(data[12]) || data[12 /* 11_letter_word */] <0.25f ? 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <135.5f ? 
                 (data[5 /* 4_letter_word */] <0.2890625f ? 
                    0.8648649f : 
                    1.0f) : 
                0.0f) : 
            0.0f));
    return pred;
  } // constant pool size = 70B, number of visited nodes = 17, static init size = 0B
}

class log_drf_1_Tree_16_class_32 {
  static final double score0(double[] data) {
    double pred =      (data[8 /* 7_letter_word */] <0.012207031f ? 
         (data[2 /* no_of_characters */] <123.5f ? 
             (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.22460938f ? 
                0.0f : 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <121.5f ? 
                     (data[7 /* 6_letter_word */] <0.2730713f ? 
                        0.34532374f : 
                        0.014258189f) : 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.4453125f ? 
                        0.0f : 
                        0.974359f))) : 
            0.0f) : 
         (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.018554688f ? 
             (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.44921875f ? 
                0.0f : 
                 (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                    0.0f : 
                    1.0f)) : 
            0.0f));
    return pred;
  } // constant pool size = 38B, number of visited nodes = 9, static init size = 0B
}

class log_drf_1_Tree_16_class_33 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.29296875f ? 
         (data[2 /* no_of_characters */] <70.5f ? 
             (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.41601562f ? 
                 (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.2890625f ? 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.125f ? 
                        0.018450184f : 
                        0.0f) : 
                     (data[6 /* 5_letter_word */] <0.66119385f ? 
                        0.26666668f : 
                        0.0f)) : 
                 (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                     (data[5 /* 4_letter_word */] <0.3671875f ? 
                        0.055555556f : 
                        1.0f) : 
                    0.0f)) : 
             (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <2.5f ? 
                 (data[1 /* type_of_time */] <4.5f ? 
                     (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                        2.9686803E-4f : 
                        0.0f) : 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.078125f ? 
                        0.0021694743f : 
                        0.007926678f)) : 
                0.0f)) : 
         (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.15527344f ? 
            0.0f : 
             (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.44921875f ? 
                 (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.0859375f ? 
                     (data[2 /* no_of_characters */] <100.5f ? 
                        0.033707865f : 
                        2.4533857E-4f) : 
                    0.0f) : 
                0.5f)));
    return pred;
  } // constant pool size = 66B, number of visited nodes = 16, static init size = 0B
}

class log_drf_1_Tree_16_class_34 {
  static final double score0(double[] data) {
    double pred =      (data[8 /* 7_letter_word */] <0.16992188f ? 
         (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.32421875f ? 
            0.0f : 
             (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.01953125f ? 
                 (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.30859375f ? 
                    0.0f : 
                     (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.0859375f ? 
                        0.0f : 
                        0.0044444446f)) : 
                0.0f)) : 
        0.0f);
    return pred;
  } // constant pool size = 22B, number of visited nodes = 5, static init size = 0B
}

class log_drf_1_Tree_16_class_35 {
  static final double score0(double[] data) {
    double pred =      (data[8 /* 7_letter_word */] <0.16992188f ? 
         (data[2 /* no_of_characters */] <83.5f ? 
             (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.7480469f ? 
                0.0f : 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <75.5f ? 
                    0.0f : 
                    1.0f)) : 
             (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <1.5f ? 
                 (data[0 /* vlan */] <17.5f ? 
                     (data[2 /* no_of_characters */] <121.5f ? 
                        0.028571429f : 
                        0.001774623f) : 
                    0.0f) : 
                0.0f)) : 
        5.8059086E-5f);
    return pred;
  } // constant pool size = 30B, number of visited nodes = 7, static init size = 0B
}

class log_drf_1_Tree_16_class_36 {
  static final double score0(double[] data) {
    double pred =      (data[8 /* 7_letter_word */] <0.16992188f ? 
         (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.48046875f ? 
            0.0f : 
             (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.01953125f ? 
                 (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.0625f ? 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.15625f ? 
                        0.0f : 
                        0.0032573289f) : 
                    0.0f) : 
                0.0f)) : 
        0.0f);
    return pred;
  } // constant pool size = 22B, number of visited nodes = 5, static init size = 0B
}

class log_drf_1_Tree_16_class_37 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.29296875f ? 
         (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.9736328f ? 
             (data[1 /* type_of_time */] <4.5f ? 
                 (data[1 /* type_of_time */] <3.5f ? 
                     (data[3 /* no_of_ips */] <0.5f ? 
                        0.5480769f : 
                        0.0f) : 
                     (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                        0.9988809f : 
                        0.98245615f)) : 
                 (data[2 /* no_of_characters */] <80.5f ? 
                     (data[5 /* 4_letter_word */] <0.125f ? 
                        0.13318284f : 
                        0.0f) : 
                     (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.015625f ? 
                        4.7175374E-4f : 
                        0.0f))) : 
             (data[3 /* no_of_ips */] <0.5f ? 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <140.5f ? 
                     (data[2 /* no_of_characters */] <75.5f ? 
                        0.0024529845f : 
                        0.11961962f) : 
                     (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
                        1.0f : 
                        0.0f)) : 
                 (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
                    1.0f : 
                    0.0f))) : 
         (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.05078125f ? 
             (data[8 /* 7_letter_word */] <0.46420288f ? 
                 (data[0 /* vlan */] <154.5f ? 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.2890625f ? 
                        4.9975014E-4f : 
                        0.015544041f) : 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <699.5f ? 
                        0.9951441f : 
                        0.08695652f)) : 
                 (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.0859375f ? 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.4140625f ? 
                        0.90827775f : 
                        0.025510205f) : 
                     (data[3 /* no_of_ips */] <0.5f ? 
                        0.3f : 
                        0.0f))) : 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <153.5f ? 
                 (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.14453125f ? 
                    0.0f : 
                     (data[1 /* type_of_time */] <3.5f ? 
                        1.0f : 
                        0.002617801f)) : 
                 (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <3.5f ? 
                     (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                        0.9986413f : 
                        0.94285715f) : 
                    0.0f))));
    return pred;
  } // constant pool size = 110B, number of visited nodes = 27, static init size = 0B
}

class log_drf_1_Tree_16_class_38 {
  static final double score0(double[] data) {
    double pred =      (data[8 /* 7_letter_word */] <0.012207031f ? 
         (data[2 /* no_of_characters */] <93.5f ? 
             (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.41601562f ? 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <89.5f ? 
                    0.0f : 
                     (data[2 /* no_of_characters */] <90.5f ? 
                        0.006756757f : 
                        0.0f)) : 
                 (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                     (data[5 /* 4_letter_word */] <0.125f ? 
                        0.013888889f : 
                        0.0f) : 
                    0.0f)) : 
            0.0f) : 
        0.0f);
    return pred;
  } // constant pool size = 30B, number of visited nodes = 7, static init size = 0B
}


class log_drf_1_Forest_17 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += log_drf_1_Tree_17_class_0.score0(fdata);
    preds[2] += log_drf_1_Tree_17_class_1.score0(fdata);
    preds[3] += log_drf_1_Tree_17_class_2.score0(fdata);
    preds[4] += log_drf_1_Tree_17_class_3.score0(fdata);
    preds[5] += log_drf_1_Tree_17_class_4.score0(fdata);
    preds[6] += log_drf_1_Tree_17_class_5.score0(fdata);
    preds[7] += log_drf_1_Tree_17_class_6.score0(fdata);
    preds[8] += log_drf_1_Tree_17_class_7.score0(fdata);
    preds[9] += log_drf_1_Tree_17_class_8.score0(fdata);
    preds[10] += log_drf_1_Tree_17_class_9.score0(fdata);
    preds[11] += log_drf_1_Tree_17_class_10.score0(fdata);
    preds[12] += log_drf_1_Tree_17_class_11.score0(fdata);
    preds[13] += log_drf_1_Tree_17_class_12.score0(fdata);
    preds[14] += log_drf_1_Tree_17_class_13.score0(fdata);
    preds[15] += log_drf_1_Tree_17_class_14.score0(fdata);
    preds[16] += log_drf_1_Tree_17_class_15.score0(fdata);
    preds[17] += log_drf_1_Tree_17_class_16.score0(fdata);
    preds[18] += log_drf_1_Tree_17_class_17.score0(fdata);
    preds[19] += log_drf_1_Tree_17_class_18.score0(fdata);
    preds[20] += log_drf_1_Tree_17_class_19.score0(fdata);
    preds[21] += log_drf_1_Tree_17_class_20.score0(fdata);
    preds[22] += log_drf_1_Tree_17_class_21.score0(fdata);
    preds[23] += log_drf_1_Tree_17_class_22.score0(fdata);
    preds[24] += log_drf_1_Tree_17_class_23.score0(fdata);
    preds[25] += log_drf_1_Tree_17_class_24.score0(fdata);
    preds[26] += log_drf_1_Tree_17_class_25.score0(fdata);
    preds[27] += log_drf_1_Tree_17_class_26.score0(fdata);
    preds[28] += log_drf_1_Tree_17_class_27.score0(fdata);
    preds[29] += log_drf_1_Tree_17_class_28.score0(fdata);
    preds[30] += log_drf_1_Tree_17_class_29.score0(fdata);
    preds[31] += log_drf_1_Tree_17_class_30.score0(fdata);
    preds[32] += log_drf_1_Tree_17_class_31.score0(fdata);
    preds[33] += log_drf_1_Tree_17_class_32.score0(fdata);
    preds[34] += log_drf_1_Tree_17_class_33.score0(fdata);
    preds[35] += log_drf_1_Tree_17_class_34.score0(fdata);
    preds[36] += log_drf_1_Tree_17_class_35.score0(fdata);
    preds[37] += log_drf_1_Tree_17_class_36.score0(fdata);
    preds[38] += log_drf_1_Tree_17_class_37.score0(fdata);
    preds[39] += log_drf_1_Tree_17_class_38.score0(fdata);
  }
}
class log_drf_1_Tree_17_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <1040.0f ? 
         (Double.isNaN(data[12]) || data[12 /* 11_letter_word */] <0.017578125f ? 
             (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.009765625f ? 
                 (Double.isNaN(data[4]) || data[4 /* no_of_macs */] <0.5f ? 
                    0.0f : 
                     (data[3 /* no_of_ips */] <0.5f ? 
                        1.0f : 
                        0.0f)) : 
                 (Double.isNaN(data[4]) || data[4 /* no_of_macs */] <0.5f ? 
                    0.0f : 
                     (data[10 /* 9_letter_word */] <0.087127686f ? 
                        1.0f : 
                        0.037037037f))) : 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <99.5f ? 
                0.0f : 
                 (data[12 /* 11_letter_word */] <0.040603638f ? 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.15858005f ? 
                        1.0f : 
                        0.0f) : 
                     (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
                        0.0f : 
                        0.07692308f)))) : 
         (data[0 /* vlan */] <113.5f ? 
            0.5f : 
            1.0f));
    return pred;
  } // constant pool size = 50B, number of visited nodes = 12, static init size = 0B
}

class log_drf_1_Tree_17_class_1 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <261.5f ? 
         (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.7080078f ? 
             (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                0.0f : 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.30859375f ? 
                    0.0f : 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <113.5f ? 
                        0.0f : 
                        0.030612245f))) : 
             (data[0 /* vlan */] <151.5f ? 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.125f ? 
                    0.0f : 
                    1.0f) : 
                0.0f)) : 
         (data[7 /* 6_letter_word */] <0.025390625f ? 
             (data[0 /* vlan */] <156.0f ? 
                 (data[3 /* no_of_ips */] <0.5f ? 
                    0.0f : 
                     (data[8 /* 7_letter_word */] <0.265625f ? 
                        0.0f : 
                        0.9605263f)) : 
                0.0f) : 
            0.0f));
    return pred;
  } // constant pool size = 46B, number of visited nodes = 11, static init size = 0B
}

class log_drf_1_Tree_17_class_2 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* no_of_characters */] <158.5f ? 
         (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.15527344f ? 
             (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                 (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.11827469f ? 
                     (data[1 /* type_of_time */] <4.5f ? 
                        0.0f : 
                        0.0150731895f) : 
                     (data[6 /* 5_letter_word */] <0.13383077f ? 
                        1.0f : 
                        0.25925925f)) : 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.44921875f ? 
                    0.0f : 
                     (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <1.5f ? 
                        0.73165387f : 
                        0.0f))) : 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <135.5f ? 
                0.0f : 
                 (data[0 /* vlan */] <149.5f ? 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.265625f ? 
                        0.54545456f : 
                        1.0f) : 
                    0.0f))) : 
         (Double.isNaN(data[0]) || data[0 /* vlan */] <181.5f ? 
             (data[0 /* vlan */] <142.0f ? 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.4609375f ? 
                     (data[3 /* no_of_ips */] <0.5f ? 
                        1.3287271E-4f : 
                        0.0f) : 
                     (data[5 /* 4_letter_word */] <0.0625f ? 
                        0.004385965f : 
                        0.0f)) : 
                0.0f) : 
             (Double.isNaN(data[14]) || data[14 /* 13_letter_word */] <0.100260414f ? 
                 (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.03125f ? 
                     (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                        0.0f : 
                        0.10285714f) : 
                     (data[11 /* 10_letter_word */] <0.29085287f ? 
                        1.0f : 
                        0.0f)) : 
                1.0f)));
    return pred;
  } // constant pool size = 82B, number of visited nodes = 20, static init size = 0B
}

class log_drf_1_Tree_17_class_3 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* no_of_characters */] <158.5f ? 
         (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.3095703f ? 
             (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.22460938f ? 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.05859375f ? 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <146.5f ? 
                        0.0f : 
                        0.002302821f) : 
                    0.0f) : 
                 (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                    0.0f : 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <151.5f ? 
                        0.0f : 
                        0.8726415f))) : 
             (data[0 /* vlan */] <29.5f ? 
                 (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                    0.0f : 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.171875f ? 
                        0.9042316f : 
                        0.0f)) : 
                0.0f)) : 
         (data[0 /* vlan */] <29.5f ? 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <28.5f ? 
                0.0f : 
                1.0f) : 
            0.0f));
    return pred;
  } // constant pool size = 50B, number of visited nodes = 12, static init size = 0B
}

class log_drf_1_Tree_17_class_4 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.3095703f ? 
         (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.12109375f ? 
             (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
                0.0f : 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.46875f ? 
                    0.0f : 
                     (data[2 /* no_of_characters */] <110.5f ? 
                        0.0011890606f : 
                        0.0f))) : 
             (data[0 /* vlan */] <29.5f ? 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.109375f ? 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.234375f ? 
                        0.0f : 
                        3.2169858E-4f) : 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.265625f ? 
                        0.0f : 
                        0.03271028f)) : 
                0.0f)) : 
         (data[0 /* vlan */] <27.5f ? 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <24.5f ? 
                0.0f : 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.5f ? 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.171875f ? 
                        0.0f : 
                        0.962963f) : 
                    0.0f)) : 
            0.0f));
    return pred;
  } // constant pool size = 54B, number of visited nodes = 13, static init size = 0B
}

class log_drf_1_Tree_17_class_5 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.07470703f ? 
         (Double.isNaN(data[12]) || data[12 /* 11_letter_word */] <0.29101562f ? 
             (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
                0.0f : 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <33.5f ? 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.109375f ? 
                        0.0f : 
                        8.6415486E-5f) : 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.2578125f ? 
                        0.0020537714f : 
                        0.014139827f))) : 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <35.5f ? 
                0.0f : 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <200.5f ? 
                    0.0f : 
                     (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
                        0.0f : 
                        0.6666667f)))) : 
         (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.13378906f ? 
            0.0f : 
             (data[10 /* 9_letter_word */] <0.08012867f ? 
                 (data[2 /* no_of_characters */] <250.5f ? 
                    1.0f : 
                    0.0f) : 
                 (data[0 /* vlan */] <37.0f ? 
                     (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                        0.0073375264f : 
                        0.0f) : 
                    0.0f))));
    return pred;
  } // constant pool size = 58B, number of visited nodes = 14, static init size = 0B
}

class log_drf_1_Tree_17_class_6 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* no_of_characters */] <98.5f ? 
         (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.10058594f ? 
             (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                 (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.2890625f ? 
                     (data[2 /* no_of_characters */] <69.5f ? 
                        0.037783377f : 
                        0.0016155089f) : 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <113.5f ? 
                        0.018217627f : 
                        0.9932432f)) : 
                0.0f) : 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <109.5f ? 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <92.5f ? 
                    0.0f : 
                    0.9166667f) : 
                0.97959185f)) : 
         (data[0 /* vlan */] <133.5f ? 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <132.0f ? 
                0.0f : 
                 (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                     (data[9 /* 8_letter_word */] <0.15625f ? 
                        0.0f : 
                        1.0f) : 
                    0.0f)) : 
            0.0f));
    return pred;
  } // constant pool size = 50B, number of visited nodes = 12, static init size = 0B
}

class log_drf_1_Tree_17_class_7 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* no_of_characters */] <154.5f ? 
         (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.05078125f ? 
             (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                 (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.8984375f ? 
                    0.0f : 
                    0.0015948963f) : 
                0.0f) : 
            0.0f) : 
         (Double.isNaN(data[0]) || data[0 /* vlan */] <185.5f ? 
            0.0f : 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <593.0f ? 
                1.0f : 
                0.0f)));
    return pred;
  } // constant pool size = 26B, number of visited nodes = 6, static init size = 0B
}

class log_drf_1_Tree_17_class_8 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <900.5f ? 
         (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.03125f ? 
             (data[1 /* type_of_time */] <4.5f ? 
                0.0f : 
                 (data[5 /* 4_letter_word */] <0.0625f ? 
                     (Double.isNaN(data[4]) || data[4 /* no_of_macs */] <0.5f ? 
                        2.4717295E-4f : 
                        0.0f) : 
                    0.0f)) : 
            0.0f) : 
         (data[0 /* vlan */] <173.5f ? 
            0.0f : 
             (data[3 /* no_of_ips */] <3.5f ? 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <181.5f ? 
                    1.0f : 
                    0.0f) : 
                 (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <4.5f ? 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.171875f ? 
                        0.014925373f : 
                        0.0f) : 
                    1.0f))));
    return pred;
  } // constant pool size = 42B, number of visited nodes = 10, static init size = 0B
}

class log_drf_1_Tree_17_class_9 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.095703125f ? 
         (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.3095703f ? 
             (data[1 /* type_of_time */] <3.5f ? 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.22265625f ? 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.2890625f ? 
                        0.1291866f : 
                        0.75f) : 
                     (data[0 /* vlan */] <178.5f ? 
                        0.074074075f : 
                        0.0f)) : 
                0.0f) : 
             (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <3.5f ? 
                 (data[3 /* no_of_ips */] <2.5f ? 
                    0.0f : 
                     (data[1 /* type_of_time */] <4.0f ? 
                        1.0f : 
                        0.0f)) : 
                1.0f)) : 
         (Double.isNaN(data[0]) || data[0 /* vlan */] <150.5f ? 
            0.0f : 
             (data[0 /* vlan */] <164.5f ? 
                 (data[3 /* no_of_ips */] <2.5f ? 
                    0.9767442f : 
                    1.0f) : 
                 (data[1 /* type_of_time */] <3.5f ? 
                     (Double.isNaN(data[1]) || data[1 /* type_of_time */] <2.0f ? 
                        0.0f : 
                        1.0f) : 
                    0.0f))));
    return pred;
  } // constant pool size = 58B, number of visited nodes = 14, static init size = 0B
}

class log_drf_1_Tree_17_class_10 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* no_of_characters */] <92.5f ? 
         (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.10058594f ? 
             (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                0.0f : 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <126.0f ? 
                    0.0f : 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <577.0f ? 
                        0.8f : 
                        0.0f))) : 
            0.0f) : 
        5.364749E-6f);
    return pred;
  } // constant pool size = 22B, number of visited nodes = 5, static init size = 0B
}

class log_drf_1_Tree_17_class_11 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* no_of_characters */] <134.5f ? 
         (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.072265625f ? 
            0.0f : 
             (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.26757812f ? 
                0.0f : 
                 (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <113.5f ? 
                        0.0f : 
                        0.033333335f) : 
                    0.0f))) : 
        0.0f);
    return pred;
  } // constant pool size = 22B, number of visited nodes = 5, static init size = 0B
}

class log_drf_1_Tree_17_class_12 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <529.5f ? 
         (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.0390625f ? 
             (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                0.0f : 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <593.0f ? 
                    0.0f : 
                     (data[7 /* 6_letter_word */] <0.171875f ? 
                        0.0f : 
                        1.0f))) : 
            0.0f) : 
         (Double.isNaN(data[0]) || data[0 /* vlan */] <590.5f ? 
            0.0f : 
            1.0f));
    return pred;
  } // constant pool size = 26B, number of visited nodes = 6, static init size = 0B
}

class log_drf_1_Tree_17_class_13 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* no_of_characters */] <54.0f ? 
         (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.125f ? 
             (data[0 /* vlan */] <105.5f ? 
                0.0f : 
                0.8759124f) : 
             (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.29101562f ? 
                1.0f : 
                0.0f)) : 
         (Double.isNaN(data[0]) || data[0 /* vlan */] <593.5f ? 
             (data[0 /* vlan */] <16.5f ? 
                 (data[2 /* no_of_characters */] <92.5f ? 
                     (data[5 /* 4_letter_word */] <0.4453125f ? 
                        0.4642857f : 
                        0.0f) : 
                    0.0f) : 
                 (data[0 /* vlan */] <28.5f ? 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.1796875f ? 
                        0.0f : 
                        1.4797278E-4f) : 
                    0.0f)) : 
             (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.25f ? 
                 (data[9 /* 8_letter_word */] <0.3359375f ? 
                    0.05f : 
                    0.0f) : 
                1.0f)));
    return pred;
  } // constant pool size = 50B, number of visited nodes = 12, static init size = 0B
}

class log_drf_1_Tree_17_class_14 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.19091797f ? 
         (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.19140625f ? 
            0.0f : 
             (data[1 /* type_of_time */] <2.5f ? 
                 (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <1.0f ? 
                    0.125f : 
                    0.0f) : 
                0.0f)) : 
         (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.171875f ? 
            0.0f : 
             (Double.isNaN(data[12]) || data[12 /* 11_letter_word */] <0.1015625f ? 
                0.0f : 
                 (data[5 /* 4_letter_word */] <0.1015625f ? 
                    0.0f : 
                    1.0f))));
    return pred;
  } // constant pool size = 30B, number of visited nodes = 7, static init size = 0B
}

class log_drf_1_Tree_17_class_15 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* no_of_characters */] <100.5f ? 
         (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.10058594f ? 
             (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <1.5f ? 
                0.0f : 
                 (Double.isNaN(data[4]) || data[4 /* no_of_macs */] <0.5f ? 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.25f ? 
                        0.13455363f : 
                        0.0f) : 
                    0.0f)) : 
            0.0f) : 
         (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.59472656f ? 
             (data[0 /* vlan */] <141.5f ? 
                 (data[3 /* no_of_ips */] <0.5f ? 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.46927643f ? 
                        0.0051502907f : 
                        0.03808073f) : 
                     (Double.isNaN(data[15]) || data[15 /* 14_letter_word */] <0.22265625f ? 
                        6.320407E-4f : 
                        0.115384616f)) : 
                0.0f) : 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <89.5f ? 
                0.0f : 
                 (Double.isNaN(data[13]) || data[13 /* 12_letter_word */] <0.1015625f ? 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.1796875f ? 
                        0.23076923f : 
                        0.9117647f) : 
                    0.0f))));
    return pred;
  } // constant pool size = 54B, number of visited nodes = 13, static init size = 0B
}

class log_drf_1_Tree_17_class_16 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* no_of_characters */] <84.5f ? 
         (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.10058594f ? 
             (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.16796875f ? 
                 (data[0 /* vlan */] <25.5f ? 
                    0.0f : 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.125f ? 
                        0.007926024f : 
                        0.0f)) : 
                0.0f) : 
            0.0f) : 
         (data[0 /* vlan */] <83.5f ? 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <80.5f ? 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <30.5f ? 
                    0.0f : 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.046875f ? 
                        0.0025627883f : 
                        6.684492E-4f)) : 
                 (data[5 /* 4_letter_word */] <0.0859375f ? 
                    0.0f : 
                     (data[8 /* 7_letter_word */] <0.140625f ? 
                        0.0f : 
                        0.03076923f))) : 
            0.0f));
    return pred;
  } // constant pool size = 46B, number of visited nodes = 11, static init size = 0B
}

class log_drf_1_Tree_17_class_17 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <659.0f ? 
        5.020912E-6f : 
         (data[0 /* vlan */] <173.5f ? 
             (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                0.0f : 
                1.0f) : 
             (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <3.5f ? 
                 (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.4375f ? 
                        0.8695652f : 
                        0.0f) : 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.078125f ? 
                        0.009090909f : 
                        0.0f)) : 
                 (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.51953125f ? 
                     (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <4.5f ? 
                        0.9933775f : 
                        0.0f) : 
                    0.3846154f))));
    return pred;
  } // constant pool size = 38B, number of visited nodes = 9, static init size = 0B
}

class log_drf_1_Tree_17_class_18 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <330.5f ? 
        0.0f : 
         (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.07519531f ? 
            0.0f : 
             (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.296875f ? 
                0.0f : 
                 (data[3 /* no_of_ips */] <2.5f ? 
                    0.1f : 
                    0.0f))));
    return pred;
  } // constant pool size = 18B, number of visited nodes = 4, static init size = 0B
}

class log_drf_1_Tree_17_class_19 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.23583984f ? 
         (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.19092894f ? 
            0.0f : 
             (data[3 /* no_of_ips */] <1.5f ? 
                 (data[5 /* 4_letter_word */] <0.30078125f ? 
                     (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                        0.0f : 
                        0.1f) : 
                    0.0f) : 
                0.0f)) : 
         (data[0 /* vlan */] <17.5f ? 
            1.0f : 
            0.0f));
    return pred;
  } // constant pool size = 26B, number of visited nodes = 6, static init size = 0B
}

class log_drf_1_Tree_17_class_20 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* no_of_characters */] <134.5f ? 
         (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.29101562f ? 
             (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <25.5f ? 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.2890625f ? 
                        0.94096065f : 
                        0.99579203f) : 
                    0.0f) : 
                 (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <1.5f ? 
                     (data[0 /* vlan */] <33.5f ? 
                        0.09830867f : 
                        0.0f) : 
                    0.0f)) : 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <25.5f ? 
                 (data[9 /* 8_letter_word */] <0.16796875f ? 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.171875f ? 
                        0.9978118f : 
                        0.99101794f) : 
                    1.0f) : 
                0.0f)) : 
         (data[0 /* vlan */] <24.5f ? 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <17.0f ? 
                0.0f : 
                 (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                     (data[2 /* no_of_characters */] <152.5f ? 
                        1.0f : 
                        0.99885976f) : 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.15625f ? 
                        0.99907064f : 
                        0.98876405f))) : 
            0.0f));
    return pred;
  } // constant pool size = 62B, number of visited nodes = 15, static init size = 0B
}

class log_drf_1_Tree_17_class_21 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.15478516f ? 
         (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.17480469f ? 
             (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <1.5f ? 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.52734375f ? 
                     (data[0 /* vlan */] <17.5f ? 
                        0.008186901f : 
                        0.0019072954f) : 
                     (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
                        0.002094573f : 
                        0.0f)) : 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <190.5f ? 
                    0.0f : 
                     (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.234375f ? 
                        0.0f : 
                        0.0028011205f))) : 
             (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.02734375f ? 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.21875f ? 
                        1.29887E-4f : 
                        0.0024358558f) : 
                    0.0f) : 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.4609375f ? 
                    0.0f : 
                     (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <3.5f ? 
                        5.420054E-4f : 
                        0.0f)))) : 
         (Double.isNaN(data[0]) || data[0 /* vlan */] <34.5f ? 
             (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.1015625f ? 
                 (data[11 /* 10_letter_word */] <0.22411919f ? 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.546875f ? 
                        0.0f : 
                        1.0f) : 
                    0.0f) : 
                 (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.05859375f ? 
                    0.0f : 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.0625f ? 
                        0.0f : 
                        1.0f))) : 
             (data[11 /* 10_letter_word */] <0.2918024f ? 
                 (data[2 /* no_of_characters */] <230.5f ? 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <113.0f ? 
                        0.5915493f : 
                        0.0f) : 
                     (data[0 /* vlan */] <39.0f ? 
                        1.0f : 
                        0.004672897f)) : 
                0.0f)));
    return pred;
  } // constant pool size = 94B, number of visited nodes = 23, static init size = 0B
}

class log_drf_1_Tree_17_class_22 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.16015625f ? 
         (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.32226562f ? 
            0.0f : 
             (data[1 /* type_of_time */] <4.5f ? 
                0.0f : 
                 (data[6 /* 5_letter_word */] <0.34873962f ? 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <33.5f ? 
                        4.196391E-4f : 
                        0.0f) : 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.15625f ? 
                        0.0f : 
                        3.7750095E-4f)))) : 
        2.19744E-4f);
    return pred;
  } // constant pool size = 26B, number of visited nodes = 6, static init size = 0B
}

class log_drf_1_Tree_17_class_23 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.13378906f ? 
         (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.18359375f ? 
             (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
                0.0f : 
                 (data[0 /* vlan */] <17.5f ? 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.3125f ? 
                        0.6832181f : 
                        0.9839015f) : 
                    0.0f)) : 
             (Double.isNaN(data[13]) || data[13 /* 12_letter_word */] <0.22460938f ? 
                 (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                     (data[8 /* 7_letter_word */] <0.03125f ? 
                        1.4367816E-4f : 
                        0.0f) : 
                     (data[3 /* no_of_ips */] <1.5f ? 
                        0.0014565127f : 
                        0.0f)) : 
                 (data[1 /* type_of_time */] <4.5f ? 
                    0.0f : 
                     (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <1.0f ? 
                        0.71428573f : 
                        0.0f)))) : 
         (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.4140625f ? 
            0.0f : 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <18.0f ? 
                 (data[8 /* 7_letter_word */] <0.14453125f ? 
                    0.0f : 
                    1.0f) : 
                0.0f)));
    return pred;
  } // constant pool size = 58B, number of visited nodes = 14, static init size = 0B
}

class log_drf_1_Tree_17_class_24 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* no_of_characters */] <144.5f ? 
         (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.9160156f ? 
            0.0f : 
             (data[0 /* vlan */] <13.5f ? 
                1.0f : 
                0.0f)) : 
        0.0f);
    return pred;
  } // constant pool size = 14B, number of visited nodes = 3, static init size = 0B
}

class log_drf_1_Tree_17_class_25 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.44970703f ? 
         (Double.isNaN(data[12]) || data[12 /* 11_letter_word */] <0.15527344f ? 
             (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <1.5f ? 
                 (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                     (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
                        0.0f : 
                        0.1123818f) : 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.8671875f ? 
                        0.14768416f : 
                        0.8949079f)) : 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <190.5f ? 
                     (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.18125f ? 
                        0.92177457f : 
                        0.07112462f) : 
                     (Double.isNaN(data[4]) || data[4 /* no_of_macs */] <0.5f ? 
                        0.031429015f : 
                        1.0f))) : 
             (data[3 /* no_of_ips */] <0.5f ? 
                 (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
                    0.0f : 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <180.5f ? 
                        0.0f : 
                        0.2857143f)) : 
                 (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.20703125f ? 
                    1.0f : 
                    0.5f))) : 
         (data[0 /* vlan */] <29.5f ? 
             (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                0.0f : 
                0.020833334f) : 
             (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.072265625f ? 
                 (data[6 /* 5_letter_word */] <0.125f ? 
                     (data[2 /* no_of_characters */] <80.5f ? 
                        0.0f : 
                        0.021276595f) : 
                    1.0f) : 
                 (data[2 /* no_of_characters */] <170.5f ? 
                    0.0f : 
                    0.4f))));
    return pred;
  } // constant pool size = 78B, number of visited nodes = 19, static init size = 0B
}

class log_drf_1_Tree_17_class_26 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* no_of_characters */] <57.5f ? 
         (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.125f ? 
            0.57697284f : 
            0.0f) : 
        0.0f);
    return pred;
  } // constant pool size = 10B, number of visited nodes = 2, static init size = 0B
}

class log_drf_1_Tree_17_class_27 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <256.5f ? 
        0.0f : 
         (data[6 /* 5_letter_word */] <0.03125f ? 
             (data[0 /* vlan */] <17.5f ? 
                 (data[8 /* 7_letter_word */] <0.265625f ? 
                     (data[10 /* 9_letter_word */] <0.041666668f ? 
                        0.33333334f : 
                        0.0f) : 
                    0.0f) : 
                0.0f) : 
            0.0f));
    return pred;
  } // constant pool size = 22B, number of visited nodes = 5, static init size = 0B
}

class log_drf_1_Tree_17_class_28 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <447.5f ? 
        0.0f : 
         (data[6 /* 5_letter_word */] <0.14160156f ? 
            0.0f : 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <19.5f ? 
                1.0f : 
                0.0f)));
    return pred;
  } // constant pool size = 14B, number of visited nodes = 3, static init size = 0B
}

class log_drf_1_Tree_17_class_29 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <957.5f ? 
         (Double.isNaN(data[12]) || data[12 /* 11_letter_word */] <0.041015625f ? 
             (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.18359375f ? 
                0.0f : 
                 (data[6 /* 5_letter_word */] <0.05078125f ? 
                     (data[10 /* 9_letter_word */] <0.22824097f ? 
                        0.002244669f : 
                        0.0f) : 
                    0.0f)) : 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <123.5f ? 
                0.0f : 
                 (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.69140625f ? 
                    0.0f : 
                    1.0f))) : 
         (data[0 /* vlan */] <150.5f ? 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <126.0f ? 
                0.0f : 
                1.0f) : 
            0.0f));
    return pred;
  } // constant pool size = 38B, number of visited nodes = 9, static init size = 0B
}

class log_drf_1_Tree_17_class_30 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <219.5f ? 
         (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.23535156f ? 
             (data[1 /* type_of_time */] <1.5f ? 
                1.0f : 
                0.0f) : 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <173.5f ? 
                0.0f : 
                 (data[1 /* type_of_time */] <2.5f ? 
                    1.0f : 
                    0.0f))) : 
         (Double.isNaN(data[0]) || data[0 /* vlan */] <173.5f ? 
            0.0f : 
             (data[0 /* vlan */] <180.5f ? 
                 (data[3 /* no_of_ips */] <1.5f ? 
                    0.0f : 
                    1.0f) : 
                0.0f)));
    return pred;
  } // constant pool size = 34B, number of visited nodes = 8, static init size = 0B
}

class log_drf_1_Tree_17_class_31 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* no_of_characters */] <113.5f ? 
         (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.22460938f ? 
             (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <1.5f ? 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.0859375f ? 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <102.5f ? 
                        0.014457241f : 
                        0.03652968f) : 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <33.5f ? 
                        0.0f : 
                        0.87642586f)) : 
                0.0f) : 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <63.5f ? 
                0.0f : 
                 (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                    0.85365856f : 
                    1.0f))) : 
         (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.13378906f ? 
             (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.076171875f ? 
                 (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                     (data[2 /* no_of_characters */] <132.5f ? 
                        2.484472E-4f : 
                        0.0f) : 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.7265625f ? 
                        3.4366624E-4f : 
                        0.0035242292f)) : 
                 (data[6 /* 5_letter_word */] <0.04296875f ? 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <61.5f ? 
                        0.0f : 
                        0.12145749f) : 
                     (data[3 /* no_of_ips */] <1.5f ? 
                        0.0050083473f : 
                        0.0f))) : 
             (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.53515625f ? 
                 (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.32421875f ? 
                     (data[2 /* no_of_characters */] <150.5f ? 
                        0.001593943f : 
                        0.0f) : 
                     (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.3125f ? 
                        0.008086642f : 
                        0.6573427f)) : 
                 (data[10 /* 9_letter_word */] <0.07421875f ? 
                    0.0f : 
                    1.0f))));
    return pred;
  } // constant pool size = 86B, number of visited nodes = 21, static init size = 0B
}

class log_drf_1_Tree_17_class_32 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* no_of_characters */] <123.5f ? 
         (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.22460938f ? 
             (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.44921875f ? 
                 (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                    0.0f : 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.4140625f ? 
                        0.0f : 
                        0.3671875f)) : 
                 (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.1015625f ? 
                     (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                        0.028632026f : 
                        0.0f) : 
                     (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.34747314f ? 
                        1.0f : 
                        0.0f))) : 
             (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                0.0f : 
                 (data[11 /* 10_letter_word */] <0.2912445f ? 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.3671875f ? 
                        1.0f : 
                        0.0f) : 
                    0.0f))) : 
        0.0f);
    return pred;
  } // constant pool size = 46B, number of visited nodes = 11, static init size = 0B
}

class log_drf_1_Tree_17_class_33 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* no_of_characters */] <69.5f ? 
         (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.125f ? 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <67.5f ? 
                 (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.62109375f ? 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.4140625f ? 
                        0.0012674271f : 
                        0.11111111f) : 
                    1.0f) : 
                 (data[7 /* 6_letter_word */] <0.4140625f ? 
                    0.0f : 
                    1.0f)) : 
             (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.29101562f ? 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.2890625f ? 
                    0.0f : 
                    1.0f) : 
                0.22222222f)) : 
         (data[0 /* vlan */] <7.5f ? 
             (data[10 /* 9_letter_word */] <0.083984375f ? 
                1.0f : 
                0.0f) : 
             (Double.isNaN(data[4]) || data[4 /* no_of_macs */] <1.5f ? 
                 (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.41015625f ? 
                     (data[1 /* type_of_time */] <2.5f ? 
                        0.0057803467f : 
                        1.8793045E-4f) : 
                     (data[1 /* type_of_time */] <4.5f ? 
                        0.0f : 
                        0.006300789f)) : 
                 (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.08203125f ? 
                    0.0f : 
                     (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.0234375f ? 
                        1.0f : 
                        0.0f)))));
    return pred;
  } // constant pool size = 66B, number of visited nodes = 16, static init size = 0B
}

class log_drf_1_Tree_17_class_34 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.123535156f ? 
        0.0f : 
         (data[10 /* 9_letter_word */] <0.12610292f ? 
             (data[0 /* vlan */] <25.5f ? 
                 (data[3 /* no_of_ips */] <1.5f ? 
                     (data[6 /* 5_letter_word */] <0.065625f ? 
                        0.0f : 
                        0.5f) : 
                    0.0f) : 
                0.0f) : 
             (data[10 /* 9_letter_word */] <0.17389417f ? 
                 (data[0 /* vlan */] <17.5f ? 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.0859375f ? 
                        0.0f : 
                        0.09090909f) : 
                    0.0f) : 
                0.0f)));
    return pred;
  } // constant pool size = 34B, number of visited nodes = 8, static init size = 0B
}

class log_drf_1_Tree_17_class_35 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* no_of_characters */] <88.5f ? 
         (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.16699219f ? 
             (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.83203125f ? 
                     (data[2 /* no_of_characters */] <80.5f ? 
                        0.0f : 
                        9.590793E-4f) : 
                     (data[0 /* vlan */] <17.5f ? 
                        0.2f : 
                        0.0f)) : 
                0.0f) : 
             (data[0 /* vlan */] <17.5f ? 
                1.0f : 
                0.0f)) : 
         (data[0 /* vlan */] <11.5f ? 
             (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.21484375f ? 
                0.0f : 
                 (data[10 /* 9_letter_word */] <0.291214f ? 
                    1.0f : 
                    0.0f)) : 
             (data[8 /* 7_letter_word */] <0.16992188f ? 
                 (data[0 /* vlan */] <19.5f ? 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.1539917f ? 
                        9.5642934E-4f : 
                        0.05263158f) : 
                    0.0f) : 
                0.0f)));
    return pred;
  } // constant pool size = 54B, number of visited nodes = 13, static init size = 0B
}

class log_drf_1_Tree_17_class_36 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.16015625f ? 
        0.0f : 
         (data[10 /* 9_letter_word */] <0.17409897f ? 
             (data[0 /* vlan */] <7.5f ? 
                1.0f : 
                0.0f) : 
            0.0f));
    return pred;
  } // constant pool size = 14B, number of visited nodes = 3, static init size = 0B
}

class log_drf_1_Tree_17_class_37 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* no_of_characters */] <164.5f ? 
         (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.9160156f ? 
             (data[1 /* type_of_time */] <4.5f ? 
                 (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <1.5f ? 
                     (data[8 /* 7_letter_word */] <0.1015625f ? 
                        0.99778956f : 
                        1.0f) : 
                    0.0f) : 
                 (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.05078125f ? 
                     (data[2 /* no_of_characters */] <50.5f ? 
                        0.110032365f : 
                        0.0015617006f) : 
                    0.0f)) : 
             (data[0 /* vlan */] <123.5f ? 
                 (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                     (data[1 /* type_of_time */] <3.5f ? 
                        0.5f : 
                        0.0f) : 
                    0.0f) : 
                 (data[2 /* no_of_characters */] <55.0f ? 
                    0.0f : 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <139.0f ? 
                        1.0f : 
                        0.9589041f)))) : 
         (data[0 /* vlan */] <165.5f ? 
             (data[3 /* no_of_ips */] <0.5f ? 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.20703125f ? 
                     (data[0 /* vlan */] <19.0f ? 
                        0.97398263f : 
                        0.0136528285f) : 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.63449097f ? 
                        0.0012942192f : 
                        0.0625f)) : 
                0.0f) : 
             (data[8 /* 7_letter_word */] <0.095703125f ? 
                 (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
                     (data[1 /* type_of_time */] <3.5f ? 
                        0.0f : 
                        0.9987188f) : 
                    0.0f) : 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <817.5f ? 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <195.5f ? 
                        0.9978556f : 
                        0.9836651f) : 
                     (data[1 /* type_of_time */] <4.5f ? 
                        1.0f : 
                        0.0f)))));
    return pred;
  } // constant pool size = 94B, number of visited nodes = 23, static init size = 0B
}

class log_drf_1_Tree_17_class_38 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* no_of_characters */] <93.5f ? 
         (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.10058594f ? 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <85.5f ? 
                0.0f : 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <89.5f ? 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.828125f ? 
                        0.0f : 
                        0.020833334f) : 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.25f ? 
                        0.030303031f : 
                        0.25f))) : 
            0.0f) : 
        0.0f);
    return pred;
  } // constant pool size = 26B, number of visited nodes = 6, static init size = 0B
}


class log_drf_1_Forest_18 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += log_drf_1_Tree_18_class_0.score0(fdata);
    preds[2] += log_drf_1_Tree_18_class_1.score0(fdata);
    preds[3] += log_drf_1_Tree_18_class_2.score0(fdata);
    preds[4] += log_drf_1_Tree_18_class_3.score0(fdata);
    preds[5] += log_drf_1_Tree_18_class_4.score0(fdata);
    preds[6] += log_drf_1_Tree_18_class_5.score0(fdata);
    preds[7] += log_drf_1_Tree_18_class_6.score0(fdata);
    preds[8] += log_drf_1_Tree_18_class_7.score0(fdata);
    preds[9] += log_drf_1_Tree_18_class_8.score0(fdata);
    preds[10] += log_drf_1_Tree_18_class_9.score0(fdata);
    preds[11] += log_drf_1_Tree_18_class_10.score0(fdata);
    preds[12] += log_drf_1_Tree_18_class_11.score0(fdata);
    preds[13] += log_drf_1_Tree_18_class_12.score0(fdata);
    preds[14] += log_drf_1_Tree_18_class_13.score0(fdata);
    preds[15] += log_drf_1_Tree_18_class_14.score0(fdata);
    preds[16] += log_drf_1_Tree_18_class_15.score0(fdata);
    preds[17] += log_drf_1_Tree_18_class_16.score0(fdata);
    preds[18] += log_drf_1_Tree_18_class_17.score0(fdata);
    preds[19] += log_drf_1_Tree_18_class_18.score0(fdata);
    preds[20] += log_drf_1_Tree_18_class_19.score0(fdata);
    preds[21] += log_drf_1_Tree_18_class_20.score0(fdata);
    preds[22] += log_drf_1_Tree_18_class_21.score0(fdata);
    preds[23] += log_drf_1_Tree_18_class_22.score0(fdata);
    preds[24] += log_drf_1_Tree_18_class_23.score0(fdata);
    preds[25] += log_drf_1_Tree_18_class_24.score0(fdata);
    preds[26] += log_drf_1_Tree_18_class_25.score0(fdata);
    preds[27] += log_drf_1_Tree_18_class_26.score0(fdata);
    preds[28] += log_drf_1_Tree_18_class_27.score0(fdata);
    preds[29] += log_drf_1_Tree_18_class_28.score0(fdata);
    preds[30] += log_drf_1_Tree_18_class_29.score0(fdata);
    preds[31] += log_drf_1_Tree_18_class_30.score0(fdata);
    preds[32] += log_drf_1_Tree_18_class_31.score0(fdata);
    preds[33] += log_drf_1_Tree_18_class_32.score0(fdata);
    preds[34] += log_drf_1_Tree_18_class_33.score0(fdata);
    preds[35] += log_drf_1_Tree_18_class_34.score0(fdata);
    preds[36] += log_drf_1_Tree_18_class_35.score0(fdata);
    preds[37] += log_drf_1_Tree_18_class_36.score0(fdata);
    preds[38] += log_drf_1_Tree_18_class_37.score0(fdata);
    preds[39] += log_drf_1_Tree_18_class_38.score0(fdata);
  }
}
class log_drf_1_Tree_18_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.020507812f ? 
         (Double.isNaN(data[12]) || data[12 /* 11_letter_word */] <0.009765625f ? 
             (Double.isNaN(data[4]) || data[4 /* no_of_macs */] <0.5f ? 
                0.0f : 
                 (data[3 /* no_of_ips */] <0.5f ? 
                    1.0f : 
                    0.0f)) : 
             (Double.isNaN(data[4]) || data[4 /* no_of_macs */] <0.5f ? 
                0.0f : 
                1.0f)) : 
         (Double.isNaN(data[14]) || data[14 /* 13_letter_word */] <0.0146484375f ? 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <572.0f ? 
                0.0f : 
                 (data[4 /* no_of_macs */] <0.5f ? 
                    0.0f : 
                    1.0f)) : 
             (data[5 /* 4_letter_word */] <0.22460938f ? 
                0.0f : 
                 (Double.isNaN(data[14]) || data[14 /* 13_letter_word */] <0.04396057f ? 
                    1.0f : 
                    0.8f))));
    return pred;
  } // constant pool size = 42B, number of visited nodes = 10, static init size = 0B
}

class log_drf_1_Tree_18_class_1 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0]) || data[0 /* vlan */] <142.0f ? 
        0.0f : 
         (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
            0.0f : 
             (data[0 /* vlan */] <149.0f ? 
                0.9967742f : 
                0.0f)));
    return pred;
  } // constant pool size = 14B, number of visited nodes = 3, static init size = 0B
}

class log_drf_1_Tree_18_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0]) || data[0 /* vlan */] <181.5f ? 
         (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
             (data[0 /* vlan */] <151.5f ? 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <137.0f ? 
                    0.0f : 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.3125f ? 
                        0.6799163f : 
                        0.16949153f)) : 
                0.0f) : 
             (Double.isNaN(data[4]) || data[4 /* no_of_macs */] <3.0f ? 
                 (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.20703125f ? 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.1796875f ? 
                        0.0f : 
                        0.001150748f) : 
                    0.0f) : 
                0.25f)) : 
         (data[7 /* 6_letter_word */] <0.36132812f ? 
             (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.125f ? 
                 (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.0859375f ? 
                    0.0f : 
                     (data[7 /* 6_letter_word */] <0.16666667f ? 
                        0.0f : 
                        0.045454547f)) : 
                0.0f) : 
             (data[5 /* 4_letter_word */] <0.41601562f ? 
                 (data[3 /* no_of_ips */] <0.5f ? 
                    0.0f : 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <591.0f ? 
                        1.0f : 
                        0.0f)) : 
                1.0f)));
    return pred;
  } // constant pool size = 62B, number of visited nodes = 15, static init size = 0B
}

class log_drf_1_Tree_18_class_3 {
  static final double score0(double[] data) {
    double pred =      (data[0 /* vlan */] <29.5f ? 
         (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.31640625f ? 
             (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.22460938f ? 
                 (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.05078125f ? 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.21875f ? 
                        0.0f : 
                        1.8311664E-4f) : 
                    0.0f) : 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <150.5f ? 
                    0.0f : 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <28.0f ? 
                        0.0f : 
                        1.0f))) : 
             (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.38671875f ? 
                 (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.063446045f ? 
                    0.0f : 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.35379028f ? 
                        0.0f : 
                        0.7105263f)) : 
                 (data[0 /* vlan */] <28.0f ? 
                    0.0f : 
                    1.0f))) : 
         (data[0 /* vlan */] <156.5f ? 
             (data[2 /* no_of_characters */] <105.5f ? 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <103.5f ? 
                     (data[3 /* no_of_ips */] <1.5f ? 
                        4.8685493E-4f : 
                        0.0f) : 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <104.5f ? 
                        0.15789473f : 
                        0.0f)) : 
                0.0f) : 
            0.0f));
    return pred;
  } // constant pool size = 66B, number of visited nodes = 16, static init size = 0B
}

class log_drf_1_Tree_18_class_4 {
  static final double score0(double[] data) {
    double pred =      (data[0 /* vlan */] <27.5f ? 
         (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.31640625f ? 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <26.0f ? 
                0.0f : 
                 (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.44921875f ? 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.12112427f ? 
                        0.007352941f : 
                        0.19354838f) : 
                     (data[1 /* type_of_time */] <3.5f ? 
                        0.0f : 
                        0.3846154f))) : 
             (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.29101562f ? 
                0.0f : 
                 (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.16796875f ? 
                     (data[0 /* vlan */] <24.5f ? 
                        0.0f : 
                        0.9f) : 
                    0.0f))) : 
        0.0f);
    return pred;
  } // constant pool size = 38B, number of visited nodes = 9, static init size = 0B
}

class log_drf_1_Tree_18_class_5 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0]) || data[0 /* vlan */] <85.5f ? 
         (data[3 /* no_of_ips */] <0.5f ? 
             (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.30273438f ? 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <63.5f ? 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.23887634f ? 
                        0.0f : 
                        0.0010548523f) : 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.46875f ? 
                        0.0f : 
                        0.5833333f)) : 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <65.5f ? 
                     (Double.isNaN(data[12]) || data[12 /* 11_letter_word */] <0.2890625f ? 
                        0.001417865f : 
                        0.2f) : 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <190.5f ? 
                        0.07857143f : 
                        1.0f))) : 
            0.0f) : 
        0.0f);
    return pred;
  } // constant pool size = 38B, number of visited nodes = 9, static init size = 0B
}

class log_drf_1_Tree_18_class_6 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.1616211f ? 
         (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
             (data[0 /* vlan */] <133.5f ? 
                 (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.30859375f ? 
                     (data[2 /* no_of_characters */] <40.5f ? 
                        1.0f : 
                        0.0024570024f) : 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.171875f ? 
                        0.05732484f : 
                        0.0f)) : 
                0.0f) : 
            0.0f) : 
         (data[0 /* vlan */] <133.5f ? 
             (data[2 /* no_of_characters */] <80.5f ? 
                 (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.45117188f ? 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <107.0f ? 
                        0.0f : 
                        1.0f) : 
                    1.0f) : 
                 (data[2 /* no_of_characters */] <118.5f ? 
                     (data[2 /* no_of_characters */] <83.5f ? 
                        0.516129f : 
                        0.031729992f) : 
                    0.0f)) : 
            0.0f));
    return pred;
  } // constant pool size = 50B, number of visited nodes = 12, static init size = 0B
}

class log_drf_1_Tree_18_class_7 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0]) || data[0 /* vlan */] <185.0f ? 
        0.0f : 
         (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <1.5f ? 
             (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.7480469f ? 
                0.0f : 
                 (data[2 /* no_of_characters */] <151.5f ? 
                    0.5f : 
                    1.0f)) : 
            1.0f));
    return pred;
  } // constant pool size = 18B, number of visited nodes = 4, static init size = 0B
}

class log_drf_1_Tree_18_class_8 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0]) || data[0 /* vlan */] <180.5f ? 
        0.0f : 
         (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.22460938f ? 
             (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.125f ? 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <187.5f ? 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <888.5f ? 
                        0.010330578f : 
                        0.9411765f) : 
                    0.0f) : 
                 (data[5 /* 4_letter_word */] <0.03125f ? 
                     (data[1 /* type_of_time */] <4.5f ? 
                        0.0f : 
                        0.016949153f) : 
                    0.0f)) : 
             (data[3 /* no_of_ips */] <3.5f ? 
                 (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.46389008f ? 
                     (data[1 /* type_of_time */] <4.5f ? 
                        0.0f : 
                        1.0f) : 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <590.5f ? 
                        0.5555556f : 
                        0.0f)) : 
                0.07534247f)));
    return pred;
  } // constant pool size = 46B, number of visited nodes = 11, static init size = 0B
}

class log_drf_1_Tree_18_class_9 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.19335938f ? 
         (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.8564453f ? 
             (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <1.5f ? 
                 (data[1 /* type_of_time */] <3.5f ? 
                     (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                        0.0f : 
                        0.028571429f) : 
                    0.0f) : 
                 (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.2910576f ? 
                     (data[1 /* type_of_time */] <3.5f ? 
                        0.5825243f : 
                        0.0f) : 
                     (data[6 /* 5_letter_word */] <0.0859375f ? 
                        0.870229f : 
                        0.0f))) : 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <145.5f ? 
                0.0f : 
                 (data[0 /* vlan */] <94.0f ? 
                    0.0f : 
                    1.0f))) : 
         (data[0 /* vlan */] <163.5f ? 
            0.0f : 
             (data[2 /* no_of_characters */] <180.5f ? 
                 (Double.isNaN(data[1]) || data[1 /* type_of_time */] <3.5f ? 
                    1.0f : 
                    0.0f) : 
                 (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.05078125f ? 
                     (data[6 /* 5_letter_word */] <0.0859375f ? 
                        0.048602287f : 
                        0.0f) : 
                     (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.13327026f ? 
                        0.53968257f : 
                        0.0f)))));
    return pred;
  } // constant pool size = 66B, number of visited nodes = 16, static init size = 0B
}

class log_drf_1_Tree_18_class_10 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0]) || data[0 /* vlan */] <166.5f ? 
        5.0979834E-6f : 
         (data[0 /* vlan */] <171.0f ? 
            0.015306123f : 
            0.0f));
    return pred;
  } // constant pool size = 10B, number of visited nodes = 2, static init size = 0B
}

class log_drf_1_Tree_18_class_11 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.14111328f ? 
        0.0f : 
         (data[6 /* 5_letter_word */] <0.14160156f ? 
            0.0f : 
             (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.26757812f ? 
                0.0f : 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <108.5f ? 
                    0.0f : 
                     (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
                        0.0f : 
                        0.2f)))));
    return pred;
  } // constant pool size = 22B, number of visited nodes = 5, static init size = 0B
}

class log_drf_1_Tree_18_class_12 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0]) || data[0 /* vlan */] <593.5f ? 
        0.0f : 
         (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
            0.0f : 
            0.8863636f));
    return pred;
  } // constant pool size = 10B, number of visited nodes = 2, static init size = 0B
}

class log_drf_1_Tree_18_class_13 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0]) || data[0 /* vlan */] <593.5f ? 
         (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.19726562f ? 
             (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                 (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
                    0.0f : 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <154.0f ? 
                        0.0f : 
                        0.0794702f)) : 
                0.0f) : 
             (data[2 /* no_of_characters */] <55.5f ? 
                 (data[5 /* 4_letter_word */] <0.125f ? 
                    0.8333333f : 
                    1.0f) : 
                 (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.19140625f ? 
                    0.0f : 
                     (data[2 /* no_of_characters */] <88.5f ? 
                        0.9230769f : 
                        0.0f)))) : 
         (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.16699219f ? 
            0.888f : 
             (data[9 /* 8_letter_word */] <0.43359375f ? 
                0.1f : 
                0.0f)));
    return pred;
  } // constant pool size = 46B, number of visited nodes = 11, static init size = 0B
}

class log_drf_1_Tree_18_class_14 {
  static final double score0(double[] data) {
    double pred =      (data[0 /* vlan */] <27.5f ? 
         (Double.isNaN(data[12]) || data[12 /* 11_letter_word */] <0.18359375f ? 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <26.0f ? 
                0.0f : 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <170.5f ? 
                    0.0f : 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.1796875f ? 
                        0.0f : 
                        0.4f))) : 
             (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.1015625f ? 
                0.0f : 
                0.9166667f)) : 
        0.0f);
    return pred;
  } // constant pool size = 26B, number of visited nodes = 6, static init size = 0B
}

class log_drf_1_Tree_18_class_15 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0]) || data[0 /* vlan */] <142.0f ? 
         (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.091796875f ? 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <137.5f ? 
                 (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.8984375f ? 
                     (Double.isNaN(data[15]) || data[15 /* 14_letter_word */] <0.05859375f ? 
                        7.324544E-4f : 
                        0.06521739f) : 
                     (Double.isNaN(data[4]) || data[4 /* no_of_macs */] <0.5f ? 
                        0.068583705f : 
                        0.0f)) : 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <185.5f ? 
                     (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.171875f ? 
                        0.06472492f : 
                        1.0f) : 
                    1.0f)) : 
             (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.19335938f ? 
                 (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.234375f ? 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.3828125f ? 
                        2.5638833E-4f : 
                        0.028409092f) : 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <320.5f ? 
                        0.0031185031f : 
                        1.0f)) : 
                 (data[3 /* no_of_ips */] <0.5f ? 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.368515f ? 
                        0.0f : 
                        0.36363637f) : 
                    0.0f))) : 
        0.0f);
    return pred;
  } // constant pool size = 58B, number of visited nodes = 14, static init size = 0B
}

class log_drf_1_Tree_18_class_16 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0]) || data[0 /* vlan */] <83.5f ? 
         (data[3 /* no_of_ips */] <0.5f ? 
             (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.8984375f ? 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <63.0f ? 
                     (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.3125f ? 
                        1.6995241E-4f : 
                        0.011235955f) : 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.3671875f ? 
                        0.012345679f : 
                        0.04347826f)) : 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <30.5f ? 
                    0.0f : 
                    0.01459854f)) : 
            0.0f) : 
        0.0f);
    return pred;
  } // constant pool size = 30B, number of visited nodes = 7, static init size = 0B
}

class log_drf_1_Tree_18_class_17 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0]) || data[0 /* vlan */] <180.5f ? 
         (Double.isNaN(data[12]) || data[12 /* 11_letter_word */] <0.041992188f ? 
            1.6305366E-5f : 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <976.5f ? 
                0.0f : 
                0.5f)) : 
         (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.36132812f ? 
             (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.5214844f ? 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <659.5f ? 
                    0.0f : 
                     (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <3.5f ? 
                        0.78238344f : 
                        0.9701493f)) : 
                 (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.30859375f ? 
                    0.0f : 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.6336365f ? 
                        0.0f : 
                        0.08571429f))) : 
             (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.34960938f ? 
                0.0f : 
                0.5f)));
    return pred;
  } // constant pool size = 42B, number of visited nodes = 10, static init size = 0B
}

class log_drf_1_Tree_18_class_18 {
  static final double score0(double[] data) {
    double pred =      (data[0 /* vlan */] <14.5f ? 
         (data[6 /* 5_letter_word */] <0.03125f ? 
             (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.2890625f ? 
                0.0f : 
                 (data[2 /* no_of_characters */] <215.5f ? 
                    0.0f : 
                     (data[11 /* 10_letter_word */] <0.1328125f ? 
                        0.33333334f : 
                        0.0f))) : 
            0.0f) : 
        0.0f);
    return pred;
  } // constant pool size = 22B, number of visited nodes = 5, static init size = 0B
}

class log_drf_1_Tree_18_class_19 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.23583984f ? 
         (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.18332863f ? 
            0.0f : 
             (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.15625f ? 
                0.0f : 
                 (data[0 /* vlan */] <17.5f ? 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.1f ? 
                        0.0f : 
                        1.0f) : 
                    0.0f))) : 
         (data[0 /* vlan */] <17.5f ? 
            1.0f : 
            0.0f));
    return pred;
  } // constant pool size = 26B, number of visited nodes = 6, static init size = 0B
}

class log_drf_1_Tree_18_class_20 {
  static final double score0(double[] data) {
    double pred =      (data[0 /* vlan */] <23.5f ? 
         (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <3.5f ? 
             (data[0 /* vlan */] <17.5f ? 
                0.0f : 
                 (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.18359375f ? 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.046875f ? 
                        0.99928826f : 
                        0.9998118f) : 
                    1.0f)) : 
            0.0f) : 
        0.0f);
    return pred;
  } // constant pool size = 22B, number of visited nodes = 5, static init size = 0B
}

class log_drf_1_Tree_18_class_21 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.15478516f ? 
         (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.17480469f ? 
             (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.24023438f ? 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <240.5f ? 
                     (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                        0.0013986655f : 
                        7.404116E-5f) : 
                     (data[2 /* no_of_characters */] <257.5f ? 
                        0.02252816f : 
                        0.004157339f)) : 
                 (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.22265625f ? 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.1015625f ? 
                        0.0015050527f : 
                        0.0f) : 
                     (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                        0.008810572f : 
                        0.0f))) : 
             (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.24609375f ? 
                 (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.046875f ? 
                     (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.0625f ? 
                        1.78179E-4f : 
                        0.0f) : 
                    0.0f) : 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.44921875f ? 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <129.5f ? 
                        3.5697286E-4f : 
                        0.001651255f) : 
                     (data[2 /* no_of_characters */] <253.5f ? 
                        0.0f : 
                        0.018867925f)))) : 
         (Double.isNaN(data[0]) || data[0 /* vlan */] <34.5f ? 
             (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.5494792f ? 
                 (data[6 /* 5_letter_word */] <0.1171875f ? 
                     (data[3 /* no_of_ips */] <0.5f ? 
                        0.01775148f : 
                        0.0f) : 
                    0.0f) : 
                 (data[11 /* 10_letter_word */] <0.26704025f ? 
                    1.0f : 
                    0.0f)) : 
             (Double.isNaN(data[12]) || data[12 /* 11_letter_word */] <0.125f ? 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.1015625f ? 
                     (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
                        0.0031152647f : 
                        0.24210526f) : 
                    0.0f) : 
                1.0f)));
    return pred;
  } // constant pool size = 94B, number of visited nodes = 23, static init size = 0B
}

class log_drf_1_Tree_18_class_22 {
  static final double score0(double[] data) {
    double pred =      (data[0 /* vlan */] <5.5f ? 
         (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.111328125f ? 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <130.5f ? 
                0.0f : 
                0.5f) : 
            0.0f) : 
         (data[0 /* vlan */] <23.5f ? 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <225.5f ? 
                0.0f : 
                 (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.65234375f ? 
                     (data[2 /* no_of_characters */] <326.5f ? 
                        5.8038306E-4f : 
                        0.0f) : 
                     (data[5 /* 4_letter_word */] <0.70666504f ? 
                        0.060606062f : 
                        0.0f))) : 
            0.0f));
    return pred;
  } // constant pool size = 34B, number of visited nodes = 8, static init size = 0B
}

class log_drf_1_Tree_18_class_23 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.5830078f ? 
         (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.1171875f ? 
             (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.26759148f ? 
                 (Double.isNaN(data[13]) || data[13 /* 12_letter_word */] <0.07421875f ? 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.014633909f ? 
                        5.2007154E-4f : 
                        0.0f) : 
                     (Double.isNaN(data[12]) || data[12 /* 11_letter_word */] <0.046875f ? 
                        0.0f : 
                        1.0f)) : 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <150.5f ? 
                    0.0f : 
                     (data[0 /* vlan */] <17.5f ? 
                        0.8333333f : 
                        0.0f))) : 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <255.5f ? 
                0.0f : 
                 (data[9 /* 8_letter_word */] <0.06376648f ? 
                    0.0f : 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.1640625f ? 
                        0.9971884f : 
                        0.0f)))) : 
         (Double.isNaN(data[0]) || data[0 /* vlan */] <18.5f ? 
            0.9941003f : 
            0.0f));
    return pred;
  } // constant pool size = 50B, number of visited nodes = 12, static init size = 0B
}

class log_drf_1_Tree_18_class_24 {
  static final double score0(double[] data) {
    double pred =      (data[0 /* vlan */] <11.5f ? 
         (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.8330078f ? 
            0.0f : 
            1.0f) : 
        0.0f);
    return pred;
  } // constant pool size = 10B, number of visited nodes = 2, static init size = 0B
}

class log_drf_1_Tree_18_class_25 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0]) || data[0 /* vlan */] <41.0f ? 
         (data[3 /* no_of_ips */] <0.5f ? 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <34.0f ? 
                 (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.234375f ? 
                     (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.15625f ? 
                        0.0f : 
                        7.158196E-4f) : 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <30.5f ? 
                        0.002803187f : 
                        0.6666667f)) : 
                 (data[0 /* vlan */] <38.5f ? 
                     (data[2 /* no_of_characters */] <80.5f ? 
                        0.0f : 
                        0.82188296f) : 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.078125f ? 
                        0.9971115f : 
                        1.0f))) : 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <290.5f ? 
                 (data[5 /* 4_letter_word */] <0.05859375f ? 
                     (data[3 /* no_of_ips */] <1.5f ? 
                        0.1288168f : 
                        0.9998092f) : 
                     (Double.isNaN(data[12]) || data[12 /* 11_letter_word */] <0.1328125f ? 
                        0.57648635f : 
                        1.0f)) : 
                0.0f)) : 
         (Double.isNaN(data[0]) || data[0 /* vlan */] <170.5f ? 
            0.0f : 
             (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.83203125f ? 
                 (data[5 /* 4_letter_word */] <0.32421875f ? 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.2836914f ? 
                        0.0f : 
                        1.0f) : 
                    0.0f) : 
                 (data[0 /* vlan */] <177.5f ? 
                    1.0f : 
                    0.0f))));
    return pred;
  } // constant pool size = 74B, number of visited nodes = 18, static init size = 0B
}

class log_drf_1_Tree_18_class_26 {
  static final double score0(double[] data) {
    double pred =      (data[0 /* vlan */] <29.5f ? 
         (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.03125f ? 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <28.0f ? 
                0.0f : 
                0.67580646f) : 
            0.0f) : 
        0.0f);
    return pred;
  } // constant pool size = 14B, number of visited nodes = 3, static init size = 0B
}

class log_drf_1_Tree_18_class_27 {
  static final double score0(double[] data) {
    double pred =      (data[0 /* vlan */] <14.5f ? 
         (data[6 /* 5_letter_word */] <0.03125f ? 
             (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.22460938f ? 
                0.0f : 
                 (data[2 /* no_of_characters */] <225.5f ? 
                    0.0f : 
                     (data[9 /* 8_letter_word */] <0.0390625f ? 
                        1.0f : 
                        0.0f))) : 
            0.0f) : 
        0.0f);
    return pred;
  } // constant pool size = 22B, number of visited nodes = 5, static init size = 0B
}

class log_drf_1_Tree_18_class_28 {
  static final double score0(double[] data) {
    double pred =      (data[0 /* vlan */] <14.5f ? 
         (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <3.0f ? 
            0.0f : 
            1.0f) : 
        0.0f);
    return pred;
  } // constant pool size = 10B, number of visited nodes = 2, static init size = 0B
}

class log_drf_1_Tree_18_class_29 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.0087890625f ? 
         (Double.isNaN(data[12]) || data[12 /* 11_letter_word */] <0.0390625f ? 
            8.528275E-6f : 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <123.5f ? 
                0.0f : 
                 (data[12 /* 11_letter_word */] <0.10662842f ? 
                    1.0f : 
                    0.0f))) : 
         (Double.isNaN(data[14]) || data[14 /* 13_letter_word */] <0.0068359375f ? 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <921.0f ? 
                0.0f : 
                 (Double.isNaN(data[4]) || data[4 /* no_of_macs */] <0.5f ? 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <971.5f ? 
                        1.0f : 
                        0.0f) : 
                    0.0f)) : 
             (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.44726562f ? 
                0.0f : 
                1.0f)));
    return pred;
  } // constant pool size = 38B, number of visited nodes = 9, static init size = 0B
}

class log_drf_1_Tree_18_class_30 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0]) || data[0 /* vlan */] <177.0f ? 
        0.0f : 
         (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.22460938f ? 
             (data[0 /* vlan */] <180.5f ? 
                 (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.125f ? 
                    0.014925373f : 
                    0.06666667f) : 
                0.0f) : 
             (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <3.5f ? 
                 (data[5 /* 4_letter_word */] <0.53515625f ? 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <569.5f ? 
                        0.84810126f : 
                        0.0f) : 
                     (data[1 /* type_of_time */] <3.0f ? 
                        1.0f : 
                        0.0f)) : 
                0.0f)));
    return pred;
  } // constant pool size = 34B, number of visited nodes = 8, static init size = 0B
}

class log_drf_1_Tree_18_class_31 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0]) || data[0 /* vlan */] <100.0f ? 
         (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <1.5f ? 
             (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.03125f ? 
                 (data[2 /* no_of_characters */] <130.5f ? 
                     (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.4140625f ? 
                        0.057619307f : 
                        0.23463687f) : 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <60.5f ? 
                        7.054448E-4f : 
                        0.45762712f)) : 
                 (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.55859375f ? 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.0390625f ? 
                        0.0051779076f : 
                        0.0f) : 
                     (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                        0.0f : 
                        1.0f))) : 
            0.0f) : 
         (data[0 /* vlan */] <136.0f ? 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <273.0f ? 
                0.0f : 
                 (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                    0.0f : 
                    1.0f)) : 
            0.0f));
    return pred;
  } // constant pool size = 50B, number of visited nodes = 12, static init size = 0B
}

class log_drf_1_Tree_18_class_32 {
  static final double score0(double[] data) {
    double pred =      (data[0 /* vlan */] <29.5f ? 
         (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.23535156f ? 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <28.5f ? 
                 (data[2 /* no_of_characters */] <100.5f ? 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <90.5f ? 
                        0.0f : 
                        0.0021978023f) : 
                    0.0f) : 
                 (data[5 /* 4_letter_word */] <0.0625f ? 
                    1.0f : 
                     (data[3 /* no_of_ips */] <0.5f ? 
                        0.059945505f : 
                        0.013818387f))) : 
             (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.125f ? 
                0.0f : 
                 (data[7 /* 6_letter_word */] <0.125f ? 
                    0.0f : 
                    0.05861244f))) : 
        0.0f);
    return pred;
  } // constant pool size = 38B, number of visited nodes = 9, static init size = 0B
}

class log_drf_1_Tree_18_class_33 {
  static final double score0(double[] data) {
    double pred =      (data[0 /* vlan */] <7.5f ? 
         (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.23535156f ? 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <118.0f ? 
                1.0f : 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <130.5f ? 
                    0.0f : 
                    0.14285715f)) : 
             (data[9 /* 8_letter_word */] <0.125f ? 
                1.0f : 
                0.016949153f)) : 
         (data[0 /* vlan */] <17.5f ? 
             (data[2 /* no_of_characters */] <85.5f ? 
                 (data[5 /* 4_letter_word */] <0.44921875f ? 
                    0.0f : 
                    1.0f) : 
                 (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.078125f ? 
                     (data[7 /* 6_letter_word */] <0.078125f ? 
                        0.007738815f : 
                        0.0f) : 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.046875f ? 
                        0.01490313f : 
                        0.28865978f))) : 
             (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.73046875f ? 
                 (data[8 /* 7_letter_word */] <0.015625f ? 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.3203125f ? 
                        2.8085153E-4f : 
                        7.557627E-4f) : 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.6923828f ? 
                        1.1275737E-4f : 
                        0.0f)) : 
                 (data[5 /* 4_letter_word */] <0.7757416f ? 
                     (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.125f ? 
                        0.083769634f : 
                        0.0f) : 
                    0.0f))));
    return pred;
  } // constant pool size = 70B, number of visited nodes = 17, static init size = 0B
}

class log_drf_1_Tree_18_class_34 {
  static final double score0(double[] data) {
    double pred =      (data[0 /* vlan */] <10.0f ? 
         (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
            0.0f : 
            0.5f) : 
         (data[0 /* vlan */] <17.5f ? 
             (data[2 /* no_of_characters */] <120.5f ? 
                 (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.0859375f ? 
                    0.0f : 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <97.0f ? 
                        0.0f : 
                        0.5f)) : 
                0.0f) : 
            0.0f));
    return pred;
  } // constant pool size = 26B, number of visited nodes = 6, static init size = 0B
}

class log_drf_1_Tree_18_class_35 {
  static final double score0(double[] data) {
    double pred =      (data[0 /* vlan */] <12.5f ? 
         (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.0625f ? 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <11.5f ? 
                0.0f : 
                 (data[2 /* no_of_characters */] <95.5f ? 
                    1.0f : 
                    0.0f)) : 
            0.0f) : 
         (data[0 /* vlan */] <14.5f ? 
             (data[2 /* no_of_characters */] <90.5f ? 
                 (data[5 /* 4_letter_word */] <0.16796875f ? 
                    1.0f : 
                    0.0f) : 
                 (data[1 /* type_of_time */] <4.5f ? 
                    0.0f : 
                     (data[3 /* no_of_ips */] <3.0f ? 
                        0.002038736f : 
                        0.0f))) : 
            0.0f));
    return pred;
  } // constant pool size = 38B, number of visited nodes = 9, static init size = 0B
}

class log_drf_1_Tree_18_class_36 {
  static final double score0(double[] data) {
    double pred =      (data[0 /* vlan */] <5.5f ? 
         (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.111328125f ? 
            0.07971015f : 
            0.0f) : 
        0.0f);
    return pred;
  } // constant pool size = 10B, number of visited nodes = 2, static init size = 0B
}

class log_drf_1_Tree_18_class_37 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0]) || data[0 /* vlan */] <156.5f ? 
         (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
             (data[0 /* vlan */] <15.0f ? 
                 (data[1 /* type_of_time */] <4.5f ? 
                     (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.0859375f ? 
                        0.9991543f : 
                        1.0f) : 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.2890625f ? 
                        0.0f : 
                        0.16666667f)) : 
                 (data[1 /* type_of_time */] <2.5f ? 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.171875f ? 
                        0.9836066f : 
                        0.58064514f) : 
                    0.0f)) : 
             (data[5 /* 4_letter_word */] <0.056640625f ? 
                 (Double.isNaN(data[4]) || data[4 /* no_of_macs */] <0.5f ? 
                     (data[6 /* 5_letter_word */] <0.4140625f ? 
                        0.0f : 
                        1.3097576E-4f) : 
                    0.0f) : 
                0.0f)) : 
         (Double.isNaN(data[0]) || data[0 /* vlan */] <170.5f ? 
             (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.05078125f ? 
                 (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.2890625f ? 
                     (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.18292236f ? 
                        0.99645585f : 
                        0.7732342f) : 
                     (Double.isNaN(data[1]) || data[1 /* type_of_time */] <3.5f ? 
                        0.0f : 
                        1.0f)) : 
                 (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <1.0f ? 
                    1.0f : 
                    0.0f)) : 
             (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.22460938f ? 
                 (data[1 /* type_of_time */] <4.5f ? 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.1015625f ? 
                        0.99483204f : 
                        1.0f) : 
                     (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.03125f ? 
                        0.021488871f : 
                        0.0f)) : 
                 (data[5 /* 4_letter_word */] <0.2890625f ? 
                    0.08108108f : 
                    0.0f))));
    return pred;
  } // constant pool size = 90B, number of visited nodes = 22, static init size = 0B
}

class log_drf_1_Tree_18_class_38 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.44970703f ? 
        1.0653939E-5f : 
         (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.41601562f ? 
            0.0f : 
             (data[2 /* no_of_characters */] <95.5f ? 
                0.16666667f : 
                0.0f)));
    return pred;
  } // constant pool size = 14B, number of visited nodes = 3, static init size = 0B
}


class log_drf_1_Forest_19 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += log_drf_1_Tree_19_class_0.score0(fdata);
    preds[2] += log_drf_1_Tree_19_class_1.score0(fdata);
    preds[3] += log_drf_1_Tree_19_class_2.score0(fdata);
    preds[4] += log_drf_1_Tree_19_class_3.score0(fdata);
    preds[5] += log_drf_1_Tree_19_class_4.score0(fdata);
    preds[6] += log_drf_1_Tree_19_class_5.score0(fdata);
    preds[7] += log_drf_1_Tree_19_class_6.score0(fdata);
    preds[8] += log_drf_1_Tree_19_class_7.score0(fdata);
    preds[9] += log_drf_1_Tree_19_class_8.score0(fdata);
    preds[10] += log_drf_1_Tree_19_class_9.score0(fdata);
    preds[11] += log_drf_1_Tree_19_class_10.score0(fdata);
    preds[12] += log_drf_1_Tree_19_class_11.score0(fdata);
    preds[13] += log_drf_1_Tree_19_class_12.score0(fdata);
    preds[14] += log_drf_1_Tree_19_class_13.score0(fdata);
    preds[15] += log_drf_1_Tree_19_class_14.score0(fdata);
    preds[16] += log_drf_1_Tree_19_class_15.score0(fdata);
    preds[17] += log_drf_1_Tree_19_class_16.score0(fdata);
    preds[18] += log_drf_1_Tree_19_class_17.score0(fdata);
    preds[19] += log_drf_1_Tree_19_class_18.score0(fdata);
    preds[20] += log_drf_1_Tree_19_class_19.score0(fdata);
    preds[21] += log_drf_1_Tree_19_class_20.score0(fdata);
    preds[22] += log_drf_1_Tree_19_class_21.score0(fdata);
    preds[23] += log_drf_1_Tree_19_class_22.score0(fdata);
    preds[24] += log_drf_1_Tree_19_class_23.score0(fdata);
    preds[25] += log_drf_1_Tree_19_class_24.score0(fdata);
    preds[26] += log_drf_1_Tree_19_class_25.score0(fdata);
    preds[27] += log_drf_1_Tree_19_class_26.score0(fdata);
    preds[28] += log_drf_1_Tree_19_class_27.score0(fdata);
    preds[29] += log_drf_1_Tree_19_class_28.score0(fdata);
    preds[30] += log_drf_1_Tree_19_class_29.score0(fdata);
    preds[31] += log_drf_1_Tree_19_class_30.score0(fdata);
    preds[32] += log_drf_1_Tree_19_class_31.score0(fdata);
    preds[33] += log_drf_1_Tree_19_class_32.score0(fdata);
    preds[34] += log_drf_1_Tree_19_class_33.score0(fdata);
    preds[35] += log_drf_1_Tree_19_class_34.score0(fdata);
    preds[36] += log_drf_1_Tree_19_class_35.score0(fdata);
    preds[37] += log_drf_1_Tree_19_class_36.score0(fdata);
    preds[38] += log_drf_1_Tree_19_class_37.score0(fdata);
    preds[39] += log_drf_1_Tree_19_class_38.score0(fdata);
  }
}
class log_drf_1_Tree_19_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[4]) || data[4 /* no_of_macs */] <2.5f ? 
         (Double.isNaN(data[4]) || data[4 /* no_of_macs */] <0.5f ? 
            0.0f : 
             (Double.isNaN(data[12]) || data[12 /* 11_letter_word */] <0.009765625f ? 
                 (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.015625f ? 
                     (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.0234375f ? 
                        6.97188E-4f : 
                        0.10344828f) : 
                    1.0f) : 
                1.0f)) : 
         (data[6 /* 5_letter_word */] <0.0546875f ? 
            0.0f : 
             (data[5 /* 4_letter_word */] <0.119140625f ? 
                0.0f : 
                1.0f)));
    return pred;
  } // constant pool size = 30B, number of visited nodes = 7, static init size = 0B
}

class log_drf_1_Tree_19_class_1 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.39208984f ? 
         (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.0126953125f ? 
             (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.16015625f ? 
                 (data[8 /* 7_letter_word */] <0.2578125f ? 
                     (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.015625f ? 
                        4.93198E-4f : 
                        0.0f) : 
                    0.0f) : 
                 (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.0390625f ? 
                     (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
                        0.0f : 
                        0.0033820346f) : 
                    0.0f)) : 
            0.0f) : 
         (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.14160156f ? 
            0.0f : 
             (data[5 /* 4_letter_word */] <0.4087124f ? 
                 (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.1015625f ? 
                     (data[1 /* type_of_time */] <3.5f ? 
                        0.48979592f : 
                        0.08372274f) : 
                    0.0f) : 
                 (data[1 /* type_of_time */] <3.5f ? 
                     (data[6 /* 5_letter_word */] <0.20964508f ? 
                        0.625f : 
                        0.0f) : 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <260.5f ? 
                        0.0f : 
                        0.074441686f)))));
    return pred;
  } // constant pool size = 58B, number of visited nodes = 14, static init size = 0B
}

class log_drf_1_Tree_19_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.49560547f ? 
         (Double.isNaN(data[4]) || data[4 /* no_of_macs */] <3.5f ? 
             (data[8 /* 7_letter_word */] <0.25976562f ? 
                 (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.2109375f ? 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <160.5f ? 
                        0.0069771972f : 
                        7.613569E-4f) : 
                    0.0f) : 
                 (Double.isNaN(data[13]) || data[13 /* 12_letter_word */] <0.03125f ? 
                     (data[2 /* no_of_characters */] <140.5f ? 
                        0.0019528316f : 
                        4.8094265E-5f) : 
                     (data[13 /* 12_letter_word */] <0.17407227f ? 
                        1.0f : 
                        0.0f))) : 
            0.33333334f) : 
         (data[1 /* type_of_time */] <4.5f ? 
            0.0f : 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <137.5f ? 
                0.0f : 
                 (data[7 /* 6_letter_word */] <0.15625f ? 
                     (data[3 /* no_of_ips */] <0.5f ? 
                        0.12068965f : 
                        0.0f) : 
                     (data[7 /* 6_letter_word */] <0.18310547f ? 
                        0.95238096f : 
                        1.0f)))));
    return pred;
  } // constant pool size = 54B, number of visited nodes = 13, static init size = 0B
}

class log_drf_1_Tree_19_class_3 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.39208984f ? 
         (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.0126953125f ? 
             (data[8 /* 7_letter_word */] <0.29296875f ? 
                 (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.1328125f ? 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <280.5f ? 
                        2.2040996E-4f : 
                        0.07765043f) : 
                    0.0f) : 
                0.0f) : 
            0.0f) : 
         (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.31640625f ? 
             (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                0.0f : 
                 (Double.isNaN(data[4]) || data[4 /* no_of_macs */] <0.5f ? 
                     (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.21875f ? 
                        0.0f : 
                        0.972973f) : 
                    0.0f)) : 
             (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.083984375f ? 
                 (data[0 /* vlan */] <25.5f ? 
                    0.0f : 
                     (data[3 /* no_of_ips */] <0.5f ? 
                        0.0f : 
                        0.9535224f)) : 
                0.0f)));
    return pred;
  } // constant pool size = 50B, number of visited nodes = 12, static init size = 0B
}

class log_drf_1_Tree_19_class_4 {
  static final double score0(double[] data) {
    double pred =      (data[1 /* type_of_time */] <4.5f ? 
        0.0f : 
         (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.14160156f ? 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <25.5f ? 
                0.0f : 
                 (data[2 /* no_of_characters */] <110.5f ? 
                    2.4402147E-4f : 
                    0.0f)) : 
             (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.31054688f ? 
                 (data[0 /* vlan */] <25.5f ? 
                    0.0f : 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.234375f ? 
                        0.0f : 
                        0.0021091485f)) : 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.16796875f ? 
                    0.0f : 
                    1.0f))));
    return pred;
  } // constant pool size = 34B, number of visited nodes = 8, static init size = 0B
}

class log_drf_1_Tree_19_class_5 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.27929688f ? 
        8.766407E-5f : 
         (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.08691406f ? 
             (data[8 /* 7_letter_word */] <0.31054688f ? 
                0.0f : 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.3547058f ? 
                     (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.0859375f ? 
                        7.8882126E-4f : 
                        0.0f) : 
                    0.0f)) : 
             (Double.isNaN(data[12]) || data[12 /* 11_letter_word */] <0.29101562f ? 
                 (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.06640625f ? 
                     (data[6 /* 5_letter_word */] <0.095972694f ? 
                        0.90909094f : 
                        6.344283E-4f) : 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.2109375f ? 
                        0.010971786f : 
                        0.8888889f)) : 
                1.0f)));
    return pred;
  } // constant pool size = 38B, number of visited nodes = 9, static init size = 0B
}

class log_drf_1_Tree_19_class_6 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.24804688f ? 
         (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.0126953125f ? 
             (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.83203125f ? 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.9140625f ? 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.03125f ? 
                        9.280742E-5f : 
                        0.0f) : 
                     (data[2 /* no_of_characters */] <60.5f ? 
                        0.9f : 
                        0.0f)) : 
                0.0059096664f) : 
            0.0f) : 
         (data[1 /* type_of_time */] <4.5f ? 
            0.0f : 
             (data[2 /* no_of_characters */] <85.5f ? 
                 (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.29003906f ? 
                     (data[8 /* 7_letter_word */] <0.1015625f ? 
                        0.18700787f : 
                        0.0f) : 
                    0.78571427f) : 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <65.5f ? 
                     (Double.isNaN(data[4]) || data[4 /* no_of_macs */] <0.5f ? 
                        3.7845338E-4f : 
                        0.0f) : 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.1875f ? 
                        0.026083298f : 
                        0.66169155f)))));
    return pred;
  } // constant pool size = 54B, number of visited nodes = 13, static init size = 0B
}

class log_drf_1_Tree_19_class_7 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.94970703f ? 
        0.0f : 
         (Double.isNaN(data[4]) || data[4 /* no_of_macs */] <0.5f ? 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <150.5f ? 
                 (data[3 /* no_of_ips */] <0.5f ? 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <146.5f ? 
                        0.0f : 
                        0.022222223f) : 
                    0.0f) : 
                 (data[1 /* type_of_time */] <4.5f ? 
                    0.0f : 
                     (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <1.5f ? 
                        0.062154695f : 
                        1.0f))) : 
            0.0f));
    return pred;
  } // constant pool size = 30B, number of visited nodes = 7, static init size = 0B
}

class log_drf_1_Tree_19_class_8 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.53759766f ? 
         (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.0087890625f ? 
             (data[8 /* 7_letter_word */] <0.17382812f ? 
                 (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.1328125f ? 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.1796875f ? 
                        0.0022169438f : 
                        7.525021E-5f) : 
                    0.0f) : 
                1.8066521E-5f) : 
            0.0f) : 
         (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.3486328f ? 
             (data[5 /* 4_letter_word */] <0.59178543f ? 
                 (data[7 /* 6_letter_word */] <0.03515625f ? 
                     (data[6 /* 5_letter_word */] <0.21517181f ? 
                        0.0f : 
                        1.0f) : 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <669.5f ? 
                        0.0f : 
                        0.8333333f)) : 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <834.0f ? 
                    0.0f : 
                     (data[6 /* 5_letter_word */] <0.14435577f ? 
                        0.0f : 
                        0.9142857f))) : 
             (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.046875f ? 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.046875f ? 
                     (data[3 /* no_of_ips */] <2.5f ? 
                        0.0f : 
                        1.0f) : 
                    0.0f) : 
                1.0f)));
    return pred;
  } // constant pool size = 62B, number of visited nodes = 15, static init size = 0B
}

class log_drf_1_Tree_19_class_9 {
  static final double score0(double[] data) {
    double pred =      (data[1 /* type_of_time */] <3.5f ? 
         (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.29101562f ? 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <200.5f ? 
                 (data[10 /* 9_letter_word */] <0.1015625f ? 
                     (data[3 /* no_of_ips */] <1.0f ? 
                        0.0f : 
                        0.984252f) : 
                     (data[5 /* 4_letter_word */] <0.125f ? 
                        0.0f : 
                        0.9978448f)) : 
                 (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.05078125f ? 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <249.0f ? 
                        0.0f : 
                        0.05263158f) : 
                     (data[2 /* no_of_characters */] <250.0f ? 
                        0.0f : 
                        1.0f))) : 
             (data[3 /* no_of_ips */] <1.5f ? 
                0.0f : 
                1.0f)) : 
        0.0f);
    return pred;
  } // constant pool size = 42B, number of visited nodes = 10, static init size = 0B
}

class log_drf_1_Tree_19_class_10 {
  static final double score0(double[] data) {
    double pred =      (data[1 /* type_of_time */] <4.5f ? 
        0.0f : 
         (Double.isNaN(data[0]) || data[0 /* vlan */] <154.5f ? 
            0.0f : 
             (data[0 /* vlan */] <170.0f ? 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.25f ? 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.3359375f ? 
                        0.0f : 
                        1.0f) : 
                    0.33333334f) : 
                0.0f)));
    return pred;
  } // constant pool size = 22B, number of visited nodes = 5, static init size = 0B
}

class log_drf_1_Tree_19_class_11 {
  static final double score0(double[] data) {
    double pred =     5.0E-6f;
    return pred;
  } // constant pool size = 2B, number of visited nodes = 0, static init size = 0B
}

class log_drf_1_Tree_19_class_12 {
  static final double score0(double[] data) {
    double pred =      (data[1 /* type_of_time */] <4.5f ? 
        0.0f : 
         (Double.isNaN(data[0]) || data[0 /* vlan */] <593.5f ? 
            0.0f : 
             (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.16796875f ? 
                 (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                    0.0f : 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.1015625f ? 
                        0.95348835f : 
                        0.0f)) : 
                0.0f)));
    return pred;
  } // constant pool size = 22B, number of visited nodes = 5, static init size = 0B
}

class log_drf_1_Tree_19_class_13 {
  static final double score0(double[] data) {
    double pred =      (data[1 /* type_of_time */] <4.5f ? 
        0.0f : 
         (Double.isNaN(data[0]) || data[0 /* vlan */] <593.5f ? 
             (data[0 /* vlan */] <3.5f ? 
                 (data[5 /* 4_letter_word */] <0.2890625f ? 
                    1.0f : 
                    0.0f) : 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <155.0f ? 
                     (data[3 /* no_of_ips */] <0.5f ? 
                        0.001281835f : 
                        0.0f) : 
                     (data[7 /* 6_letter_word */] <0.03125f ? 
                        0.02691218f : 
                        0.0f))) : 
             (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.43359375f ? 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.69921875f ? 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <40.5f ? 
                        0.98275864f : 
                        0.16666667f) : 
                     (data[2 /* no_of_characters */] <459.5f ? 
                        0.2f : 
                        0.0f)) : 
                0.0f)));
    return pred;
  } // constant pool size = 46B, number of visited nodes = 11, static init size = 0B
}

class log_drf_1_Tree_19_class_14 {
  static final double score0(double[] data) {
    double pred =      (data[1 /* type_of_time */] <2.5f ? 
         (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.22460938f ? 
             (data[5 /* 4_letter_word */] <0.22460938f ? 
                 (Double.isNaN(data[12]) || data[12 /* 11_letter_word */] <0.171875f ? 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.12634277f ? 
                        0.0f : 
                        0.2f) : 
                    1.0f) : 
                0.0f) : 
            0.0f) : 
        0.0f);
    return pred;
  } // constant pool size = 22B, number of visited nodes = 5, static init size = 0B
}

class log_drf_1_Tree_19_class_15 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.94970703f ? 
         (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.3095703f ? 
             (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.47070312f ? 
                 (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.2109375f ? 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <200.5f ? 
                        0.0017186068f : 
                        0.008911468f) : 
                    0.0f) : 
                0.0f) : 
             (data[3 /* no_of_ips */] <0.5f ? 
                 (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.16796875f ? 
                     (data[0 /* vlan */] <154.5f ? 
                        0.44025156f : 
                        0.0f) : 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.171875f ? 
                        0.0f : 
                        0.125f)) : 
                0.0f)) : 
         (Double.isNaN(data[4]) || data[4 /* no_of_macs */] <0.5f ? 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <100.5f ? 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <98.5f ? 
                    0.0f : 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <99.5f ? 
                        0.2616279f : 
                        0.53351957f)) : 
                0.0f) : 
            0.0f));
    return pred;
  } // constant pool size = 54B, number of visited nodes = 13, static init size = 0B
}

class log_drf_1_Tree_19_class_16 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.94970703f ? 
         (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.3095703f ? 
             (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.013671875f ? 
                6.881602E-5f : 
                0.0f) : 
             (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.6325197f ? 
                0.0f : 
                0.5f)) : 
         (Double.isNaN(data[4]) || data[4 /* no_of_macs */] <0.5f ? 
             (data[2 /* no_of_characters */] <80.5f ? 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <79.5f ? 
                    0.0f : 
                    0.8333333f) : 
                0.0f) : 
            0.0f));
    return pred;
  } // constant pool size = 30B, number of visited nodes = 7, static init size = 0B
}

class log_drf_1_Tree_19_class_17 {
  static final double score0(double[] data) {
    double pred =      (data[1 /* type_of_time */] <4.5f ? 
        1.01495025E-5f : 
         (Double.isNaN(data[0]) || data[0 /* vlan */] <177.5f ? 
             (Double.isNaN(data[12]) || data[12 /* 11_letter_word */] <0.04296875f ? 
                0.0f : 
                 (data[12 /* 11_letter_word */] <0.061660767f ? 
                    0.5f : 
                    0.0f)) : 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <659.5f ? 
                0.0f : 
                 (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <3.5f ? 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.0625f ? 
                        0.7878788f : 
                        0.0f) : 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.515625f ? 
                        0.9794521f : 
                        0.27272728f)))));
    return pred;
  } // constant pool size = 34B, number of visited nodes = 8, static init size = 0B
}

class log_drf_1_Tree_19_class_18 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.4580078f ? 
        0.0f : 
        1.8580107E-5f);
    return pred;
  } // constant pool size = 6B, number of visited nodes = 1, static init size = 0B
}

class log_drf_1_Tree_19_class_19 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.23583984f ? 
         (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.19092894f ? 
            0.0f : 
             (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.15625f ? 
                0.0f : 
                 (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.1015625f ? 
                    0.0f : 
                     (data[7 /* 6_letter_word */] <0.1015625f ? 
                        0.0f : 
                        0.2f)))) : 
         (data[11 /* 10_letter_word */] <0.2679286f ? 
             (data[5 /* 4_letter_word */] <0.18554688f ? 
                0.0f : 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <145.5f ? 
                     (data[7 /* 6_letter_word */] <0.12597656f ? 
                        0.0f : 
                        0.9165545f) : 
                    0.0f)) : 
            0.0f));
    return pred;
  } // constant pool size = 38B, number of visited nodes = 9, static init size = 0B
}

class log_drf_1_Tree_19_class_20 {
  static final double score0(double[] data) {
    double pred =      (data[1 /* type_of_time */] <4.5f ? 
        0.0f : 
         (data[0 /* vlan */] <23.5f ? 
             (data[0 /* vlan */] <17.5f ? 
                0.0f : 
                 (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.3203125f ? 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <180.5f ? 
                        0.99993676f : 
                        0.9995368f) : 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.6328125f ? 
                        0.9995587f : 
                        0.96153843f))) : 
            0.0f));
    return pred;
  } // constant pool size = 26B, number of visited nodes = 6, static init size = 0B
}

class log_drf_1_Tree_19_class_21 {
  static final double score0(double[] data) {
    double pred =      (data[1 /* type_of_time */] <3.5f ? 
         (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.22460938f ? 
            0.0f : 
             (Double.isNaN(data[12]) || data[12 /* 11_letter_word */] <0.125f ? 
                0.0f : 
                1.0f)) : 
         (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.1484375f ? 
             (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <1.5f ? 
                 (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.10546875f ? 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <240.5f ? 
                        0.0018696339f : 
                        0.009871668f) : 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.09161377f ? 
                        0.0060812454f : 
                        0.42857143f)) : 
                 (Double.isNaN(data[4]) || data[4 /* no_of_macs */] <0.5f ? 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.046875f ? 
                        1.9091256E-4f : 
                        0.0f) : 
                    0.0f)) : 
             (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.15625f ? 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.01953125f ? 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <160.5f ? 
                        1.03140635E-4f : 
                        5.197505E-4f) : 
                    0.0f) : 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <250.5f ? 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.3147583f ? 
                        0.0f : 
                        7.256894E-4f) : 
                     (data[8 /* 7_letter_word */] <0.1763672f ? 
                        0.041666668f : 
                        0.0030487804f)))));
    return pred;
  } // constant pool size = 66B, number of visited nodes = 16, static init size = 0B
}

class log_drf_1_Tree_19_class_22 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.49560547f ? 
        6.8407408E-6f : 
         (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.31640625f ? 
             (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.15429688f ? 
                0.0f : 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.083984375f ? 
                    0.0f : 
                     (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.0859375f ? 
                        0.0f : 
                        0.16666667f))) : 
             (data[3 /* no_of_ips */] <0.5f ? 
                 (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.6328125f ? 
                    0.0f : 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <220.5f ? 
                        0.0f : 
                        0.13636364f)) : 
                0.0f)));
    return pred;
  } // constant pool size = 34B, number of visited nodes = 8, static init size = 0B
}

class log_drf_1_Tree_19_class_23 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.13378906f ? 
         (Double.isNaN(data[4]) || data[4 /* no_of_macs */] <0.5f ? 
             (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.58203125f ? 
                 (data[0 /* vlan */] <17.5f ? 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.6171875f ? 
                        0.006426032f : 
                        0.5625f) : 
                    0.0f) : 
                 (data[2 /* no_of_characters */] <130.5f ? 
                    0.0f : 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.171875f ? 
                        0.93401015f : 
                        0.0f))) : 
            0.0f) : 
         (data[11 /* 10_letter_word */] <0.15493679f ? 
             (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.072265625f ? 
                0.99903286f : 
                0.0f) : 
            0.0f));
    return pred;
  } // constant pool size = 38B, number of visited nodes = 9, static init size = 0B
}

class log_drf_1_Tree_19_class_24 {
  static final double score0(double[] data) {
    double pred =      (data[1 /* type_of_time */] <4.5f ? 
        0.0f : 
         (data[0 /* vlan */] <11.5f ? 
             (data[5 /* 4_letter_word */] <0.072265625f ? 
                 (data[7 /* 6_letter_word */] <0.16796875f ? 
                    1.0f : 
                    0.0f) : 
                0.0f) : 
            0.0f));
    return pred;
  } // constant pool size = 18B, number of visited nodes = 4, static init size = 0B
}

class log_drf_1_Tree_19_class_25 {
  static final double score0(double[] data) {
    double pred =      (data[1 /* type_of_time */] <4.5f ? 
        0.0f : 
         (Double.isNaN(data[0]) || data[0 /* vlan */] <29.5f ? 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <26.0f ? 
                0.0f : 
                 (data[5 /* 4_letter_word */] <0.44921875f ? 
                     (data[6 /* 5_letter_word */] <0.3515625f ? 
                        0.64224136f : 
                        0.006369427f) : 
                     (data[0 /* vlan */] <28.0f ? 
                        0.8125f : 
                        0.0f))) : 
             (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.41601562f ? 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <45.5f ? 
                     (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.4453125f ? 
                        0.96909267f : 
                        1.0f) : 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.96875f ? 
                        0.0f : 
                        0.021505376f)) : 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.25f ? 
                    1.0f : 
                    0.0f))));
    return pred;
  } // constant pool size = 46B, number of visited nodes = 11, static init size = 0B
}

class log_drf_1_Tree_19_class_26 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.6513672f ? 
        0.0f : 
         (Double.isNaN(data[4]) || data[4 /* no_of_macs */] <0.5f ? 
             (data[2 /* no_of_characters */] <63.0f ? 
                 (data[8 /* 7_letter_word */] <0.16796875f ? 
                    0.0f : 
                    0.99527186f) : 
                0.0f) : 
            0.0f));
    return pred;
  } // constant pool size = 18B, number of visited nodes = 4, static init size = 0B
}

class log_drf_1_Tree_19_class_27 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.49560547f ? 
        0.0f : 
        3.716298E-5f);
    return pred;
  } // constant pool size = 6B, number of visited nodes = 1, static init size = 0B
}

class log_drf_1_Tree_19_class_28 {
  static final double score0(double[] data) {
    double pred =      (data[1 /* type_of_time */] <4.5f ? 
        0.0f : 
         (data[0 /* vlan */] <17.5f ? 
             (data[5 /* 4_letter_word */] <0.1171875f ? 
                 (Double.isNaN(data[14]) || data[14 /* 13_letter_word */] <0.07421875f ? 
                    0.0f : 
                    1.0f) : 
                 (data[2 /* no_of_characters */] <415.0f ? 
                    0.0f : 
                     (data[6 /* 5_letter_word */] <0.15625f ? 
                        0.8f : 
                        1.0f))) : 
            0.0f));
    return pred;
  } // constant pool size = 26B, number of visited nodes = 6, static init size = 0B
}

class log_drf_1_Tree_19_class_29 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.0087890625f ? 
        2.1253647E-5f : 
         (data[11 /* 10_letter_word */] <0.054284096f ? 
             (data[8 /* 7_letter_word */] <0.05859375f ? 
                1.0f : 
                0.0f) : 
            0.0f));
    return pred;
  } // constant pool size = 14B, number of visited nodes = 3, static init size = 0B
}

class log_drf_1_Tree_19_class_30 {
  static final double score0(double[] data) {
    double pred =      (data[1 /* type_of_time */] <1.5f ? 
        1.0f : 
        0.0f);
    return pred;
  } // constant pool size = 6B, number of visited nodes = 1, static init size = 0B
}

class log_drf_1_Tree_19_class_31 {
  static final double score0(double[] data) {
    double pred =      (data[1 /* type_of_time */] <4.5f ? 
        0.0f : 
         (Double.isNaN(data[0]) || data[0 /* vlan */] <64.5f ? 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <37.0f ? 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <360.5f ? 
                    0.0f : 
                     (data[7 /* 6_letter_word */] <0.0390625f ? 
                        0.069767445f : 
                        0.0f)) : 
                 (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                     (data[2 /* no_of_characters */] <80.5f ? 
                        0.5714286f : 
                        3.029385E-4f) : 
                     (data[6 /* 5_letter_word */] <0.1796875f ? 
                        0.9411765f : 
                        0.0f))) : 
             (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.41601562f ? 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.4609375f ? 
                     (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.109375f ? 
                        0.1276783f : 
                        0.55525607f) : 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <150.5f ? 
                        0.9723757f : 
                        0.0f)) : 
                1.0f)));
    return pred;
  } // constant pool size = 50B, number of visited nodes = 12, static init size = 0B
}

class log_drf_1_Tree_19_class_32 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.23583984f ? 
         (Double.isNaN(data[4]) || data[4 /* no_of_macs */] <0.5f ? 
             (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.19140625f ? 
                 (data[2 /* no_of_characters */] <130.5f ? 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.4453125f ? 
                        7.57461E-5f : 
                        0.01933488f) : 
                    0.0f) : 
                 (data[2 /* no_of_characters */] <120.5f ? 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <87.5f ? 
                        0.0f : 
                        0.32330826f) : 
                    0.0f)) : 
            0.0f) : 
         (data[11 /* 10_letter_word */] <0.2679286f ? 
             (data[5 /* 4_letter_word */] <0.18554688f ? 
                0.0f : 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <25.5f ? 
                    0.0f : 
                     (data[0 /* vlan */] <33.5f ? 
                        0.71875f : 
                        0.0f))) : 
            0.0f));
    return pred;
  } // constant pool size = 46B, number of visited nodes = 11, static init size = 0B
}

class log_drf_1_Tree_19_class_33 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.40820312f ? 
         (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.0126953125f ? 
             (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.31640625f ? 
                 (data[8 /* 7_letter_word */] <0.2578125f ? 
                     (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.015625f ? 
                        5.680406E-4f : 
                        0.0f) : 
                     (data[2 /* no_of_characters */] <100.5f ? 
                        0.006116208f : 
                        0.0f)) : 
                 (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.0859375f ? 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.4140625f ? 
                        0.0010302198f : 
                        0.0072886297f) : 
                    0.0f)) : 
            0.0f) : 
         (data[1 /* type_of_time */] <4.5f ? 
            0.0f : 
             (data[2 /* no_of_characters */] <70.5f ? 
                 (data[0 /* vlan */] <13.5f ? 
                    1.0f : 
                    0.0f) : 
                 (data[5 /* 4_letter_word */] <0.4736328f ? 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <279.5f ? 
                        0.0f : 
                        0.6447368f) : 
                     (data[0 /* vlan */] <17.5f ? 
                        0.5043478f : 
                        0.0010640086f)))));
    return pred;
  } // constant pool size = 58B, number of visited nodes = 14, static init size = 0B
}

class log_drf_1_Tree_19_class_34 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.24804688f ? 
        0.0f : 
        2.3645413E-5f);
    return pred;
  } // constant pool size = 6B, number of visited nodes = 1, static init size = 0B
}

class log_drf_1_Tree_19_class_35 {
  static final double score0(double[] data) {
    double pred =      (data[1 /* type_of_time */] <4.5f ? 
        0.0f : 
         (data[0 /* vlan */] <17.5f ? 
             (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.5859375f ? 
                 (data[7 /* 6_letter_word */] <0.046875f ? 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.7421875f ? 
                        0.004502476f : 
                        0.33333334f) : 
                    0.0f) : 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <110.5f ? 
                    0.0f : 
                     (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                        0.0f : 
                        1.0f))) : 
            0.0f));
    return pred;
  } // constant pool size = 30B, number of visited nodes = 7, static init size = 0B
}

class log_drf_1_Tree_19_class_36 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.49560547f ? 
        0.0f : 
         (Double.isNaN(data[4]) || data[4 /* no_of_macs */] <0.5f ? 
             (data[0 /* vlan */] <7.5f ? 
                 (data[7 /* 6_letter_word */] <0.25f ? 
                    0.8333333f : 
                    0.0f) : 
                0.0f) : 
            0.0f));
    return pred;
  } // constant pool size = 18B, number of visited nodes = 4, static init size = 0B
}

class log_drf_1_Tree_19_class_37 {
  static final double score0(double[] data) {
    double pred =      (data[1 /* type_of_time */] <4.5f ? 
         (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.18359375f ? 
             (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.05078125f ? 
                 (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.18359375f ? 
                     (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                        0.9972607f : 
                        0.825f) : 
                     (Double.isNaN(data[12]) || data[12 /* 11_letter_word */] <0.1015625f ? 
                        0.9779756f : 
                        0.13333334f)) : 
                 (data[1 /* type_of_time */] <3.5f ? 
                     (data[0 /* vlan */] <28.5f ? 
                        0.95238096f : 
                        0.0f) : 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <240.5f ? 
                        0.9998285f : 
                        0.99632806f))) : 
             (data[1 /* type_of_time */] <3.5f ? 
                 (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.265625f ? 
                     (data[1 /* type_of_time */] <2.5f ? 
                        0.375f : 
                        0.0f) : 
                    1.0f) : 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.125f ? 
                     (data[2 /* no_of_characters */] <260.5f ? 
                        0.9910714f : 
                        1.0f) : 
                    1.0f))) : 
         (Double.isNaN(data[0]) || data[0 /* vlan */] <154.5f ? 
             (data[0 /* vlan */] <13.5f ? 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.2890625f ? 
                    0.0f : 
                    0.5f) : 
                 (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.4765625f ? 
                    0.0f : 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.0859375f ? 
                        2.9592364E-4f : 
                        0.0f))) : 
             (data[3 /* no_of_ips */] <0.5f ? 
                 (data[0 /* vlan */] <172.0f ? 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.5f ? 
                        0.7916667f : 
                        0.8611111f) : 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <90.5f ? 
                        0.09561753f : 
                        0.0f)) : 
                0.0f)));
    return pred;
  } // constant pool size = 94B, number of visited nodes = 23, static init size = 0B
}

class log_drf_1_Tree_19_class_38 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.94970703f ? 
        5.3063627E-6f : 
         (Double.isNaN(data[4]) || data[4 /* no_of_macs */] <0.5f ? 
             (data[3 /* no_of_ips */] <1.5f ? 
                 (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                    0.0f : 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <100.5f ? 
                        0.0024420025f : 
                        0.0f)) : 
                0.0f) : 
            0.0f));
    return pred;
  } // constant pool size = 22B, number of visited nodes = 5, static init size = 0B
}


class log_drf_1_Forest_20 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += log_drf_1_Tree_20_class_0.score0(fdata);
    preds[2] += log_drf_1_Tree_20_class_1.score0(fdata);
    preds[3] += log_drf_1_Tree_20_class_2.score0(fdata);
    preds[4] += log_drf_1_Tree_20_class_3.score0(fdata);
    preds[5] += log_drf_1_Tree_20_class_4.score0(fdata);
    preds[6] += log_drf_1_Tree_20_class_5.score0(fdata);
    preds[7] += log_drf_1_Tree_20_class_6.score0(fdata);
    preds[8] += log_drf_1_Tree_20_class_7.score0(fdata);
    preds[9] += log_drf_1_Tree_20_class_8.score0(fdata);
    preds[10] += log_drf_1_Tree_20_class_9.score0(fdata);
    preds[11] += log_drf_1_Tree_20_class_10.score0(fdata);
    preds[12] += log_drf_1_Tree_20_class_11.score0(fdata);
    preds[13] += log_drf_1_Tree_20_class_12.score0(fdata);
    preds[14] += log_drf_1_Tree_20_class_13.score0(fdata);
    preds[15] += log_drf_1_Tree_20_class_14.score0(fdata);
    preds[16] += log_drf_1_Tree_20_class_15.score0(fdata);
    preds[17] += log_drf_1_Tree_20_class_16.score0(fdata);
    preds[18] += log_drf_1_Tree_20_class_17.score0(fdata);
    preds[19] += log_drf_1_Tree_20_class_18.score0(fdata);
    preds[20] += log_drf_1_Tree_20_class_19.score0(fdata);
    preds[21] += log_drf_1_Tree_20_class_20.score0(fdata);
    preds[22] += log_drf_1_Tree_20_class_21.score0(fdata);
    preds[23] += log_drf_1_Tree_20_class_22.score0(fdata);
    preds[24] += log_drf_1_Tree_20_class_23.score0(fdata);
    preds[25] += log_drf_1_Tree_20_class_24.score0(fdata);
    preds[26] += log_drf_1_Tree_20_class_25.score0(fdata);
    preds[27] += log_drf_1_Tree_20_class_26.score0(fdata);
    preds[28] += log_drf_1_Tree_20_class_27.score0(fdata);
    preds[29] += log_drf_1_Tree_20_class_28.score0(fdata);
    preds[30] += log_drf_1_Tree_20_class_29.score0(fdata);
    preds[31] += log_drf_1_Tree_20_class_30.score0(fdata);
    preds[32] += log_drf_1_Tree_20_class_31.score0(fdata);
    preds[33] += log_drf_1_Tree_20_class_32.score0(fdata);
    preds[34] += log_drf_1_Tree_20_class_33.score0(fdata);
    preds[35] += log_drf_1_Tree_20_class_34.score0(fdata);
    preds[36] += log_drf_1_Tree_20_class_35.score0(fdata);
    preds[37] += log_drf_1_Tree_20_class_36.score0(fdata);
    preds[38] += log_drf_1_Tree_20_class_37.score0(fdata);
    preds[39] += log_drf_1_Tree_20_class_38.score0(fdata);
  }
}
class log_drf_1_Tree_20_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <1040.0f ? 
         (Double.isNaN(data[13]) || data[13 /* 12_letter_word */] <0.009765625f ? 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <532.5f ? 
                 (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.2265625f ? 
                    0.0f : 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <524.5f ? 
                        9.4071605E-5f : 
                        0.2f)) : 
                 (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.0234375f ? 
                     (Double.isNaN(data[4]) || data[4 /* no_of_macs */] <0.5f ? 
                        0.0f : 
                        0.8333333f) : 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.34375f ? 
                        0.9375f : 
                        0.0f))) : 
             (Double.isNaN(data[4]) || data[4 /* no_of_macs */] <0.5f ? 
                0.0f : 
                1.0f)) : 
         (data[4 /* no_of_macs */] <1.5f ? 
            0.6666667f : 
            1.0f));
    return pred;
  } // constant pool size = 42B, number of visited nodes = 10, static init size = 0B
}

class log_drf_1_Tree_20_class_1 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <261.5f ? 
         (Double.isNaN(data[0]) || data[0 /* vlan */] <141.5f ? 
            0.0f : 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <257.5f ? 
                 (data[0 /* vlan */] <148.5f ? 
                    1.0f : 
                    0.0f) : 
                 (data[0 /* vlan */] <155.5f ? 
                    1.0f : 
                    0.0f))) : 
         (data[3 /* no_of_ips */] <1.5f ? 
             (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                0.0f : 
                 (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.038085938f ? 
                     (data[8 /* 7_letter_word */] <0.265625f ? 
                        0.0f : 
                        0.9614148f) : 
                    0.0f)) : 
            0.0f));
    return pred;
  } // constant pool size = 38B, number of visited nodes = 9, static init size = 0B
}

class log_drf_1_Tree_20_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0]) || data[0 /* vlan */] <181.5f ? 
         (Double.isNaN(data[0]) || data[0 /* vlan */] <136.5f ? 
            0.0f : 
             (data[2 /* no_of_characters */] <155.5f ? 
                 (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.53515625f ? 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.26757812f ? 
                        0.007633588f : 
                        0.11873351f) : 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.8728943f ? 
                        0.7337884f : 
                        0.0f)) : 
                 (data[0 /* vlan */] <139.5f ? 
                    0.16666667f : 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <774.5f ? 
                        0.0f : 
                        0.0030864198f)))) : 
         (data[3 /* no_of_ips */] <0.5f ? 
            0.0f : 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <165.5f ? 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <591.0f ? 
                     (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <1.5f ? 
                        1.0f : 
                        0.0f) : 
                    0.0f) : 
                 (Double.isNaN(data[13]) || data[13 /* 12_letter_word */] <0.03125f ? 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.171875f ? 
                        0.0f : 
                        0.16666667f) : 
                    1.0f))));
    return pred;
  } // constant pool size = 58B, number of visited nodes = 14, static init size = 0B
}

class log_drf_1_Tree_20_class_3 {
  static final double score0(double[] data) {
    double pred =      (data[0 /* vlan */] <29.5f ? 
         (Double.isNaN(data[0]) || data[0 /* vlan */] <28.5f ? 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <155.5f ? 
                0.0f : 
                 (data[6 /* 5_letter_word */] <0.03125f ? 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.234375f ? 
                        0.0f : 
                        0.0014947683f) : 
                    0.0f)) : 
             (data[3 /* no_of_ips */] <0.5f ? 
                 (data[5 /* 4_letter_word */] <0.3203125f ? 
                    1.0f : 
                    0.0f) : 
                 (data[2 /* no_of_characters */] <130.5f ? 
                    0.0f : 
                    1.0f))) : 
         (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
            0.0f : 
             (data[1 /* type_of_time */] <4.5f ? 
                 (data[2 /* no_of_characters */] <110.5f ? 
                     (data[0 /* vlan */] <156.5f ? 
                        1.0f : 
                        0.0f) : 
                    0.0f) : 
                0.0f)));
    return pred;
  } // constant pool size = 50B, number of visited nodes = 12, static init size = 0B
}

class log_drf_1_Tree_20_class_4 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* no_of_characters */] <113.5f ? 
         (data[0 /* vlan */] <24.5f ? 
            0.0f : 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <109.5f ? 
                 (Double.isNaN(data[4]) || data[4 /* no_of_macs */] <0.5f ? 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.078125f ? 
                        4.2643922E-4f : 
                        0.0f) : 
                    0.0f) : 
                 (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.16796875f ? 
                    0.0f : 
                     (data[6 /* 5_letter_word */] <0.171875f ? 
                        0.0f : 
                        0.93333334f)))) : 
         (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
             (data[2 /* no_of_characters */] <118.5f ? 
                 (data[7 /* 6_letter_word */] <0.22265625f ? 
                    0.0f : 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <117.5f ? 
                        0.0f : 
                        0.020618556f)) : 
                0.0f) : 
             (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.037109375f ? 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <168.5f ? 
                    0.0f : 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <26.5f ? 
                        0.0f : 
                        0.0011309659f)) : 
                0.0f)));
    return pred;
  } // constant pool size = 58B, number of visited nodes = 14, static init size = 0B
}

class log_drf_1_Tree_20_class_5 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.095703125f ? 
         (data[0 /* vlan */] <85.5f ? 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <64.5f ? 
                 (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.30859375f ? 
                    0.0f : 
                     (Double.isNaN(data[12]) || data[12 /* 11_letter_word */] <0.2890625f ? 
                        1.02658865E-4f : 
                        0.0028328612f)) : 
                 (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.58203125f ? 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.0859375f ? 
                        0.0f : 
                        0.5f) : 
                    1.0f)) : 
            0.0f) : 
         (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <305.5f ? 
                 (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.0390625f ? 
                     (data[1 /* type_of_time */] <4.5f ? 
                        0.0f : 
                        0.001074242f) : 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.21875f ? 
                        0.0020308692f : 
                        0.0125f)) : 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.2578125f ? 
                    0.0f : 
                     (data[8 /* 7_letter_word */] <0.2791748f ? 
                        1.0f : 
                        0.0f))) : 
            0.0f));
    return pred;
  } // constant pool size = 58B, number of visited nodes = 14, static init size = 0B
}

class log_drf_1_Tree_20_class_6 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* no_of_characters */] <98.5f ? 
         (Double.isNaN(data[0]) || data[0 /* vlan */] <109.5f ? 
             (data[2 /* no_of_characters */] <32.0f ? 
                1.0f : 
                 (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.265625f ? 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.828125f ? 
                        0.0014049878f : 
                        0.03731343f) : 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.2421875f ? 
                        0.0f : 
                        0.75510204f))) : 
             (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.1015625f ? 
                 (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <74.5f ? 
                        0.053125f : 
                        0.0f) : 
                    0.0f) : 
                 (data[2 /* no_of_characters */] <70.5f ? 
                     (data[2 /* no_of_characters */] <68.5f ? 
                        0.5f : 
                        1.0f) : 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <87.5f ? 
                        0.989899f : 
                        1.0f)))) : 
         (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
             (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.16210938f ? 
                0.0f : 
                 (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.3203125f ? 
                    0.0f : 
                     (data[2 /* no_of_characters */] <117.5f ? 
                        0.24390244f : 
                        0.0f))) : 
            0.0f));
    return pred;
  } // constant pool size = 66B, number of visited nodes = 16, static init size = 0B
}

class log_drf_1_Tree_20_class_7 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0]) || data[0 /* vlan */] <185.0f ? 
        0.0f : 
         (data[0 /* vlan */] <593.5f ? 
            1.0f : 
            0.0f));
    return pred;
  } // constant pool size = 10B, number of visited nodes = 2, static init size = 0B
}

class log_drf_1_Tree_20_class_8 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <900.5f ? 
         (Double.isNaN(data[0]) || data[0 /* vlan */] <177.5f ? 
            0.0f : 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <732.5f ? 
                 (data[5 /* 4_letter_word */] <0.05859375f ? 
                     (data[2 /* no_of_characters */] <126.5f ? 
                        0.0f : 
                        0.009756098f) : 
                    0.0f) : 
                0.25f)) : 
         (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <3.5f ? 
             (data[3 /* no_of_ips */] <1.5f ? 
                 (data[5 /* 4_letter_word */] <0.0625f ? 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.109375f ? 
                        1.0f : 
                        0.8f) : 
                     (data[8 /* 7_letter_word */] <0.015625f ? 
                        0.09090909f : 
                        0.0f)) : 
                1.0f) : 
             (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.16666667f ? 
                 (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.51953125f ? 
                     (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <4.5f ? 
                        0.00862069f : 
                        1.0f) : 
                     (data[5 /* 4_letter_word */] <0.6241353f ? 
                        1.0f : 
                        0.14285715f)) : 
                0.0f)));
    return pred;
  } // constant pool size = 58B, number of visited nodes = 14, static init size = 0B
}

class log_drf_1_Tree_20_class_9 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0]) || data[0 /* vlan */] <159.5f ? 
        0.0f : 
         (data[0 /* vlan */] <165.5f ? 
             (data[10 /* 9_letter_word */] <0.05078125f ? 
                 (data[6 /* 5_letter_word */] <0.0859375f ? 
                    0.0f : 
                     (data[3 /* no_of_ips */] <2.5f ? 
                        0.75f : 
                        1.0f)) : 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <150.5f ? 
                    1.0f : 
                    0.9756098f)) : 
             (data[1 /* type_of_time */] <3.5f ? 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <176.0f ? 
                    1.0f : 
                    0.0f) : 
                0.0f)));
    return pred;
  } // constant pool size = 34B, number of visited nodes = 8, static init size = 0B
}

class log_drf_1_Tree_20_class_10 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0]) || data[0 /* vlan */] <166.5f ? 
         (Double.isNaN(data[0]) || data[0 /* vlan */] <165.0f ? 
            0.0f : 
             (data[2 /* no_of_characters */] <115.5f ? 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.25f ? 
                    0.0f : 
                     (data[2 /* no_of_characters */] <113.5f ? 
                        0.045454547f : 
                        0.0f)) : 
                0.0f)) : 
         (data[3 /* no_of_ips */] <0.5f ? 
            0.0f : 
             (data[2 /* no_of_characters */] <90.5f ? 
                 (data[0 /* vlan */] <583.5f ? 
                    1.0f : 
                    0.0f) : 
                 (data[0 /* vlan */] <173.5f ? 
                     (data[7 /* 6_letter_word */] <0.125f ? 
                        0.6666667f : 
                        0.0f) : 
                    0.0f))));
    return pred;
  } // constant pool size = 42B, number of visited nodes = 10, static init size = 0B
}

class log_drf_1_Tree_20_class_11 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.27929688f ? 
        0.0f : 
        3.5023815E-5f);
    return pred;
  } // constant pool size = 6B, number of visited nodes = 1, static init size = 0B
}

class log_drf_1_Tree_20_class_12 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0]) || data[0 /* vlan */] <593.5f ? 
        0.0f : 
        0.13695653f);
    return pred;
  } // constant pool size = 6B, number of visited nodes = 1, static init size = 0B
}

class log_drf_1_Tree_20_class_13 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* no_of_characters */] <54.0f ? 
         (data[0 /* vlan */] <4.5f ? 
            0.9848485f : 
             (data[0 /* vlan */] <22.5f ? 
                0.0f : 
                 (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.125f ? 
                        0.8627451f : 
                        1.0f) : 
                    1.0f))) : 
         (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <1.5f ? 
             (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
                0.0f : 
                 (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.22265625f ? 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.1875f ? 
                        1.0977752E-4f : 
                        0.0014459225f) : 
                    0.0f)) : 
            0.0f));
    return pred;
  } // constant pool size = 38B, number of visited nodes = 9, static init size = 0B
}

class log_drf_1_Tree_20_class_14 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[12]) || data[12 /* 11_letter_word */] <0.18310547f ? 
         (data[0 /* vlan */] <27.5f ? 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <170.5f ? 
                0.0f : 
                 (data[1 /* type_of_time */] <3.0f ? 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.1796875f ? 
                        0.0f : 
                        0.33333334f) : 
                    0.0f)) : 
            0.0f) : 
         (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.10058594f ? 
            0.0f : 
             (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.1015625f ? 
                1.0f : 
                0.0f)));
    return pred;
  } // constant pool size = 30B, number of visited nodes = 7, static init size = 0B
}

class log_drf_1_Tree_20_class_15 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* no_of_characters */] <100.5f ? 
         (Double.isNaN(data[0]) || data[0 /* vlan */] <29.5f ? 
            0.0f : 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <99.0f ? 
                0.0f : 
                 (data[5 /* 4_letter_word */] <0.74609375f ? 
                    0.0f : 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <99.5f ? 
                        0.27659574f : 
                        0.49584487f)))) : 
         (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <2.5f ? 
             (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <1.5f ? 
                 (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
                    0.0f : 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <376.5f ? 
                        0.007079757f : 
                        0.124675326f)) : 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <211.5f ? 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.1796875f ? 
                        0.0f : 
                        0.0010840108f) : 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.21875f ? 
                        0.5925926f : 
                        0.012987013f))) : 
             (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.05078125f ? 
                 (data[2 /* no_of_characters */] <174.5f ? 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.4296875f ? 
                        0.0f : 
                        4.537205E-4f) : 
                    0.0f) : 
                0.0f)));
    return pred;
  } // constant pool size = 62B, number of visited nodes = 15, static init size = 0B
}

class log_drf_1_Tree_20_class_16 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* no_of_characters */] <84.5f ? 
         (Double.isNaN(data[0]) || data[0 /* vlan */] <29.5f ? 
            0.0f : 
             (data[0 /* vlan */] <35.5f ? 
                 (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.74609375f ? 
                     (data[5 /* 4_letter_word */] <0.37304688f ? 
                        0.0f : 
                        0.008196721f) : 
                    0.05263158f) : 
                0.0f)) : 
         (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
             (data[2 /* no_of_characters */] <159.5f ? 
                 (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.2890625f ? 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.3125f ? 
                        4.523454E-5f : 
                        0.001138628f) : 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.171875f ? 
                        0.005063291f : 
                        0.2f)) : 
                0.0f) : 
            0.0f));
    return pred;
  } // constant pool size = 42B, number of visited nodes = 10, static init size = 0B
}

class log_drf_1_Tree_20_class_17 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <659.0f ? 
         (data[0 /* vlan */] <17.5f ? 
             (data[2 /* no_of_characters */] <97.5f ? 
                 (data[5 /* 4_letter_word */] <0.125f ? 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.6640625f ? 
                        0.0f : 
                        0.5f) : 
                    0.0f) : 
                0.0f) : 
            0.0f) : 
         (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <3.5f ? 
             (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <1.5f ? 
                 (data[0 /* vlan */] <174.5f ? 
                     (data[5 /* 4_letter_word */] <0.21875f ? 
                        0.33333334f : 
                        0.032258064f) : 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.03125f ? 
                        0.78531075f : 
                        0.0f)) : 
                0.0f) : 
             (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.16666667f ? 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.16796875f ? 
                     (data[2 /* no_of_characters */] <993.0f ? 
                        0.0f : 
                        0.94736844f) : 
                    1.0f) : 
                1.0f)));
    return pred;
  } // constant pool size = 54B, number of visited nodes = 13, static init size = 0B
}

class log_drf_1_Tree_20_class_18 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <330.5f ? 
        0.0f : 
        9.973073E-5f);
    return pred;
  } // constant pool size = 6B, number of visited nodes = 1, static init size = 0B
}

class log_drf_1_Tree_20_class_19 {
  static final double score0(double[] data) {
    double pred =      (data[0 /* vlan */] <14.5f ? 
         (data[0 /* vlan */] <13.5f ? 
            0.0f : 
             (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.234375f ? 
                 (data[2 /* no_of_characters */] <140.5f ? 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.1015625f ? 
                        0.0f : 
                        0.11111111f) : 
                    0.0f) : 
                1.0f)) : 
        0.0f);
    return pred;
  } // constant pool size = 22B, number of visited nodes = 5, static init size = 0B
}

class log_drf_1_Tree_20_class_20 {
  static final double score0(double[] data) {
    double pred =      (data[0 /* vlan */] <23.5f ? 
         (data[0 /* vlan */] <17.5f ? 
            0.0f : 
             (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.015625f ? 
                 (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.65234375f ? 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.23953247f ? 
                        0.9998685f : 
                        0.9995872f) : 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.2890625f ? 
                        0.999279f : 
                        0.974359f)) : 
                1.0f)) : 
        0.0f);
    return pred;
  } // constant pool size = 26B, number of visited nodes = 6, static init size = 0B
}

class log_drf_1_Tree_20_class_21 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[12]) || data[12 /* 11_letter_word */] <0.22460938f ? 
         (data[0 /* vlan */] <11.5f ? 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <230.5f ? 
                0.0f : 
                 (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.13671875f ? 
                     (data[2 /* no_of_characters */] <243.5f ? 
                        1.0f : 
                        0.0f) : 
                    0.0f)) : 
             (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                 (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.10546875f ? 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.234375f ? 
                        0.0010422415f : 
                        0.0036853845f) : 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <280.5f ? 
                        0.0011909488f : 
                        0.32911393f)) : 
                 (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.18359375f ? 
                     (data[6 /* 5_letter_word */] <0.2109375f ? 
                        1.6479894E-4f : 
                        5.4401044E-5f) : 
                     (data[0 /* vlan */] <27.5f ? 
                        0.0069124424f : 
                        0.0f)))) : 
         (data[3 /* no_of_ips */] <0.5f ? 
             (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.18554688f ? 
                0.0f : 
                 (data[11 /* 10_letter_word */] <0.125f ? 
                    0.0f : 
                    1.0f)) : 
            0.0f));
    return pred;
  } // constant pool size = 62B, number of visited nodes = 15, static init size = 0B
}

class log_drf_1_Tree_20_class_22 {
  static final double score0(double[] data) {
    double pred =      (data[0 /* vlan */] <5.5f ? 
         (Double.isNaN(data[0]) || data[0 /* vlan */] <4.5f ? 
            0.0f : 
            0.2f) : 
        2.003165E-5f);
    return pred;
  } // constant pool size = 10B, number of visited nodes = 2, static init size = 0B
}

class log_drf_1_Tree_20_class_23 {
  static final double score0(double[] data) {
    double pred =      (data[0 /* vlan */] <14.5f ? 
         (data[0 /* vlan */] <10.0f ? 
            0.0f : 
             (Double.isNaN(data[14]) || data[14 /* 13_letter_word */] <0.03125f ? 
                 (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.58203125f ? 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.265625f ? 
                        0.011099285f : 
                        0.75574714f) : 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.171875f ? 
                        0.99239546f : 
                        1.0f)) : 
                0.0f)) : 
        0.0f);
    return pred;
  } // constant pool size = 26B, number of visited nodes = 6, static init size = 0B
}

class log_drf_1_Tree_20_class_24 {
  static final double score0(double[] data) {
    double pred =      (data[0 /* vlan */] <11.5f ? 
         (Double.isNaN(data[0]) || data[0 /* vlan */] <10.0f ? 
            0.0f : 
             (Double.isNaN(data[12]) || data[12 /* 11_letter_word */] <0.046875f ? 
                 (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.87109375f ? 
                    0.0f : 
                    1.0f) : 
                0.0f)) : 
        0.0f);
    return pred;
  } // constant pool size = 18B, number of visited nodes = 4, static init size = 0B
}

class log_drf_1_Tree_20_class_25 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0]) || data[0 /* vlan */] <41.0f ? 
         (Double.isNaN(data[0]) || data[0 /* vlan */] <29.5f ? 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <190.5f ? 
                 (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.07421875f ? 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.2734375f ? 
                        0.0018473719f : 
                        0.031222515f) : 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.2890625f ? 
                        0.010522055f : 
                        0.07278481f)) : 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.6328125f ? 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.3203125f ? 
                        0.0f : 
                        0.0012210013f) : 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <24.5f ? 
                        0.0f : 
                        1.0f))) : 
             (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <2.5f ? 
                 (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.70703125f ? 
                     (data[2 /* no_of_characters */] <60.5f ? 
                        0.0f : 
                        0.98822623f) : 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.125f ? 
                        0.88108844f : 
                        0.9714286f)) : 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <260.5f ? 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.4296875f ? 
                        1.0f : 
                        0.99745977f) : 
                     (data[6 /* 5_letter_word */] <0.3984375f ? 
                        1.0f : 
                        0.9736842f)))) : 
         (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <1.5f ? 
            0.0f : 
             (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
                0.0f : 
                 (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.83203125f ? 
                    0.0f : 
                    0.12195122f))));
    return pred;
  } // constant pool size = 78B, number of visited nodes = 19, static init size = 0B
}

class log_drf_1_Tree_20_class_26 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* no_of_characters */] <57.5f ? 
         (Double.isNaN(data[0]) || data[0 /* vlan */] <29.5f ? 
             (data[0 /* vlan */] <22.0f ? 
                0.0f : 
                0.99756694f) : 
            0.0f) : 
        0.0f);
    return pred;
  } // constant pool size = 14B, number of visited nodes = 3, static init size = 0B
}

class log_drf_1_Tree_20_class_27 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <256.5f ? 
        0.0f : 
        1.064396E-4f);
    return pred;
  } // constant pool size = 6B, number of visited nodes = 1, static init size = 0B
}

class log_drf_1_Tree_20_class_28 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <447.5f ? 
        0.0f : 
         (Double.isNaN(data[0]) || data[0 /* vlan */] <18.5f ? 
             (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.013671875f ? 
                1.0f : 
                 (data[3 /* no_of_ips */] <3.5f ? 
                    0.0f : 
                    1.0f)) : 
            0.0f));
    return pred;
  } // constant pool size = 18B, number of visited nodes = 4, static init size = 0B
}

class log_drf_1_Tree_20_class_29 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <957.5f ? 
         (Double.isNaN(data[0]) || data[0 /* vlan */] <133.5f ? 
            0.0f : 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <425.5f ? 
                 (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.7734375f ? 
                    0.0f : 
                     (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.1015625f ? 
                        0.0f : 
                        1.0f)) : 
                 (data[0 /* vlan */] <154.5f ? 
                    0.5f : 
                    0.0f))) : 
         (data[3 /* no_of_ips */] <0.5f ? 
             (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.16992188f ? 
                 (Double.isNaN(data[12]) || data[12 /* 11_letter_word */] <0.02734375f ? 
                    0.0f : 
                    0.5f) : 
                0.75f) : 
            0.0f));
    return pred;
  } // constant pool size = 38B, number of visited nodes = 9, static init size = 0B
}

class log_drf_1_Tree_20_class_30 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0]) || data[0 /* vlan */] <177.0f ? 
        0.0f : 
         (data[0 /* vlan */] <180.5f ? 
             (data[3 /* no_of_ips */] <1.0f ? 
                0.0f : 
                1.0f) : 
            0.0f));
    return pred;
  } // constant pool size = 14B, number of visited nodes = 3, static init size = 0B
}

class log_drf_1_Tree_20_class_31 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* no_of_characters */] <113.5f ? 
         (Double.isNaN(data[0]) || data[0 /* vlan */] <64.5f ? 
             (data[2 /* no_of_characters */] <73.5f ? 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <34.0f ? 
                    0.0f : 
                     (data[8 /* 7_letter_word */] <0.171875f ? 
                        0.0f : 
                        0.9166667f)) : 
                 (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.44921875f ? 
                    0.0f : 
                     (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.21875f ? 
                        0.0f : 
                        0.25f))) : 
             (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.2890625f ? 
                     (data[2 /* no_of_characters */] <63.5f ? 
                        0.0f : 
                        0.21333334f) : 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <118.0f ? 
                        0.9870801f : 
                        0.0f)) : 
                 (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
                    0.0f : 
                     (Double.isNaN(data[15]) || data[15 /* 14_letter_word */] <0.2265625f ? 
                        0.936f : 
                        0.84615386f)))) : 
         (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.080078125f ? 
             (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
                0.0f : 
                 (data[2 /* no_of_characters */] <141.5f ? 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.3125f ? 
                        8.279125E-4f : 
                        0.06281619f) : 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.140625f ? 
                        1.8665423E-4f : 
                        5.687204E-4f))) : 
             (data[10 /* 9_letter_word */] <0.14835358f ? 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.46875f ? 
                     (data[7 /* 6_letter_word */] <0.046875f ? 
                        0.037037037f : 
                        0.0f) : 
                    1.0f) : 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <61.5f ? 
                    0.0f : 
                     (data[0 /* vlan */] <100.0f ? 
                        1.0f : 
                        0.0f)))));
    return pred;
  } // constant pool size = 94B, number of visited nodes = 23, static init size = 0B
}

class log_drf_1_Tree_20_class_32 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* no_of_characters */] <123.5f ? 
         (Double.isNaN(data[0]) || data[0 /* vlan */] <29.5f ? 
             (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <28.0f ? 
                    0.0f : 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <87.0f ? 
                        0.0f : 
                        1.0f)) : 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <115.5f ? 
                     (data[0 /* vlan */] <28.0f ? 
                        0.0f : 
                        0.9444444f) : 
                    0.0f)) : 
            0.0f) : 
        0.0f);
    return pred;
  } // constant pool size = 30B, number of visited nodes = 7, static init size = 0B
}

class log_drf_1_Tree_20_class_33 {
  static final double score0(double[] data) {
    double pred =      (data[0 /* vlan */] <7.5f ? 
         (data[0 /* vlan */] <2.5f ? 
            1.0f : 
             (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.083984375f ? 
                 (data[7 /* 6_letter_word */] <0.125f ? 
                    0.0f : 
                    1.0f) : 
                0.0f)) : 
         (Double.isNaN(data[4]) || data[4 /* no_of_macs */] <1.5f ? 
             (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.080078125f ? 
                 (data[0 /* vlan */] <16.0f ? 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.8984375f ? 
                        8.378718E-4f : 
                        0.071207434f) : 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.96875f ? 
                        1.1306107E-4f : 
                        7.5487973E-4f)) : 
                 (data[9 /* 8_letter_word */] <0.087265015f ? 
                     (data[8 /* 7_letter_word */] <0.1640625f ? 
                        0.85714287f : 
                        1.0f) : 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.265625f ? 
                        0.0021235447f : 
                        0.011527377f))) : 
             (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.08203125f ? 
                0.0f : 
                 (data[5 /* 4_letter_word */] <0.38671875f ? 
                    0.0f : 
                    1.0f))));
    return pred;
  } // constant pool size = 58B, number of visited nodes = 14, static init size = 0B
}

class log_drf_1_Tree_20_class_34 {
  static final double score0(double[] data) {
    double pred =      (data[0 /* vlan */] <10.0f ? 
         (Double.isNaN(data[0]) || data[0 /* vlan */] <5.5f ? 
            0.0f : 
            0.11111111f) : 
         (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.16015625f ? 
            0.0f : 
             (data[3 /* no_of_ips */] <0.5f ? 
                 (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.30859375f ? 
                    0.0f : 
                     (data[0 /* vlan */] <25.5f ? 
                        0.037037037f : 
                        0.0f)) : 
                0.0f)));
    return pred;
  } // constant pool size = 26B, number of visited nodes = 6, static init size = 0B
}

class log_drf_1_Tree_20_class_35 {
  static final double score0(double[] data) {
    double pred =      (data[0 /* vlan */] <12.5f ? 
         (Double.isNaN(data[0]) || data[0 /* vlan */] <11.5f ? 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <10.0f ? 
                0.0f : 
                 (data[3 /* no_of_ips */] <0.5f ? 
                     (data[7 /* 6_letter_word */] <0.046875f ? 
                        0.11111111f : 
                        0.0f) : 
                    0.0f)) : 
             (Double.isNaN(data[1]) || data[1 /* type_of_time */] <3.5f ? 
                0.0f : 
                1.0f)) : 
         (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
             (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.8730469f ? 
                 (data[2 /* no_of_characters */] <130.5f ? 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <126.5f ? 
                        0.0f : 
                        0.003144654f) : 
                    0.0f) : 
                8.4388186E-4f) : 
             (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.4140625f ? 
                 (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.44921875f ? 
                     (data[0 /* vlan */] <28.5f ? 
                        7.819627E-4f : 
                        0.0f) : 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.5826111f ? 
                        0.008333334f : 
                        0.0f)) : 
                0.0f)));
    return pred;
  } // constant pool size = 58B, number of visited nodes = 14, static init size = 0B
}

class log_drf_1_Tree_20_class_36 {
  static final double score0(double[] data) {
    double pred =      (data[0 /* vlan */] <5.5f ? 
         (Double.isNaN(data[0]) || data[0 /* vlan */] <4.5f ? 
            0.0f : 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <130.5f ? 
                1.0f : 
                0.5f)) : 
        0.0f);
    return pred;
  } // constant pool size = 14B, number of visited nodes = 3, static init size = 0B
}

class log_drf_1_Tree_20_class_37 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0]) || data[0 /* vlan */] <156.5f ? 
         (data[0 /* vlan */] <14.5f ? 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <255.5f ? 
                 (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.18359375f ? 
                     (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.2890625f ? 
                        0.928714f : 
                        0.0f) : 
                     (data[2 /* no_of_characters */] <120.0f ? 
                        0.048543688f : 
                        3.6023054E-4f)) : 
                 (data[7 /* 6_letter_word */] <0.046875f ? 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <271.5f ? 
                        1.0f : 
                        0.0f) : 
                    0.0f)) : 
             (data[3 /* no_of_ips */] <0.5f ? 
                 (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.34765625f ? 
                     (data[1 /* type_of_time */] <2.5f ? 
                        0.8627451f : 
                        4.5894718E-5f) : 
                     (data[1 /* type_of_time */] <3.5f ? 
                        0.5f : 
                        0.0f)) : 
                 (data[5 /* 4_letter_word */] <0.05859375f ? 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.1015625f ? 
                        4.877097E-4f : 
                        0.0f) : 
                    0.0f))) : 
         (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <1.5f ? 
             (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.17382812f ? 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <174.0f ? 
                     (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                        0.9965999f : 
                        0.85294116f) : 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.4609375f ? 
                        0.2522639f : 
                        0.98717946f)) : 
                 (data[2 /* no_of_characters */] <45.5f ? 
                    0.0f : 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <681.0f ? 
                        0.99911326f : 
                        0.0f))) : 
             (data[3 /* no_of_ips */] <2.5f ? 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <180.5f ? 
                     (data[0 /* vlan */] <166.5f ? 
                        0.43589744f : 
                        0.0f) : 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.4453125f ? 
                        0.96f : 
                        0.05263158f)) : 
                0.0f)));
    return pred;
  } // constant pool size = 102B, number of visited nodes = 25, static init size = 0B
}

class log_drf_1_Tree_20_class_38 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* no_of_characters */] <93.5f ? 
        2.1266038E-4f : 
        0.0f);
    return pred;
  } // constant pool size = 6B, number of visited nodes = 1, static init size = 0B
}


class log_drf_1_Forest_21 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += log_drf_1_Tree_21_class_0.score0(fdata);
    preds[2] += log_drf_1_Tree_21_class_1.score0(fdata);
    preds[3] += log_drf_1_Tree_21_class_2.score0(fdata);
    preds[4] += log_drf_1_Tree_21_class_3.score0(fdata);
    preds[5] += log_drf_1_Tree_21_class_4.score0(fdata);
    preds[6] += log_drf_1_Tree_21_class_5.score0(fdata);
    preds[7] += log_drf_1_Tree_21_class_6.score0(fdata);
    preds[8] += log_drf_1_Tree_21_class_7.score0(fdata);
    preds[9] += log_drf_1_Tree_21_class_8.score0(fdata);
    preds[10] += log_drf_1_Tree_21_class_9.score0(fdata);
    preds[11] += log_drf_1_Tree_21_class_10.score0(fdata);
    preds[12] += log_drf_1_Tree_21_class_11.score0(fdata);
    preds[13] += log_drf_1_Tree_21_class_12.score0(fdata);
    preds[14] += log_drf_1_Tree_21_class_13.score0(fdata);
    preds[15] += log_drf_1_Tree_21_class_14.score0(fdata);
    preds[16] += log_drf_1_Tree_21_class_15.score0(fdata);
    preds[17] += log_drf_1_Tree_21_class_16.score0(fdata);
    preds[18] += log_drf_1_Tree_21_class_17.score0(fdata);
    preds[19] += log_drf_1_Tree_21_class_18.score0(fdata);
    preds[20] += log_drf_1_Tree_21_class_19.score0(fdata);
    preds[21] += log_drf_1_Tree_21_class_20.score0(fdata);
    preds[22] += log_drf_1_Tree_21_class_21.score0(fdata);
    preds[23] += log_drf_1_Tree_21_class_22.score0(fdata);
    preds[24] += log_drf_1_Tree_21_class_23.score0(fdata);
    preds[25] += log_drf_1_Tree_21_class_24.score0(fdata);
    preds[26] += log_drf_1_Tree_21_class_25.score0(fdata);
    preds[27] += log_drf_1_Tree_21_class_26.score0(fdata);
    preds[28] += log_drf_1_Tree_21_class_27.score0(fdata);
    preds[29] += log_drf_1_Tree_21_class_28.score0(fdata);
    preds[30] += log_drf_1_Tree_21_class_29.score0(fdata);
    preds[31] += log_drf_1_Tree_21_class_30.score0(fdata);
    preds[32] += log_drf_1_Tree_21_class_31.score0(fdata);
    preds[33] += log_drf_1_Tree_21_class_32.score0(fdata);
    preds[34] += log_drf_1_Tree_21_class_33.score0(fdata);
    preds[35] += log_drf_1_Tree_21_class_34.score0(fdata);
    preds[36] += log_drf_1_Tree_21_class_35.score0(fdata);
    preds[37] += log_drf_1_Tree_21_class_36.score0(fdata);
    preds[38] += log_drf_1_Tree_21_class_37.score0(fdata);
    preds[39] += log_drf_1_Tree_21_class_38.score0(fdata);
  }
}
class log_drf_1_Tree_21_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <1040.0f ? 
         (Double.isNaN(data[12]) || data[12 /* 11_letter_word */] <0.017578125f ? 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <520.5f ? 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <516.5f ? 
                    0.0f : 
                     (data[2 /* no_of_characters */] <517.5f ? 
                        0.021276595f : 
                        0.0f)) : 
                 (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.015625f ? 
                     (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.0234375f ? 
                        0.0012515645f : 
                        0.17857143f) : 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.0703125f ? 
                        0.0f : 
                        0.5714286f))) : 
             (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.013671875f ? 
                0.0f : 
                 (Double.isNaN(data[14]) || data[14 /* 13_letter_word */] <0.015625f ? 
                    0.0f : 
                    1.0f))) : 
        0.84615386f);
    return pred;
  } // constant pool size = 42B, number of visited nodes = 10, static init size = 0B
}

class log_drf_1_Tree_21_class_1 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <261.5f ? 
         (data[8 /* 7_letter_word */] <0.23535156f ? 
            0.0f : 
             (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.70703125f ? 
                 (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.15466309f ? 
                    0.0f : 
                     (data[6 /* 5_letter_word */] <0.22266357f ? 
                        0.0323741f : 
                        0.0f)) : 
                1.0f)) : 
         (data[1 /* type_of_time */] <3.5f ? 
             (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.3671875f ? 
                0.0f : 
                 (data[0 /* vlan */] <85.5f ? 
                    0.0f : 
                    1.0f)) : 
             (data[2 /* no_of_characters */] <289.5f ? 
                 (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
                    0.0f : 
                     (data[6 /* 5_letter_word */] <0.15625f ? 
                        0.017021276f : 
                        0.7525424f)) : 
                 (data[2 /* no_of_characters */] <366.5f ? 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <360.5f ? 
                        0.0021041557f : 
                        0.28455284f) : 
                    0.0f))));
    return pred;
  } // constant pool size = 54B, number of visited nodes = 13, static init size = 0B
}

class log_drf_1_Tree_21_class_2 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* no_of_characters */] <158.5f ? 
         (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.3095703f ? 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <147.0f ? 
                 (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.22265625f ? 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <113.5f ? 
                        0.0f : 
                        0.1888956f) : 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.1328125f ? 
                        0.0f : 
                        0.017553192f)) : 
                 (data[1 /* type_of_time */] <4.5f ? 
                    0.0f : 
                     (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <1.5f ? 
                        0.20274147f : 
                        0.0f))) : 
             (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.29101562f ? 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <130.5f ? 
                     (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.171875f ? 
                        5.4929964E-4f : 
                        0.0f) : 
                    0.0f) : 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.36620712f ? 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.4172109f ? 
                        0.0068259384f : 
                        0.0f) : 
                    0.0f))) : 
         (Double.isNaN(data[4]) || data[4 /* no_of_macs */] <3.0f ? 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <670.5f ? 
                 (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.234375f ? 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <178.5f ? 
                        2.9413495E-5f : 
                        0.03770492f) : 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <178.5f ? 
                        0.0f : 
                        0.11764706f)) : 
                 (data[6 /* 5_letter_word */] <0.0625f ? 
                     (Double.isNaN(data[13]) || data[13 /* 12_letter_word */] <0.03125f ? 
                        0.0f : 
                        1.0f) : 
                    0.0f)) : 
            0.5f));
    return pred;
  } // constant pool size = 82B, number of visited nodes = 20, static init size = 0B
}

class log_drf_1_Tree_21_class_3 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.3227539f ? 
         (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.23535156f ? 
             (data[2 /* no_of_characters */] <105.5f ? 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.1015625f ? 
                    9.00311E-4f : 
                    0.0f) : 
                 (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
                    0.0f : 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.234375f ? 
                        0.0f : 
                        1.7985611E-4f))) : 
             (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.46289062f ? 
                0.0f : 
                 (data[2 /* no_of_characters */] <160.5f ? 
                     (data[2 /* no_of_characters */] <154.5f ? 
                        0.0f : 
                        0.7822222f) : 
                    0.0f))) : 
         (data[1 /* type_of_time */] <4.5f ? 
            0.0f : 
             (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.38671875f ? 
                 (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.046875f ? 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <280.5f ? 
                        0.0f : 
                        0.31704545f) : 
                    0.0f) : 
                 (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.6327667f ? 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.52183884f ? 
                        0.635745f : 
                        0.0f) : 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <160.5f ? 
                        0.95804197f : 
                        0.0f)))));
    return pred;
  } // constant pool size = 66B, number of visited nodes = 16, static init size = 0B
}

class log_drf_1_Tree_21_class_4 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* no_of_characters */] <113.5f ? 
         (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.29101562f ? 
             (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.7480469f ? 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.44921875f ? 
                    0.0f : 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.125f ? 
                        0.001996008f : 
                        0.0f)) : 
                0.0021299254f) : 
             (data[9 /* 8_letter_word */] <0.16796875f ? 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <107.5f ? 
                    0.0f : 
                     (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <1.0f ? 
                        0.96153843f : 
                        0.0f)) : 
                0.0f)) : 
         (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
            0.0f : 
             (data[0 /* vlan */] <25.5f ? 
                0.0f : 
                 (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.015625f ? 
                     (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <1.5f ? 
                        8.590245E-4f : 
                        0.0f) : 
                    0.0f))));
    return pred;
  } // constant pool size = 50B, number of visited nodes = 12, static init size = 0B
}

class log_drf_1_Tree_21_class_5 {
  static final double score0(double[] data) {
    double pred =      (data[1 /* type_of_time */] <4.5f ? 
        0.0f : 
         (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <140.5f ? 
             (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.22460938f ? 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.30859375f ? 
                    0.0f : 
                     (data[8 /* 7_letter_word */] <0.36801147f ? 
                        5.589715E-4f : 
                        0.0f)) : 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <65.5f ? 
                    0.0f : 
                     (data[5 /* 4_letter_word */] <0.12890625f ? 
                        0.1891892f : 
                        0.0f))) : 
             (Double.isNaN(data[12]) || data[12 /* 11_letter_word */] <0.29101562f ? 
                 (data[3 /* no_of_ips */] <0.5f ? 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.296875f ? 
                        0.0f : 
                        0.0126760565f) : 
                    0.0f) : 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <33.5f ? 
                    0.0f : 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.25f ? 
                        0.0f : 
                        0.5f)))));
    return pred;
  } // constant pool size = 50B, number of visited nodes = 12, static init size = 0B
}

class log_drf_1_Tree_21_class_6 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* no_of_characters */] <98.5f ? 
         (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.10058594f ? 
             (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.1015625f ? 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.265625f ? 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.828125f ? 
                        0.0f : 
                        0.06923077f) : 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.1484375f ? 
                        0.040462427f : 
                        0.6933333f)) : 
                 (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.1015625f ? 
                     (data[2 /* no_of_characters */] <79.5f ? 
                        0.8854167f : 
                        0.018691588f) : 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <92.0f ? 
                        0.0f : 
                        0.9722222f))) : 
             (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.125f ? 
                0.0f : 
                 (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.29381943f ? 
                    1.0f : 
                    0.0f))) : 
         (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
            0.0f : 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <125.5f ? 
                0.0f : 
                 (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.15625f ? 
                    0.0f : 
                     (data[2 /* no_of_characters */] <117.5f ? 
                        1.0f : 
                        0.0f)))));
    return pred;
  } // constant pool size = 62B, number of visited nodes = 15, static init size = 0B
}

class log_drf_1_Tree_21_class_7 {
  static final double score0(double[] data) {
    double pred =      (data[1 /* type_of_time */] <4.5f ? 
        0.0f : 
         (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <153.5f ? 
             (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.8984375f ? 
                0.0f : 
                1.9402406E-4f) : 
             (data[7 /* 6_letter_word */] <0.01953125f ? 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <186.5f ? 
                    0.0f : 
                     (data[5 /* 4_letter_word */] <0.7421875f ? 
                        0.0f : 
                        1.0f)) : 
                0.0f)));
    return pred;
  } // constant pool size = 26B, number of visited nodes = 6, static init size = 0B
}

class log_drf_1_Tree_21_class_8 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <900.5f ? 
         (data[8 /* 7_letter_word */] <0.03125f ? 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <626.5f ? 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <178.5f ? 
                    0.0f : 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.1015625f ? 
                        0.0013605442f : 
                        0.0f)) : 
                 (data[2 /* no_of_characters */] <659.5f ? 
                    1.0f : 
                    0.0f)) : 
            0.0f) : 
         (Double.isNaN(data[14]) || data[14 /* 13_letter_word */] <0.0068359375f ? 
             (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.5214844f ? 
                 (data[6 /* 5_letter_word */] <0.0546875f ? 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.03125f ? 
                        0.8918919f : 
                        0.0f) : 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.39518738f ? 
                        0.041322313f : 
                        0.40625f)) : 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <945.5f ? 
                    1.0f : 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.046875f ? 
                        0.0952381f : 
                        0.75f))) : 
            0.0f));
    return pred;
  } // constant pool size = 54B, number of visited nodes = 13, static init size = 0B
}

class log_drf_1_Tree_21_class_9 {
  static final double score0(double[] data) {
    double pred =      (data[1 /* type_of_time */] <3.5f ? 
         (Double.isNaN(data[12]) || data[12 /* 11_letter_word */] <0.072265625f ? 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <200.5f ? 
                 (data[3 /* no_of_ips */] <1.5f ? 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <114.0f ? 
                        0.0f : 
                        0.5f) : 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <178.5f ? 
                        1.0f : 
                        0.0f)) : 
                 (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <4.0f ? 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.140625f ? 
                        0.0f : 
                        0.08f) : 
                    1.0f)) : 
            0.0f) : 
        0.0f);
    return pred;
  } // constant pool size = 34B, number of visited nodes = 8, static init size = 0B
}

class log_drf_1_Tree_21_class_10 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* no_of_characters */] <92.5f ? 
         (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.5830078f ? 
            0.0f : 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <89.0f ? 
                0.0f : 
                1.0f)) : 
        5.364749E-6f);
    return pred;
  } // constant pool size = 14B, number of visited nodes = 3, static init size = 0B
}

class log_drf_1_Tree_21_class_11 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* no_of_characters */] <134.5f ? 
         (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.072265625f ? 
            0.0f : 
            1.6528925E-4f) : 
        0.0f);
    return pred;
  } // constant pool size = 10B, number of visited nodes = 2, static init size = 0B
}

class log_drf_1_Tree_21_class_12 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <529.5f ? 
         (data[8 /* 7_letter_word */] <0.03125f ? 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <428.5f ? 
                0.0f : 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <569.0f ? 
                    0.0f : 
                    1.0f)) : 
            0.0f) : 
         (Double.isNaN(data[14]) || data[14 /* 13_letter_word */] <0.0068359375f ? 
             (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.51171875f ? 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.79296875f ? 
                    0.0f : 
                    0.6f) : 
                1.0f) : 
            0.0f));
    return pred;
  } // constant pool size = 30B, number of visited nodes = 7, static init size = 0B
}

class log_drf_1_Tree_21_class_13 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* no_of_characters */] <54.0f ? 
         (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.6660156f ? 
             (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.16796875f ? 
                 (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.62109375f ? 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.125f ? 
                        0.8816794f : 
                        1.0f) : 
                    0.0f) : 
                 (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.16796875f ? 
                    0.14285715f : 
                    0.0f)) : 
            0.1f) : 
         (data[1 /* type_of_time */] <4.5f ? 
            0.0f : 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <592.5f ? 
                 (data[0 /* vlan */] <15.5f ? 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.1796875f ? 
                        0.0f : 
                        0.0034305318f) : 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.1875f ? 
                        0.0f : 
                        7.571169E-5f)) : 
                 (data[9 /* 8_letter_word */] <0.3359375f ? 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.25f ? 
                        0.0f : 
                        1.0f) : 
                    0.03846154f))));
    return pred;
  } // constant pool size = 54B, number of visited nodes = 13, static init size = 0B
}

class log_drf_1_Tree_21_class_14 {
  static final double score0(double[] data) {
    double pred =      (data[1 /* type_of_time */] <2.5f ? 
         (Double.isNaN(data[12]) || data[12 /* 11_letter_word */] <0.171875f ? 
             (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.18359375f ? 
                0.0f : 
                 (data[8 /* 7_letter_word */] <0.2118988f ? 
                    0.6666667f : 
                    0.0f)) : 
            1.0f) : 
        0.0f);
    return pred;
  } // constant pool size = 18B, number of visited nodes = 4, static init size = 0B
}

class log_drf_1_Tree_21_class_15 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* no_of_characters */] <100.5f ? 
         (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.10058594f ? 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <99.0f ? 
                0.0f : 
                 (Double.isNaN(data[4]) || data[4 /* no_of_macs */] <0.5f ? 
                     (data[5 /* 4_letter_word */] <0.7421875f ? 
                        0.0f : 
                        0.32407406f) : 
                    0.0f)) : 
            0.0f) : 
         (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
            0.0f : 
             (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.08984375f ? 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <137.5f ? 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.4765625f ? 
                        4.017839E-5f : 
                        4.2310133E-4f) : 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.578125f ? 
                        0.06497726f : 
                        0.33333334f)) : 
                 (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.38671875f ? 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <211.5f ? 
                        0.0028387744f : 
                        0.044622935f) : 
                     (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                        0.097826086f : 
                        0.0f)))));
    return pred;
  } // constant pool size = 54B, number of visited nodes = 13, static init size = 0B
}

class log_drf_1_Tree_21_class_16 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* no_of_characters */] <84.5f ? 
         (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.10058594f ? 
             (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.125f ? 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <25.5f ? 
                    0.0f : 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.828125f ? 
                        0.0f : 
                        0.047169812f)) : 
                0.0f) : 
            0.0f) : 
         (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
            0.0f : 
             (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.1640625f ? 
                 (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.3203125f ? 
                    0.0f : 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.6920166f ? 
                        3.843493E-4f : 
                        0.0f)) : 
                 (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.31640625f ? 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.046875f ? 
                        3.628008E-4f : 
                        0.0f) : 
                     (data[2 /* no_of_characters */] <103.5f ? 
                        0.037037037f : 
                        9.5602294E-4f)))));
    return pred;
  } // constant pool size = 50B, number of visited nodes = 12, static init size = 0B
}

class log_drf_1_Tree_21_class_17 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <659.0f ? 
        5.020912E-6f : 
         (Double.isNaN(data[4]) || data[4 /* no_of_macs */] <0.5f ? 
             (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <3.5f ? 
                 (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.1484375f ? 
                        0.8109756f : 
                        0.0f) : 
                     (data[6 /* 5_letter_word */] <0.1484375f ? 
                        0.29411766f : 
                        0.0f)) : 
                 (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.51953125f ? 
                     (data[6 /* 5_letter_word */] <0.4140625f ? 
                        1.0f : 
                        0.94520545f) : 
                     (data[3 /* no_of_ips */] <4.5f ? 
                        0.5f : 
                        0.0f))) : 
            0.0f));
    return pred;
  } // constant pool size = 38B, number of visited nodes = 9, static init size = 0B
}

class log_drf_1_Tree_21_class_18 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <330.5f ? 
        0.0f : 
         (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.07519531f ? 
            0.0f : 
             (Double.isNaN(data[4]) || data[4 /* no_of_macs */] <0.5f ? 
                 (data[3 /* no_of_ips */] <0.5f ? 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.28125f ? 
                        0.0f : 
                        0.16666667f) : 
                    0.0f) : 
                0.0f)));
    return pred;
  } // constant pool size = 22B, number of visited nodes = 5, static init size = 0B
}

class log_drf_1_Tree_21_class_19 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.23583984f ? 
        1.0378935E-5f : 
         (data[1 /* type_of_time */] <4.5f ? 
            0.0f : 
             (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.18554688f ? 
                0.0f : 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <17.5f ? 
                    1.0f : 
                    0.0f))));
    return pred;
  } // constant pool size = 18B, number of visited nodes = 4, static init size = 0B
}

class log_drf_1_Tree_21_class_20 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* no_of_characters */] <134.5f ? 
         (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.3095703f ? 
             (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.3671875f ? 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.87109375f ? 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.21875f ? 
                        0.26356703f : 
                        0.38322186f) : 
                     (data[2 /* no_of_characters */] <108.5f ? 
                        0.15873016f : 
                        0.95298374f)) : 
                 (data[1 /* type_of_time */] <4.5f ? 
                    0.0f : 
                     (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                        0.9611546f : 
                        0.0f))) : 
             (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.3671875f ? 
                 (data[2 /* no_of_characters */] <98.5f ? 
                     (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                        0.16981132f : 
                        0.0f) : 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.21875f ? 
                        0.8822592f : 
                        0.23966943f)) : 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <118.5f ? 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.44981384f ? 
                        0.0f : 
                        0.071428575f) : 
                    0.3181818f))) : 
         (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
            0.0f : 
             (data[0 /* vlan */] <25.5f ? 
                 (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.19140625f ? 
                     (Double.isNaN(data[14]) || data[14 /* 13_letter_word */] <0.03125f ? 
                        0.39712682f : 
                        8.56898E-4f) : 
                     (data[5 /* 4_letter_word */] <0.1015625f ? 
                        0.99223083f : 
                        0.99916667f)) : 
                0.0f)));
    return pred;
  } // constant pool size = 78B, number of visited nodes = 19, static init size = 0B
}

class log_drf_1_Tree_21_class_21 {
  static final double score0(double[] data) {
    double pred =      (data[1 /* type_of_time */] <3.5f ? 
         (Double.isNaN(data[12]) || data[12 /* 11_letter_word */] <0.22460938f ? 
            0.0f : 
            1.0f) : 
         (Double.isNaN(data[13]) || data[13 /* 12_letter_word */] <0.18359375f ? 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <240.5f ? 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <212.5f ? 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.234375f ? 
                        6.2231533E-4f : 
                        0.0012680503f) : 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.8671875f ? 
                        0.0024187975f : 
                        0.012658228f)) : 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.78515625f ? 
                     (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.15066965f ? 
                        0.0036034593f : 
                        0.025510205f) : 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.078125f ? 
                        0.0f : 
                        0.39534885f))) : 
             (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.3671875f ? 
                 (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
                     (data[8 /* 7_letter_word */] <0.21875f ? 
                        0.0f : 
                        0.014492754f) : 
                    0.0f) : 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <155.5f ? 
                    0.02631579f : 
                     (data[13 /* 12_letter_word */] <0.225f ? 
                        0.5f : 
                        0.0f)))));
    return pred;
  } // constant pool size = 62B, number of visited nodes = 15, static init size = 0B
}

class log_drf_1_Tree_21_class_22 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <227.5f ? 
         (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.15527344f ? 
            0.0f : 
             (data[2 /* no_of_characters */] <131.5f ? 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <130.5f ? 
                    0.0f : 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.0859375f ? 
                        0.0f : 
                        0.5f)) : 
                0.0f)) : 
         (data[1 /* type_of_time */] <4.5f ? 
            0.0f : 
             (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.013671875f ? 
                 (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.65234375f ? 
                     (data[3 /* no_of_ips */] <1.5f ? 
                        0.0012484394f : 
                        0.0f) : 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <26.5f ? 
                        0.007194245f : 
                        0.0f)) : 
                0.0f)));
    return pred;
  } // constant pool size = 42B, number of visited nodes = 10, static init size = 0B
}

class log_drf_1_Tree_21_class_23 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.13378906f ? 
         (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.35351562f ? 
             (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.58203125f ? 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.64453125f ? 
                     (Double.isNaN(data[13]) || data[13 /* 12_letter_word */] <0.0703125f ? 
                        2.9260298E-4f : 
                        0.02972973f) : 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.078125f ? 
                        0.0034129692f : 
                        0.27118644f)) : 
                 (data[1 /* type_of_time */] <4.5f ? 
                    0.0f : 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <17.5f ? 
                        0.99618137f : 
                        0.0f))) : 
             (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.44921875f ? 
                0.0f : 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <170.5f ? 
                    0.0f : 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <201.0f ? 
                        1.0f : 
                        0.0f)))) : 
         (data[1 /* type_of_time */] <4.5f ? 
            0.0f : 
             (data[3 /* no_of_ips */] <0.5f ? 
                 (data[7 /* 6_letter_word */] <0.4140625f ? 
                    0.0f : 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.46339926f ? 
                        0.9943768f : 
                        0.0f)) : 
                0.0f)));
    return pred;
  } // constant pool size = 62B, number of visited nodes = 15, static init size = 0B
}

class log_drf_1_Tree_21_class_24 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.9746094f ? 
        0.0f : 
        2.0702505E-4f);
    return pred;
  } // constant pool size = 6B, number of visited nodes = 1, static init size = 0B
}

class log_drf_1_Tree_21_class_25 {
  static final double score0(double[] data) {
    double pred =      (data[1 /* type_of_time */] <4.5f ? 
        0.0f : 
         (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.44140625f ? 
             (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <157.5f ? 
                     (Double.isNaN(data[15]) || data[15 /* 14_letter_word */] <0.052083332f ? 
                        0.03792156f : 
                        0.6574074f) : 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.13793945f ? 
                        0.28342247f : 
                        0.520503f)) : 
                 (data[0 /* vlan */] <25.5f ? 
                    0.0f : 
                     (Double.isNaN(data[4]) || data[4 /* no_of_macs */] <0.5f ? 
                        0.6746202f : 
                        0.99905485f))) : 
             (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.35351562f ? 
                 (data[0 /* vlan */] <25.5f ? 
                    0.0f : 
                     (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.25f ? 
                        0.63892925f : 
                        1.0f)) : 
                0.96518457f)));
    return pred;
  } // constant pool size = 46B, number of visited nodes = 11, static init size = 0B
}

class log_drf_1_Tree_21_class_26 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* no_of_characters */] <57.5f ? 
         (data[8 /* 7_letter_word */] <0.29101562f ? 
            0.0f : 
            0.97235024f) : 
        0.0f);
    return pred;
  } // constant pool size = 10B, number of visited nodes = 2, static init size = 0B
}

class log_drf_1_Tree_21_class_27 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <256.5f ? 
        0.0f : 
         (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.23535156f ? 
            0.0f : 
             (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
                0.0f : 
                 (data[7 /* 6_letter_word */] <0.265625f ? 
                     (data[8 /* 7_letter_word */] <0.26522064f ? 
                        0.029411765f : 
                        0.0f) : 
                    0.0f))));
    return pred;
  } // constant pool size = 22B, number of visited nodes = 5, static init size = 0B
}

class log_drf_1_Tree_21_class_28 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <447.5f ? 
        0.0f : 
         (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.0126953125f ? 
             (Double.isNaN(data[14]) || data[14 /* 13_letter_word */] <0.072265625f ? 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <17.5f ? 
                    1.0f : 
                    0.0f) : 
                1.0f) : 
             (data[2 /* no_of_characters */] <531.0f ? 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.41640624f ? 
                     (Double.isNaN(data[4]) || data[4 /* no_of_macs */] <0.5f ? 
                        0.9130435f : 
                        0.0f) : 
                    0.0f) : 
                0.0f)));
    return pred;
  } // constant pool size = 30B, number of visited nodes = 7, static init size = 0B
}

class log_drf_1_Tree_21_class_29 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <957.5f ? 
         (Double.isNaN(data[12]) || data[12 /* 11_letter_word */] <0.041015625f ? 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <184.5f ? 
                0.0f : 
                 (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
                    0.0f : 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.7734375f ? 
                        0.0f : 
                        0.002688172f))) : 
             (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.58203125f ? 
                0.0f : 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <262.5f ? 
                    0.0f : 
                    0.5f))) : 
         (Double.isNaN(data[14]) || data[14 /* 13_letter_word */] <0.0068359375f ? 
             (data[2 /* no_of_characters */] <963.0f ? 
                 (data[5 /* 4_letter_word */] <0.52734375f ? 
                    1.0f : 
                    0.6666667f) : 
                0.0f) : 
             (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.22851562f ? 
                0.0f : 
                1.0f)));
    return pred;
  } // constant pool size = 46B, number of visited nodes = 11, static init size = 0B
}

class log_drf_1_Tree_21_class_30 {
  static final double score0(double[] data) {
    double pred =      (data[1 /* type_of_time */] <1.5f ? 
        1.0f : 
        0.0f);
    return pred;
  } // constant pool size = 6B, number of visited nodes = 1, static init size = 0B
}

class log_drf_1_Tree_21_class_31 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* no_of_characters */] <113.5f ? 
         (Double.isNaN(data[13]) || data[13 /* 12_letter_word */] <0.125f ? 
             (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.083984375f ? 
                 (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.2890625f ? 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.53125f ? 
                        0.0033528197f : 
                        0.031599313f) : 
                     (data[11 /* 10_letter_word */] <0.41125488f ? 
                        0.64f : 
                        0.006060606f)) : 
                 (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.2890625f ? 
                     (Double.isNaN(data[15]) || data[15 /* 14_letter_word */] <0.1015625f ? 
                        0.10112994f : 
                        0.9047619f) : 
                    0.68421054f)) : 
             (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.16796875f ? 
                 (data[0 /* vlan */] <61.5f ? 
                    0.5f : 
                    1.0f) : 
                0.0f)) : 
         (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
            0.0f : 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <65.5f ? 
                 (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.1484375f ? 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.13336182f ? 
                        2.9501136E-4f : 
                        0.0027210885f) : 
                    0.0f) : 
                 (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.13671875f ? 
                     (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.1015625f ? 
                        0.022232516f : 
                        0.43629342f) : 
                    0.6413044f))));
    return pred;
  } // constant pool size = 66B, number of visited nodes = 16, static init size = 0B
}

class log_drf_1_Tree_21_class_32 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* no_of_characters */] <123.5f ? 
         (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.18359375f ? 
             (data[1 /* type_of_time */] <4.5f ? 
                0.0f : 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.07421875f ? 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.21875f ? 
                        2.0090406E-4f : 
                        0.010770505f) : 
                    0.0f)) : 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <87.5f ? 
                0.0f : 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.4140625f ? 
                     (data[10 /* 9_letter_word */] <0.22824097f ? 
                        0.44444445f : 
                        0.0f) : 
                    0.9787234f))) : 
        0.0f);
    return pred;
  } // constant pool size = 34B, number of visited nodes = 8, static init size = 0B
}

class log_drf_1_Tree_21_class_33 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* no_of_characters */] <69.5f ? 
         (data[8 /* 7_letter_word */] <0.125f ? 
             (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.41601562f ? 
                 (data[0 /* vlan */] <17.5f ? 
                    1.0f : 
                     (data[0 /* vlan */] <89.0f ? 
                        0.0877193f : 
                        0.0f)) : 
                 (data[2 /* no_of_characters */] <66.5f ? 
                     (data[7 /* 6_letter_word */] <0.7490692f ? 
                        0.0f : 
                        0.14285715f) : 
                    1.0f)) : 
            0.0f) : 
         (Double.isNaN(data[4]) || data[4 /* no_of_macs */] <1.5f ? 
             (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.73046875f ? 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <277.5f ? 
                     (data[2 /* no_of_characters */] <99.5f ? 
                        0.0027638853f : 
                        7.976629E-5f) : 
                     (data[3 /* no_of_ips */] <2.5f ? 
                        0.01697417f : 
                        0.0f)) : 
                 (data[2 /* no_of_characters */] <88.5f ? 
                    0.03275109f : 
                     (data[1 /* type_of_time */] <4.5f ? 
                        0.0f : 
                        0.0035856573f))) : 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <287.0f ? 
                0.0f : 
                 (data[8 /* 7_letter_word */] <0.1640625f ? 
                    0.0f : 
                     (data[5 /* 4_letter_word */] <0.38392857f ? 
                        0.0f : 
                        1.0f)))));
    return pred;
  } // constant pool size = 70B, number of visited nodes = 17, static init size = 0B
}

class log_drf_1_Tree_21_class_34 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.12158203f ? 
        0.0f : 
         (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.1171875f ? 
            0.0f : 
             (data[1 /* type_of_time */] <4.5f ? 
                0.0f : 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.1328125f ? 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.10546875f ? 
                        0.0f : 
                        0.03125f) : 
                    0.0f))));
    return pred;
  } // constant pool size = 22B, number of visited nodes = 5, static init size = 0B
}

class log_drf_1_Tree_21_class_35 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* no_of_characters */] <88.5f ? 
         (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.29101562f ? 
             (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.7480469f ? 
                0.0f : 
                0.003267974f) : 
             (data[5 /* 4_letter_word */] <0.41601562f ? 
                 (data[0 /* vlan */] <17.5f ? 
                    0.33333334f : 
                    0.0f) : 
                0.0f)) : 
         (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
            0.0f : 
             (data[0 /* vlan */] <13.5f ? 
                 (data[0 /* vlan */] <10.0f ? 
                    0.0f : 
                     (data[2 /* no_of_characters */] <126.5f ? 
                        0.6666667f : 
                        0.0f)) : 
                 (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.01171875f ? 
                     (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <2.5f ? 
                        2.4563988E-4f : 
                        0.0f) : 
                    0.0f))));
    return pred;
  } // constant pool size = 46B, number of visited nodes = 11, static init size = 0B
}

class log_drf_1_Tree_21_class_36 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* no_of_characters */] <131.5f ? 
         (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.15527344f ? 
            0.0f : 
             (data[1 /* type_of_time */] <4.5f ? 
                0.0f : 
                 (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.44921875f ? 
                    0.0f : 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.0859375f ? 
                        0.0f : 
                        0.8333333f)))) : 
        0.0f);
    return pred;
  } // constant pool size = 22B, number of visited nodes = 5, static init size = 0B
}

class log_drf_1_Tree_21_class_37 {
  static final double score0(double[] data) {
    double pred =      (data[1 /* type_of_time */] <4.5f ? 
         (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.05078125f ? 
             (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.31054688f ? 
                 (data[1 /* type_of_time */] <3.5f ? 
                     (data[0 /* vlan */] <81.5f ? 
                        0.9756098f : 
                        0.0022371365f) : 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.21875f ? 
                        0.9988316f : 
                        0.9973805f)) : 
                 (data[1 /* type_of_time */] <3.5f ? 
                     (data[1 /* type_of_time */] <2.5f ? 
                        1.0f : 
                        0.0f) : 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <178.5f ? 
                        0.9958549f : 
                        1.0f))) : 
             (data[1 /* type_of_time */] <3.5f ? 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.22265625f ? 
                    0.0f : 
                    0.25f) : 
                1.0f)) : 
         (data[3 /* no_of_ips */] <0.5f ? 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <153.5f ? 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.31640625f ? 
                    0.0f : 
                     (data[8 /* 7_letter_word */] <0.36447144f ? 
                        3.0413625E-4f : 
                        0.0f)) : 
                 (data[2 /* no_of_characters */] <37.5f ? 
                    0.0f : 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.96875f ? 
                        0.2818792f : 
                        0.974359f))) : 
             (data[5 /* 4_letter_word */] <0.03125f ? 
                 (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.0859375f ? 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.4453125f ? 
                        0.0f : 
                        0.0016846361f) : 
                    0.0f) : 
                0.0f)));
    return pred;
  } // constant pool size = 82B, number of visited nodes = 20, static init size = 0B
}

class log_drf_1_Tree_21_class_38 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* no_of_characters */] <93.5f ? 
        2.1266038E-4f : 
        0.0f);
    return pred;
  } // constant pool size = 6B, number of visited nodes = 1, static init size = 0B
}


class log_drf_1_Forest_22 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += log_drf_1_Tree_22_class_0.score0(fdata);
    preds[2] += log_drf_1_Tree_22_class_1.score0(fdata);
    preds[3] += log_drf_1_Tree_22_class_2.score0(fdata);
    preds[4] += log_drf_1_Tree_22_class_3.score0(fdata);
    preds[5] += log_drf_1_Tree_22_class_4.score0(fdata);
    preds[6] += log_drf_1_Tree_22_class_5.score0(fdata);
    preds[7] += log_drf_1_Tree_22_class_6.score0(fdata);
    preds[8] += log_drf_1_Tree_22_class_7.score0(fdata);
    preds[9] += log_drf_1_Tree_22_class_8.score0(fdata);
    preds[10] += log_drf_1_Tree_22_class_9.score0(fdata);
    preds[11] += log_drf_1_Tree_22_class_10.score0(fdata);
    preds[12] += log_drf_1_Tree_22_class_11.score0(fdata);
    preds[13] += log_drf_1_Tree_22_class_12.score0(fdata);
    preds[14] += log_drf_1_Tree_22_class_13.score0(fdata);
    preds[15] += log_drf_1_Tree_22_class_14.score0(fdata);
    preds[16] += log_drf_1_Tree_22_class_15.score0(fdata);
    preds[17] += log_drf_1_Tree_22_class_16.score0(fdata);
    preds[18] += log_drf_1_Tree_22_class_17.score0(fdata);
    preds[19] += log_drf_1_Tree_22_class_18.score0(fdata);
    preds[20] += log_drf_1_Tree_22_class_19.score0(fdata);
    preds[21] += log_drf_1_Tree_22_class_20.score0(fdata);
    preds[22] += log_drf_1_Tree_22_class_21.score0(fdata);
    preds[23] += log_drf_1_Tree_22_class_22.score0(fdata);
    preds[24] += log_drf_1_Tree_22_class_23.score0(fdata);
    preds[25] += log_drf_1_Tree_22_class_24.score0(fdata);
    preds[26] += log_drf_1_Tree_22_class_25.score0(fdata);
    preds[27] += log_drf_1_Tree_22_class_26.score0(fdata);
    preds[28] += log_drf_1_Tree_22_class_27.score0(fdata);
    preds[29] += log_drf_1_Tree_22_class_28.score0(fdata);
    preds[30] += log_drf_1_Tree_22_class_29.score0(fdata);
    preds[31] += log_drf_1_Tree_22_class_30.score0(fdata);
    preds[32] += log_drf_1_Tree_22_class_31.score0(fdata);
    preds[33] += log_drf_1_Tree_22_class_32.score0(fdata);
    preds[34] += log_drf_1_Tree_22_class_33.score0(fdata);
    preds[35] += log_drf_1_Tree_22_class_34.score0(fdata);
    preds[36] += log_drf_1_Tree_22_class_35.score0(fdata);
    preds[37] += log_drf_1_Tree_22_class_36.score0(fdata);
    preds[38] += log_drf_1_Tree_22_class_37.score0(fdata);
    preds[39] += log_drf_1_Tree_22_class_38.score0(fdata);
  }
}
class log_drf_1_Tree_22_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.020507812f ? 
         (Double.isNaN(data[12]) || data[12 /* 11_letter_word */] <0.015625f ? 
             (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.0234375f ? 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.4609375f ? 
                    0.0f : 
                     (Double.isNaN(data[4]) || data[4 /* no_of_macs */] <0.5f ? 
                        0.0f : 
                        0.33333334f)) : 
                 (data[10 /* 9_letter_word */] <0.057769775f ? 
                    1.0f : 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.171875f ? 
                        0.0f : 
                        4.4464206E-4f))) : 
             (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.013671875f ? 
                0.0f : 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.21875f ? 
                    0.0f : 
                     (data[14 /* 13_letter_word */] <0.015625f ? 
                        0.0f : 
                        1.0f)))) : 
         (Double.isNaN(data[14]) || data[14 /* 13_letter_word */] <0.0146484375f ? 
             (Double.isNaN(data[4]) || data[4 /* no_of_macs */] <0.5f ? 
                0.0f : 
                1.0f) : 
             (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                1.0f : 
                0.0f)));
    return pred;
  } // constant pool size = 54B, number of visited nodes = 13, static init size = 0B
}

class log_drf_1_Tree_22_class_1 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
        0.0f : 
         (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.38671875f ? 
             (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.036132812f ? 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <137.5f ? 
                    0.0f : 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.078125f ? 
                        0.012153063f : 
                        0.0f)) : 
                0.0f) : 
             (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.3671875f ? 
                0.0f : 
                 (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.1015625f ? 
                    0.0f : 
                     (data[1 /* type_of_time */] <4.0f ? 
                        1.0f : 
                        0.9956332f)))));
    return pred;
  } // constant pool size = 34B, number of visited nodes = 8, static init size = 0B
}

class log_drf_1_Tree_22_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0]) || data[0 /* vlan */] <181.5f ? 
         (data[8 /* 7_letter_word */] <0.2607422f ? 
             (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.5703125f ? 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <137.5f ? 
                    0.0f : 
                     (data[6 /* 5_letter_word */] <0.546875f ? 
                        0.022783114f : 
                        0.0f)) : 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.15625f ? 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <136.5f ? 
                        0.0f : 
                        0.0071174377f) : 
                     (data[7 /* 6_letter_word */] <0.18390764f ? 
                        0.91150445f : 
                        0.29715762f))) : 
             (data[0 /* vlan */] <141.5f ? 
                 (data[2 /* no_of_characters */] <130.5f ? 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <113.0f ? 
                        0.0f : 
                        0.6666667f) : 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.1328125f ? 
                        0.0f : 
                        5.532504E-4f)) : 
                0.0f)) : 
         (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.125f ? 
             (data[7 /* 6_letter_word */] <0.3671875f ? 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <669.5f ? 
                    0.0f : 
                    1.0f) : 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.37109375f ? 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <591.0f ? 
                        0.96468925f : 
                        0.0f) : 
                    0.0f)) : 
            0.0f));
    return pred;
  } // constant pool size = 70B, number of visited nodes = 17, static init size = 0B
}

class log_drf_1_Tree_22_class_3 {
  static final double score0(double[] data) {
    double pred =      (data[0 /* vlan */] <29.5f ? 
         (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.29296875f ? 
             (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.4921875f ? 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <28.5f ? 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <24.0f ? 
                        0.0f : 
                        0.0040983604f) : 
                     (data[2 /* no_of_characters */] <130.5f ? 
                        0.0f : 
                        1.0f)) : 
                 (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.22265625f ? 
                    0.0f : 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.0625f ? 
                        0.800636f : 
                        0.0f))) : 
            0.0f) : 
        8.029842E-5f);
    return pred;
  } // constant pool size = 34B, number of visited nodes = 8, static init size = 0B
}

class log_drf_1_Tree_22_class_4 {
  static final double score0(double[] data) {
    double pred =      (data[0 /* vlan */] <27.5f ? 
         (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.29101562f ? 
             (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.031261444f ? 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <26.0f ? 
                    0.0f : 
                     (data[3 /* no_of_ips */] <1.5f ? 
                        0.08928572f : 
                        0.0f)) : 
                0.0f) : 
             (data[10 /* 9_letter_word */] <0.36717606f ? 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <24.5f ? 
                    0.0f : 
                     (data[2 /* no_of_characters */] <120.5f ? 
                        0.9444444f : 
                        0.0f)) : 
                0.0f)) : 
        0.0f);
    return pred;
  } // constant pool size = 34B, number of visited nodes = 8, static init size = 0B
}

class log_drf_1_Tree_22_class_5 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0]) || data[0 /* vlan */] <85.5f ? 
         (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.123046875f ? 
             (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.07421875f ? 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <81.5f ? 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <37.5f ? 
                        0.0f : 
                        0.0016402405f) : 
                     (data[2 /* no_of_characters */] <120.5f ? 
                        0.11764706f : 
                        0.0f)) : 
                 (data[6 /* 5_letter_word */] <0.30859375f ? 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.1328125f ? 
                        0.0f : 
                        0.014150944f) : 
                    0.0f)) : 
             (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.34960938f ? 
                0.0f : 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <61.5f ? 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <36.5f ? 
                        6.570302E-4f : 
                        0.034749035f) : 
                    1.0f))) : 
        0.0f);
    return pred;
  } // constant pool size = 46B, number of visited nodes = 11, static init size = 0B
}

class log_drf_1_Tree_22_class_6 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0]) || data[0 /* vlan */] <133.5f ? 
         (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.2607422f ? 
             (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.26757812f ? 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <125.5f ? 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <82.5f ? 
                        3.283569E-4f : 
                        0.045278136f) : 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <130.5f ? 
                        1.0f : 
                        0.0f)) : 
                0.0f) : 
             (data[5 /* 4_letter_word */] <0.0625f ? 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.8989296f ? 
                    0.0f : 
                     (data[2 /* no_of_characters */] <60.5f ? 
                        1.0f : 
                        0.0f)) : 
                0.0f)) : 
        0.0f);
    return pred;
  } // constant pool size = 38B, number of visited nodes = 9, static init size = 0B
}

class log_drf_1_Tree_22_class_7 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0]) || data[0 /* vlan */] <185.0f ? 
        0.0f : 
        0.35211268f);
    return pred;
  } // constant pool size = 6B, number of visited nodes = 1, static init size = 0B
}

class log_drf_1_Tree_22_class_8 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0]) || data[0 /* vlan */] <180.5f ? 
        0.0f : 
         (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.041992188f ? 
             (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.1953125f ? 
                 (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.265625f ? 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <590.5f ? 
                        0.028877888f : 
                        0.0f) : 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <590.5f ? 
                        0.4883721f : 
                        0.0f)) : 
                0.0f) : 
             (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.41601562f ? 
                0.0f : 
                1.0f)));
    return pred;
  } // constant pool size = 30B, number of visited nodes = 7, static init size = 0B
}

class log_drf_1_Tree_22_class_9 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <2.5f ? 
         (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.19140625f ? 
             (data[1 /* type_of_time */] <3.5f ? 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <162.5f ? 
                    0.0f : 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <155.0f ? 
                        1.0f : 
                        0.25f)) : 
                0.0f) : 
             (data[10 /* 9_letter_word */] <0.21035767f ? 
                 (data[1 /* type_of_time */] <3.5f ? 
                     (data[3 /* no_of_ips */] <1.0f ? 
                        0.0f : 
                        1.0f) : 
                    0.0f) : 
                0.0f)) : 
         (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.05078125f ? 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <97.5f ? 
                0.0f : 
                 (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.0625f ? 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <174.0f ? 
                        1.0f : 
                        0.0f) : 
                     (data[2 /* no_of_characters */] <190.5f ? 
                        1.0f : 
                        0.0f))) : 
             (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <4.5f ? 
                 (data[1 /* type_of_time */] <4.0f ? 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <190.5f ? 
                        1.0f : 
                        0.0f) : 
                    0.0f) : 
                1.0f)));
    return pred;
  } // constant pool size = 66B, number of visited nodes = 16, static init size = 0B
}

class log_drf_1_Tree_22_class_10 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0]) || data[0 /* vlan */] <166.5f ? 
        5.0979834E-6f : 
         (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.026367188f ? 
             (data[2 /* no_of_characters */] <103.0f ? 
                 (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.16796875f ? 
                    0.0040816325f : 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.3359375f ? 
                        0.0f : 
                        1.0f)) : 
                0.0f) : 
            0.0f));
    return pred;
  } // constant pool size = 22B, number of visited nodes = 5, static init size = 0B
}

class log_drf_1_Tree_22_class_11 {
  static final double score0(double[] data) {
    double pred =     5.0E-6f;
    return pred;
  } // constant pool size = 2B, number of visited nodes = 0, static init size = 0B
}

class log_drf_1_Tree_22_class_12 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0]) || data[0 /* vlan */] <593.5f ? 
        0.0f : 
        0.13695653f);
    return pred;
  } // constant pool size = 6B, number of visited nodes = 1, static init size = 0B
}

class log_drf_1_Tree_22_class_13 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0]) || data[0 /* vlan */] <593.5f ? 
         (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.2607422f ? 
             (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.40820312f ? 
                 (data[0 /* vlan */] <5.5f ? 
                     (data[8 /* 7_letter_word */] <0.126297f ? 
                        0.0f : 
                        0.9677419f) : 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <165.5f ? 
                        0.0010921637f : 
                        0.01043771f)) : 
                0.0f) : 
            0.0f) : 
        0.76304346f);
    return pred;
  } // constant pool size = 26B, number of visited nodes = 6, static init size = 0B
}

class log_drf_1_Tree_22_class_14 {
  static final double score0(double[] data) {
    double pred =      (data[0 /* vlan */] <27.5f ? 
         (Double.isNaN(data[12]) || data[12 /* 11_letter_word */] <0.18359375f ? 
            5.669577E-5f : 
             (data[1 /* type_of_time */] <3.5f ? 
                1.0f : 
                0.0f)) : 
        0.0f);
    return pred;
  } // constant pool size = 14B, number of visited nodes = 3, static init size = 0B
}

class log_drf_1_Tree_22_class_15 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <1.5f ? 
         (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.4716797f ? 
             (data[1 /* type_of_time */] <4.5f ? 
                0.0f : 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <125.5f ? 
                     (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.109375f ? 
                        2.915924E-4f : 
                        0.0037868542f) : 
                     (data[5 /* 4_letter_word */] <0.3828125f ? 
                        0.20822397f : 
                        0.006706408f))) : 
            0.0f) : 
         (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.0390625f ? 
             (data[6 /* 5_letter_word */] <0.04296875f ? 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <154.5f ? 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.546875f ? 
                        0.057995737f : 
                        0.43801653f) : 
                    0.0f) : 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <85.5f ? 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.4609375f ? 
                        0.0f : 
                        3.6509676E-4f) : 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.3671875f ? 
                        0.0f : 
                        0.020833334f))) : 
            0.0f));
    return pred;
  } // constant pool size = 54B, number of visited nodes = 13, static init size = 0B
}

class log_drf_1_Tree_22_class_16 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0]) || data[0 /* vlan */] <83.5f ? 
         (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.31640625f ? 
             (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.03125f ? 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <30.5f ? 
                     (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.3125f ? 
                        0.0f : 
                        5.32198E-4f) : 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.046875f ? 
                        0.003919373f : 
                        0.001858736f)) : 
                0.0f) : 
             (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.47070312f ? 
                 (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.38671875f ? 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <61.0f ? 
                        1.0556318E-4f : 
                        0.04761905f) : 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.44955444f ? 
                        0.033333335f : 
                        0.0f)) : 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <30.5f ? 
                    0.0f : 
                    0.046511628f))) : 
        0.0f);
    return pred;
  } // constant pool size = 46B, number of visited nodes = 11, static init size = 0B
}

class log_drf_1_Tree_22_class_17 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0]) || data[0 /* vlan */] <180.5f ? 
         (Double.isNaN(data[14]) || data[14 /* 13_letter_word */] <0.053710938f ? 
             (data[1 /* type_of_time */] <2.5f ? 
                 (data[0 /* vlan */] <21.0f ? 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <13.5f ? 
                        0.0f : 
                        0.045454547f) : 
                    0.0f) : 
                0.0f) : 
             (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.013671875f ? 
                0.0f : 
                 (data[7 /* 6_letter_word */] <0.25390625f ? 
                    0.0f : 
                    1.0f))) : 
         (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.41601562f ? 
             (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.3671875f ? 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <659.5f ? 
                    0.0f : 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.046875f ? 
                        0.6580977f : 
                        0.41304347f)) : 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <998.5f ? 
                    0.0f : 
                     (data[3 /* no_of_ips */] <2.5f ? 
                        0.0f : 
                        1.0f))) : 
            0.0f));
    return pred;
  } // constant pool size = 54B, number of visited nodes = 13, static init size = 0B
}

class log_drf_1_Tree_22_class_18 {
  static final double score0(double[] data) {
    double pred =      (data[0 /* vlan */] <14.5f ? 
        5.034233E-5f : 
        0.0f);
    return pred;
  } // constant pool size = 6B, number of visited nodes = 1, static init size = 0B
}

class log_drf_1_Tree_22_class_19 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.23583984f ? 
         (data[8 /* 7_letter_word */] <0.20703125f ? 
             (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.19921875f ? 
                0.0f : 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.19247437f ? 
                    0.0f : 
                     (data[2 /* no_of_characters */] <140.5f ? 
                        0.031746034f : 
                        0.0f))) : 
            0.0f) : 
         (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.125f ? 
             (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.18554688f ? 
                0.0f : 
                 (data[3 /* no_of_ips */] <0.5f ? 
                    0.0f : 
                     (data[2 /* no_of_characters */] <120.5f ? 
                        0.0f : 
                        0.8626156f))) : 
            0.0f));
    return pred;
  } // constant pool size = 38B, number of visited nodes = 9, static init size = 0B
}

class log_drf_1_Tree_22_class_20 {
  static final double score0(double[] data) {
    double pred =      (data[0 /* vlan */] <23.5f ? 
         (Double.isNaN(data[14]) || data[14 /* 13_letter_word */] <0.03125f ? 
             (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.22460938f ? 
                 (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.34765625f ? 
                     (data[1 /* type_of_time */] <4.5f ? 
                        0.0f : 
                        0.6842008f) : 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.15625f ? 
                        0.99635243f : 
                        0.967655f)) : 
                 (data[0 /* vlan */] <17.0f ? 
                    0.0f : 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.125f ? 
                        1.0f : 
                        0.9990099f))) : 
             (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.23046875f ? 
                 (Double.isNaN(data[14]) || data[14 /* 13_letter_word */] <0.37182617f ? 
                    0.0f : 
                    1.0f) : 
                 (data[14 /* 13_letter_word */] <0.15234375f ? 
                    0.0f : 
                    1.0f))) : 
        0.0f);
    return pred;
  } // constant pool size = 46B, number of visited nodes = 11, static init size = 0B
}

class log_drf_1_Tree_22_class_21 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.15478516f ? 
         (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.0068359375f ? 
             (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.234375f ? 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.80078125f ? 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.046875f ? 
                        0.0012239134f : 
                        1.3695347E-4f) : 
                    0.010957324f) : 
                 (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.13422775f ? 
                     (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                        0.003797728f : 
                        1.7843336E-4f) : 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.078125f ? 
                        0.13043478f : 
                        0.0f))) : 
             (data[0 /* vlan */] <25.5f ? 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <190.5f ? 
                    0.0f : 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.4609375f ? 
                        0.0f : 
                        0.0028735632f)) : 
                0.0f)) : 
         (Double.isNaN(data[12]) || data[12 /* 11_letter_word */] <0.125f ? 
             (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.5488281f ? 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <210.5f ? 
                    0.0f : 
                     (data[0 /* vlan */] <38.5f ? 
                        0.058189657f : 
                        0.003984064f)) : 
                 (data[0 /* vlan */] <18.0f ? 
                    1.0f : 
                    0.0f)) : 
            1.0f));
    return pred;
  } // constant pool size = 66B, number of visited nodes = 16, static init size = 0B
}

class log_drf_1_Tree_22_class_22 {
  static final double score0(double[] data) {
    double pred =      (data[0 /* vlan */] <5.5f ? 
         (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.083984375f ? 
            0.0f : 
            0.13333334f) : 
        2.003165E-5f);
    return pred;
  } // constant pool size = 10B, number of visited nodes = 2, static init size = 0B
}

class log_drf_1_Tree_22_class_23 {
  static final double score0(double[] data) {
    double pred =      (data[0 /* vlan */] <14.5f ? 
         (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.26757812f ? 
             (Double.isNaN(data[14]) || data[14 /* 13_letter_word */] <0.030761719f ? 
                 (data[6 /* 5_letter_word */] <0.15625f ? 
                     (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.1328125f ? 
                        0.4075486f : 
                        0.0f) : 
                     (Double.isNaN(data[13]) || data[13 /* 12_letter_word */] <0.046875f ? 
                        0.0037469694f : 
                        1.0f)) : 
                0.0f) : 
             (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.125f ? 
                 (data[0 /* vlan */] <13.5f ? 
                    0.0f : 
                     (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <3.0f ? 
                        0.99904764f : 
                        0.0f)) : 
                0.0f)) : 
        0.0f);
    return pred;
  } // constant pool size = 38B, number of visited nodes = 9, static init size = 0B
}

class log_drf_1_Tree_22_class_24 {
  static final double score0(double[] data) {
    double pred =      (data[0 /* vlan */] <11.5f ? 
         (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.045898438f ? 
             (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.8730469f ? 
                0.0f : 
                1.0f) : 
            0.0f) : 
        0.0f);
    return pred;
  } // constant pool size = 14B, number of visited nodes = 3, static init size = 0B
}

class log_drf_1_Tree_22_class_25 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <1.5f ? 
         (Double.isNaN(data[12]) || data[12 /* 11_letter_word */] <0.15527344f ? 
             (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
                0.0f : 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.31640625f ? 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.703125f ? 
                        0.091634035f : 
                        0.4733435f) : 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.0625f ? 
                        0.3168375f : 
                        0.06147722f))) : 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <63.5f ? 
                 (data[0 /* vlan */] <28.5f ? 
                    0.0f : 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.25f ? 
                        1.0f : 
                        0.0f)) : 
                0.0f)) : 
         (Double.isNaN(data[14]) || data[14 /* 13_letter_word */] <0.0625f ? 
             (data[0 /* vlan */] <25.5f ? 
                0.0f : 
                 (data[1 /* type_of_time */] <4.5f ? 
                    0.0f : 
                     (Double.isNaN(data[4]) || data[4 /* no_of_macs */] <0.5f ? 
                        0.93143415f : 
                        0.9997717f))) : 
            0.0f));
    return pred;
  } // constant pool size = 54B, number of visited nodes = 13, static init size = 0B
}

class log_drf_1_Tree_22_class_26 {
  static final double score0(double[] data) {
    double pred =      (data[0 /* vlan */] <29.5f ? 
         (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.31640625f ? 
            0.0f : 
             (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.0625f ? 
                 (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.6328125f ? 
                    0.0f : 
                     (Double.isNaN(data[4]) || data[4 /* no_of_macs */] <0.5f ? 
                        0.9279279f : 
                        0.0f)) : 
                0.0f)) : 
        0.0f);
    return pred;
  } // constant pool size = 22B, number of visited nodes = 5, static init size = 0B
}

class log_drf_1_Tree_22_class_27 {
  static final double score0(double[] data) {
    double pred =      (data[0 /* vlan */] <14.5f ? 
         (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.22460938f ? 
            0.0f : 
            7.773028E-4f) : 
        0.0f);
    return pred;
  } // constant pool size = 10B, number of visited nodes = 2, static init size = 0B
}

class log_drf_1_Tree_22_class_28 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <5.5f ? 
         (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.16015625f ? 
            0.0f : 
             (data[10 /* 9_letter_word */] <0.17327881f ? 
                 (data[8 /* 7_letter_word */] <0.0859375f ? 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <17.5f ? 
                        0.8108108f : 
                        0.0f) : 
                    0.0f) : 
                0.0f)) : 
         (Double.isNaN(data[14]) || data[14 /* 13_letter_word */] <0.0625f ? 
             (data[2 /* no_of_characters */] <357.5f ? 
                0.0f : 
                1.0f) : 
            1.0f));
    return pred;
  } // constant pool size = 30B, number of visited nodes = 7, static init size = 0B
}

class log_drf_1_Tree_22_class_29 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.0087890625f ? 
         (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.19140625f ? 
            0.0f : 
             (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.7734375f ? 
                0.0f : 
                0.125f)) : 
         (Double.isNaN(data[12]) || data[12 /* 11_letter_word */] <0.0087890625f ? 
            0.0f : 
             (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.09375f ? 
                0.0f : 
                 (data[7 /* 6_letter_word */] <0.09375f ? 
                    1.0f : 
                    0.0f))));
    return pred;
  } // constant pool size = 26B, number of visited nodes = 6, static init size = 0B
}

class log_drf_1_Tree_22_class_30 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0]) || data[0 /* vlan */] <177.0f ? 
        0.0f : 
         (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.20800781f ? 
             (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.29101562f ? 
                 (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.30859375f ? 
                    0.0f : 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <588.5f ? 
                        0.10454545f : 
                        0.0f)) : 
                0.11627907f) : 
             (data[1 /* type_of_time */] <2.5f ? 
                1.0f : 
                0.0f)));
    return pred;
  } // constant pool size = 26B, number of visited nodes = 6, static init size = 0B
}

class log_drf_1_Tree_22_class_31 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[15]) || data[15 /* 14_letter_word */] <0.22485352f ? 
         (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.56347656f ? 
             (Double.isNaN(data[13]) || data[13 /* 12_letter_word */] <0.234375f ? 
                 (data[2 /* no_of_characters */] <110.5f ? 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <65.5f ? 
                        7.346557E-4f : 
                        0.26717559f) : 
                     (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
                        0.0f : 
                        0.00527217f)) : 
                 (data[2 /* no_of_characters */] <115.5f ? 
                     (data[2 /* no_of_characters */] <89.5f ? 
                        1.0f : 
                        0.53968257f) : 
                    0.0f)) : 
             (data[0 /* vlan */] <125.5f ? 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <62.5f ? 
                    0.0f : 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.2421875f ? 
                        1.0f : 
                        0.990991f)) : 
                0.0f)) : 
         (Double.isNaN(data[15]) || data[15 /* 14_letter_word */] <0.29149055f ? 
             (data[0 /* vlan */] <55.5f ? 
                0.0f : 
                 (data[2 /* no_of_characters */] <100.5f ? 
                    1.0f : 
                    0.72727275f)) : 
            0.975f));
    return pred;
  } // constant pool size = 58B, number of visited nodes = 14, static init size = 0B
}

class log_drf_1_Tree_22_class_32 {
  static final double score0(double[] data) {
    double pred =      (data[0 /* vlan */] <29.5f ? 
         (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.44921875f ? 
             (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.19039154f ? 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <28.5f ? 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <26.5f ? 
                        0.0f : 
                        0.0036363637f) : 
                     (data[2 /* no_of_characters */] <140.5f ? 
                        0.18181819f : 
                        0.0f)) : 
                 (data[8 /* 7_letter_word */] <0.1015625f ? 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.546875f ? 
                        0.0f : 
                        0.9019608f) : 
                    0.0f)) : 
             (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.125f ? 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <28.0f ? 
                    0.0f : 
                    1.0f) : 
                0.0f)) : 
        0.0f);
    return pred;
  } // constant pool size = 42B, number of visited nodes = 10, static init size = 0B
}

class log_drf_1_Tree_22_class_33 {
  static final double score0(double[] data) {
    double pred =      (data[0 /* vlan */] <7.5f ? 
         (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.083984375f ? 
            1.0f : 
             (data[6 /* 5_letter_word */] <0.234375f ? 
                 (data[10 /* 9_letter_word */] <0.083333336f ? 
                    1.0f : 
                    0.0f) : 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <3.5f ? 
                    0.0f : 
                    1.0f))) : 
         (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.080078125f ? 
             (data[0 /* vlan */] <17.5f ? 
                 (data[2 /* no_of_characters */] <90.5f ? 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.828125f ? 
                        0.0f : 
                        1.0f) : 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.4140625f ? 
                        2.0352092E-4f : 
                        0.020624302f)) : 
                 (data[0 /* vlan */] <97.5f ? 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.234375f ? 
                        4.9199146E-4f : 
                        0.0037807184f) : 
                    0.0f)) : 
             (Double.isNaN(data[4]) || data[4 /* no_of_macs */] <1.5f ? 
                 (data[10 /* 9_letter_word */] <0.087265015f ? 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.0859375f ? 
                        0.8333333f : 
                        1.0f) : 
                    0.0f) : 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <64.0f ? 
                    1.0f : 
                    0.0f))));
    return pred;
  } // constant pool size = 66B, number of visited nodes = 16, static init size = 0B
}

class log_drf_1_Tree_22_class_34 {
  static final double score0(double[] data) {
    double pred =      (data[0 /* vlan */] <10.0f ? 
         (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.0625f ? 
            0.0f : 
            0.0625f) : 
         (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.16015625f ? 
            0.0f : 
             (data[10 /* 9_letter_word */] <0.17327881f ? 
                 (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.25f ? 
                    0.0f : 
                     (data[0 /* vlan */] <22.0f ? 
                        0.125f : 
                        0.0f)) : 
                0.0f)));
    return pred;
  } // constant pool size = 26B, number of visited nodes = 6, static init size = 0B
}

class log_drf_1_Tree_22_class_35 {
  static final double score0(double[] data) {
    double pred =      (data[0 /* vlan */] <12.5f ? 
         (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.21582031f ? 
            0.0f : 
             (data[2 /* no_of_characters */] <138.0f ? 
                1.0f : 
                0.0f)) : 
         (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.095703125f ? 
             (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.0871048f ? 
                 (data[8 /* 7_letter_word */] <0.17578125f ? 
                     (data[0 /* vlan */] <28.5f ? 
                        4.705681E-4f : 
                        0.0f) : 
                     (data[2 /* no_of_characters */] <100.5f ? 
                        9.0252707E-4f : 
                        1.6628697E-5f)) : 
                0.035714287f) : 
            0.0f));
    return pred;
  } // constant pool size = 34B, number of visited nodes = 8, static init size = 0B
}

class log_drf_1_Tree_22_class_36 {
  static final double score0(double[] data) {
    double pred =      (data[0 /* vlan */] <5.5f ? 
         (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.083984375f ? 
            0.0f : 
            0.8666667f) : 
        0.0f);
    return pred;
  } // constant pool size = 10B, number of visited nodes = 2, static init size = 0B
}

class log_drf_1_Tree_22_class_37 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0]) || data[0 /* vlan */] <156.5f ? 
         (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.26757812f ? 
             (data[1 /* type_of_time */] <4.5f ? 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <83.0f ? 
                     (data[1 /* type_of_time */] <3.0f ? 
                        0.8791946f : 
                        1.0f) : 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.3046875f ? 
                        0.0f : 
                        0.030303031f)) : 
                 (data[2 /* no_of_characters */] <120.5f ? 
                    0.0f : 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.3203125f ? 
                        0.0f : 
                        1.7314518E-4f))) : 
             (data[10 /* 9_letter_word */] <0.36628342f ? 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <24.5f ? 
                    0.0f : 
                     (data[3 /* no_of_ips */] <0.5f ? 
                        0.04109589f : 
                        0.0f)) : 
                0.0f)) : 
         (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.026367188f ? 
             (data[8 /* 7_letter_word */] <0.15429688f ? 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <170.5f ? 
                     (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <1.5f ? 
                        0.99505657f : 
                        0.020648967f) : 
                     (data[3 /* no_of_ips */] <0.5f ? 
                        0.41689372f : 
                        0.0f)) : 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <644.5f ? 
                     (data[2 /* no_of_characters */] <104.0f ? 
                        0.0f : 
                        0.99322486f) : 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <1020.5f ? 
                        0.11764706f : 
                        0.3846154f))) : 
             (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.18359375f ? 
                 (Double.isNaN(data[12]) || data[12 /* 11_letter_word */] <0.05f ? 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.171875f ? 
                        1.0f : 
                        0.6666667f) : 
                    1.0f) : 
                 (data[3 /* no_of_ips */] <0.5f ? 
                    1.0f : 
                    0.0f))));
    return pred;
  } // constant pool size = 94B, number of visited nodes = 23, static init size = 0B
}

class log_drf_1_Tree_22_class_38 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0]) || data[0 /* vlan */] <85.5f ? 
        0.0f : 
         (data[8 /* 7_letter_word */] <0.0126953125f ? 
             (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.03515625f ? 
                 (data[2 /* no_of_characters */] <100.5f ? 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.828125f ? 
                        9.746589E-4f : 
                        0.02f) : 
                    0.0f) : 
                0.0f) : 
            0.0f));
    return pred;
  } // constant pool size = 22B, number of visited nodes = 5, static init size = 0B
}


class log_drf_1_Forest_23 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += log_drf_1_Tree_23_class_0.score0(fdata);
    preds[2] += log_drf_1_Tree_23_class_1.score0(fdata);
    preds[3] += log_drf_1_Tree_23_class_2.score0(fdata);
    preds[4] += log_drf_1_Tree_23_class_3.score0(fdata);
    preds[5] += log_drf_1_Tree_23_class_4.score0(fdata);
    preds[6] += log_drf_1_Tree_23_class_5.score0(fdata);
    preds[7] += log_drf_1_Tree_23_class_6.score0(fdata);
    preds[8] += log_drf_1_Tree_23_class_7.score0(fdata);
    preds[9] += log_drf_1_Tree_23_class_8.score0(fdata);
    preds[10] += log_drf_1_Tree_23_class_9.score0(fdata);
    preds[11] += log_drf_1_Tree_23_class_10.score0(fdata);
    preds[12] += log_drf_1_Tree_23_class_11.score0(fdata);
    preds[13] += log_drf_1_Tree_23_class_12.score0(fdata);
    preds[14] += log_drf_1_Tree_23_class_13.score0(fdata);
    preds[15] += log_drf_1_Tree_23_class_14.score0(fdata);
    preds[16] += log_drf_1_Tree_23_class_15.score0(fdata);
    preds[17] += log_drf_1_Tree_23_class_16.score0(fdata);
    preds[18] += log_drf_1_Tree_23_class_17.score0(fdata);
    preds[19] += log_drf_1_Tree_23_class_18.score0(fdata);
    preds[20] += log_drf_1_Tree_23_class_19.score0(fdata);
    preds[21] += log_drf_1_Tree_23_class_20.score0(fdata);
    preds[22] += log_drf_1_Tree_23_class_21.score0(fdata);
    preds[23] += log_drf_1_Tree_23_class_22.score0(fdata);
    preds[24] += log_drf_1_Tree_23_class_23.score0(fdata);
    preds[25] += log_drf_1_Tree_23_class_24.score0(fdata);
    preds[26] += log_drf_1_Tree_23_class_25.score0(fdata);
    preds[27] += log_drf_1_Tree_23_class_26.score0(fdata);
    preds[28] += log_drf_1_Tree_23_class_27.score0(fdata);
    preds[29] += log_drf_1_Tree_23_class_28.score0(fdata);
    preds[30] += log_drf_1_Tree_23_class_29.score0(fdata);
    preds[31] += log_drf_1_Tree_23_class_30.score0(fdata);
    preds[32] += log_drf_1_Tree_23_class_31.score0(fdata);
    preds[33] += log_drf_1_Tree_23_class_32.score0(fdata);
    preds[34] += log_drf_1_Tree_23_class_33.score0(fdata);
    preds[35] += log_drf_1_Tree_23_class_34.score0(fdata);
    preds[36] += log_drf_1_Tree_23_class_35.score0(fdata);
    preds[37] += log_drf_1_Tree_23_class_36.score0(fdata);
    preds[38] += log_drf_1_Tree_23_class_37.score0(fdata);
    preds[39] += log_drf_1_Tree_23_class_38.score0(fdata);
  }
}
class log_drf_1_Tree_23_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[12]) || data[12 /* 11_letter_word */] <0.017578125f ? 
         (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.0126953125f ? 
             (data[8 /* 7_letter_word */] <0.234375f ? 
                 (data[3 /* no_of_ips */] <0.5f ? 
                     (Double.isNaN(data[4]) || data[4 /* no_of_macs */] <0.5f ? 
                        0.0f : 
                        1.0f) : 
                    0.0f) : 
                0.0f) : 
             (Double.isNaN(data[4]) || data[4 /* no_of_macs */] <0.5f ? 
                0.0f : 
                1.0f)) : 
         (Double.isNaN(data[4]) || data[4 /* no_of_macs */] <0.5f ? 
            0.0f : 
            1.0f));
    return pred;
  } // constant pool size = 30B, number of visited nodes = 7, static init size = 0B
}

class log_drf_1_Tree_23_class_1 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0]) || data[0 /* vlan */] <142.0f ? 
        0.0f : 
         (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
             (data[0 /* vlan */] <149.0f ? 
                1.0f : 
                0.0f) : 
             (data[3 /* no_of_ips */] <0.5f ? 
                0.0f : 
                 (data[0 /* vlan */] <155.5f ? 
                     (data[5 /* 4_letter_word */] <0.3671875f ? 
                        1.0f : 
                        0.9957627f) : 
                    0.0f))));
    return pred;
  } // constant pool size = 26B, number of visited nodes = 6, static init size = 0B
}

class log_drf_1_Tree_23_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0]) || data[0 /* vlan */] <181.5f ? 
         (data[1 /* type_of_time */] <4.5f ? 
            0.0f : 
             (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.1328125f ? 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <220.5f ? 
                    0.0f : 
                     (data[5 /* 4_letter_word */] <0.4140625f ? 
                        0.0029069767f : 
                        0.0f)) : 
                 (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.5859375f ? 
                     (Double.isNaN(data[14]) || data[14 /* 13_letter_word */] <0.015625f ? 
                        0.0070729954f : 
                        0.0f) : 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <91.5f ? 
                        0.0f : 
                        1.0f)))) : 
         (data[3 /* no_of_ips */] <0.5f ? 
            0.0f : 
             (data[7 /* 6_letter_word */] <0.3671875f ? 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.16796875f ? 
                    0.0f : 
                     (data[13 /* 12_letter_word */] <0.078125f ? 
                        0.5f : 
                        1.0f)) : 
                 (Double.isNaN(data[13]) || data[13 /* 12_letter_word */] <0.03125f ? 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <400.5f ? 
                        1.0f : 
                        0.0f) : 
                    1.0f))));
    return pred;
  } // constant pool size = 58B, number of visited nodes = 14, static init size = 0B
}

class log_drf_1_Tree_23_class_3 {
  static final double score0(double[] data) {
    double pred =      (data[0 /* vlan */] <29.5f ? 
         (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.0146484375f ? 
             (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.32226562f ? 
                 (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.22265625f ? 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <23.5f ? 
                        0.0f : 
                        0.0013568521f) : 
                     (data[2 /* no_of_characters */] <140.5f ? 
                        0.0f : 
                        0.091878176f)) : 
                 (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.549942f ? 
                     (data[0 /* vlan */] <28.5f ? 
                        0.0f : 
                        1.0f) : 
                    0.0f)) : 
            0.0f) : 
         (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
            0.0f : 
             (data[3 /* no_of_ips */] <1.5f ? 
                 (data[0 /* vlan */] <155.5f ? 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <148.5f ? 
                        0.0f : 
                        1.0f) : 
                    0.0f) : 
                0.0f)));
    return pred;
  } // constant pool size = 50B, number of visited nodes = 12, static init size = 0B
}

class log_drf_1_Tree_23_class_4 {
  static final double score0(double[] data) {
    double pred =      (data[0 /* vlan */] <27.5f ? 
         (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.0146484375f ? 
             (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.32226562f ? 
                 (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.11833191f ? 
                     (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.046875f ? 
                        1.8042942E-4f : 
                        0.0f) : 
                     (data[6 /* 5_letter_word */] <0.13501823f ? 
                        0.11111111f : 
                        8.6014107E-4f)) : 
                 (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                     (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.2890625f ? 
                        0.0f : 
                        0.53333336f) : 
                    0.0f)) : 
            0.0f) : 
        0.0f);
    return pred;
  } // constant pool size = 34B, number of visited nodes = 8, static init size = 0B
}

class log_drf_1_Tree_23_class_5 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.095703125f ? 
         (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
            0.0f : 
             (data[3 /* no_of_ips */] <0.5f ? 
                 (Double.isNaN(data[12]) || data[12 /* 11_letter_word */] <0.2890625f ? 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <65.5f ? 
                        2.115283E-4f : 
                        0.009640666f) : 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <200.5f ? 
                        0.0f : 
                        0.22222222f)) : 
                0.0f)) : 
         (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.08691406f ? 
             (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <33.5f ? 
                    0.0f : 
                     (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
                        0.0f : 
                        4.6274872E-4f)) : 
                0.0f) : 
             (data[6 /* 5_letter_word */] <0.09566116f ? 
                 (data[8 /* 7_letter_word */] <0.2265625f ? 
                    0.0f : 
                    1.0f) : 
                 (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.21484375f ? 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <33.5f ? 
                        0.0f : 
                        0.0054674684f) : 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <57.5f ? 
                        0.0f : 
                        0.39473686f)))));
    return pred;
  } // constant pool size = 62B, number of visited nodes = 15, static init size = 0B
}

class log_drf_1_Tree_23_class_6 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0]) || data[0 /* vlan */] <133.5f ? 
         (data[1 /* type_of_time */] <4.5f ? 
            0.0f : 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <131.5f ? 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.27734375f ? 
                     (data[2 /* no_of_characters */] <40.5f ? 
                        0.14285715f : 
                        2.5753284E-4f) : 
                     (data[7 /* 6_letter_word */] <0.294281f ? 
                        0.056300268f : 
                        0.0018083183f)) : 
                 (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.125f ? 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <150.5f ? 
                        1.0f : 
                        0.0f) : 
                    1.0f))) : 
        0.0f);
    return pred;
  } // constant pool size = 34B, number of visited nodes = 8, static init size = 0B
}

class log_drf_1_Tree_23_class_7 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0]) || data[0 /* vlan */] <185.0f ? 
        0.0f : 
        0.35211268f);
    return pred;
  } // constant pool size = 6B, number of visited nodes = 1, static init size = 0B
}

class log_drf_1_Tree_23_class_8 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0]) || data[0 /* vlan */] <180.5f ? 
        0.0f : 
         (data[1 /* type_of_time */] <4.5f ? 
            0.0f : 
             (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <2.5f ? 
                 (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.2890625f ? 
                     (data[5 /* 4_letter_word */] <0.0625f ? 
                        0.06679035f : 
                        0.002522068f) : 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.578125f ? 
                        0.5f : 
                        1.0f)) : 
                 (data[2 /* no_of_characters */] <998.5f ? 
                    1.0f : 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.515625f ? 
                        0.0076923077f : 
                        0.5555556f)))));
    return pred;
  } // constant pool size = 34B, number of visited nodes = 8, static init size = 0B
}

class log_drf_1_Tree_23_class_9 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.3095703f ? 
         (data[1 /* type_of_time */] <3.5f ? 
             (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.22460938f ? 
                 (data[3 /* no_of_ips */] <0.5f ? 
                    0.0f : 
                     (data[1 /* type_of_time */] <2.5f ? 
                        0.0f : 
                        1.0f)) : 
                 (data[6 /* 5_letter_word */] <0.0859375f ? 
                     (Double.isNaN(data[1]) || data[1 /* type_of_time */] <2.5f ? 
                        0.0f : 
                        1.0f) : 
                    0.0f)) : 
            0.0f) : 
         (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <3.5f ? 
             (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.16796875f ? 
                0.0f : 
                 (data[3 /* no_of_ips */] <2.5f ? 
                    0.0f : 
                    1.0f)) : 
            1.0f));
    return pred;
  } // constant pool size = 42B, number of visited nodes = 10, static init size = 0B
}

class log_drf_1_Tree_23_class_10 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0]) || data[0 /* vlan */] <166.5f ? 
        5.0979834E-6f : 
         (data[3 /* no_of_ips */] <0.5f ? 
            0.0f : 
             (data[2 /* no_of_characters */] <90.5f ? 
                 (data[0 /* vlan */] <583.5f ? 
                    1.0f : 
                    0.0f) : 
                 (data[2 /* no_of_characters */] <102.0f ? 
                     (data[3 /* no_of_ips */] <1.5f ? 
                        1.0f : 
                        0.0f) : 
                    0.0f))));
    return pred;
  } // constant pool size = 26B, number of visited nodes = 6, static init size = 0B
}

class log_drf_1_Tree_23_class_11 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.27929688f ? 
        0.0f : 
        3.5023815E-5f);
    return pred;
  } // constant pool size = 6B, number of visited nodes = 1, static init size = 0B
}

class log_drf_1_Tree_23_class_12 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0]) || data[0 /* vlan */] <593.5f ? 
        0.0f : 
        0.13695653f);
    return pred;
  } // constant pool size = 6B, number of visited nodes = 1, static init size = 0B
}

class log_drf_1_Tree_23_class_13 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0]) || data[0 /* vlan */] <593.5f ? 
         (data[1 /* type_of_time */] <4.5f ? 
            0.0f : 
             (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.19335938f ? 
                 (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.05859375f ? 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <154.0f ? 
                        0.0f : 
                        0.06960557f) : 
                    0.0f) : 
                 (data[0 /* vlan */] <5.5f ? 
                    0.984127f : 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.1796875f ? 
                        0.0f : 
                        0.013227513f)))) : 
         (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
            0.8847737f : 
             (data[2 /* no_of_characters */] <230.5f ? 
                1.0f : 
                0.0f)));
    return pred;
  } // constant pool size = 38B, number of visited nodes = 9, static init size = 0B
}

class log_drf_1_Tree_23_class_14 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[12]) || data[12 /* 11_letter_word */] <0.18310547f ? 
         (data[1 /* type_of_time */] <2.5f ? 
             (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.1015625f ? 
                0.0f : 
                 (data[1 /* type_of_time */] <1.5f ? 
                    0.0f : 
                     (data[11 /* 10_letter_word */] <0.26633707f ? 
                        1.0f : 
                        0.0f))) : 
            0.0f) : 
         (data[3 /* no_of_ips */] <0.5f ? 
             (data[1 /* type_of_time */] <2.5f ? 
                1.0f : 
                0.0f) : 
            0.0f));
    return pred;
  } // constant pool size = 30B, number of visited nodes = 7, static init size = 0B
}

class log_drf_1_Tree_23_class_15 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.5942383f ? 
         (data[1 /* type_of_time */] <4.5f ? 
            0.0f : 
             (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.94921875f ? 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.105698526f ? 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <140.5f ? 
                        0.0f : 
                        0.0025989455f) : 
                     (data[6 /* 5_letter_word */] <0.09375f ? 
                        0.0140794655f : 
                        0.0023389708f)) : 
                 (data[0 /* vlan */] <25.5f ? 
                    0.0f : 
                     (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <2.5f ? 
                        0.10982807f : 
                        0.0f)))) : 
         (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <1.5f ? 
             (data[7 /* 6_letter_word */] <0.6901312f ? 
                 (data[1 /* type_of_time */] <4.5f ? 
                    0.0f : 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <210.5f ? 
                        0.0f : 
                        0.980198f)) : 
                 (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                     (data[1 /* type_of_time */] <4.5f ? 
                        0.0f : 
                        0.008569545f) : 
                    0.0f)) : 
             (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.1015625f ? 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <85.5f ? 
                    0.0f : 
                     (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.0f ? 
                        0.0f : 
                        1.0f)) : 
                 (data[8 /* 7_letter_word */] <0.1015625f ? 
                    0.0f : 
                    1.0f))));
    return pred;
  } // constant pool size = 74B, number of visited nodes = 18, static init size = 0B
}

class log_drf_1_Tree_23_class_16 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0]) || data[0 /* vlan */] <83.5f ? 
         (data[1 /* type_of_time */] <4.5f ? 
            0.0f : 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <64.5f ? 
                 (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.94921875f ? 
                     (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.3125f ? 
                        7.790589E-5f : 
                        4.3308793E-4f) : 
                    9.158907E-4f) : 
                 (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.0390625f ? 
                     (data[2 /* no_of_characters */] <100.5f ? 
                        0.08f : 
                        0.012345679f) : 
                    0.0f))) : 
        0.0f);
    return pred;
  } // constant pool size = 30B, number of visited nodes = 7, static init size = 0B
}

class log_drf_1_Tree_23_class_17 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0]) || data[0 /* vlan */] <180.5f ? 
        2.0332332E-5f : 
         (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <3.5f ? 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <659.5f ? 
                0.0f : 
                 (data[2 /* no_of_characters */] <886.5f ? 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <733.0f ? 
                        1.0f : 
                        0.5f) : 
                    0.0f)) : 
             (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.58203125f ? 
                 (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <4.5f ? 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.578125f ? 
                        0.9886364f : 
                        0.6666667f) : 
                    0.0f) : 
                1.0f)));
    return pred;
  } // constant pool size = 34B, number of visited nodes = 8, static init size = 0B
}

class log_drf_1_Tree_23_class_18 {
  static final double score0(double[] data) {
    double pred =      (data[0 /* vlan */] <14.5f ? 
        5.034233E-5f : 
        0.0f);
    return pred;
  } // constant pool size = 6B, number of visited nodes = 1, static init size = 0B
}

class log_drf_1_Tree_23_class_19 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.23583984f ? 
         (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.19092894f ? 
            0.0f : 
             (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.1015625f ? 
                0.0f : 
                 (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
                    0.0f : 
                     (data[2 /* no_of_characters */] <160.5f ? 
                        0.5f : 
                        0.0f)))) : 
         (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <1.5f ? 
             (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.125f ? 
                0.0f : 
                 (data[3 /* no_of_ips */] <0.5f ? 
                    0.0f : 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <17.5f ? 
                        1.0f : 
                        0.0f))) : 
            0.0f));
    return pred;
  } // constant pool size = 38B, number of visited nodes = 9, static init size = 0B
}

class log_drf_1_Tree_23_class_20 {
  static final double score0(double[] data) {
    double pred =      (data[0 /* vlan */] <23.5f ? 
         (data[1 /* type_of_time */] <4.5f ? 
            0.0f : 
             (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <3.5f ? 
                 (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.19140625f ? 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.078125f ? 
                        0.98181945f : 
                        0.54169977f) : 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.7734375f ? 
                        0.9978112f : 
                        0.083333336f)) : 
                0.0f)) : 
        0.0f);
    return pred;
  } // constant pool size = 26B, number of visited nodes = 6, static init size = 0B
}

class log_drf_1_Tree_23_class_21 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[12]) || data[12 /* 11_letter_word */] <0.22460938f ? 
         (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.15527344f ? 
             (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.17382812f ? 
                 (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.70703125f ? 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.796875f ? 
                        0.002350043f : 
                        0.009190121f) : 
                    0.0f) : 
                 (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.0078125f ? 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.234375f ? 
                        1.03680664E-4f : 
                        0.0011686794f) : 
                    0.0f)) : 
             (data[3 /* no_of_ips */] <0.5f ? 
                 (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.05859375f ? 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.4140625f ? 
                        0.0f : 
                        0.005050505f) : 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <190.5f ? 
                        0.0f : 
                        0.8684211f)) : 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.546875f ? 
                    0.0f : 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.1015625f ? 
                        0.0f : 
                        1.0f)))) : 
         (data[3 /* no_of_ips */] <0.5f ? 
             (data[2 /* no_of_characters */] <220.5f ? 
                0.0f : 
                 (data[11 /* 10_letter_word */] <0.125f ? 
                    0.0f : 
                    1.0f)) : 
            0.0f));
    return pred;
  } // constant pool size = 66B, number of visited nodes = 16, static init size = 0B
}

class log_drf_1_Tree_23_class_22 {
  static final double score0(double[] data) {
    double pred =      (data[0 /* vlan */] <5.5f ? 
        0.012658228f : 
         (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.32226562f ? 
            0.0f : 
             (data[6 /* 5_letter_word */] <0.34873962f ? 
                 (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.625f ? 
                        0.0f : 
                        0.020689655f) : 
                    0.0f) : 
                 (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.52173066f ? 
                     (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.0625f ? 
                        1.2374706E-4f : 
                        0.0f) : 
                    0.0f))));
    return pred;
  } // constant pool size = 30B, number of visited nodes = 7, static init size = 0B
}

class log_drf_1_Tree_23_class_23 {
  static final double score0(double[] data) {
    double pred =      (data[0 /* vlan */] <14.5f ? 
         (data[1 /* type_of_time */] <4.5f ? 
            0.0f : 
             (data[3 /* no_of_ips */] <0.5f ? 
                 (data[0 /* vlan */] <8.5f ? 
                    0.0f : 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.3125f ? 
                        0.992528f : 
                        0.0125f)) : 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.69140625f ? 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.4140625f ? 
                        0.00174581f : 
                        0.6f) : 
                    0.6862745f))) : 
        0.0f);
    return pred;
  } // constant pool size = 30B, number of visited nodes = 7, static init size = 0B
}

class log_drf_1_Tree_23_class_24 {
  static final double score0(double[] data) {
    double pred =      (data[0 /* vlan */] <11.5f ? 
         (data[1 /* type_of_time */] <3.5f ? 
            0.0f : 
             (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.8730469f ? 
                0.0f : 
                1.0f)) : 
        0.0f);
    return pred;
  } // constant pool size = 14B, number of visited nodes = 3, static init size = 0B
}

class log_drf_1_Tree_23_class_25 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0]) || data[0 /* vlan */] <41.0f ? 
         (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.44921875f ? 
             (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.44921875f ? 
                 (Double.isNaN(data[12]) || data[12 /* 11_letter_word */] <0.12890625f ? 
                     (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                        0.10837183f : 
                        0.5076102f) : 
                     (data[5 /* 4_letter_word */] <0.265625f ? 
                        0.0952381f : 
                        0.9910283f)) : 
                 (data[3 /* no_of_ips */] <1.5f ? 
                     (data[6 /* 5_letter_word */] <0.6815796f ? 
                        0.11697836f : 
                        0.0f) : 
                     (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.25f ? 
                        0.97673774f : 
                        1.0f))) : 
             (data[3 /* no_of_ips */] <1.0f ? 
                0.0f : 
                1.0f)) : 
         (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <1.5f ? 
             (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.05078125f ? 
                0.0f : 
                 (data[10 /* 9_letter_word */] <0.05819702f ? 
                    0.5f : 
                    0.0f)) : 
             (data[5 /* 4_letter_word */] <0.0625f ? 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <172.5f ? 
                    0.0f : 
                     (data[2 /* no_of_characters */] <535.5f ? 
                        1.0f : 
                        0.0f)) : 
                0.0f)));
    return pred;
  } // constant pool size = 66B, number of visited nodes = 16, static init size = 0B
}

class log_drf_1_Tree_23_class_26 {
  static final double score0(double[] data) {
    double pred =      (data[0 /* vlan */] <29.5f ? 
         (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.0146484375f ? 
             (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.04296875f ? 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.30859375f ? 
                    0.0f : 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.6328125f ? 
                        0.0f : 
                        0.9166667f)) : 
                0.0f) : 
            0.0f) : 
        0.0f);
    return pred;
  } // constant pool size = 22B, number of visited nodes = 5, static init size = 0B
}

class log_drf_1_Tree_23_class_27 {
  static final double score0(double[] data) {
    double pred =      (data[0 /* vlan */] <14.5f ? 
         (data[1 /* type_of_time */] <4.5f ? 
            0.0f : 
             (data[3 /* no_of_ips */] <0.5f ? 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.20703125f ? 
                    0.0f : 
                     (data[9 /* 8_letter_word */] <0.0625f ? 
                        0.007246377f : 
                        0.0f)) : 
                0.0f)) : 
        0.0f);
    return pred;
  } // constant pool size = 22B, number of visited nodes = 5, static init size = 0B
}

class log_drf_1_Tree_23_class_28 {
  static final double score0(double[] data) {
    double pred =      (data[0 /* vlan */] <14.5f ? 
         (Double.isNaN(data[14]) || data[14 /* 13_letter_word */] <0.0625f ? 
             (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.04296875f ? 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <395.0f ? 
                    0.0f : 
                    1.0f) : 
                 (data[8 /* 7_letter_word */] <0.17381287f ? 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <440.0f ? 
                        0.0f : 
                        1.0f) : 
                    0.0f)) : 
            1.0f) : 
        0.0f);
    return pred;
  } // constant pool size = 26B, number of visited nodes = 6, static init size = 0B
}

class log_drf_1_Tree_23_class_29 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[12]) || data[12 /* 11_letter_word */] <0.0087890625f ? 
        1.0136693E-5f : 
         (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.115234375f ? 
            0.0f : 
             (data[6 /* 5_letter_word */] <0.15348677f ? 
                 (Double.isNaN(data[4]) || data[4 /* no_of_macs */] <0.5f ? 
                    1.0f : 
                    0.0f) : 
                 (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
                    0.0f : 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.5078125f ? 
                        0.0f : 
                        1.0f)))));
    return pred;
  } // constant pool size = 26B, number of visited nodes = 6, static init size = 0B
}

class log_drf_1_Tree_23_class_30 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0]) || data[0 /* vlan */] <177.0f ? 
        0.0f : 
         (data[1 /* type_of_time */] <2.5f ? 
            1.0f : 
            0.0f));
    return pred;
  } // constant pool size = 10B, number of visited nodes = 2, static init size = 0B
}

class log_drf_1_Tree_23_class_31 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0]) || data[0 /* vlan */] <100.0f ? 
         (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.23535156f ? 
             (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.38671875f ? 
                 (data[5 /* 4_letter_word */] <0.15625f ? 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <85.5f ? 
                        3.8095237E-5f : 
                        0.8035714f) : 
                     (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <1.5f ? 
                        0.020150054f : 
                        0.0f)) : 
                 (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.4140625f ? 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.0625f ? 
                        0.032382175f : 
                        0.08909921f) : 
                    0.4673913f)) : 
             (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <1.5f ? 
                 (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.125f ? 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.3125f ? 
                        0.0f : 
                        0.81512606f) : 
                    0.0f) : 
                0.0f)) : 
         (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
            0.0f : 
             (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.068359375f ? 
                0.0f : 
                 (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.0f ? 
                    0.0f : 
                     (data[3 /* no_of_ips */] <2.5f ? 
                        0.5f : 
                        0.0f)))));
    return pred;
  } // constant pool size = 62B, number of visited nodes = 15, static init size = 0B
}

class log_drf_1_Tree_23_class_32 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.5942383f ? 
         (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.23535156f ? 
             (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.03125f ? 
                 (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.44921875f ? 
                     (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
                        0.0f : 
                        0.0015752409f) : 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <100.5f ? 
                        0.050955415f : 
                        0.0f)) : 
                0.0f) : 
             (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <1.5f ? 
                 (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.125f ? 
                    0.0f : 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.2919922f ? 
                        0.06650246f : 
                        0.0f)) : 
                0.0f)) : 
         (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
            0.0f : 
             (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.1015625f ? 
                0.0f : 
                 (data[10 /* 9_letter_word */] <0.1015625f ? 
                    0.0f : 
                    1.0f))));
    return pred;
  } // constant pool size = 50B, number of visited nodes = 12, static init size = 0B
}

class log_drf_1_Tree_23_class_33 {
  static final double score0(double[] data) {
    double pred =      (data[0 /* vlan */] <7.5f ? 
        0.64723927f : 
         (Double.isNaN(data[4]) || data[4 /* no_of_macs */] <1.5f ? 
             (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.29296875f ? 
                 (data[6 /* 5_letter_word */] <0.17578125f ? 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.04348755f ? 
                        0.001924722f : 
                        0.011694058f) : 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.109375f ? 
                        4.8577378E-4f : 
                        0.0037645448f)) : 
                 (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.234375f ? 
                    0.0f : 
                     (data[2 /* no_of_characters */] <120.5f ? 
                        0.0037313432f : 
                        0.0f))) : 
             (data[3 /* no_of_ips */] <1.5f ? 
                 (data[10 /* 9_letter_word */] <0.08203125f ? 
                    0.0f : 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.140625f ? 
                        1.0f : 
                        0.0f)) : 
                0.0f)));
    return pred;
  } // constant pool size = 46B, number of visited nodes = 11, static init size = 0B
}

class log_drf_1_Tree_23_class_34 {
  static final double score0(double[] data) {
    double pred =      (data[0 /* vlan */] <10.0f ? 
        0.003058104f : 
         (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.32226562f ? 
            0.0f : 
             (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.15429688f ? 
                0.0f : 
                 (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                     (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
                        0.0f : 
                        0.001510574f) : 
                    0.0f))));
    return pred;
  } // constant pool size = 22B, number of visited nodes = 5, static init size = 0B
}

class log_drf_1_Tree_23_class_35 {
  static final double score0(double[] data) {
    double pred =      (data[0 /* vlan */] <12.5f ? 
         (data[1 /* type_of_time */] <3.5f ? 
            0.0f : 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <10.0f ? 
                0.0f : 
                 (data[2 /* no_of_characters */] <125.5f ? 
                    0.6666667f : 
                    0.0f))) : 
         (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <1.5f ? 
             (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                 (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.05078125f ? 
                     (data[2 /* no_of_characters */] <140.5f ? 
                        5.1611423E-4f : 
                        0.0f) : 
                    0.0f) : 
                 (data[0 /* vlan */] <20.5f ? 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.15625f ? 
                        9.3196647E-4f : 
                        0.15625f) : 
                    0.0f)) : 
            0.0f));
    return pred;
  } // constant pool size = 42B, number of visited nodes = 10, static init size = 0B
}

class log_drf_1_Tree_23_class_36 {
  static final double score0(double[] data) {
    double pred =      (data[0 /* vlan */] <5.5f ? 
        0.050632913f : 
        0.0f);
    return pred;
  } // constant pool size = 6B, number of visited nodes = 1, static init size = 0B
}

class log_drf_1_Tree_23_class_37 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0]) || data[0 /* vlan */] <156.5f ? 
         (data[1 /* type_of_time */] <4.5f ? 
             (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.18359375f ? 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <115.0f ? 
                     (Double.isNaN(data[12]) || data[12 /* 11_letter_word */] <0.171875f ? 
                        0.9994154f : 
                        0.0f) : 
                    0.0f) : 
                 (data[5 /* 4_letter_word */] <0.1015625f ? 
                    1.0f : 
                    0.0f)) : 
             (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.0078125f ? 
                 (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <2.5f ? 
                     (data[0 /* vlan */] <16.5f ? 
                        2.3798192E-4f : 
                        0.0f) : 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.4609375f ? 
                        0.0f : 
                        0.0010744985f)) : 
                0.0f)) : 
         (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <1.5f ? 
             (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
                 (data[1 /* type_of_time */] <3.5f ? 
                     (data[5 /* 4_letter_word */] <0.25f ? 
                        1.0f : 
                        0.0f) : 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.21875f ? 
                        0.9988284f : 
                        0.9969797f)) : 
                 (Double.isNaN(data[12]) || data[12 /* 11_letter_word */] <0.5f ? 
                     (data[0 /* vlan */] <170.5f ? 
                        0.69911504f : 
                        0.022913257f) : 
                    1.0f)) : 
             (data[3 /* no_of_ips */] <2.5f ? 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <180.5f ? 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.1015625f ? 
                        0.0f : 
                        1.0f) : 
                     (data[6 /* 5_letter_word */] <0.1015625f ? 
                        0.05882353f : 
                        0.93043476f)) : 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <305.5f ? 
                    0.0f : 
                     (data[5 /* 4_letter_word */] <0.2265625f ? 
                        0.018867925f : 
                        0.0f)))));
    return pred;
  } // constant pool size = 94B, number of visited nodes = 23, static init size = 0B
}

class log_drf_1_Tree_23_class_38 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.47216797f ? 
        1.0728118E-5f : 
         (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
             (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.52783775f ? 
                 (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.37109375f ? 
                    0.0f : 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <65.5f ? 
                        0.0f : 
                        0.023255814f)) : 
                0.0f) : 
            0.0f));
    return pred;
  } // constant pool size = 22B, number of visited nodes = 5, static init size = 0B
}


class log_drf_1_Forest_24 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += log_drf_1_Tree_24_class_0.score0(fdata);
    preds[2] += log_drf_1_Tree_24_class_1.score0(fdata);
    preds[3] += log_drf_1_Tree_24_class_2.score0(fdata);
    preds[4] += log_drf_1_Tree_24_class_3.score0(fdata);
    preds[5] += log_drf_1_Tree_24_class_4.score0(fdata);
    preds[6] += log_drf_1_Tree_24_class_5.score0(fdata);
    preds[7] += log_drf_1_Tree_24_class_6.score0(fdata);
    preds[8] += log_drf_1_Tree_24_class_7.score0(fdata);
    preds[9] += log_drf_1_Tree_24_class_8.score0(fdata);
    preds[10] += log_drf_1_Tree_24_class_9.score0(fdata);
    preds[11] += log_drf_1_Tree_24_class_10.score0(fdata);
    preds[12] += log_drf_1_Tree_24_class_11.score0(fdata);
    preds[13] += log_drf_1_Tree_24_class_12.score0(fdata);
    preds[14] += log_drf_1_Tree_24_class_13.score0(fdata);
    preds[15] += log_drf_1_Tree_24_class_14.score0(fdata);
    preds[16] += log_drf_1_Tree_24_class_15.score0(fdata);
    preds[17] += log_drf_1_Tree_24_class_16.score0(fdata);
    preds[18] += log_drf_1_Tree_24_class_17.score0(fdata);
    preds[19] += log_drf_1_Tree_24_class_18.score0(fdata);
    preds[20] += log_drf_1_Tree_24_class_19.score0(fdata);
    preds[21] += log_drf_1_Tree_24_class_20.score0(fdata);
    preds[22] += log_drf_1_Tree_24_class_21.score0(fdata);
    preds[23] += log_drf_1_Tree_24_class_22.score0(fdata);
    preds[24] += log_drf_1_Tree_24_class_23.score0(fdata);
    preds[25] += log_drf_1_Tree_24_class_24.score0(fdata);
    preds[26] += log_drf_1_Tree_24_class_25.score0(fdata);
    preds[27] += log_drf_1_Tree_24_class_26.score0(fdata);
    preds[28] += log_drf_1_Tree_24_class_27.score0(fdata);
    preds[29] += log_drf_1_Tree_24_class_28.score0(fdata);
    preds[30] += log_drf_1_Tree_24_class_29.score0(fdata);
    preds[31] += log_drf_1_Tree_24_class_30.score0(fdata);
    preds[32] += log_drf_1_Tree_24_class_31.score0(fdata);
    preds[33] += log_drf_1_Tree_24_class_32.score0(fdata);
    preds[34] += log_drf_1_Tree_24_class_33.score0(fdata);
    preds[35] += log_drf_1_Tree_24_class_34.score0(fdata);
    preds[36] += log_drf_1_Tree_24_class_35.score0(fdata);
    preds[37] += log_drf_1_Tree_24_class_36.score0(fdata);
    preds[38] += log_drf_1_Tree_24_class_37.score0(fdata);
    preds[39] += log_drf_1_Tree_24_class_38.score0(fdata);
  }
}
class log_drf_1_Tree_24_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[4]) || data[4 /* no_of_macs */] <2.5f ? 
         (Double.isNaN(data[4]) || data[4 /* no_of_macs */] <0.5f ? 
            0.0f : 
             (data[3 /* no_of_ips */] <0.5f ? 
                1.0f : 
                0.0f)) : 
         (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <695.5f ? 
            0.0f : 
            1.0f));
    return pred;
  } // constant pool size = 18B, number of visited nodes = 4, static init size = 0B
}

class log_drf_1_Tree_24_class_1 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
        0.0f : 
         (Double.isNaN(data[0]) || data[0 /* vlan */] <141.5f ? 
            0.0f : 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <255.5f ? 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <183.5f ? 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.21875f ? 
                        0.0f : 
                        0.025974026f) : 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.5703125f ? 
                        0.0f : 
                        1.0f)) : 
                 (data[0 /* vlan */] <155.5f ? 
                     (data[2 /* no_of_characters */] <270.5f ? 
                        0.99130434f : 
                        1.0f) : 
                    0.0f))));
    return pred;
  } // constant pool size = 34B, number of visited nodes = 8, static init size = 0B
}

class log_drf_1_Tree_24_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
         (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.56933594f ? 
             (data[2 /* no_of_characters */] <150.5f ? 
                 (data[2 /* no_of_characters */] <106.5f ? 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <93.5f ? 
                        0.0f : 
                        0.0021482278f) : 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.15494792f ? 
                        0.0035477993f : 
                        0.025017373f)) : 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <1089.0f ? 
                     (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
                        0.0f : 
                        2.8417163E-4f) : 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.2265625f ? 
                        0.0f : 
                        0.5f))) : 
             (data[2 /* no_of_characters */] <150.5f ? 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <140.5f ? 
                    0.0f : 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <154.5f ? 
                        1.0f : 
                        0.0f)) : 
                 (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.0859375f ? 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.1796875f ? 
                        0.0f : 
                        0.03208556f) : 
                    0.0f))) : 
         (data[3 /* no_of_ips */] <1.5f ? 
             (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.46289062f ? 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <174.5f ? 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <127.5f ? 
                        2.5195265E-4f : 
                        0.0f) : 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.03125f ? 
                        0.10526316f : 
                        1.0f)) : 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.54891205f ? 
                     (data[5 /* 4_letter_word */] <0.25f ? 
                        0.6f : 
                        0.7632242f) : 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <138.0f ? 
                        0.0f : 
                        0.76086956f))) : 
            0.0f));
    return pred;
  } // constant pool size = 90B, number of visited nodes = 22, static init size = 0B
}

class log_drf_1_Tree_24_class_3 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
         (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.1171875f ? 
             (data[2 /* no_of_characters */] <160.5f ? 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.4140625f ? 
                    0.0f : 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <158.5f ? 
                        0.0f : 
                        0.022222223f)) : 
                0.0f) : 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <295.5f ? 
                0.0f : 
                 (data[2 /* no_of_characters */] <311.5f ? 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.1930542f ? 
                        0.99248123f : 
                        0.0f) : 
                     (data[5 /* 4_letter_word */] <0.13098145f ? 
                        1.0f : 
                        0.0f)))) : 
         (data[3 /* no_of_ips */] <1.5f ? 
             (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.38671875f ? 
                 (data[2 /* no_of_characters */] <110.5f ? 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.10272217f ? 
                        0.035897437f : 
                        0.0f) : 
                    0.0f) : 
                 (Double.isNaN(data[12]) || data[12 /* 11_letter_word */] <0.25f ? 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.046875f ? 
                        0.52899426f : 
                        0.0f) : 
                    0.0f)) : 
            0.0f));
    return pred;
  } // constant pool size = 62B, number of visited nodes = 15, static init size = 0B
}

class log_drf_1_Tree_24_class_4 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <1.5f ? 
         (data[0 /* vlan */] <27.5f ? 
             (data[2 /* no_of_characters */] <115.5f ? 
                 (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.1015625f ? 
                     (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.2890625f ? 
                        1.4138273E-4f : 
                        0.2888889f) : 
                    2.3132084E-4f) : 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <26.0f ? 
                    0.0f : 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <228.5f ? 
                        0.032967035f : 
                        0.15384616f))) : 
            0.0f) : 
        0.0f);
    return pred;
  } // constant pool size = 30B, number of visited nodes = 7, static init size = 0B
}

class log_drf_1_Tree_24_class_5 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
         (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.27929688f ? 
             (data[2 /* no_of_characters */] <110.5f ? 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <65.5f ? 
                    0.0f : 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <103.0f ? 
                        0.0f : 
                        0.056074765f)) : 
                0.0f) : 
             (data[5 /* 4_letter_word */] <0.3102646f ? 
                 (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.3056614f ? 
                     (data[2 /* no_of_characters */] <130.5f ? 
                        0.25f : 
                        0.0f) : 
                     (data[11 /* 10_letter_word */] <0.0234375f ? 
                        1.0f : 
                        0.0f)) : 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <300.5f ? 
                     (data[0 /* vlan */] <97.5f ? 
                        0.0022011006f : 
                        0.0f) : 
                     (data[8 /* 7_letter_word */] <0.28125f ? 
                        0.038194444f : 
                        0.0f)))) : 
        0.0f);
    return pred;
  } // constant pool size = 50B, number of visited nodes = 12, static init size = 0B
}

class log_drf_1_Tree_24_class_6 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
         (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.16015625f ? 
             (data[2 /* no_of_characters */] <100.5f ? 
                 (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.1015625f ? 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.265625f ? 
                        9.925559E-4f : 
                        0.19322033f) : 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <91.0f ? 
                        0.0f : 
                        0.9375f)) : 
                0.0f) : 
             (data[2 /* no_of_characters */] <80.5f ? 
                 (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.375f ? 
                    0.123809524f : 
                    1.0f) : 
                 (data[2 /* no_of_characters */] <122.5f ? 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <113.5f ? 
                        0.0f : 
                        0.98870057f) : 
                    0.0f))) : 
        0.0f);
    return pred;
  } // constant pool size = 42B, number of visited nodes = 10, static init size = 0B
}

class log_drf_1_Tree_24_class_7 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <1.5f ? 
         (Double.isNaN(data[0]) || data[0 /* vlan */] <185.5f ? 
            0.0f : 
             (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <100.5f ? 
                    0.0f : 
                     (data[2 /* no_of_characters */] <156.0f ? 
                        1.0f : 
                        0.96153843f)) : 
                0.0f)) : 
         (data[3 /* no_of_ips */] <2.5f ? 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <183.5f ? 
                0.0f : 
                1.0f) : 
            0.0f));
    return pred;
  } // constant pool size = 30B, number of visited nodes = 7, static init size = 0B
}

class log_drf_1_Tree_24_class_8 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <2.5f ? 
         (Double.isNaN(data[0]) || data[0 /* vlan */] <177.5f ? 
            0.0f : 
             (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <1.5f ? 
                 (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.37109375f ? 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <878.5f ? 
                        0.0024169185f : 
                        1.0f) : 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <579.5f ? 
                        0.0f : 
                        1.0f)) : 
                 (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.2890625f ? 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.12646484f ? 
                        0.01754386f : 
                        0.0f) : 
                    1.0f))) : 
         (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <736.5f ? 
            0.0f : 
             (data[2 /* no_of_characters */] <997.0f ? 
                1.0f : 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <1020.5f ? 
                    0.0f : 
                     (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <4.5f ? 
                        0.0f : 
                        1.0f)))));
    return pred;
  } // constant pool size = 50B, number of visited nodes = 12, static init size = 0B
}

class log_drf_1_Tree_24_class_9 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <2.5f ? 
         (Double.isNaN(data[0]) || data[0 /* vlan */] <160.5f ? 
            0.0f : 
             (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <1.5f ? 
                 (data[1 /* type_of_time */] <3.5f ? 
                    1.0f : 
                    0.0f) : 
                 (data[2 /* no_of_characters */] <130.5f ? 
                    1.0f : 
                    0.0f))) : 
         (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.18359375f ? 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <95.5f ? 
                0.0f : 
                 (data[2 /* no_of_characters */] <206.0f ? 
                    1.0f : 
                    0.0f)) : 
             (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.2734375f ? 
                 (data[10 /* 9_letter_word */] <0.05078125f ? 
                     (data[11 /* 10_letter_word */] <0.1015625f ? 
                        0.0f : 
                        0.99615383f) : 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.25f ? 
                        0.9988611f : 
                        0.0f)) : 
                0.0f)));
    return pred;
  } // constant pool size = 50B, number of visited nodes = 12, static init size = 0B
}

class log_drf_1_Tree_24_class_10 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
        7.4042264E-6f : 
         (data[2 /* no_of_characters */] <93.5f ? 
             (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <1.5f ? 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <89.5f ? 
                    0.0f : 
                    0.11111111f) : 
                0.0f) : 
            0.0f));
    return pred;
  } // constant pool size = 18B, number of visited nodes = 4, static init size = 0B
}

class log_drf_1_Tree_24_class_11 {
  static final double score0(double[] data) {
    double pred =     5.0E-6f;
    return pred;
  } // constant pool size = 2B, number of visited nodes = 0, static init size = 0B
}

class log_drf_1_Tree_24_class_12 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
        0.0f : 
         (Double.isNaN(data[0]) || data[0 /* vlan */] <593.5f ? 
            0.0f : 
             (data[2 /* no_of_characters */] <243.0f ? 
                0.0f : 
                 (data[9 /* 8_letter_word */] <0.1015625f ? 
                    1.0f : 
                    0.95454544f))));
    return pred;
  } // constant pool size = 18B, number of visited nodes = 4, static init size = 0B
}

class log_drf_1_Tree_24_class_13 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
         (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.2548828f ? 
             (data[2 /* no_of_characters */] <58.0f ? 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <36.5f ? 
                     (data[0 /* vlan */] <17.5f ? 
                        0.0f : 
                        0.9925926f) : 
                     (data[6 /* 5_letter_word */] <0.125f ? 
                        0.0f : 
                        1.0f)) : 
                0.0f) : 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <592.5f ? 
                 (data[2 /* no_of_characters */] <87.5f ? 
                     (data[5 /* 4_letter_word */] <0.45280457f ? 
                        0.1590909f : 
                        0.0f) : 
                    0.0f) : 
                1.0f)) : 
         (data[2 /* no_of_characters */] <39.5f ? 
            1.0f : 
             (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.18359375f ? 
                 (data[2 /* no_of_characters */] <57.5f ? 
                    0.028571429f : 
                    0.0f) : 
                 (data[10 /* 9_letter_word */] <0.21229553f ? 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <238.0f ? 
                        0.0f : 
                        0.5f) : 
                    0.0f))));
    return pred;
  } // constant pool size = 58B, number of visited nodes = 14, static init size = 0B
}

class log_drf_1_Tree_24_class_14 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[12]) || data[12 /* 11_letter_word */] <0.18310547f ? 
         (data[0 /* vlan */] <27.5f ? 
             (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.03125f ? 
                 (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.0390625f ? 
                     (data[1 /* type_of_time */] <3.0f ? 
                        0.024390243f : 
                        0.0f) : 
                    0.0f) : 
                0.0f) : 
            0.0f) : 
         (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <215.5f ? 
            0.0f : 
             (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.1015625f ? 
                0.0f : 
                1.0f)));
    return pred;
  } // constant pool size = 30B, number of visited nodes = 7, static init size = 0B
}

class log_drf_1_Tree_24_class_15 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <1.5f ? 
         (data[0 /* vlan */] <141.5f ? 
             (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.2109375f ? 
                 (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.30859375f ? 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <220.5f ? 
                        0.0029659427f : 
                        0.021243362f) : 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.4140625f ? 
                        0.042923436f : 
                        0.95049506f)) : 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <120.5f ? 
                    0.0f : 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.3125f ? 
                        0.0f : 
                        0.0018903592f))) : 
            0.0f) : 
         (data[2 /* no_of_characters */] <100.5f ? 
             (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.25f ? 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <98.5f ? 
                    0.0f : 
                    0.20160885f) : 
                0.0f) : 
             (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.0390625f ? 
                 (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.072265625f ? 
                     (data[6 /* 5_letter_word */] <0.0546875f ? 
                        0.019785378f : 
                        3.140046E-4f) : 
                    0.0f) : 
                0.0f)));
    return pred;
  } // constant pool size = 58B, number of visited nodes = 14, static init size = 0B
}

class log_drf_1_Tree_24_class_16 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
         (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.94921875f ? 
             (data[2 /* no_of_characters */] <150.5f ? 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <148.5f ? 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <144.5f ? 
                        1.6966407E-4f : 
                        0.0012106538f) : 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <149.5f ? 
                        0.0125f : 
                        0.0f)) : 
                0.0f) : 
             (data[2 /* no_of_characters */] <100.5f ? 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <77.5f ? 
                    0.0f : 
                    0.07692308f) : 
                0.0f)) : 
        0.0f);
    return pred;
  } // constant pool size = 34B, number of visited nodes = 8, static init size = 0B
}

class log_drf_1_Tree_24_class_17 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <3.5f ? 
         (Double.isNaN(data[0]) || data[0 /* vlan */] <177.5f ? 
             (Double.isNaN(data[12]) || data[12 /* 11_letter_word */] <0.041015625f ? 
                 (data[1 /* type_of_time */] <2.5f ? 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.828125f ? 
                        0.0f : 
                        0.33333334f) : 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <789.5f ? 
                        0.0f : 
                        0.020833334f)) : 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <789.0f ? 
                    0.0f : 
                    0.5f)) : 
             (data[0 /* vlan */] <181.5f ? 
                 (data[5 /* 4_letter_word */] <0.125f ? 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <885.5f ? 
                        0.8164557f : 
                        0.0f) : 
                    0.0f) : 
                0.0f)) : 
         (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <992.5f ? 
            0.0f : 
             (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.43164062f ? 
                 (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <4.5f ? 
                    1.0f : 
                    0.0f) : 
                1.0f)));
    return pred;
  } // constant pool size = 54B, number of visited nodes = 13, static init size = 0B
}

class log_drf_1_Tree_24_class_18 {
  static final double score0(double[] data) {
    double pred =     5.0E-6f;
    return pred;
  } // constant pool size = 2B, number of visited nodes = 0, static init size = 0B
}

class log_drf_1_Tree_24_class_19 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
        0.0f : 
         (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.22460938f ? 
            0.0f : 
             (data[3 /* no_of_ips */] <1.5f ? 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <14.5f ? 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <184.5f ? 
                        0.99848026f : 
                        0.0f) : 
                    0.0f) : 
                0.0f)));
    return pred;
  } // constant pool size = 22B, number of visited nodes = 5, static init size = 0B
}

class log_drf_1_Tree_24_class_20 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
         (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.3095703f ? 
             (data[2 /* no_of_characters */] <150.5f ? 
                 (data[2 /* no_of_characters */] <70.5f ? 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <69.5f ? 
                        0.0f : 
                        0.33333334f) : 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <33.5f ? 
                        0.92657244f : 
                        0.0f)) : 
                 (data[8 /* 7_letter_word */] <0.125f ? 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.24107143f ? 
                        0.2539104f : 
                        0.81781375f) : 
                     (Double.isNaN(data[15]) || data[15 /* 14_letter_word */] <0.12890625f ? 
                        0.008778069f : 
                        0.9894737f))) : 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <135.5f ? 
                 (data[2 /* no_of_characters */] <83.5f ? 
                    0.0f : 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.578125f ? 
                        0.9744388f : 
                        0.06896552f)) : 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <18.0f ? 
                    0.0f : 
                     (data[0 /* vlan */] <24.5f ? 
                        1.0f : 
                        0.0f)))) : 
         (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <2.5f ? 
             (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.1015625f ? 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <119.5f ? 
                     (data[0 /* vlan */] <33.5f ? 
                        0.008611599f : 
                        0.0f) : 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.8671875f ? 
                        0.018487744f : 
                        0.98695654f)) : 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.18359375f ? 
                     (data[8 /* 7_letter_word */] <0.2578125f ? 
                        0.0f : 
                        0.9236032f) : 
                     (data[3 /* no_of_ips */] <1.5f ? 
                        0.0f : 
                        0.5f))) : 
             (data[6 /* 5_letter_word */] <0.18359375f ? 
                 (data[0 /* vlan */] <25.5f ? 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <18.0f ? 
                        0.0f : 
                        1.0f) : 
                    0.0f) : 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.3671875f ? 
                    0.0f : 
                     (data[7 /* 6_letter_word */] <0.125f ? 
                        0.16666667f : 
                        0.0f)))));
    return pred;
  } // constant pool size = 110B, number of visited nodes = 27, static init size = 0B
}

class log_drf_1_Tree_24_class_21 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[12]) || data[12 /* 11_letter_word */] <0.22460938f ? 
         (data[0 /* vlan */] <11.5f ? 
             (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                0.0f : 
                 (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.21484375f ? 
                     (data[2 /* no_of_characters */] <244.5f ? 
                        0.9047619f : 
                        0.0f) : 
                    0.0f)) : 
             (data[0 /* vlan */] <35.5f ? 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <170.5f ? 
                     (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                        0.0012402172f : 
                        0.0f) : 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.5859375f ? 
                        7.467145E-4f : 
                        0.116883114f)) : 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <260.5f ? 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.046875f ? 
                        0.001866415f : 
                        5.9892196E-4f) : 
                     (data[0 /* vlan */] <75.0f ? 
                        0.105540894f : 
                        0.0054627247f)))) : 
         (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <220.5f ? 
            0.0f : 
            0.82758623f));
    return pred;
  } // constant pool size = 54B, number of visited nodes = 13, static init size = 0B
}

class log_drf_1_Tree_24_class_22 {
  static final double score0(double[] data) {
    double pred =     4.0E-5f;
    return pred;
  } // constant pool size = 2B, number of visited nodes = 0, static init size = 0B
}

class log_drf_1_Tree_24_class_23 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
         (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.5830078f ? 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <255.5f ? 
                 (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.36665726f ? 
                     (data[8 /* 7_letter_word */] <0.046875f ? 
                        4.181913E-4f : 
                        0.0f) : 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <148.5f ? 
                        0.0f : 
                        0.012048192f)) : 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <263.5f ? 
                     (data[5 /* 4_letter_word */] <0.1796875f ? 
                        0.9291408f : 
                        0.0023463164f) : 
                     (Double.isNaN(data[12]) || data[12 /* 11_letter_word */] <0.078125f ? 
                        0.0f : 
                        0.1904762f))) : 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <19.5f ? 
                 (data[2 /* no_of_characters */] <133.5f ? 
                    0.0f : 
                    1.0f) : 
                0.0f)) : 
         (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <222.5f ? 
            0.0f : 
             (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.15429688f ? 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.69140625f ? 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.4609375f ? 
                        0.0f : 
                        0.004608295f) : 
                    0.38157895f) : 
                 (data[5 /* 4_letter_word */] <0.05859375f ? 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <26.5f ? 
                        1.0f : 
                        0.0f) : 
                    0.0f))));
    return pred;
  } // constant pool size = 70B, number of visited nodes = 17, static init size = 0B
}

class log_drf_1_Tree_24_class_24 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
        0.0f : 
         (data[0 /* vlan */] <12.5f ? 
             (data[2 /* no_of_characters */] <180.5f ? 
                0.5f : 
                0.0f) : 
            0.0f));
    return pred;
  } // constant pool size = 14B, number of visited nodes = 3, static init size = 0B
}

class log_drf_1_Tree_24_class_25 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <1.5f ? 
         (data[0 /* vlan */] <40.5f ? 
             (Double.isNaN(data[12]) || data[12 /* 11_letter_word */] <0.15429688f ? 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <160.5f ? 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.8984375f ? 
                        0.041749712f : 
                        0.56666666f) : 
                     (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                        0.3186288f : 
                        0.87484884f)) : 
                 (data[0 /* vlan */] <29.0f ? 
                    0.0f : 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <34.0f ? 
                        1.0f : 
                        0.6666667f))) : 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <174.0f ? 
                0.0f : 
                 (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.02734375f ? 
                    0.0f : 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.265625f ? 
                        0.0f : 
                        0.5f)))) : 
         (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <190.5f ? 
             (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.18359375f ? 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <169.0f ? 
                     (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.7421875f ? 
                        0.9494551f : 
                        0.0f) : 
                     (data[1 /* type_of_time */] <4.5f ? 
                        0.0f : 
                        0.9404832f)) : 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <141.0f ? 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <90.0f ? 
                        0.91905564f : 
                        0.0f) : 
                     (data[0 /* vlan */] <90.0f ? 
                        0.258547f : 
                        0.0f))) : 
             (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.36914062f ? 
                 (data[7 /* 6_letter_word */] <0.30859375f ? 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.828125f ? 
                        0.060585886f : 
                        1.0f) : 
                     (data[2 /* no_of_characters */] <269.5f ? 
                        0.12017167f : 
                        0.0f)) : 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <318.0f ? 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.3984375f ? 
                        1.0f : 
                        0.9892473f) : 
                    0.0f))));
    return pred;
  } // constant pool size = 102B, number of visited nodes = 25, static init size = 0B
}

class log_drf_1_Tree_24_class_26 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
         (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.6455078f ? 
            0.0f : 
             (data[2 /* no_of_characters */] <63.0f ? 
                0.99752474f : 
                0.0f)) : 
        0.0f);
    return pred;
  } // constant pool size = 14B, number of visited nodes = 3, static init size = 0B
}

class log_drf_1_Tree_24_class_27 {
  static final double score0(double[] data) {
    double pred =     1.0E-5f;
    return pred;
  } // constant pool size = 2B, number of visited nodes = 0, static init size = 0B
}

class log_drf_1_Tree_24_class_28 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <5.5f ? 
         (data[0 /* vlan */] <17.5f ? 
             (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <3.0f ? 
                0.0f : 
                1.0f) : 
            0.0f) : 
         (data[2 /* no_of_characters */] <351.5f ? 
            0.0f : 
            1.0f));
    return pred;
  } // constant pool size = 18B, number of visited nodes = 4, static init size = 0B
}

class log_drf_1_Tree_24_class_29 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[12]) || data[12 /* 11_letter_word */] <0.0087890625f ? 
        1.0136693E-5f : 
         (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <956.5f ? 
             (data[12 /* 11_letter_word */] <0.06299591f ? 
                 (data[4 /* no_of_macs */] <0.5f ? 
                    1.0f : 
                    0.0f) : 
                0.0f) : 
             (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.044921875f ? 
                 (data[9 /* 8_letter_word */] <0.20507812f ? 
                    0.5f : 
                    1.0f) : 
                0.0f)));
    return pred;
  } // constant pool size = 26B, number of visited nodes = 6, static init size = 0B
}

class log_drf_1_Tree_24_class_30 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <2.5f ? 
         (Double.isNaN(data[0]) || data[0 /* vlan */] <177.5f ? 
            0.0f : 
             (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <1.5f ? 
                0.0f : 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.125f ? 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.125f ? 
                        0.0f : 
                        0.21428572f) : 
                    1.0f))) : 
         (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <210.5f ? 
            0.0f : 
             (data[2 /* no_of_characters */] <239.5f ? 
                 (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.22265625f ? 
                    0.0f : 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.0546875f ? 
                        1.0f : 
                        0.0f)) : 
                0.0f)));
    return pred;
  } // constant pool size = 38B, number of visited nodes = 9, static init size = 0B
}

class log_drf_1_Tree_24_class_31 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <1.5f ? 
         (Double.isNaN(data[13]) || data[13 /* 12_letter_word */] <0.22460938f ? 
             (Double.isNaN(data[15]) || data[15 /* 14_letter_word */] <0.22460938f ? 
                 (data[0 /* vlan */] <97.5f ? 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <81.0f ? 
                        5.113595E-4f : 
                        0.85406464f) : 
                     (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.078125f ? 
                        0.0f : 
                        5.8719906E-4f)) : 
                 (Double.isNaN(data[15]) || data[15 /* 14_letter_word */] <0.29130554f ? 
                     (data[0 /* vlan */] <57.5f ? 
                        0.0f : 
                        0.9117647f) : 
                    0.9736842f)) : 
             (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                 (data[13 /* 12_letter_word */] <0.4169922f ? 
                    0.0f : 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.25f ? 
                        0.0f : 
                        0.96363634f)) : 
                 (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.16796875f ? 
                    1.0f : 
                    0.0f))) : 
        0.0f);
    return pred;
  } // constant pool size = 50B, number of visited nodes = 12, static init size = 0B
}

class log_drf_1_Tree_24_class_32 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
         (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.4951172f ? 
             (Double.isNaN(data[13]) || data[13 /* 12_letter_word */] <0.29101562f ? 
                0.0f : 
                 (data[13 /* 12_letter_word */] <0.41564178f ? 
                     (data[6 /* 5_letter_word */] <0.171875f ? 
                        0.5f : 
                        0.0f) : 
                    0.0f)) : 
             (data[2 /* no_of_characters */] <125.5f ? 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <121.5f ? 
                    0.0f : 
                     (data[0 /* vlan */] <18.5f ? 
                        0.0f : 
                        0.24431819f)) : 
                0.0f)) : 
         (data[2 /* no_of_characters */] <88.5f ? 
             (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.25f ? 
                0.0f : 
                0.9767442f) : 
             (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.22460938f ? 
                 (data[2 /* no_of_characters */] <121.5f ? 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.1015625f ? 
                        0.0f : 
                        0.011587232f) : 
                    0.0f) : 
                 (data[2 /* no_of_characters */] <113.5f ? 
                     (Double.isNaN(data[13]) || data[13 /* 12_letter_word */] <0.125f ? 
                        0.98245615f : 
                        0.0f) : 
                    0.0f))));
    return pred;
  } // constant pool size = 62B, number of visited nodes = 15, static init size = 0B
}

class log_drf_1_Tree_24_class_33 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[4]) || data[4 /* no_of_macs */] <1.5f ? 
         (data[0 /* vlan */] <3.5f ? 
             (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.1796875f ? 
                1.0f : 
                0.0f) : 
             (data[0 /* vlan */] <8.0f ? 
                 (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.125f ? 
                    0.23529412f : 
                    1.0f) : 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <280.5f ? 
                     (data[2 /* no_of_characters */] <84.5f ? 
                        0.010605638f : 
                        3.3858436E-4f) : 
                     (data[2 /* no_of_characters */] <390.5f ? 
                        0.021464646f : 
                        0.0f)))) : 
         (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <293.0f ? 
            0.0f : 
             (data[10 /* 9_letter_word */] <0.08203125f ? 
                0.0f : 
                 (data[8 /* 7_letter_word */] <0.17578125f ? 
                    0.0f : 
                    1.0f))));
    return pred;
  } // constant pool size = 46B, number of visited nodes = 11, static init size = 0B
}

class log_drf_1_Tree_24_class_34 {
  static final double score0(double[] data) {
    double pred =     1.0E-5f;
    return pred;
  } // constant pool size = 2B, number of visited nodes = 0, static init size = 0B
}

class log_drf_1_Tree_24_class_35 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <2.5f ? 
         (data[0 /* vlan */] <17.5f ? 
             (data[2 /* no_of_characters */] <130.5f ? 
                 (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.74609375f ? 
                     (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.21875f ? 
                        0.0062370063f : 
                        0.5f) : 
                    0.375f) : 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.4140625f ? 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <304.5f ? 
                        6.402049E-4f : 
                        0.012820513f) : 
                     (data[5 /* 4_letter_word */] <0.3671875f ? 
                        0.11111111f : 
                        0.0f))) : 
            0.0f) : 
        0.0f);
    return pred;
  } // constant pool size = 34B, number of visited nodes = 8, static init size = 0B
}

class log_drf_1_Tree_24_class_36 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
         (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.16015625f ? 
            0.0f : 
             (data[2 /* no_of_characters */] <135.5f ? 
                 (data[0 /* vlan */] <9.5f ? 
                     (data[2 /* no_of_characters */] <129.5f ? 
                        1.0f : 
                        0.85714287f) : 
                    0.0f) : 
                0.0f)) : 
        0.0f);
    return pred;
  } // constant pool size = 22B, number of visited nodes = 5, static init size = 0B
}

class log_drf_1_Tree_24_class_37 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
         (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.3095703f ? 
             (data[2 /* no_of_characters */] <150.5f ? 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <129.5f ? 
                     (data[1 /* type_of_time */] <4.5f ? 
                        0.9979879f : 
                        0.008580403f) : 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.0546875f ? 
                        0.6929392f : 
                        0.023444977f)) : 
                 (data[8 /* 7_letter_word */] <0.29296875f ? 
                     (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.15625f ? 
                        0.3741784f : 
                        0.6679341f) : 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.23660715f ? 
                        0.9760467f : 
                        0.9985507f))) : 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <151.5f ? 
                 (data[9 /* 8_letter_word */] <0.44981384f ? 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <234.5f ? 
                        0.005882353f : 
                        0.25f) : 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.83236516f ? 
                        2.2502251E-4f : 
                        0.0021748587f)) : 
                 (data[5 /* 4_letter_word */] <0.44921875f ? 
                    1.0f : 
                     (data[9 /* 8_letter_word */] <0.44981384f ? 
                        1.0f : 
                        0.9925373f)))) : 
         (data[2 /* no_of_characters */] <115.5f ? 
             (Double.isNaN(data[4]) || data[4 /* no_of_macs */] <0.5f ? 
                 (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.1015625f ? 
                     (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
                        0.99873257f : 
                        0.0f) : 
                    0.0f) : 
                0.0f) : 
             (data[1 /* type_of_time */] <4.5f ? 
                 (Double.isNaN(data[1]) || data[1 /* type_of_time */] <3.5f ? 
                    0.0f : 
                    1.0f) : 
                 (data[5 /* 4_letter_word */] <0.05859375f ? 
                     (data[3 /* no_of_ips */] <2.5f ? 
                        0.0f : 
                        3.468609E-4f) : 
                    0.0f))));
    return pred;
  } // constant pool size = 94B, number of visited nodes = 23, static init size = 0B
}

class log_drf_1_Tree_24_class_38 {
  static final double score0(double[] data) {
    double pred =     1.5E-5f;
    return pred;
  } // constant pool size = 2B, number of visited nodes = 0, static init size = 0B
}


class log_drf_1_Forest_25 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += log_drf_1_Tree_25_class_0.score0(fdata);
    preds[2] += log_drf_1_Tree_25_class_1.score0(fdata);
    preds[3] += log_drf_1_Tree_25_class_2.score0(fdata);
    preds[4] += log_drf_1_Tree_25_class_3.score0(fdata);
    preds[5] += log_drf_1_Tree_25_class_4.score0(fdata);
    preds[6] += log_drf_1_Tree_25_class_5.score0(fdata);
    preds[7] += log_drf_1_Tree_25_class_6.score0(fdata);
    preds[8] += log_drf_1_Tree_25_class_7.score0(fdata);
    preds[9] += log_drf_1_Tree_25_class_8.score0(fdata);
    preds[10] += log_drf_1_Tree_25_class_9.score0(fdata);
    preds[11] += log_drf_1_Tree_25_class_10.score0(fdata);
    preds[12] += log_drf_1_Tree_25_class_11.score0(fdata);
    preds[13] += log_drf_1_Tree_25_class_12.score0(fdata);
    preds[14] += log_drf_1_Tree_25_class_13.score0(fdata);
    preds[15] += log_drf_1_Tree_25_class_14.score0(fdata);
    preds[16] += log_drf_1_Tree_25_class_15.score0(fdata);
    preds[17] += log_drf_1_Tree_25_class_16.score0(fdata);
    preds[18] += log_drf_1_Tree_25_class_17.score0(fdata);
    preds[19] += log_drf_1_Tree_25_class_18.score0(fdata);
    preds[20] += log_drf_1_Tree_25_class_19.score0(fdata);
    preds[21] += log_drf_1_Tree_25_class_20.score0(fdata);
    preds[22] += log_drf_1_Tree_25_class_21.score0(fdata);
    preds[23] += log_drf_1_Tree_25_class_22.score0(fdata);
    preds[24] += log_drf_1_Tree_25_class_23.score0(fdata);
    preds[25] += log_drf_1_Tree_25_class_24.score0(fdata);
    preds[26] += log_drf_1_Tree_25_class_25.score0(fdata);
    preds[27] += log_drf_1_Tree_25_class_26.score0(fdata);
    preds[28] += log_drf_1_Tree_25_class_27.score0(fdata);
    preds[29] += log_drf_1_Tree_25_class_28.score0(fdata);
    preds[30] += log_drf_1_Tree_25_class_29.score0(fdata);
    preds[31] += log_drf_1_Tree_25_class_30.score0(fdata);
    preds[32] += log_drf_1_Tree_25_class_31.score0(fdata);
    preds[33] += log_drf_1_Tree_25_class_32.score0(fdata);
    preds[34] += log_drf_1_Tree_25_class_33.score0(fdata);
    preds[35] += log_drf_1_Tree_25_class_34.score0(fdata);
    preds[36] += log_drf_1_Tree_25_class_35.score0(fdata);
    preds[37] += log_drf_1_Tree_25_class_36.score0(fdata);
    preds[38] += log_drf_1_Tree_25_class_37.score0(fdata);
    preds[39] += log_drf_1_Tree_25_class_38.score0(fdata);
  }
}
class log_drf_1_Tree_25_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.015136719f ? 
        3.3110206E-5f : 
         (Double.isNaN(data[0]) || data[0 /* vlan */] <99.5f ? 
            0.0f : 
             (Double.isNaN(data[14]) || data[14 /* 13_letter_word */] <0.009765625f ? 
                 (data[10 /* 9_letter_word */] <0.076690674f ? 
                     (data[7 /* 6_letter_word */] <0.1484375f ? 
                        0.5f : 
                        1.0f) : 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <619.5f ? 
                        0.0f : 
                        0.055555556f)) : 
                1.0f)));
    return pred;
  } // constant pool size = 26B, number of visited nodes = 6, static init size = 0B
}

class log_drf_1_Tree_25_class_1 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.39208984f ? 
         (Double.isNaN(data[4]) || data[4 /* no_of_macs */] <0.5f ? 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <260.5f ? 
                 (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.70703125f ? 
                    0.0f : 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.125f ? 
                        0.0f : 
                        1.0f)) : 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.31640625f ? 
                    0.0f : 
                     (data[0 /* vlan */] <154.5f ? 
                        0.537037f : 
                        0.0f))) : 
            0.0f) : 
         (data[5 /* 4_letter_word */] <0.40811872f ? 
             (data[7 /* 6_letter_word */] <0.05078125f ? 
                 (data[8 /* 7_letter_word */] <0.30078125f ? 
                    0.0f : 
                     (data[6 /* 5_letter_word */] <0.103125f ? 
                        0.0f : 
                        0.9561753f)) : 
                0.0f) : 
             (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                0.0f : 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <260.5f ? 
                    0.0f : 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.3125f ? 
                        0.015936255f : 
                        1.0f)))));
    return pred;
  } // constant pool size = 58B, number of visited nodes = 14, static init size = 0B
}

class log_drf_1_Tree_25_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.49560547f ? 
         (Double.isNaN(data[4]) || data[4 /* no_of_macs */] <0.5f ? 
             (data[2 /* no_of_characters */] <150.5f ? 
                 (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.4609375f ? 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.21875f ? 
                        0.012825619f : 
                        0.0021609254f) : 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <115.5f ? 
                        6.261741E-4f : 
                        0.0f)) : 
                 (data[8 /* 7_letter_word */] <0.2578125f ? 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <1063.5f ? 
                        0.0011751802f : 
                        0.5f) : 
                     (Double.isNaN(data[13]) || data[13 /* 12_letter_word */] <0.0859375f ? 
                        2.4254772E-5f : 
                        0.011764706f))) : 
            0.0f) : 
         (Double.isNaN(data[0]) || data[0 /* vlan */] <181.5f ? 
             (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.1328125f ? 
                0.0f : 
                 (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.5859375f ? 
                        0.024494143f : 
                        0.49406177f) : 
                    0.0f)) : 
             (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.55078125f ? 
                 (data[1 /* type_of_time */] <4.5f ? 
                    0.0f : 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <190.5f ? 
                        1.0f : 
                        0.0f)) : 
                0.0f)));
    return pred;
  } // constant pool size = 66B, number of visited nodes = 16, static init size = 0B
}

class log_drf_1_Tree_25_class_3 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.39208984f ? 
         (Double.isNaN(data[4]) || data[4 /* no_of_macs */] <0.5f ? 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <295.5f ? 
                 (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                     (data[8 /* 7_letter_word */] <0.2578125f ? 
                        5.3934524E-5f : 
                        0.0f) : 
                     (data[2 /* no_of_characters */] <107.5f ? 
                        0.022222223f : 
                        0.0f)) : 
                 (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.3515625f ? 
                    0.0f : 
                     (data[8 /* 7_letter_word */] <0.265625f ? 
                        0.039800994f : 
                        0.99230766f))) : 
            0.0f) : 
         (data[0 /* vlan */] <29.5f ? 
             (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.04296875f ? 
                 (data[1 /* type_of_time */] <4.5f ? 
                    0.0f : 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <28.0f ? 
                        0.0f : 
                        0.8890039f)) : 
                0.0f) : 
            0.0f));
    return pred;
  } // constant pool size = 50B, number of visited nodes = 12, static init size = 0B
}

class log_drf_1_Tree_25_class_4 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.3095703f ? 
        7.844203E-5f : 
         (data[3 /* no_of_ips */] <0.5f ? 
             (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.16796875f ? 
                0.0f : 
                 (data[8 /* 7_letter_word */] <0.16796875f ? 
                    0.0f : 
                    0.969697f)) : 
            0.0f));
    return pred;
  } // constant pool size = 18B, number of visited nodes = 4, static init size = 0B
}

class log_drf_1_Tree_25_class_5 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.27929688f ? 
        8.766407E-5f : 
         (data[5 /* 4_letter_word */] <0.30885696f ? 
             (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.21679688f ? 
                 (data[7 /* 6_letter_word */] <0.16015625f ? 
                     (data[2 /* no_of_characters */] <140.5f ? 
                        0.125f : 
                        0.0f) : 
                    0.0f) : 
                 (data[2 /* no_of_characters */] <215.5f ? 
                    1.0f : 
                    0.0f)) : 
             (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.13476562f ? 
                 (data[1 /* type_of_time */] <4.5f ? 
                    0.0f : 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.114583336f ? 
                        1.5634771E-4f : 
                        0.004173471f)) : 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.1328125f ? 
                    0.0f : 
                     (data[2 /* no_of_characters */] <160.5f ? 
                        0.104477614f : 
                        0.0f)))));
    return pred;
  } // constant pool size = 46B, number of visited nodes = 11, static init size = 0B
}

class log_drf_1_Tree_25_class_6 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.1616211f ? 
         (Double.isNaN(data[4]) || data[4 /* no_of_macs */] <0.5f ? 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <133.5f ? 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.2734375f ? 
                     (data[0 /* vlan */] <17.5f ? 
                        0.0032862306f : 
                        1.19994E-4f) : 
                     (Double.isNaN(data[14]) || data[14 /* 13_letter_word */] <0.072265625f ? 
                        0.0049972236f : 
                        0.0f)) : 
                0.0f) : 
            0.0f) : 
         (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.3203125f ? 
             (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.22460938f ? 
                 (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
                    0.0f : 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.8690033f ? 
                        0.0f : 
                        0.0037990713f)) : 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.125f ? 
                    0.0f : 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <83.5f ? 
                        0.0f : 
                        1.0f))) : 
             (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.14453125f ? 
                 (data[1 /* type_of_time */] <4.5f ? 
                    0.0f : 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.046875f ? 
                        0.07538803f : 
                        0.0f)) : 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.22491963f ? 
                     (data[0 /* vlan */] <91.5f ? 
                        0.0f : 
                        0.3483871f) : 
                    0.0f))));
    return pred;
  } // constant pool size = 70B, number of visited nodes = 17, static init size = 0B
}

class log_drf_1_Tree_25_class_7 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.94970703f ? 
        0.0f : 
         (Double.isNaN(data[4]) || data[4 /* no_of_macs */] <0.5f ? 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <183.5f ? 
                0.0f : 
                1.0f) : 
            0.0f));
    return pred;
  } // constant pool size = 14B, number of visited nodes = 3, static init size = 0B
}

class log_drf_1_Tree_25_class_8 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.53759766f ? 
         (Double.isNaN(data[4]) || data[4 /* no_of_macs */] <0.5f ? 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <752.0f ? 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <178.5f ? 
                    0.0f : 
                     (data[7 /* 6_letter_word */] <0.125f ? 
                        0.0043541365f : 
                        0.0f)) : 
                 (data[6 /* 5_letter_word */] <0.0625f ? 
                     (data[1 /* type_of_time */] <4.5f ? 
                        0.0f : 
                        0.82222223f) : 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.18359375f ? 
                        0.14285715f : 
                        0.0f))) : 
            0.0f) : 
         (Double.isNaN(data[0]) || data[0 /* vlan */] <173.5f ? 
            0.0f : 
             (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.072265625f ? 
                 (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.2421875f ? 
                     (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <1.0f ? 
                        0.0045871558f : 
                        0.0f) : 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.34848458f ? 
                        0.70238096f : 
                        1.0f)) : 
                1.0f)));
    return pred;
  } // constant pool size = 54B, number of visited nodes = 13, static init size = 0B
}

class log_drf_1_Tree_25_class_9 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.095703125f ? 
         (Double.isNaN(data[4]) || data[4 /* no_of_macs */] <0.5f ? 
             (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.31054688f ? 
                 (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <1.5f ? 
                     (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                        0.0f : 
                        2.5928568E-4f) : 
                     (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.22563171f ? 
                        0.008089707f : 
                        0.57894737f)) : 
                 (data[6 /* 5_letter_word */] <0.0859375f ? 
                     (data[1 /* type_of_time */] <3.5f ? 
                        0.9867725f : 
                        0.0f) : 
                    0.0f)) : 
            0.0f) : 
         (Double.isNaN(data[0]) || data[0 /* vlan */] <150.5f ? 
            0.0f : 
             (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.1828125f ? 
                0.0f : 
                 (Double.isNaN(data[1]) || data[1 /* type_of_time */] <3.5f ? 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <174.0f ? 
                        1.0f : 
                        0.0f) : 
                    0.0f))));
    return pred;
  } // constant pool size = 50B, number of visited nodes = 12, static init size = 0B
}

class log_drf_1_Tree_25_class_10 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.3388672f ? 
        4.9902334E-5f : 
        0.0f);
    return pred;
  } // constant pool size = 6B, number of visited nodes = 1, static init size = 0B
}

class log_drf_1_Tree_25_class_11 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.14111328f ? 
        0.0f : 
        2.21283E-5f);
    return pred;
  } // constant pool size = 6B, number of visited nodes = 1, static init size = 0B
}

class log_drf_1_Tree_25_class_12 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.5830078f ? 
        1.5423847E-4f : 
         (Double.isNaN(data[0]) || data[0 /* vlan */] <589.5f ? 
            0.0f : 
             (data[2 /* no_of_characters */] <439.5f ? 
                0.75f : 
                1.0f)));
    return pred;
  } // constant pool size = 14B, number of visited nodes = 3, static init size = 0B
}

class log_drf_1_Tree_25_class_13 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.2553711f ? 
         (Double.isNaN(data[4]) || data[4 /* no_of_macs */] <0.5f ? 
             (data[2 /* no_of_characters */] <60.5f ? 
                 (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.125f ? 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.25f ? 
                        0.8519856f : 
                        0.0f) : 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.2890625f ? 
                        1.0f : 
                        0.0f)) : 
                 (data[8 /* 7_letter_word */] <0.05078125f ? 
                    2.9129042E-5f : 
                    0.0f)) : 
            0.0f) : 
         (Double.isNaN(data[0]) || data[0 /* vlan */] <593.5f ? 
             (data[5 /* 4_letter_word */] <0.40865386f ? 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.046875f ? 
                     (data[2 /* no_of_characters */] <100.5f ? 
                        0.48f : 
                        0.0f) : 
                    0.0f) : 
                0.0f) : 
            1.0f));
    return pred;
  } // constant pool size = 46B, number of visited nodes = 11, static init size = 0B
}

class log_drf_1_Tree_25_class_14 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.19091797f ? 
        1.6477632E-5f : 
         (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.18359375f ? 
            0.0f : 
             (Double.isNaN(data[12]) || data[12 /* 11_letter_word */] <0.1015625f ? 
                0.0f : 
                1.0f)));
    return pred;
  } // constant pool size = 14B, number of visited nodes = 3, static init size = 0B
}

class log_drf_1_Tree_25_class_15 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.94970703f ? 
         (Double.isNaN(data[15]) || data[15 /* 14_letter_word */] <0.10546875f ? 
             (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.4140625f ? 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <210.5f ? 
                     (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.2890625f ? 
                        0.0013579532f : 
                        0.032258064f) : 
                     (data[2 /* no_of_characters */] <243.5f ? 
                        0.040181957f : 
                        0.0055695097f)) : 
                0.0f) : 
             (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.078125f ? 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.22265625f ? 
                    0.0f : 
                     (data[15 /* 14_letter_word */] <0.22567749f ? 
                        0.0f : 
                        0.09677419f)) : 
                0.078125f)) : 
         (data[3 /* no_of_ips */] <1.5f ? 
            0.0f : 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <109.0f ? 
                 (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <2.5f ? 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <100.5f ? 
                        0.20778564f : 
                        0.0f) : 
                    0.0f) : 
                0.0f)));
    return pred;
  } // constant pool size = 54B, number of visited nodes = 13, static init size = 0B
}

class log_drf_1_Tree_25_class_16 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.94970703f ? 
        7.428908E-5f : 
         (data[3 /* no_of_ips */] <0.5f ? 
             (data[2 /* no_of_characters */] <80.5f ? 
                 (data[0 /* vlan */] <58.5f ? 
                    0.102564104f : 
                    0.0f) : 
                0.0f) : 
            0.0f));
    return pred;
  } // constant pool size = 18B, number of visited nodes = 4, static init size = 0B
}

class log_drf_1_Tree_25_class_17 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.36914062f ? 
         (Double.isNaN(data[4]) || data[4 /* no_of_macs */] <0.5f ? 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <659.5f ? 
                 (data[0 /* vlan */] <17.5f ? 
                     (data[7 /* 6_letter_word */] <0.046875f ? 
                        4.0783035E-4f : 
                        0.0f) : 
                    0.0f) : 
                 (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.23828125f ? 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.109375f ? 
                        0.8043478f : 
                        0.0f) : 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.2890625f ? 
                        0.9117647f : 
                        1.0f))) : 
            0.0f) : 
         (Double.isNaN(data[0]) || data[0 /* vlan */] <173.5f ? 
            0.0f : 
             (data[7 /* 6_letter_word */] <0.072265625f ? 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <187.5f ? 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.4609375f ? 
                        0.0077319588f : 
                        0.72727275f) : 
                    0.0f) : 
                0.0f)));
    return pred;
  } // constant pool size = 50B, number of visited nodes = 12, static init size = 0B
}

class log_drf_1_Tree_25_class_18 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.07470703f ? 
        0.0f : 
        5.3321957E-5f);
    return pred;
  } // constant pool size = 6B, number of visited nodes = 1, static init size = 0B
}

class log_drf_1_Tree_25_class_19 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.24023438f ? 
        1.2502969E-5f : 
         (data[0 /* vlan */] <17.5f ? 
             (data[9 /* 8_letter_word */] <0.2684288f ? 
                 (data[11 /* 10_letter_word */] <0.125f ? 
                    0.0f : 
                    1.0f) : 
                0.0f) : 
            0.0f));
    return pred;
  } // constant pool size = 18B, number of visited nodes = 4, static init size = 0B
}

class log_drf_1_Tree_25_class_20 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.44970703f ? 
         (Double.isNaN(data[4]) || data[4 /* no_of_macs */] <0.5f ? 
             (data[2 /* no_of_characters */] <135.5f ? 
                 (data[0 /* vlan */] <25.5f ? 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.21875f ? 
                        0.97899234f : 
                        0.63062435f) : 
                    0.0f) : 
                 (data[8 /* 7_letter_word */] <0.2578125f ? 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.2376709f ? 
                        0.11868579f : 
                        0.5614203f) : 
                     (data[0 /* vlan */] <33.5f ? 
                        0.27980027f : 
                        0.0f))) : 
            0.0f) : 
         (data[0 /* vlan */] <18.5f ? 
            0.0f : 
             (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.125f ? 
                 (data[1 /* type_of_time */] <4.5f ? 
                    0.0f : 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.125f ? 
                        0.941948f : 
                        0.5750395f)) : 
                 (data[3 /* no_of_ips */] <1.5f ? 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.125f ? 
                        1.0f : 
                        0.0f) : 
                    0.0f))));
    return pred;
  } // constant pool size = 58B, number of visited nodes = 14, static init size = 0B
}

class log_drf_1_Tree_25_class_21 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.24804688f ? 
         (Double.isNaN(data[4]) || data[4 /* no_of_macs */] <0.5f ? 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <215.5f ? 
                 (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.05078125f ? 
                     (data[2 /* no_of_characters */] <162.5f ? 
                        4.391468E-4f : 
                        0.0025338323f) : 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.0625f ? 
                        1.0227563E-4f : 
                        0.0f)) : 
                 (Double.isNaN(data[14]) || data[14 /* 13_letter_word */] <0.0390625f ? 
                     (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.109375f ? 
                        0.0051908395f : 
                        0.056179777f) : 
                    0.0f)) : 
            0.0f) : 
         (data[5 /* 4_letter_word */] <0.28770065f ? 
             (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.1328125f ? 
                 (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.1640625f ? 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <260.5f ? 
                        0.0033324077f : 
                        0.06097561f) : 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <240.5f ? 
                        0.0f : 
                        0.006688963f)) : 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <220.5f ? 
                    0.0f : 
                     (data[2 /* no_of_characters */] <224.5f ? 
                        1.0f : 
                        0.021978023f))) : 
             (Double.isNaN(data[13]) || data[13 /* 12_letter_word */] <0.18359375f ? 
                 (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.15625f ? 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.03125f ? 
                        0.0020728363f : 
                        9.687034E-4f) : 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <33.5f ? 
                        0.0f : 
                        0.048484847f)) : 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <165.5f ? 
                    0.0f : 
                     (data[8 /* 7_letter_word */] <0.296875f ? 
                        0.0f : 
                        1.0f)))));
    return pred;
  } // constant pool size = 86B, number of visited nodes = 21, static init size = 0B
}

class log_drf_1_Tree_25_class_22 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.16015625f ? 
        2.2002563E-5f : 
         (data[0 /* vlan */] <7.5f ? 
             (data[2 /* no_of_characters */] <130.5f ? 
                0.0f : 
                0.5f) : 
            0.0f));
    return pred;
  } // constant pool size = 14B, number of visited nodes = 3, static init size = 0B
}

class log_drf_1_Tree_25_class_23 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.5830078f ? 
         (Double.isNaN(data[4]) || data[4 /* no_of_macs */] <0.5f ? 
             (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.1171875f ? 
                 (data[0 /* vlan */] <17.5f ? 
                     (data[1 /* type_of_time */] <4.5f ? 
                        0.0f : 
                        0.015825914f) : 
                    0.0f) : 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.265625f ? 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.3515625f ? 
                        0.0f : 
                        0.010810811f) : 
                     (data[9 /* 8_letter_word */] <0.13208771f ? 
                        0.0f : 
                        0.9941748f))) : 
            0.0f) : 
         (Double.isNaN(data[0]) || data[0 /* vlan */] <18.5f ? 
            0.9951691f : 
            0.0f));
    return pred;
  } // constant pool size = 38B, number of visited nodes = 9, static init size = 0B
}

class log_drf_1_Tree_25_class_24 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.029785156f ? 
        2.7498465E-5f : 
        0.0f);
    return pred;
  } // constant pool size = 6B, number of visited nodes = 1, static init size = 0B
}

class log_drf_1_Tree_25_class_25 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.94970703f ? 
         (Double.isNaN(data[4]) || data[4 /* no_of_macs */] <0.5f ? 
             (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.44921875f ? 
                 (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.44140625f ? 
                     (Double.isNaN(data[12]) || data[12 /* 11_letter_word */] <0.15625f ? 
                        0.0638259f : 
                        0.88712627f) : 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <125.5f ? 
                        0.0101630315f : 
                        0.5783919f)) : 
                 (data[1 /* type_of_time */] <4.5f ? 
                    0.0f : 
                     (data[2 /* no_of_characters */] <125.5f ? 
                        0.0063626724f : 
                        0.94985753f))) : 
             (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.009765625f ? 
                 (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.07421875f ? 
                    1.0f : 
                     (data[9 /* 8_letter_word */] <0.19729614f ? 
                        0.0f : 
                        1.0f)) : 
                0.0f)) : 
         (data[0 /* vlan */] <28.5f ? 
            0.0f : 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <62.5f ? 
                0.92395437f : 
                0.0f)));
    return pred;
  } // constant pool size = 54B, number of visited nodes = 13, static init size = 0B
}

class log_drf_1_Tree_25_class_26 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.6513672f ? 
        0.0f : 
         (Double.isNaN(data[4]) || data[4 /* no_of_macs */] <0.5f ? 
             (data[2 /* no_of_characters */] <63.0f ? 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <56.5f ? 
                    0.997669f : 
                    0.0f) : 
                0.0f) : 
            0.0f));
    return pred;
  } // constant pool size = 18B, number of visited nodes = 4, static init size = 0B
}

class log_drf_1_Tree_25_class_27 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.49560547f ? 
        0.0f : 
        3.716298E-5f);
    return pred;
  } // constant pool size = 6B, number of visited nodes = 1, static init size = 0B
}

class log_drf_1_Tree_25_class_28 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.12109375f ? 
         (Double.isNaN(data[4]) || data[4 /* no_of_macs */] <0.5f ? 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <494.5f ? 
                0.0f : 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <77.5f ? 
                    1.0f : 
                    0.0f)) : 
            0.0f) : 
         (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <5.5f ? 
             (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.16015625f ? 
                0.0f : 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <430.0f ? 
                    0.0f : 
                     (data[7 /* 6_letter_word */] <0.171875f ? 
                        0.0f : 
                        1.0f))) : 
            1.0f));
    return pred;
  } // constant pool size = 34B, number of visited nodes = 8, static init size = 0B
}

class log_drf_1_Tree_25_class_29 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.51464844f ? 
         (Double.isNaN(data[12]) || data[12 /* 11_letter_word */] <0.032226562f ? 
            0.0f : 
             (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.21484375f ? 
                0.0f : 
                 (data[2 /* no_of_characters */] <564.5f ? 
                    0.0f : 
                    1.0f))) : 
         (data[5 /* 4_letter_word */] <0.5686817f ? 
             (Double.isNaN(data[12]) || data[12 /* 11_letter_word */] <0.009765625f ? 
                0.0f : 
                1.0f) : 
             (Double.isNaN(data[12]) || data[12 /* 11_letter_word */] <0.025390625f ? 
                 (data[1 /* type_of_time */] <4.5f ? 
                    0.0f : 
                     (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.1796875f ? 
                        0.0f : 
                        0.020833334f)) : 
                 (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.09765625f ? 
                    0.0f : 
                    1.0f))));
    return pred;
  } // constant pool size = 42B, number of visited nodes = 10, static init size = 0B
}

class log_drf_1_Tree_25_class_30 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.24804688f ? 
        0.0f : 
         (Double.isNaN(data[12]) || data[12 /* 11_letter_word */] <0.0087890625f ? 
             (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <2.5f ? 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <190.5f ? 
                    0.0f : 
                     (data[1 /* type_of_time */] <1.5f ? 
                        1.0f : 
                        0.0f)) : 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.043945312f ? 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.31054688f ? 
                        0.00882353f : 
                        0.18971062f) : 
                    0.0f)) : 
            0.0f));
    return pred;
  } // constant pool size = 30B, number of visited nodes = 7, static init size = 0B
}

class log_drf_1_Tree_25_class_31 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[15]) || data[15 /* 14_letter_word */] <0.22485352f ? 
         (Double.isNaN(data[15]) || data[15 /* 14_letter_word */] <0.18335223f ? 
             (Double.isNaN(data[13]) || data[13 /* 12_letter_word */] <0.234375f ? 
                 (data[2 /* no_of_characters */] <130.5f ? 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <112.5f ? 
                        0.03269241f : 
                        0.011956839f) : 
                     (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.234375f ? 
                        8.6669554E-4f : 
                        0.008451555f)) : 
                 (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
                    0.0f : 
                     (data[0 /* vlan */] <33.5f ? 
                        0.0f : 
                        1.0f))) : 
             (data[8 /* 7_letter_word */] <0.30078125f ? 
                1.0f : 
                0.0f)) : 
         (data[5 /* 4_letter_word */] <0.125f ? 
            0.0f : 
             (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                1.0f : 
                0.9032258f)));
    return pred;
  } // constant pool size = 46B, number of visited nodes = 11, static init size = 0B
}

class log_drf_1_Tree_25_class_32 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.19091797f ? 
         (Double.isNaN(data[4]) || data[4 /* no_of_macs */] <0.5f ? 
             (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.234375f ? 
                 (data[0 /* vlan */] <33.5f ? 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.4765625f ? 
                        0.0f : 
                        0.002784433f) : 
                    0.0f) : 
                 (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.0625f ? 
                     (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.27026367f ? 
                        0.042895444f : 
                        0.0f) : 
                    0.0f)) : 
            0.0f) : 
         (data[0 /* vlan */] <29.5f ? 
             (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.5488281f ? 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <28.0f ? 
                    0.0f : 
                     (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.37422562f ? 
                        0.0f : 
                        1.0f)) : 
                0.9166667f) : 
            0.0f));
    return pred;
  } // constant pool size = 46B, number of visited nodes = 11, static init size = 0B
}

class log_drf_1_Tree_25_class_33 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.40820312f ? 
         (Double.isNaN(data[4]) || data[4 /* no_of_macs */] <0.5f ? 
             (data[2 /* no_of_characters */] <60.5f ? 
                 (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.2890625f ? 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.6171875f ? 
                        0.0053619305f : 
                        0.6666667f) : 
                    0.1764706f) : 
                 (data[8 /* 7_letter_word */] <0.2578125f ? 
                     (data[2 /* no_of_characters */] <111.5f ? 
                        0.0028563268f : 
                        5.9575228E-5f) : 
                     (data[2 /* no_of_characters */] <111.5f ? 
                        7.410152E-4f : 
                        2.1893336E-5f))) : 
            0.0f) : 
         (data[0 /* vlan */] <3.5f ? 
            1.0f : 
             (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.08984375f ? 
                 (data[1 /* type_of_time */] <4.5f ? 
                    0.0f : 
                     (data[0 /* vlan */] <20.5f ? 
                        0.60655737f : 
                        0.0012363996f)) : 
                 (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.0859375f ? 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.0390625f ? 
                        0.0010958904f : 
                        0.0f) : 
                     (data[0 /* vlan */] <20.5f ? 
                        0.6818182f : 
                        0.0f)))));
    return pred;
  } // constant pool size = 62B, number of visited nodes = 15, static init size = 0B
}

class log_drf_1_Tree_25_class_34 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.123535156f ? 
        0.0f : 
        1.0860711E-4f);
    return pred;
  } // constant pool size = 6B, number of visited nodes = 1, static init size = 0B
}

class log_drf_1_Tree_25_class_35 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.8745117f ? 
        1.1210934E-4f : 
         (data[0 /* vlan */] <18.5f ? 
            0.0018761726f : 
            0.0f));
    return pred;
  } // constant pool size = 10B, number of visited nodes = 2, static init size = 0B
}

class log_drf_1_Tree_25_class_36 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.16015625f ? 
        0.0f : 
        8.78976E-4f);
    return pred;
  } // constant pool size = 6B, number of visited nodes = 1, static init size = 0B
}

class log_drf_1_Tree_25_class_37 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.29296875f ? 
         (Double.isNaN(data[4]) || data[4 /* no_of_macs */] <0.5f ? 
             (data[2 /* no_of_characters */] <160.5f ? 
                 (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.9140625f ? 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <151.0f ? 
                        0.09717315f : 
                        0.3553987f) : 
                     (data[3 /* no_of_ips */] <0.5f ? 
                        0.0894597f : 
                        0.9501909f)) : 
                 (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.2243042f ? 
                        0.98739797f : 
                        0.99765f) : 
                    0.0f)) : 
            0.0f) : 
         (Double.isNaN(data[0]) || data[0 /* vlan */] <151.5f ? 
             (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.05078125f ? 
                 (data[1 /* type_of_time */] <3.5f ? 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <20.5f ? 
                        0.75f : 
                        1.0f) : 
                    0.0f) : 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <240.5f ? 
                     (data[0 /* vlan */] <16.5f ? 
                        0.07692308f : 
                        0.001080497f) : 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.13541667f ? 
                        0.0f : 
                        0.4f))) : 
             (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <375.5f ? 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <179.5f ? 
                        0.9968652f : 
                        1.0f) : 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <385.5f ? 
                        1.0f : 
                        0.5f)) : 
                0.0f)));
    return pred;
  } // constant pool size = 78B, number of visited nodes = 19, static init size = 0B
}

class log_drf_1_Tree_25_class_38 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.94970703f ? 
        5.3063627E-6f : 
        1.7320516E-4f);
    return pred;
  } // constant pool size = 6B, number of visited nodes = 1, static init size = 0B
}


class log_drf_1_Forest_26 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += log_drf_1_Tree_26_class_0.score0(fdata);
    preds[2] += log_drf_1_Tree_26_class_1.score0(fdata);
    preds[3] += log_drf_1_Tree_26_class_2.score0(fdata);
    preds[4] += log_drf_1_Tree_26_class_3.score0(fdata);
    preds[5] += log_drf_1_Tree_26_class_4.score0(fdata);
    preds[6] += log_drf_1_Tree_26_class_5.score0(fdata);
    preds[7] += log_drf_1_Tree_26_class_6.score0(fdata);
    preds[8] += log_drf_1_Tree_26_class_7.score0(fdata);
    preds[9] += log_drf_1_Tree_26_class_8.score0(fdata);
    preds[10] += log_drf_1_Tree_26_class_9.score0(fdata);
    preds[11] += log_drf_1_Tree_26_class_10.score0(fdata);
    preds[12] += log_drf_1_Tree_26_class_11.score0(fdata);
    preds[13] += log_drf_1_Tree_26_class_12.score0(fdata);
    preds[14] += log_drf_1_Tree_26_class_13.score0(fdata);
    preds[15] += log_drf_1_Tree_26_class_14.score0(fdata);
    preds[16] += log_drf_1_Tree_26_class_15.score0(fdata);
    preds[17] += log_drf_1_Tree_26_class_16.score0(fdata);
    preds[18] += log_drf_1_Tree_26_class_17.score0(fdata);
    preds[19] += log_drf_1_Tree_26_class_18.score0(fdata);
    preds[20] += log_drf_1_Tree_26_class_19.score0(fdata);
    preds[21] += log_drf_1_Tree_26_class_20.score0(fdata);
    preds[22] += log_drf_1_Tree_26_class_21.score0(fdata);
    preds[23] += log_drf_1_Tree_26_class_22.score0(fdata);
    preds[24] += log_drf_1_Tree_26_class_23.score0(fdata);
    preds[25] += log_drf_1_Tree_26_class_24.score0(fdata);
    preds[26] += log_drf_1_Tree_26_class_25.score0(fdata);
    preds[27] += log_drf_1_Tree_26_class_26.score0(fdata);
    preds[28] += log_drf_1_Tree_26_class_27.score0(fdata);
    preds[29] += log_drf_1_Tree_26_class_28.score0(fdata);
    preds[30] += log_drf_1_Tree_26_class_29.score0(fdata);
    preds[31] += log_drf_1_Tree_26_class_30.score0(fdata);
    preds[32] += log_drf_1_Tree_26_class_31.score0(fdata);
    preds[33] += log_drf_1_Tree_26_class_32.score0(fdata);
    preds[34] += log_drf_1_Tree_26_class_33.score0(fdata);
    preds[35] += log_drf_1_Tree_26_class_34.score0(fdata);
    preds[36] += log_drf_1_Tree_26_class_35.score0(fdata);
    preds[37] += log_drf_1_Tree_26_class_36.score0(fdata);
    preds[38] += log_drf_1_Tree_26_class_37.score0(fdata);
    preds[39] += log_drf_1_Tree_26_class_38.score0(fdata);
  }
}
class log_drf_1_Tree_26_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0]) || data[0 /* vlan */] <100.0f ? 
        0.0f : 
         (Double.isNaN(data[4]) || data[4 /* no_of_macs */] <0.5f ? 
            0.0f : 
             (data[0 /* vlan */] <114.5f ? 
                1.0f : 
                 (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.1484375f ? 
                    1.0f : 
                    0.5f))));
    return pred;
  } // constant pool size = 18B, number of visited nodes = 4, static init size = 0B
}

class log_drf_1_Tree_26_class_1 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0]) || data[0 /* vlan */] <142.0f ? 
        0.0f : 
         (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.18359375f ? 
             (data[0 /* vlan */] <149.0f ? 
                1.0f : 
                0.0f) : 
            0.0f));
    return pred;
  } // constant pool size = 14B, number of visited nodes = 3, static init size = 0B
}

class log_drf_1_Tree_26_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0]) || data[0 /* vlan */] <181.5f ? 
         (Double.isNaN(data[4]) || data[4 /* no_of_macs */] <3.0f ? 
             (data[2 /* no_of_characters */] <150.5f ? 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <135.5f ? 
                    0.0f : 
                     (data[3 /* no_of_ips */] <0.5f ? 
                        0.104018144f : 
                        1.5422578E-4f)) : 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <1084.5f ? 
                     (data[2 /* no_of_characters */] <165.5f ? 
                        6.7043386E-4f : 
                        3.1200274E-5f) : 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.1953125f ? 
                        0.0f : 
                        0.5f))) : 
            0.2f) : 
         (data[3 /* no_of_ips */] <0.5f ? 
            0.0f : 
             (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.03125f ? 
                 (data[7 /* 6_letter_word */] <0.359375f ? 
                    0.0f : 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <591.0f ? 
                        1.0f : 
                        0.0f)) : 
                1.0f)));
    return pred;
  } // constant pool size = 50B, number of visited nodes = 12, static init size = 0B
}

class log_drf_1_Tree_26_class_3 {
  static final double score0(double[] data) {
    double pred =      (data[0 /* vlan */] <29.5f ? 
         (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.03125f ? 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <28.5f ? 
                0.0f : 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.3203125f ? 
                     (data[6 /* 5_letter_word */] <0.125f ? 
                        0.0f : 
                        1.0f) : 
                    0.0f)) : 
            0.0f) : 
         (data[0 /* vlan */] <156.5f ? 
             (data[1 /* type_of_time */] <4.5f ? 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <148.5f ? 
                    0.0f : 
                    1.0f) : 
                0.0f) : 
            0.0f));
    return pred;
  } // constant pool size = 34B, number of visited nodes = 8, static init size = 0B
}

class log_drf_1_Tree_26_class_4 {
  static final double score0(double[] data) {
    double pred =      (data[0 /* vlan */] <27.5f ? 
         (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.3095703f ? 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <24.5f ? 
                0.0f : 
                 (data[3 /* no_of_ips */] <1.5f ? 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.078125f ? 
                        0.038961038f : 
                        0.125f) : 
                    0.0f)) : 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <24.5f ? 
                0.0f : 
                 (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.16796875f ? 
                    0.0f : 
                     (data[2 /* no_of_characters */] <106.5f ? 
                        0.0f : 
                        1.0f)))) : 
        0.0f);
    return pred;
  } // constant pool size = 34B, number of visited nodes = 8, static init size = 0B
}

class log_drf_1_Tree_26_class_5 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0]) || data[0 /* vlan */] <85.5f ? 
         (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.08691406f ? 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <60.5f ? 
                 (data[3 /* no_of_ips */] <0.5f ? 
                    4.359198E-4f : 
                    0.0f) : 
                 (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.05859375f ? 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <140.5f ? 
                        0.008264462f : 
                        1.0f) : 
                    0.0f)) : 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <64.5f ? 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <37.5f ? 
                    0.0f : 
                     (data[9 /* 8_letter_word */] <0.115448f ? 
                        1.0f : 
                        0.001472754f)) : 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <103.5f ? 
                     (data[9 /* 8_letter_word */] <0.2937851f ? 
                        0.1f : 
                        0.0f) : 
                    1.0f))) : 
        0.0f);
    return pred;
  } // constant pool size = 46B, number of visited nodes = 11, static init size = 0B
}

class log_drf_1_Tree_26_class_6 {
  static final double score0(double[] data) {
    double pred =      (data[1 /* type_of_time */] <4.5f ? 
        0.0f : 
         (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.16210938f ? 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <85.5f ? 
                 (data[0 /* vlan */] <17.5f ? 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.7734375f ? 
                        0.001472995f : 
                        0.22857143f) : 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <37.5f ? 
                        0.0f : 
                        6.540222E-4f)) : 
                 (data[0 /* vlan */] <137.5f ? 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.28125f ? 
                        0.012925969f : 
                        0.8333333f) : 
                    0.0f)) : 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <121.5f ? 
                0.0f : 
                 (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.265625f ? 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <126.5f ? 
                        0.996063f : 
                        0.0f) : 
                    0.0f))));
    return pred;
  } // constant pool size = 46B, number of visited nodes = 11, static init size = 0B
}

class log_drf_1_Tree_26_class_7 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0]) || data[0 /* vlan */] <185.0f ? 
        0.0f : 
         (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.10058594f ? 
             (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.5f ? 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <110.5f ? 
                    0.0f : 
                    0.9878049f) : 
                0.0f) : 
            0.0f));
    return pred;
  } // constant pool size = 18B, number of visited nodes = 4, static init size = 0B
}

class log_drf_1_Tree_26_class_8 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0]) || data[0 /* vlan */] <180.5f ? 
        0.0f : 
         (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.171875f ? 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <186.0f ? 
                 (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.51953125f ? 
                     (data[7 /* 6_letter_word */] <0.203125f ? 
                        0.12128147f : 
                        0.0023781213f) : 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <181.5f ? 
                        0.96899223f : 
                        0.0f)) : 
                0.0f) : 
            0.0f));
    return pred;
  } // constant pool size = 26B, number of visited nodes = 6, static init size = 0B
}

class log_drf_1_Tree_26_class_9 {
  static final double score0(double[] data) {
    double pred =      (data[1 /* type_of_time */] <3.5f ? 
         (data[9 /* 8_letter_word */] <0.18359375f ? 
             (data[0 /* vlan */] <151.5f ? 
                0.0f : 
                 (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.22265625f ? 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <173.5f ? 
                        1.0f : 
                        0.0f) : 
                     (Double.isNaN(data[1]) || data[1 /* type_of_time */] <2.5f ? 
                        0.0f : 
                        1.0f))) : 
             (data[0 /* vlan */] <97.5f ? 
                0.0f : 
                1.0f)) : 
        0.0f);
    return pred;
  } // constant pool size = 30B, number of visited nodes = 7, static init size = 0B
}

class log_drf_1_Tree_26_class_10 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0]) || data[0 /* vlan */] <166.5f ? 
        5.0979834E-6f : 
         (data[0 /* vlan */] <171.0f ? 
             (data[2 /* no_of_characters */] <90.5f ? 
                1.0f : 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.58203125f ? 
                    0.0f : 
                    0.018518519f)) : 
            0.0f));
    return pred;
  } // constant pool size = 18B, number of visited nodes = 4, static init size = 0B
}

class log_drf_1_Tree_26_class_11 {
  static final double score0(double[] data) {
    double pred =     5.0E-6f;
    return pred;
  } // constant pool size = 2B, number of visited nodes = 0, static init size = 0B
}

class log_drf_1_Tree_26_class_12 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0]) || data[0 /* vlan */] <593.5f ? 
        0.0f : 
         (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.43359375f ? 
             (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.69921875f ? 
                0.0f : 
                1.0f) : 
            0.95454544f));
    return pred;
  } // constant pool size = 14B, number of visited nodes = 3, static init size = 0B
}

class log_drf_1_Tree_26_class_13 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0]) || data[0 /* vlan */] <593.5f ? 
         (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.19335938f ? 
             (data[2 /* no_of_characters */] <30.5f ? 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <28.0f ? 
                    1.0f : 
                    0.0f) : 
                0.0f) : 
             (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
                0.0f : 
                 (Double.isNaN(data[4]) || data[4 /* no_of_macs */] <0.5f ? 
                     (data[2 /* no_of_characters */] <60.5f ? 
                        0.9431818f : 
                        0.0011708459f) : 
                    0.0f))) : 
         (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
            0.89615387f : 
             (data[7 /* 6_letter_word */] <0.16796875f ? 
                1.0f : 
                 (data[9 /* 8_letter_word */] <0.43359375f ? 
                    0.05f : 
                    0.0f))));
    return pred;
  } // constant pool size = 42B, number of visited nodes = 10, static init size = 0B
}

class log_drf_1_Tree_26_class_14 {
  static final double score0(double[] data) {
    double pred =      (data[1 /* type_of_time */] <2.5f ? 
         (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.10058594f ? 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <29.5f ? 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.18359375f ? 
                    0.0f : 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <20.5f ? 
                        0.0f : 
                        0.4f)) : 
                0.0f) : 
             (data[2 /* no_of_characters */] <225.5f ? 
                 (data[7 /* 6_letter_word */] <0.1015625f ? 
                    0.0f : 
                    1.0f) : 
                0.0f)) : 
        0.0f);
    return pred;
  } // constant pool size = 30B, number of visited nodes = 7, static init size = 0B
}

class log_drf_1_Tree_26_class_15 {
  static final double score0(double[] data) {
    double pred =      (data[1 /* type_of_time */] <4.5f ? 
        0.0f : 
         (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.59472656f ? 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <29.5f ? 
                0.0f : 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <123.5f ? 
                     (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.2109375f ? 
                        0.020576537f : 
                        0.0f) : 
                     (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.203125f ? 
                        0.02631579f : 
                        0.85f))) : 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <113.5f ? 
                0.0f : 
                 (data[7 /* 6_letter_word */] <0.7087097f ? 
                     (data[7 /* 6_letter_word */] <0.6339718f ? 
                        1.0f : 
                        0.9126214f) : 
                     (data[0 /* vlan */] <154.5f ? 
                        0.4262295f : 
                        0.0f)))));
    return pred;
  } // constant pool size = 42B, number of visited nodes = 10, static init size = 0B
}

class log_drf_1_Tree_26_class_16 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0]) || data[0 /* vlan */] <83.5f ? 
         (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.03125f ? 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <60.5f ? 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <31.0f ? 
                    0.0f : 
                     (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.0546875f ? 
                        0.0043373494f : 
                        0.0f)) : 
                 (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.05859375f ? 
                     (data[2 /* no_of_characters */] <100.5f ? 
                        0.08f : 
                        0.018181818f) : 
                    0.0f)) : 
            0.0f) : 
        0.0f);
    return pred;
  } // constant pool size = 30B, number of visited nodes = 7, static init size = 0B
}

class log_drf_1_Tree_26_class_17 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0]) || data[0 /* vlan */] <180.5f ? 
         (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.0126953125f ? 
             (data[2 /* no_of_characters */] <95.5f ? 
                 (data[0 /* vlan */] <19.0f ? 
                    0.0037453184f : 
                    0.0f) : 
                0.0f) : 
             (data[11 /* 10_letter_word */] <0.033906937f ? 
                 (Double.isNaN(data[14]) || data[14 /* 13_letter_word */] <0.05078125f ? 
                    0.0f : 
                    1.0f) : 
                0.0f)) : 
         (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <3.5f ? 
             (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.02734375f ? 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <187.5f ? 
                     (data[0 /* vlan */] <181.5f ? 
                        0.47840533f : 
                        0.0f) : 
                    0.0f) : 
                0.0f) : 
             (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.43164062f ? 
                 (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.4375f ? 
                     (data[6 /* 5_letter_word */] <0.16860962f ? 
                        0.6666667f : 
                        1.0f) : 
                     (data[3 /* no_of_ips */] <4.5f ? 
                        0.6666667f : 
                        0.0f)) : 
                0.9852941f)));
    return pred;
  } // constant pool size = 58B, number of visited nodes = 14, static init size = 0B
}

class log_drf_1_Tree_26_class_18 {
  static final double score0(double[] data) {
    double pred =      (data[0 /* vlan */] <14.5f ? 
         (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.07421875f ? 
            0.0f : 
             (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <300.5f ? 
                    0.0f : 
                    0.11111111f) : 
                0.0f)) : 
        0.0f);
    return pred;
  } // constant pool size = 18B, number of visited nodes = 4, static init size = 0B
}

class log_drf_1_Tree_26_class_19 {
  static final double score0(double[] data) {
    double pred =      (data[0 /* vlan */] <14.5f ? 
         (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.23535156f ? 
            0.0f : 
            1.0f) : 
        0.0f);
    return pred;
  } // constant pool size = 10B, number of visited nodes = 2, static init size = 0B
}

class log_drf_1_Tree_26_class_20 {
  static final double score0(double[] data) {
    double pred =      (data[0 /* vlan */] <23.5f ? 
         (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.13378906f ? 
             (data[0 /* vlan */] <17.5f ? 
                0.0f : 
                 (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.18359375f ? 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.171875f ? 
                        0.99911505f : 
                        1.0f) : 
                    1.0f)) : 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <17.0f ? 
                0.0f : 
                1.0f)) : 
        0.0f);
    return pred;
  } // constant pool size = 26B, number of visited nodes = 6, static init size = 0B
}

class log_drf_1_Tree_26_class_21 {
  static final double score0(double[] data) {
    double pred =      (data[1 /* type_of_time */] <3.5f ? 
         (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.22460938f ? 
            0.0f : 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <218.0f ? 
                0.0f : 
                1.0f)) : 
         (data[0 /* vlan */] <11.5f ? 
             (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                0.0f : 
                 (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.21484375f ? 
                    0.38636363f : 
                    0.0f)) : 
             (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.15429688f ? 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <220.5f ? 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.3203125f ? 
                        7.6428254E-4f : 
                        0.0026393929f) : 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.03125f ? 
                        0.0064337077f : 
                        4.2325057E-4f)) : 
                 (data[6 /* 5_letter_word */] <0.1171875f ? 
                     (data[3 /* no_of_ips */] <0.5f ? 
                        0.027472528f : 
                        0.0061871614f) : 
                    0.0f))));
    return pred;
  } // constant pool size = 50B, number of visited nodes = 12, static init size = 0B
}

class log_drf_1_Tree_26_class_22 {
  static final double score0(double[] data) {
    double pred =      (data[0 /* vlan */] <5.5f ? 
         (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.083984375f ? 
            0.0f : 
            0.18181819f) : 
         (data[0 /* vlan */] <24.5f ? 
             (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.18359375f ? 
                 (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.015625f ? 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.3203125f ? 
                        0.0f : 
                        7.1851985E-4f) : 
                    0.0f) : 
                0.0f) : 
            0.0f));
    return pred;
  } // constant pool size = 26B, number of visited nodes = 6, static init size = 0B
}

class log_drf_1_Tree_26_class_23 {
  static final double score0(double[] data) {
    double pred =      (data[0 /* vlan */] <14.5f ? 
         (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.5830078f ? 
             (data[3 /* no_of_ips */] <0.5f ? 
                 (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.19010417f ? 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <180.5f ? 
                        0.0023537322f : 
                        0.98796296f) : 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.3359375f ? 
                        0.0f : 
                        1.0f)) : 
                 (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.12890625f ? 
                     (data[3 /* no_of_ips */] <1.5f ? 
                        0.041666668f : 
                        0.0f) : 
                     (data[2 /* no_of_characters */] <410.0f ? 
                        1.0f : 
                        0.0f))) : 
             (data[2 /* no_of_characters */] <123.0f ? 
                0.0f : 
                 (data[8 /* 7_letter_word */] <0.16796875f ? 
                    0.99903476f : 
                    1.0f))) : 
        0.0f);
    return pred;
  } // constant pool size = 46B, number of visited nodes = 11, static init size = 0B
}

class log_drf_1_Tree_26_class_24 {
  static final double score0(double[] data) {
    double pred =      (data[0 /* vlan */] <11.5f ? 
         (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.055664062f ? 
             (data[7 /* 6_letter_word */] <0.046875f ? 
                 (data[5 /* 4_letter_word */] <0.125f ? 
                    0.75f : 
                    0.0f) : 
                0.0f) : 
            0.0f) : 
        0.0f);
    return pred;
  } // constant pool size = 18B, number of visited nodes = 4, static init size = 0B
}

class log_drf_1_Tree_26_class_25 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0]) || data[0 /* vlan */] <41.0f ? 
         (Double.isNaN(data[4]) || data[4 /* no_of_macs */] <0.5f ? 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <25.0f ? 
                0.0f : 
                 (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <1.5f ? 
                     (data[0 /* vlan */] <29.5f ? 
                        0.008748318f : 
                        0.9814044f) : 
                     (data[3 /* no_of_ips */] <2.5f ? 
                        0.8796526f : 
                        0.9996467f))) : 
             (data[3 /* no_of_ips */] <1.5f ? 
                0.0f : 
                1.0f)) : 
         (Double.isNaN(data[0]) || data[0 /* vlan */] <170.5f ? 
            0.0f : 
             (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.02734375f ? 
                 (data[1 /* type_of_time */] <4.5f ? 
                    0.0f : 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <184.5f ? 
                        0.0026155186f : 
                        0.0f)) : 
                 (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                    0.0f : 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.3046875f ? 
                        0.0f : 
                        0.5f)))));
    return pred;
  } // constant pool size = 54B, number of visited nodes = 13, static init size = 0B
}

class log_drf_1_Tree_26_class_26 {
  static final double score0(double[] data) {
    double pred =      (data[0 /* vlan */] <29.5f ? 
         (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.03125f ? 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <28.5f ? 
                0.0f : 
                 (data[2 /* no_of_characters */] <65.5f ? 
                    1.0f : 
                    0.0f)) : 
            0.0f) : 
        0.0f);
    return pred;
  } // constant pool size = 18B, number of visited nodes = 4, static init size = 0B
}

class log_drf_1_Tree_26_class_27 {
  static final double score0(double[] data) {
    double pred =      (data[0 /* vlan */] <14.5f ? 
        1.0068466E-4f : 
        0.0f);
    return pred;
  } // constant pool size = 6B, number of visited nodes = 1, static init size = 0B
}

class log_drf_1_Tree_26_class_28 {
  static final double score0(double[] data) {
    double pred =      (data[0 /* vlan */] <14.5f ? 
         (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.03125f ? 
             (data[3 /* no_of_ips */] <2.5f ? 
                0.0f : 
                1.0f) : 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <432.5f ? 
                0.0f : 
                 (data[3 /* no_of_ips */] <3.5f ? 
                    0.0f : 
                    1.0f))) : 
        0.0f);
    return pred;
  } // constant pool size = 22B, number of visited nodes = 5, static init size = 0B
}

class log_drf_1_Tree_26_class_29 {
  static final double score0(double[] data) {
    double pred =      (data[8 /* 7_letter_word */] <0.04296875f ? 
         (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.024414062f ? 
             (Double.isNaN(data[12]) || data[12 /* 11_letter_word */] <0.025390625f ? 
                 (data[3 /* no_of_ips */] <0.5f ? 
                     (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.1796875f ? 
                        0.0f : 
                        7.6628354E-4f) : 
                    0.0f) : 
                 (data[12 /* 11_letter_word */] <0.1700592f ? 
                    0.5f : 
                    0.0f)) : 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <744.0f ? 
                0.0f : 
                1.0f)) : 
        0.0f);
    return pred;
  } // constant pool size = 30B, number of visited nodes = 7, static init size = 0B
}

class log_drf_1_Tree_26_class_30 {
  static final double score0(double[] data) {
    double pred =      (data[1 /* type_of_time */] <1.5f ? 
        1.0f : 
        0.0f);
    return pred;
  } // constant pool size = 6B, number of visited nodes = 1, static init size = 0B
}

class log_drf_1_Tree_26_class_31 {
  static final double score0(double[] data) {
    double pred =      (data[1 /* type_of_time */] <4.5f ? 
        0.0f : 
         (Double.isNaN(data[13]) || data[13 /* 12_letter_word */] <0.23535156f ? 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <65.5f ? 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <37.0f ? 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <360.5f ? 
                        0.0f : 
                        4.0346984E-4f) : 
                     (Double.isNaN(data[15]) || data[15 /* 14_letter_word */] <0.05078125f ? 
                        0.006707317f : 
                        0.0f)) : 
                 (data[0 /* vlan */] <100.0f ? 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.1328125f ? 
                        0.9693757f : 
                        0.57236844f) : 
                     (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                        0.0f : 
                        6.7704805E-4f))) : 
             (data[0 /* vlan */] <35.5f ? 
                0.0f : 
                0.9882353f)));
    return pred;
  } // constant pool size = 42B, number of visited nodes = 10, static init size = 0B
}

class log_drf_1_Tree_26_class_32 {
  static final double score0(double[] data) {
    double pred =      (data[0 /* vlan */] <29.5f ? 
         (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.41601562f ? 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <28.5f ? 
                 (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.31640625f ? 
                    0.0f : 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <25.0f ? 
                        0.0f : 
                        0.2857143f)) : 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.1953125f ? 
                    0.0f : 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.6719971f ? 
                        1.0f : 
                        0.0f))) : 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <28.0f ? 
                0.0f : 
                1.0f)) : 
        0.0f);
    return pred;
  } // constant pool size = 34B, number of visited nodes = 8, static init size = 0B
}

class log_drf_1_Tree_26_class_33 {
  static final double score0(double[] data) {
    double pred =      (data[0 /* vlan */] <7.5f ? 
         (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.13867188f ? 
            1.0f : 
             (data[8 /* 7_letter_word */] <0.083984375f ? 
                1.0f : 
                0.0f)) : 
         (data[0 /* vlan */] <17.5f ? 
             (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <3.0f ? 
                 (Double.isNaN(data[4]) || data[4 /* no_of_macs */] <1.0f ? 
                     (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <1.5f ? 
                        0.00855281f : 
                        1.0f) : 
                    0.93333334f) : 
                0.0f) : 
             (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.0078125f ? 
                 (data[2 /* no_of_characters */] <40.5f ? 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.6171875f ? 
                        0.0f : 
                        1.0f) : 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.7265625f ? 
                        1.9966582E-4f : 
                        0.0025323578f)) : 
                0.0f)));
    return pred;
  } // constant pool size = 46B, number of visited nodes = 11, static init size = 0B
}

class log_drf_1_Tree_26_class_34 {
  static final double score0(double[] data) {
    double pred =      (data[0 /* vlan */] <10.0f ? 
        0.003058104f : 
         (data[0 /* vlan */] <17.5f ? 
             (data[2 /* no_of_characters */] <120.5f ? 
                 (data[1 /* type_of_time */] <4.5f ? 
                    0.0f : 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.265625f ? 
                        0.0f : 
                        0.5f)) : 
                0.0f) : 
            0.0f));
    return pred;
  } // constant pool size = 22B, number of visited nodes = 5, static init size = 0B
}

class log_drf_1_Tree_26_class_35 {
  static final double score0(double[] data) {
    double pred =      (data[0 /* vlan */] <12.5f ? 
         (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.21582031f ? 
            0.0f : 
             (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.125f ? 
                0.0f : 
                1.0f)) : 
         (data[0 /* vlan */] <14.5f ? 
             (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <1.5f ? 
                 (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.0126953125f ? 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.15625f ? 
                        0.001858736f : 
                        0.005076142f) : 
                    0.0f) : 
                0.0f) : 
            0.0f));
    return pred;
  } // constant pool size = 30B, number of visited nodes = 7, static init size = 0B
}

class log_drf_1_Tree_26_class_36 {
  static final double score0(double[] data) {
    double pred =      (data[0 /* vlan */] <5.5f ? 
         (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.083984375f ? 
            0.0f : 
            0.8181818f) : 
        0.0f);
    return pred;
  } // constant pool size = 10B, number of visited nodes = 2, static init size = 0B
}

class log_drf_1_Tree_26_class_37 {
  static final double score0(double[] data) {
    double pred =      (data[1 /* type_of_time */] <4.5f ? 
         (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.05078125f ? 
             (data[1 /* type_of_time */] <3.5f ? 
                 (data[1 /* type_of_time */] <2.5f ? 
                     (data[1 /* type_of_time */] <1.5f ? 
                        0.0f : 
                        0.97744364f) : 
                    0.0f) : 
                 (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.22265625f ? 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.4453125f ? 
                        0.9986682f : 
                        0.99663866f) : 
                     (data[5 /* 4_letter_word */] <0.27124023f ? 
                        0.988302f : 
                        0.9984178f))) : 
             (data[0 /* vlan */] <165.5f ? 
                 (data[9 /* 8_letter_word */] <0.1015625f ? 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.1f ? 
                        0.9668175f : 
                        0.0f) : 
                     (data[0 /* vlan */] <163.5f ? 
                        1.0f : 
                        0.0f)) : 
                 (data[1 /* type_of_time */] <3.5f ? 
                    0.0f : 
                    1.0f))) : 
         (Double.isNaN(data[0]) || data[0 /* vlan */] <154.5f ? 
             (data[0 /* vlan */] <13.5f ? 
                 (data[5 /* 4_letter_word */] <0.07421875f ? 
                     (data[3 /* no_of_ips */] <0.5f ? 
                        0.083333336f : 
                        0.0f) : 
                    0.0f) : 
                 (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.4765625f ? 
                    0.0f : 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.4296875f ? 
                        0.0f : 
                        0.0012615643f))) : 
             (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.9707031f ? 
                 (data[0 /* vlan */] <172.0f ? 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <166.5f ? 
                        0.69014084f : 
                        0.0f) : 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.03125f ? 
                        0.034177214f : 
                        0.0f)) : 
                 (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <1.0f ? 
                    0.7407407f : 
                    0.0f))));
    return pred;
  } // constant pool size = 98B, number of visited nodes = 24, static init size = 0B
}

class log_drf_1_Tree_26_class_38 {
  static final double score0(double[] data) {
    double pred =      (data[8 /* 7_letter_word */] <0.012207031f ? 
         (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.44921875f ? 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <85.5f ? 
                0.0f : 
                 (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
                    0.0f : 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.0625f ? 
                        4.44247E-4f : 
                        0.0f))) : 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <85.5f ? 
                0.0f : 
                 (data[0 /* vlan */] <112.0f ? 
                    0.14285715f : 
                    0.0f))) : 
        0.0f);
    return pred;
  } // constant pool size = 30B, number of visited nodes = 7, static init size = 0B
}


class log_drf_1_Forest_27 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += log_drf_1_Tree_27_class_0.score0(fdata);
    preds[2] += log_drf_1_Tree_27_class_1.score0(fdata);
    preds[3] += log_drf_1_Tree_27_class_2.score0(fdata);
    preds[4] += log_drf_1_Tree_27_class_3.score0(fdata);
    preds[5] += log_drf_1_Tree_27_class_4.score0(fdata);
    preds[6] += log_drf_1_Tree_27_class_5.score0(fdata);
    preds[7] += log_drf_1_Tree_27_class_6.score0(fdata);
    preds[8] += log_drf_1_Tree_27_class_7.score0(fdata);
    preds[9] += log_drf_1_Tree_27_class_8.score0(fdata);
    preds[10] += log_drf_1_Tree_27_class_9.score0(fdata);
    preds[11] += log_drf_1_Tree_27_class_10.score0(fdata);
    preds[12] += log_drf_1_Tree_27_class_11.score0(fdata);
    preds[13] += log_drf_1_Tree_27_class_12.score0(fdata);
    preds[14] += log_drf_1_Tree_27_class_13.score0(fdata);
    preds[15] += log_drf_1_Tree_27_class_14.score0(fdata);
    preds[16] += log_drf_1_Tree_27_class_15.score0(fdata);
    preds[17] += log_drf_1_Tree_27_class_16.score0(fdata);
    preds[18] += log_drf_1_Tree_27_class_17.score0(fdata);
    preds[19] += log_drf_1_Tree_27_class_18.score0(fdata);
    preds[20] += log_drf_1_Tree_27_class_19.score0(fdata);
    preds[21] += log_drf_1_Tree_27_class_20.score0(fdata);
    preds[22] += log_drf_1_Tree_27_class_21.score0(fdata);
    preds[23] += log_drf_1_Tree_27_class_22.score0(fdata);
    preds[24] += log_drf_1_Tree_27_class_23.score0(fdata);
    preds[25] += log_drf_1_Tree_27_class_24.score0(fdata);
    preds[26] += log_drf_1_Tree_27_class_25.score0(fdata);
    preds[27] += log_drf_1_Tree_27_class_26.score0(fdata);
    preds[28] += log_drf_1_Tree_27_class_27.score0(fdata);
    preds[29] += log_drf_1_Tree_27_class_28.score0(fdata);
    preds[30] += log_drf_1_Tree_27_class_29.score0(fdata);
    preds[31] += log_drf_1_Tree_27_class_30.score0(fdata);
    preds[32] += log_drf_1_Tree_27_class_31.score0(fdata);
    preds[33] += log_drf_1_Tree_27_class_32.score0(fdata);
    preds[34] += log_drf_1_Tree_27_class_33.score0(fdata);
    preds[35] += log_drf_1_Tree_27_class_34.score0(fdata);
    preds[36] += log_drf_1_Tree_27_class_35.score0(fdata);
    preds[37] += log_drf_1_Tree_27_class_36.score0(fdata);
    preds[38] += log_drf_1_Tree_27_class_37.score0(fdata);
    preds[39] += log_drf_1_Tree_27_class_38.score0(fdata);
  }
}
class log_drf_1_Tree_27_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[4]) || data[4 /* no_of_macs */] <2.5f ? 
         (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.01953125f ? 
             (Double.isNaN(data[4]) || data[4 /* no_of_macs */] <0.5f ? 
                0.0f : 
                 (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.07421875f ? 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.34375f ? 
                        0.0f : 
                        0.25f) : 
                    0.0f)) : 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <504.5f ? 
                 (Double.isNaN(data[4]) || data[4 /* no_of_macs */] <1.0f ? 
                    0.0f : 
                    0.045454547f) : 
                 (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.25f ? 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.25f ? 
                        1.0f : 
                        0.6666667f) : 
                    0.0f))) : 
        0.2857143f);
    return pred;
  } // constant pool size = 38B, number of visited nodes = 9, static init size = 0B
}

class log_drf_1_Tree_27_class_1 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.39208984f ? 
         (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
            0.0f : 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <260.5f ? 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.234375f ? 
                    0.0f : 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.0546875f ? 
                        0.0016793893f : 
                        0.0f)) : 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.31640625f ? 
                    0.0f : 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.35471597f ? 
                        0.40625f : 
                        0.0f)))) : 
         (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <257.5f ? 
            0.0f : 
             (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.26674107f ? 
                0.0f : 
                 (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.1328125f ? 
                    0.0f : 
                     (data[0 /* vlan */] <81.5f ? 
                        0.0f : 
                        1.0f)))));
    return pred;
  } // constant pool size = 46B, number of visited nodes = 11, static init size = 0B
}

class log_drf_1_Tree_27_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.49560547f ? 
         (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.7314453f ? 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <181.5f ? 
                 (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.51953125f ? 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.13143158f ? 
                        3.441393E-5f : 
                        0.0033758439f) : 
                    0.0f) : 
                 (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.056142807f ? 
                     (Double.isNaN(data[14]) || data[14 /* 13_letter_word */] <0.125f ? 
                        0.008896797f : 
                        1.0f) : 
                     (data[1 /* type_of_time */] <4.5f ? 
                        0.0f : 
                        0.8888889f))) : 
             (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.12583733f ? 
                 (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                     (data[2 /* no_of_characters */] <109.5f ? 
                        0.475f : 
                        0.003976143f) : 
                     (data[7 /* 6_letter_word */] <0.9277344f ? 
                        0.0f : 
                        0.4755245f)) : 
                0.5294118f)) : 
         (data[2 /* no_of_characters */] <158.5f ? 
             (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.15429688f ? 
                 (Double.isNaN(data[12]) || data[12 /* 11_letter_word */] <0.25f ? 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <178.5f ? 
                        0.023056518f : 
                        0.9123867f) : 
                    0.0f) : 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.2890625f ? 
                    0.0f : 
                    0.33333334f)) : 
             (Double.isNaN(data[4]) || data[4 /* no_of_macs */] <0.5f ? 
                 (data[8 /* 7_letter_word */] <0.013671875f ? 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.4609375f ? 
                        0.0f : 
                        0.06410257f) : 
                    0.0f) : 
                0.0f)));
    return pred;
  } // constant pool size = 82B, number of visited nodes = 20, static init size = 0B
}

class log_drf_1_Tree_27_class_3 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.39208984f ? 
         (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.35351562f ? 
             (data[2 /* no_of_characters */] <105.5f ? 
                 (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.10080719f ? 
                     (data[1 /* type_of_time */] <4.5f ? 
                        0.019736841f : 
                        0.0f) : 
                    0.0f) : 
                 (data[8 /* 7_letter_word */] <0.2578125f ? 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.2376709f ? 
                        0.0f : 
                        9.90099E-4f) : 
                    0.0f)) : 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <295.5f ? 
                0.0f : 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <321.0f ? 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.1953125f ? 
                        1.0f : 
                        0.0f) : 
                    0.0f))) : 
         (data[2 /* no_of_characters */] <158.5f ? 
             (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.22460938f ? 
                0.0f : 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.05859375f ? 
                     (data[2 /* no_of_characters */] <138.5f ? 
                        0.0f : 
                        0.97411096f) : 
                    0.0f)) : 
             (Double.isNaN(data[4]) || data[4 /* no_of_macs */] <0.5f ? 
                 (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.38671875f ? 
                    0.0f : 
                     (data[0 /* vlan */] <33.5f ? 
                        0.1627907f : 
                        0.0f)) : 
                0.0f)));
    return pred;
  } // constant pool size = 70B, number of visited nodes = 17, static init size = 0B
}

class log_drf_1_Tree_27_class_4 {
  static final double score0(double[] data) {
    double pred =      (data[1 /* type_of_time */] <4.5f ? 
        0.0f : 
         (data[3 /* no_of_ips */] <0.5f ? 
             (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.31640625f ? 
                 (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.83203125f ? 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.4609375f ? 
                        0.0f : 
                        1.6809547E-4f) : 
                    4.3744533E-4f) : 
                 (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.2890625f ? 
                    0.0f : 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.171875f ? 
                        0.0f : 
                        1.0f))) : 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <165.5f ? 
                0.0f : 
                 (data[2 /* no_of_characters */] <173.5f ? 
                     (data[5 /* 4_letter_word */] <0.3125f ? 
                        0.011904762f : 
                        0.0f) : 
                    0.0f))));
    return pred;
  } // constant pool size = 42B, number of visited nodes = 10, static init size = 0B
}

class log_drf_1_Tree_27_class_5 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.27929688f ? 
         (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.4716797f ? 
             (data[2 /* no_of_characters */] <95.5f ? 
                 (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.125f ? 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.12528992f ? 
                        0.0f : 
                        0.025f) : 
                    0.0f) : 
                0.0f) : 
             (data[2 /* no_of_characters */] <110.5f ? 
                 (data[9 /* 8_letter_word */] <0.37109375f ? 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <57.5f ? 
                        0.0f : 
                        0.04761905f) : 
                    0.0f) : 
                0.0f)) : 
         (data[5 /* 4_letter_word */] <0.30885696f ? 
             (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.21679688f ? 
                 (data[2 /* no_of_characters */] <130.5f ? 
                    0.5f : 
                    0.0f) : 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.07254464f ? 
                     (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.0390625f ? 
                        0.0f : 
                        1.0f) : 
                    0.0f)) : 
             (Double.isNaN(data[4]) || data[4 /* no_of_macs */] <0.5f ? 
                 (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.0859375f ? 
                     (data[2 /* no_of_characters */] <148.5f ? 
                        8.032845E-4f : 
                        0.0f) : 
                     (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.1328125f ? 
                        0.0012217032f : 
                        0.019130435f)) : 
                0.0f)));
    return pred;
  } // constant pool size = 70B, number of visited nodes = 17, static init size = 0B
}

class log_drf_1_Tree_27_class_6 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.24804688f ? 
         (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.9277344f ? 
             (data[2 /* no_of_characters */] <70.5f ? 
                 (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.125f ? 
                     (data[0 /* vlan */] <154.5f ? 
                        0.9285714f : 
                        0.0f) : 
                    0.0f) : 
                 (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.83203125f ? 
                    0.0f : 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <81.5f ? 
                        0.0f : 
                        0.11111111f))) : 
             (data[2 /* no_of_characters */] <40.5f ? 
                0.8f : 
                0.0f)) : 
         (data[2 /* no_of_characters */] <98.5f ? 
             (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.1015625f ? 
                 (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.1015625f ? 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.2890625f ? 
                        0.0027203483f : 
                        0.09172078f) : 
                     (data[7 /* 6_letter_word */] <0.125f ? 
                        0.6666667f : 
                        1.0f)) : 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.1015625f ? 
                    0.0f : 
                     (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <1.0f ? 
                        0.939759f : 
                        0.0f))) : 
             (Double.isNaN(data[12]) || data[12 /* 11_letter_word */] <0.009765625f ? 
                 (data[8 /* 7_letter_word */] <0.2607422f ? 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.15481567f ? 
                        0.0f : 
                        0.030120483f) : 
                    0.0f) : 
                0.0f)));
    return pred;
  } // constant pool size = 74B, number of visited nodes = 18, static init size = 0B
}

class log_drf_1_Tree_27_class_7 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.94970703f ? 
        0.0f : 
         (data[1 /* type_of_time */] <4.5f ? 
            0.0f : 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <165.5f ? 
                 (data[3 /* no_of_ips */] <0.5f ? 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <154.5f ? 
                        0.0011086474f : 
                        0.20183486f) : 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <138.0f ? 
                        0.0f : 
                        1.0f)) : 
                 (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <1.5f ? 
                    0.0f : 
                     (data[3 /* no_of_ips */] <2.5f ? 
                        1.0f : 
                        0.0f)))));
    return pred;
  } // constant pool size = 34B, number of visited nodes = 8, static init size = 0B
}

class log_drf_1_Tree_27_class_8 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.53759766f ? 
         (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
            0.0f : 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <893.5f ? 
                 (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.056699753f ? 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.0859375f ? 
                        1.7827695E-4f : 
                        0.0f) : 
                    0.0f) : 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.015625f ? 
                     (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.203125f ? 
                        0.3043478f : 
                        0.0f) : 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.37890625f ? 
                        0.0f : 
                        0.5f)))) : 
         (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <759.0f ? 
            0.0f : 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <946.5f ? 
                1.0f : 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.04185268f ? 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.09375f ? 
                        0.13636364f : 
                        0.0f) : 
                    1.0f))));
    return pred;
  } // constant pool size = 50B, number of visited nodes = 12, static init size = 0B
}

class log_drf_1_Tree_27_class_9 {
  static final double score0(double[] data) {
    double pred =      (data[1 /* type_of_time */] <3.5f ? 
         (data[1 /* type_of_time */] <2.5f ? 
            0.0f : 
             (Double.isNaN(data[12]) || data[12 /* 11_letter_word */] <0.125f ? 
                 (data[3 /* no_of_ips */] <1.5f ? 
                     (data[2 /* no_of_characters */] <260.5f ? 
                        1.0f : 
                        0.0f) : 
                    1.0f) : 
                0.0f)) : 
        0.0f);
    return pred;
  } // constant pool size = 22B, number of visited nodes = 5, static init size = 0B
}

class log_drf_1_Tree_27_class_10 {
  static final double score0(double[] data) {
    double pred =      (data[1 /* type_of_time */] <4.5f ? 
        0.0f : 
         (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <1.5f ? 
             (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.47070312f ? 
                 (data[2 /* no_of_characters */] <100.5f ? 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.578125f ? 
                        0.0f : 
                        0.0234375f) : 
                    0.0f) : 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.4140625f ? 
                    0.0f : 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <98.5f ? 
                        0.0f : 
                        0.5f))) : 
            0.0f));
    return pred;
  } // constant pool size = 30B, number of visited nodes = 7, static init size = 0B
}

class log_drf_1_Tree_27_class_11 {
  static final double score0(double[] data) {
    double pred =     5.0E-6f;
    return pred;
  } // constant pool size = 2B, number of visited nodes = 0, static init size = 0B
}

class log_drf_1_Tree_27_class_12 {
  static final double score0(double[] data) {
    double pred =      (data[1 /* type_of_time */] <4.5f ? 
        0.0f : 
         (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.055664062f ? 
             (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.9277344f ? 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <529.5f ? 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.1015625f ? 
                        3.5606197E-4f : 
                        0.0f) : 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <589.0f ? 
                        0.0f : 
                        1.0f)) : 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <589.0f ? 
                    0.0f : 
                    0.95238096f)) : 
            0.0f));
    return pred;
  } // constant pool size = 30B, number of visited nodes = 7, static init size = 0B
}

class log_drf_1_Tree_27_class_13 {
  static final double score0(double[] data) {
    double pred =      (data[1 /* type_of_time */] <4.5f ? 
        0.0f : 
         (data[3 /* no_of_ips */] <0.5f ? 
             (data[2 /* no_of_characters */] <55.5f ? 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.2890625f ? 
                     (data[0 /* vlan */] <581.0f ? 
                        0.9541985f : 
                        0.8754717f) : 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <33.5f ? 
                        0.0f : 
                        0.25f)) : 
                 (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.19140625f ? 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.0625f ? 
                        7.671065E-5f : 
                        0.0f) : 
                     (data[9 /* 8_letter_word */] <0.21035767f ? 
                        0.104166664f : 
                        0.0f))) : 
            0.0f));
    return pred;
  } // constant pool size = 38B, number of visited nodes = 9, static init size = 0B
}

class log_drf_1_Tree_27_class_14 {
  static final double score0(double[] data) {
    double pred =      (data[1 /* type_of_time */] <2.5f ? 
         (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.10058594f ? 
             (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.18359375f ? 
                0.0f : 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.18359375f ? 
                    0.0f : 
                     (data[8 /* 7_letter_word */] <0.22561646f ? 
                        0.5f : 
                        0.0f))) : 
             (Double.isNaN(data[12]) || data[12 /* 11_letter_word */] <0.1015625f ? 
                0.0f : 
                1.0f)) : 
        0.0f);
    return pred;
  } // constant pool size = 26B, number of visited nodes = 6, static init size = 0B
}

class log_drf_1_Tree_27_class_15 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.94970703f ? 
         (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.59472656f ? 
             (data[0 /* vlan */] <141.5f ? 
                 (Double.isNaN(data[15]) || data[15 /* 14_letter_word */] <0.10546875f ? 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.3159485f ? 
                        0.0012614465f : 
                        0.009863259f) : 
                     (data[0 /* vlan */] <34.0f ? 
                        0.0f : 
                        0.052980132f)) : 
                0.0f) : 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <210.5f ? 
                 (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.0625f ? 
                     (data[1 /* type_of_time */] <4.5f ? 
                        0.0f : 
                        0.004756871f) : 
                    0.0f) : 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.18359375f ? 
                     (data[1 /* type_of_time */] <4.5f ? 
                        0.0f : 
                        0.35119048f) : 
                     (data[7 /* 6_letter_word */] <0.63272095f ? 
                        1.0f : 
                        0.98039216f)))) : 
         (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <100.5f ? 
             (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <2.5f ? 
                0.13109756f : 
                0.0f) : 
            0.0f));
    return pred;
  } // constant pool size = 58B, number of visited nodes = 14, static init size = 0B
}

class log_drf_1_Tree_27_class_16 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.94970703f ? 
         (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
            0.0f : 
             (data[2 /* no_of_characters */] <115.5f ? 
                 (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.2890625f ? 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.15625f ? 
                        8.6437896E-5f : 
                        7.541478E-4f) : 
                    0.004761905f) : 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.46875f ? 
                     (data[2 /* no_of_characters */] <149.5f ? 
                        5.2416395E-5f : 
                        0.0f) : 
                     (Double.isNaN(data[4]) || data[4 /* no_of_macs */] <0.5f ? 
                        4.6360685E-4f : 
                        0.0f)))) : 
         (data[2 /* no_of_characters */] <80.5f ? 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <79.5f ? 
                0.0f : 
                0.8f) : 
             (data[3 /* no_of_ips */] <0.5f ? 
                 (data[2 /* no_of_characters */] <103.5f ? 
                     (data[0 /* vlan */] <17.5f ? 
                        0.0f : 
                        0.01923077f) : 
                    0.0f) : 
                0.0f)));
    return pred;
  } // constant pool size = 54B, number of visited nodes = 13, static init size = 0B
}

class log_drf_1_Tree_27_class_17 {
  static final double score0(double[] data) {
    double pred =      (data[1 /* type_of_time */] <4.5f ? 
        1.01495025E-5f : 
         (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.018554688f ? 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <659.5f ? 
                0.0f : 
                 (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.23828125f ? 
                     (data[2 /* no_of_characters */] <723.0f ? 
                        1.0f : 
                        0.40520447f) : 
                    1.0f)) : 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <173.5f ? 
                 (Double.isNaN(data[14]) || data[14 /* 13_letter_word */] <0.052734375f ? 
                    0.0f : 
                     (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.015625f ? 
                        0.0f : 
                        1.0f)) : 
                 (data[7 /* 6_letter_word */] <0.36359406f ? 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <978.5f ? 
                        0.0f : 
                        0.88461536f) : 
                     (data[5 /* 4_letter_word */] <0.0625f ? 
                        0.068627454f : 
                        0.0f)))));
    return pred;
  } // constant pool size = 46B, number of visited nodes = 11, static init size = 0B
}

class log_drf_1_Tree_27_class_18 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.4580078f ? 
        0.0f : 
        1.8580107E-5f);
    return pred;
  } // constant pool size = 6B, number of visited nodes = 1, static init size = 0B
}

class log_drf_1_Tree_27_class_19 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.24804688f ? 
         (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.19726562f ? 
            0.0f : 
             (data[2 /* no_of_characters */] <140.5f ? 
                 (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.15625f ? 
                    0.0f : 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.18409729f ? 
                        0.0f : 
                        0.5f)) : 
                0.0f)) : 
         (data[5 /* 4_letter_word */] <0.2561245f ? 
             (data[2 /* no_of_characters */] <137.5f ? 
                 (data[11 /* 10_letter_word */] <0.125f ? 
                    0.0f : 
                     (data[3 /* no_of_ips */] <0.5f ? 
                        0.0f : 
                        0.92941177f)) : 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.18359375f ? 
                    0.0f : 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.1796875f ? 
                        0.0f : 
                        0.16949153f))) : 
            0.0f));
    return pred;
  } // constant pool size = 46B, number of visited nodes = 11, static init size = 0B
}

class log_drf_1_Tree_27_class_20 {
  static final double score0(double[] data) {
    double pred =      (data[1 /* type_of_time */] <4.5f ? 
        0.0f : 
         (data[3 /* no_of_ips */] <0.5f ? 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <135.5f ? 
                 (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.44921875f ? 
                     (data[2 /* no_of_characters */] <70.5f ? 
                        0.008024072f : 
                        0.859752f) : 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <33.5f ? 
                        0.9915795f : 
                        0.0f)) : 
                 (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.22265625f ? 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.515625f ? 
                        0.3499452f : 
                        0.9804878f) : 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.0625f ? 
                        0.61132437f : 
                        1.0f))) : 
             (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.07421875f ? 
                 (data[5 /* 4_letter_word */] <0.05859375f ? 
                     (data[3 /* no_of_ips */] <1.5f ? 
                        0.5569801f : 
                        0.0f) : 
                     (data[0 /* vlan */] <17.5f ? 
                        0.0f : 
                        0.004927794f)) : 
                 (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.05859375f ? 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.171875f ? 
                        0.0f : 
                        0.88641423f) : 
                     (data[3 /* no_of_ips */] <1.5f ? 
                        0.0f : 
                        0.8702957f)))));
    return pred;
  } // constant pool size = 66B, number of visited nodes = 16, static init size = 0B
}

class log_drf_1_Tree_27_class_21 {
  static final double score0(double[] data) {
    double pred =      (data[1 /* type_of_time */] <3.5f ? 
         (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.22460938f ? 
            0.0f : 
             (Double.isNaN(data[12]) || data[12 /* 11_letter_word */] <0.125f ? 
                0.0f : 
                1.0f)) : 
         (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <215.5f ? 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <162.5f ? 
                 (Double.isNaN(data[4]) || data[4 /* no_of_macs */] <0.5f ? 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.2890625f ? 
                        1.6558004E-4f : 
                        0.0038395904f) : 
                    0.0f) : 
                 (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.0625f ? 
                     (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.1796875f ? 
                        0.0017576475f : 
                        0.037209302f) : 
                     (data[8 /* 7_letter_word */] <0.3671875f ? 
                        0.0012489072f : 
                        0.0f))) : 
             (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.15429688f ? 
                 (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.15625f ? 
                     (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
                        0.0047192643f : 
                        0.013422819f) : 
                     (data[0 /* vlan */] <17.5f ? 
                        1.0f : 
                        0.038720537f)) : 
                 (data[2 /* no_of_characters */] <261.5f ? 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <252.5f ? 
                        0.0f : 
                        0.012987013f) : 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.13020833f ? 
                        0.0f : 
                        0.0032786885f)))));
    return pred;
  } // constant pool size = 70B, number of visited nodes = 17, static init size = 0B
}

class log_drf_1_Tree_27_class_22 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.49560547f ? 
         (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.4765625f ? 
            0.0f : 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <325.5f ? 
                0.0f : 
                0.006060606f)) : 
         (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <227.5f ? 
             (data[2 /* no_of_characters */] <131.5f ? 
                 (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.07421875f ? 
                     (data[0 /* vlan */] <17.5f ? 
                        0.008720931f : 
                        0.0f) : 
                    0.0f) : 
                0.0f) : 
             (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.31640625f ? 
                0.0f : 
                 (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.6328125f ? 
                    0.0f : 
                     (data[1 /* type_of_time */] <3.0f ? 
                        0.0f : 
                        0.051282052f)))));
    return pred;
  } // constant pool size = 42B, number of visited nodes = 10, static init size = 0B
}

class log_drf_1_Tree_27_class_23 {
  static final double score0(double[] data) {
    double pred =      (data[1 /* type_of_time */] <4.5f ? 
        0.0f : 
         (data[3 /* no_of_ips */] <0.5f ? 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <135.5f ? 
                 (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.83203125f ? 
                    0.0f : 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <133.5f ? 
                        0.0f : 
                        0.61538464f)) : 
                 (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.1328125f ? 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.578125f ? 
                        0.0050536175f : 
                        0.97930706f) : 
                     (data[8 /* 7_letter_word */] <0.265625f ? 
                        0.0f : 
                        0.9794118f))) : 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <220.5f ? 
                0.0f : 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.69140625f ? 
                     (data[5 /* 4_letter_word */] <0.0625f ? 
                        0.022801302f : 
                        0.0f) : 
                     (data[6 /* 5_letter_word */] <0.078125f ? 
                        0.0f : 
                        0.6545454f)))));
    return pred;
  } // constant pool size = 50B, number of visited nodes = 12, static init size = 0B
}

class log_drf_1_Tree_27_class_24 {
  static final double score0(double[] data) {
    double pred =      (data[1 /* type_of_time */] <4.5f ? 
        0.0f : 
         (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.055664062f ? 
             (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.025390625f ? 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <140.5f ? 
                    0.0f : 
                     (data[3 /* no_of_ips */] <1.5f ? 
                        0.0016111708f : 
                        0.0f)) : 
                0.0f) : 
            0.0f));
    return pred;
  } // constant pool size = 22B, number of visited nodes = 5, static init size = 0B
}

class log_drf_1_Tree_27_class_25 {
  static final double score0(double[] data) {
    double pred =      (data[1 /* type_of_time */] <4.5f ? 
        0.0f : 
         (data[3 /* no_of_ips */] <0.5f ? 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <155.5f ? 
                 (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.44921875f ? 
                     (Double.isNaN(data[15]) || data[15 /* 14_letter_word */] <0.052083332f ? 
                        0.038952783f : 
                        0.5826087f) : 
                    0.0f) : 
                 (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.01171875f ? 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.46875f ? 
                        0.4596706f : 
                        0.74880385f) : 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.2265625f ? 
                        0.010608204f : 
                        0.03529412f))) : 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <240.5f ? 
                 (data[5 /* 4_letter_word */] <0.07421875f ? 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.9140625f ? 
                        0.9404709f : 
                        0.010526316f) : 
                     (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <2.5f ? 
                        0.49928337f : 
                        0.99343884f)) : 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.4609375f ? 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <17.5f ? 
                        0.0f : 
                        0.050847456f) : 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <17.5f ? 
                        0.0f : 
                        0.60714287f)))));
    return pred;
  } // constant pool size = 62B, number of visited nodes = 15, static init size = 0B
}

class log_drf_1_Tree_27_class_26 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.6513672f ? 
        0.0f : 
         (data[1 /* type_of_time */] <4.5f ? 
            0.0f : 
             (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.042317707f ? 
                 (data[3 /* no_of_ips */] <0.5f ? 
                     (data[2 /* no_of_characters */] <60.5f ? 
                        0.99311924f : 
                        0.0f) : 
                    0.0f) : 
                0.0f)));
    return pred;
  } // constant pool size = 22B, number of visited nodes = 5, static init size = 0B
}

class log_drf_1_Tree_27_class_27 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.49560547f ? 
        0.0f : 
         (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.22460938f ? 
            0.0f : 
             (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.20703125f ? 
                0.0f : 
                0.015873017f)));
    return pred;
  } // constant pool size = 14B, number of visited nodes = 3, static init size = 0B
}

class log_drf_1_Tree_27_class_28 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[14]) || data[14 /* 13_letter_word */] <0.09814453f ? 
         (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.19726562f ? 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <489.5f ? 
                0.0f : 
                 (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.1328125f ? 
                    0.0f : 
                     (data[6 /* 5_letter_word */] <0.1484375f ? 
                        0.0f : 
                        0.36363637f))) : 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <444.5f ? 
                0.0f : 
                 (Double.isNaN(data[4]) || data[4 /* no_of_macs */] <0.5f ? 
                     (data[5 /* 4_letter_word */] <0.234375f ? 
                        0.0f : 
                        0.99020344f) : 
                    0.0f))) : 
         (data[2 /* no_of_characters */] <396.0f ? 
            0.0f : 
            1.0f));
    return pred;
  } // constant pool size = 38B, number of visited nodes = 9, static init size = 0B
}

class log_drf_1_Tree_27_class_29 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.51464844f ? 
         (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.08496094f ? 
            0.0f : 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <953.5f ? 
                0.0f : 
                 (Double.isNaN(data[12]) || data[12 /* 11_letter_word */] <0.02734375f ? 
                    0.0f : 
                     (data[7 /* 6_letter_word */] <0.15644836f ? 
                        1.0f : 
                        0.0f)))) : 
         (data[5 /* 4_letter_word */] <0.5686817f ? 
             (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.5610885f ? 
                 (data[7 /* 6_letter_word */] <0.0625f ? 
                    0.2f : 
                    0.0f) : 
                1.0f) : 
             (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.025390625f ? 
                 (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.77423185f ? 
                    0.0f : 
                     (data[3 /* no_of_ips */] <0.5f ? 
                        9.90099E-4f : 
                        0.0f)) : 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <396.0f ? 
                    0.0f : 
                     (data[3 /* no_of_ips */] <1.5f ? 
                        0.33333334f : 
                        0.0f)))));
    return pred;
  } // constant pool size = 54B, number of visited nodes = 13, static init size = 0B
}

class log_drf_1_Tree_27_class_30 {
  static final double score0(double[] data) {
    double pred =      (data[1 /* type_of_time */] <1.5f ? 
        1.0f : 
        0.0f);
    return pred;
  } // constant pool size = 6B, number of visited nodes = 1, static init size = 0B
}

class log_drf_1_Tree_27_class_31 {
  static final double score0(double[] data) {
    double pred =      (data[1 /* type_of_time */] <4.5f ? 
        0.0f : 
         (Double.isNaN(data[15]) || data[15 /* 14_letter_word */] <0.22460938f ? 
             (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.234375f ? 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <65.5f ? 
                     (Double.isNaN(data[4]) || data[4 /* no_of_macs */] <1.5f ? 
                        3.1412838E-4f : 
                        0.002052545f) : 
                     (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.4140625f ? 
                        0.18846154f : 
                        1.0f)) : 
                 (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.30859375f ? 
                    0.0f : 
                     (data[7 /* 6_letter_word */] <0.2890625f ? 
                        0.5714286f : 
                        0.74358976f))) : 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <118.0f ? 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.125f ? 
                    1.0f : 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <102.0f ? 
                        1.0f : 
                        0.84210527f)) : 
                0.0f)));
    return pred;
  } // constant pool size = 46B, number of visited nodes = 11, static init size = 0B
}

class log_drf_1_Tree_27_class_32 {
  static final double score0(double[] data) {
    double pred =      (data[1 /* type_of_time */] <4.5f ? 
        0.0f : 
         (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <1.5f ? 
             (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.47070312f ? 
                 (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.4140625f ? 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.234375f ? 
                        0.0f : 
                        0.002722632f) : 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.25f ? 
                        0.0f : 
                        0.5319149f)) : 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <25.5f ? 
                    0.0f : 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.63197327f ? 
                        0.0626186f : 
                        0.0f))) : 
            0.0f));
    return pred;
  } // constant pool size = 34B, number of visited nodes = 8, static init size = 0B
}

class log_drf_1_Tree_27_class_33 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.40820312f ? 
         (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.4716797f ? 
             (data[0 /* vlan */] <9.5f ? 
                 (data[6 /* 5_letter_word */] <0.234375f ? 
                    0.6666667f : 
                     (data[9 /* 8_letter_word */] <0.125f ? 
                        1.0f : 
                        0.0f)) : 
                 (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.24874878f ? 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.96875f ? 
                        3.512901E-5f : 
                        3.2562684E-4f) : 
                     (data[1 /* type_of_time */] <4.5f ? 
                        0.0f : 
                        7.228418E-4f))) : 
             (data[2 /* no_of_characters */] <85.5f ? 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <77.0f ? 
                     (data[0 /* vlan */] <17.5f ? 
                        0.2f : 
                        0.0f) : 
                    1.0f) : 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.527401f ? 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.1015625f ? 
                        2.7027028E-4f : 
                        0.0f) : 
                    0.0f))) : 
         (data[2 /* no_of_characters */] <70.5f ? 
            0.1875f : 
             (Double.isNaN(data[4]) || data[4 /* no_of_macs */] <1.5f ? 
                 (data[5 /* 4_letter_word */] <0.4235026f ? 
                    1.0f : 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.046875f ? 
                        0.0015412476f : 
                        0.008047972f)) : 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.046875f ? 
                    0.0f : 
                    1.0f))));
    return pred;
  } // constant pool size = 74B, number of visited nodes = 18, static init size = 0B
}

class log_drf_1_Tree_27_class_34 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.24804688f ? 
        0.0f : 
         (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.123046875f ? 
            0.0f : 
             (data[2 /* no_of_characters */] <120.5f ? 
                 (data[0 /* vlan */] <17.5f ? 
                     (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.2210083f ? 
                        0.11111111f : 
                        0.0f) : 
                    0.0f) : 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <212.5f ? 
                    0.0f : 
                     (Double.isNaN(data[12]) || data[12 /* 11_letter_word */] <0.015625f ? 
                        0.0015082957f : 
                        0.0f)))));
    return pred;
  } // constant pool size = 30B, number of visited nodes = 7, static init size = 0B
}

class log_drf_1_Tree_27_class_35 {
  static final double score0(double[] data) {
    double pred =      (data[1 /* type_of_time */] <4.5f ? 
        0.0f : 
         (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <1.5f ? 
             (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.01953125f ? 
                 (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.22265625f ? 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.828125f ? 
                        3.3599327E-4f : 
                        8.628128E-4f) : 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.125f ? 
                        0.0f : 
                        0.005791506f)) : 
                 (data[0 /* vlan */] <17.5f ? 
                     (data[7 /* 6_letter_word */] <0.27996826f ? 
                        0.0014684288f : 
                        0.0f) : 
                    0.0f)) : 
            0.0f));
    return pred;
  } // constant pool size = 34B, number of visited nodes = 8, static init size = 0B
}

class log_drf_1_Tree_27_class_36 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.49560547f ? 
        0.0f : 
         (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.15527344f ? 
            0.0f : 
             (data[2 /* no_of_characters */] <135.5f ? 
                 (data[10 /* 9_letter_word */] <0.18355179f ? 
                     (data[2 /* no_of_characters */] <130.0f ? 
                        1.0f : 
                        0.72727275f) : 
                    0.0f) : 
                0.0f)));
    return pred;
  } // constant pool size = 22B, number of visited nodes = 5, static init size = 0B
}

class log_drf_1_Tree_27_class_37 {
  static final double score0(double[] data) {
    double pred =      (data[1 /* type_of_time */] <4.5f ? 
         (data[1 /* type_of_time */] <3.5f ? 
             (data[0 /* vlan */] <83.5f ? 
                 (Double.isNaN(data[12]) || data[12 /* 11_letter_word */] <0.171875f ? 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <28.5f ? 
                        0.984252f : 
                        0.9f) : 
                    0.0f) : 
                 (data[3 /* no_of_ips */] <1.5f ? 
                     (data[1 /* type_of_time */] <2.5f ? 
                        1.0f : 
                        0.0f) : 
                    0.0f)) : 
             (data[0 /* vlan */] <165.5f ? 
                 (data[6 /* 5_letter_word */] <0.0859375f ? 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.0625f ? 
                        0.9931741f : 
                        1.0f) : 
                    1.0f) : 
                 (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.0625f ? 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.21875f ? 
                        0.99784327f : 
                        0.9936306f) : 
                     (Double.isNaN(data[14]) || data[14 /* 13_letter_word */] <0.12760417f ? 
                        0.99933493f : 
                        1.0f)))) : 
         (Double.isNaN(data[12]) || data[12 /* 11_letter_word */] <0.74902344f ? 
             (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.056640625f ? 
                 (Double.isNaN(data[13]) || data[13 /* 12_letter_word */] <0.07421875f ? 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.96875f ? 
                        0.0028378237f : 
                        0.011682243f) : 
                    0.0f) : 
                 (data[2 /* no_of_characters */] <80.5f ? 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.125f ? 
                        0.0026041667f : 
                        0.0f) : 
                    0.0f)) : 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <95.5f ? 
                0.0f : 
                1.0f)));
    return pred;
  } // constant pool size = 82B, number of visited nodes = 20, static init size = 0B
}

class log_drf_1_Tree_27_class_38 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.94970703f ? 
         (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.4716797f ? 
            0.0f : 
             (data[2 /* no_of_characters */] <95.5f ? 
                 (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.37109375f ? 
                    0.0f : 
                    0.125f) : 
                0.0f)) : 
         (data[2 /* no_of_characters */] <90.5f ? 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <88.5f ? 
                0.0f : 
                 (data[3 /* no_of_ips */] <2.0f ? 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <57.5f ? 
                        0.0f : 
                        1.0f) : 
                    0.0f)) : 
            0.0f));
    return pred;
  } // constant pool size = 34B, number of visited nodes = 8, static init size = 0B
}


class log_drf_1_Forest_28 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += log_drf_1_Tree_28_class_0.score0(fdata);
    preds[2] += log_drf_1_Tree_28_class_1.score0(fdata);
    preds[3] += log_drf_1_Tree_28_class_2.score0(fdata);
    preds[4] += log_drf_1_Tree_28_class_3.score0(fdata);
    preds[5] += log_drf_1_Tree_28_class_4.score0(fdata);
    preds[6] += log_drf_1_Tree_28_class_5.score0(fdata);
    preds[7] += log_drf_1_Tree_28_class_6.score0(fdata);
    preds[8] += log_drf_1_Tree_28_class_7.score0(fdata);
    preds[9] += log_drf_1_Tree_28_class_8.score0(fdata);
    preds[10] += log_drf_1_Tree_28_class_9.score0(fdata);
    preds[11] += log_drf_1_Tree_28_class_10.score0(fdata);
    preds[12] += log_drf_1_Tree_28_class_11.score0(fdata);
    preds[13] += log_drf_1_Tree_28_class_12.score0(fdata);
    preds[14] += log_drf_1_Tree_28_class_13.score0(fdata);
    preds[15] += log_drf_1_Tree_28_class_14.score0(fdata);
    preds[16] += log_drf_1_Tree_28_class_15.score0(fdata);
    preds[17] += log_drf_1_Tree_28_class_16.score0(fdata);
    preds[18] += log_drf_1_Tree_28_class_17.score0(fdata);
    preds[19] += log_drf_1_Tree_28_class_18.score0(fdata);
    preds[20] += log_drf_1_Tree_28_class_19.score0(fdata);
    preds[21] += log_drf_1_Tree_28_class_20.score0(fdata);
    preds[22] += log_drf_1_Tree_28_class_21.score0(fdata);
    preds[23] += log_drf_1_Tree_28_class_22.score0(fdata);
    preds[24] += log_drf_1_Tree_28_class_23.score0(fdata);
    preds[25] += log_drf_1_Tree_28_class_24.score0(fdata);
    preds[26] += log_drf_1_Tree_28_class_25.score0(fdata);
    preds[27] += log_drf_1_Tree_28_class_26.score0(fdata);
    preds[28] += log_drf_1_Tree_28_class_27.score0(fdata);
    preds[29] += log_drf_1_Tree_28_class_28.score0(fdata);
    preds[30] += log_drf_1_Tree_28_class_29.score0(fdata);
    preds[31] += log_drf_1_Tree_28_class_30.score0(fdata);
    preds[32] += log_drf_1_Tree_28_class_31.score0(fdata);
    preds[33] += log_drf_1_Tree_28_class_32.score0(fdata);
    preds[34] += log_drf_1_Tree_28_class_33.score0(fdata);
    preds[35] += log_drf_1_Tree_28_class_34.score0(fdata);
    preds[36] += log_drf_1_Tree_28_class_35.score0(fdata);
    preds[37] += log_drf_1_Tree_28_class_36.score0(fdata);
    preds[38] += log_drf_1_Tree_28_class_37.score0(fdata);
    preds[39] += log_drf_1_Tree_28_class_38.score0(fdata);
  }
}
class log_drf_1_Tree_28_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[4]) || data[4 /* no_of_macs */] <2.5f ? 
         (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <1040.0f ? 
             (Double.isNaN(data[12]) || data[12 /* 11_letter_word */] <0.009765625f ? 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <97.5f ? 
                    0.0f : 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <423.5f ? 
                        3.2739117E-5f : 
                        0.017985612f)) : 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <597.5f ? 
                    0.0f : 
                     (data[4 /* no_of_macs */] <0.5f ? 
                        0.0f : 
                        1.0f))) : 
             (data[4 /* no_of_macs */] <1.5f ? 
                0.5f : 
                1.0f)) : 
        0.2857143f);
    return pred;
  } // constant pool size = 34B, number of visited nodes = 8, static init size = 0B
}

class log_drf_1_Tree_28_class_1 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
        0.0f : 
         (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.38671875f ? 
             (data[6 /* 5_letter_word */] <0.17382812f ? 
                 (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.15481567f ? 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.1328125f ? 
                        0.0f : 
                        0.001934236f) : 
                     (data[2 /* no_of_characters */] <250.5f ? 
                        0.0f : 
                        0.4295302f)) : 
                 (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.70954895f ? 
                    0.0f : 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.12689209f ? 
                        0.0f : 
                        1.0f))) : 
             (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.1015625f ? 
                0.0f : 
                 (data[2 /* no_of_characters */] <245.5f ? 
                    0.0f : 
                    0.99568963f))));
    return pred;
  } // constant pool size = 42B, number of visited nodes = 10, static init size = 0B
}

class log_drf_1_Tree_28_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
         (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.56933594f ? 
             (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
                0.0f : 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <150.5f ? 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <113.5f ? 
                        0.0f : 
                        0.1521739f) : 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.2109375f ? 
                        5.6322163E-4f : 
                        0.0f))) : 
             (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.15429688f ? 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.13380432f ? 
                    0.0f : 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.071875f ? 
                        0.0f : 
                        1.0f)) : 
                 (data[5 /* 4_letter_word */] <0.58615875f ? 
                    0.0f : 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.05f ? 
                        0.55163044f : 
                        0.023809524f)))) : 
         (data[6 /* 5_letter_word */] <0.05859375f ? 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <181.5f ? 
                0.0f : 
                 (data[7 /* 6_letter_word */] <0.359375f ? 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.171875f ? 
                        0.0074074073f : 
                        0.6666667f) : 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <591.0f ? 
                        1.0f : 
                        0.0f))) : 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <181.5f ? 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.19140625f ? 
                    0.0f : 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.31054688f ? 
                        0.004830918f : 
                        0.0f)) : 
                1.0f)));
    return pred;
  } // constant pool size = 78B, number of visited nodes = 19, static init size = 0B
}

class log_drf_1_Tree_28_class_3 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
         (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.1171875f ? 
             (data[8 /* 7_letter_word */] <0.26757812f ? 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.22472382f ? 
                    0.0f : 
                     (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.125f ? 
                        0.002469136f : 
                        0.0f)) : 
                0.0f) : 
             (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.4140625f ? 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.12011719f ? 
                    0.0f : 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.029296875f ? 
                        0.0017875383f : 
                        0.0f)) : 
                 (data[5 /* 4_letter_word */] <0.15512085f ? 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <300.5f ? 
                        1.0f : 
                        0.9904762f) : 
                    0.0f))) : 
         (data[6 /* 5_letter_word */] <0.24023438f ? 
             (data[1 /* type_of_time */] <4.5f ? 
                 (data[7 /* 6_letter_word */] <0.1015625f ? 
                     (data[2 /* no_of_characters */] <120.5f ? 
                        0.8888889f : 
                        0.0f) : 
                    0.0f) : 
                0.0f) : 
             (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.38671875f ? 
                0.0f : 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.05078125f ? 
                     (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <1.5f ? 
                        0.9819362f : 
                        0.0f) : 
                    0.0f))));
    return pred;
  } // constant pool size = 70B, number of visited nodes = 17, static init size = 0B
}

class log_drf_1_Tree_28_class_4 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.3095703f ? 
         (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.24316406f ? 
             (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.03515625f ? 
                 (data[2 /* no_of_characters */] <102.5f ? 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.7421875f ? 
                        0.0f : 
                        0.0021715527f) : 
                    0.0f) : 
                0.0f) : 
             (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.12109375f ? 
                0.0f : 
                 (data[7 /* 6_letter_word */] <0.2609024f ? 
                     (data[6 /* 5_letter_word */] <0.18988037f ? 
                        0.5f : 
                        5.7670125E-4f) : 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.078125f ? 
                        0.0f : 
                        0.0044247787f)))) : 
         (data[6 /* 5_letter_word */] <0.41601562f ? 
             (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.29169846f ? 
                0.0f : 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.16796875f ? 
                    0.0f : 
                    1.0f)) : 
            0.0f));
    return pred;
  } // constant pool size = 50B, number of visited nodes = 12, static init size = 0B
}

class log_drf_1_Tree_28_class_5 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.07470703f ? 
         (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <277.5f ? 
             (Double.isNaN(data[12]) || data[12 /* 11_letter_word */] <0.29101562f ? 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.46875f ? 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.4765625f ? 
                        1.4577259E-5f : 
                        3.4241885E-4f) : 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.21875f ? 
                        0.0f : 
                        0.008519702f)) : 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.16796875f ? 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <33.5f ? 
                        0.0f : 
                        0.15384616f) : 
                    0.0f)) : 
             (data[2 /* no_of_characters */] <313.5f ? 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <306.5f ? 
                     (data[0 /* vlan */] <17.5f ? 
                        0.10526316f : 
                        7.905138E-4f) : 
                     (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
                        0.0f : 
                        0.14516129f)) : 
                0.0f)) : 
         (data[6 /* 5_letter_word */] <0.1484375f ? 
            0.0f : 
             (data[6 /* 5_letter_word */] <0.16078492f ? 
                1.0f : 
                 (data[6 /* 5_letter_word */] <0.29289258f ? 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.421875f ? 
                        0.0f : 
                        0.021551725f) : 
                    0.0f))));
    return pred;
  } // constant pool size = 66B, number of visited nodes = 16, static init size = 0B
}

class log_drf_1_Tree_28_class_6 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
         (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.24609375f ? 
             (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.83203125f ? 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.87109375f ? 
                     (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
                        0.0f : 
                        6.5077207E-4f) : 
                    0.0039473684f) : 
                0.0051457975f) : 
             (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
                0.0f : 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.2607422f ? 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <129.5f ? 
                        0.0065952186f : 
                        0.40510365f) : 
                    0.0f))) : 
        0.0f);
    return pred;
  } // constant pool size = 34B, number of visited nodes = 8, static init size = 0B
}

class log_drf_1_Tree_28_class_7 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <1.5f ? 
         (data[8 /* 7_letter_word */] <0.0126953125f ? 
             (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.056640625f ? 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <186.5f ? 
                    0.0f : 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.171875f ? 
                        0.17028986f : 
                        0.0f)) : 
                0.0f) : 
            0.0f) : 
         (data[6 /* 5_letter_word */] <0.041992188f ? 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <165.5f ? 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.1015625f ? 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <178.5f ? 
                        0.0f : 
                        1.0f) : 
                    0.0f) : 
                 (data[2 /* no_of_characters */] <179.5f ? 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.203125f ? 
                        0.29461756f : 
                        0.0f) : 
                     (data[8 /* 7_letter_word */] <0.1015625f ? 
                        0.05109489f : 
                        0.0f))) : 
            0.0f));
    return pred;
  } // constant pool size = 50B, number of visited nodes = 12, static init size = 0B
}

class log_drf_1_Tree_28_class_8 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <2.5f ? 
         (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <898.5f ? 
             (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.029296875f ? 
                 (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
                    0.0f : 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.0390625f ? 
                        1.3568522E-4f : 
                        0.0f)) : 
                0.0f) : 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <1025.0f ? 
                 (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.0078125f ? 
                     (data[0 /* vlan */] <178.5f ? 
                        0.0f : 
                        0.9574468f) : 
                    0.0f) : 
                0.0f)) : 
         (data[6 /* 5_letter_word */] <0.26757812f ? 
             (data[7 /* 6_letter_word */] <0.04296875f ? 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.0625f ? 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <178.5f ? 
                        0.0f : 
                        0.2f) : 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <220.5f ? 
                        0.0f : 
                        0.055555556f)) : 
                0.0f) : 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <716.5f ? 
                0.0f : 
                 (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.51953125f ? 
                     (data[2 /* no_of_characters */] <975.5f ? 
                        1.0f : 
                        0.0f) : 
                     (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <3.5f ? 
                        1.0f : 
                        0.78571427f)))));
    return pred;
  } // constant pool size = 70B, number of visited nodes = 17, static init size = 0B
}

class log_drf_1_Tree_28_class_9 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <2.5f ? 
         (data[1 /* type_of_time */] <3.5f ? 
             (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <1.5f ? 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <162.5f ? 
                    0.0f : 
                    1.0f) : 
                 (data[1 /* type_of_time */] <2.0f ? 
                    0.0f : 
                    1.0f)) : 
            0.0f) : 
         (data[6 /* 5_letter_word */] <0.26757812f ? 
             (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.18359375f ? 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.18359375f ? 
                     (data[5 /* 4_letter_word */] <0.0625f ? 
                        0.09586056f : 
                        0.0025769046f) : 
                     (data[8 /* 7_letter_word */] <0.22824097f ? 
                        0.9166667f : 
                        0.16802168f)) : 
                 (data[9 /* 8_letter_word */] <0.2243805f ? 
                     (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.0f ? 
                        1.0f : 
                        0.0f) : 
                     (data[0 /* vlan */] <98.0f ? 
                        0.0f : 
                        1.0f))) : 
             (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.58203125f ? 
                0.0f : 
                1.0f)));
    return pred;
  } // constant pool size = 58B, number of visited nodes = 14, static init size = 0B
}

class log_drf_1_Tree_28_class_10 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
        7.4042264E-6f : 
         (data[6 /* 5_letter_word */] <0.028320312f ? 
             (data[3 /* no_of_ips */] <1.5f ? 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.83203125f ? 
                     (data[2 /* no_of_characters */] <101.5f ? 
                        8.6956524E-4f : 
                        0.0f) : 
                    0.2f) : 
                0.0f) : 
            0.0f));
    return pred;
  } // constant pool size = 22B, number of visited nodes = 5, static init size = 0B
}

class log_drf_1_Tree_28_class_11 {
  static final double score0(double[] data) {
    double pred =     5.0E-6f;
    return pred;
  } // constant pool size = 2B, number of visited nodes = 0, static init size = 0B
}

class log_drf_1_Tree_28_class_12 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
        0.0f : 
         (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.9277344f ? 
             (data[6 /* 5_letter_word */] <0.029296875f ? 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <420.5f ? 
                    0.0f : 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <548.5f ? 
                        0.8947368f : 
                        0.0f)) : 
                0.0f) : 
             (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <1.5f ? 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <293.5f ? 
                    0.0f : 
                    1.0f) : 
                0.0f)));
    return pred;
  } // constant pool size = 30B, number of visited nodes = 7, static init size = 0B
}

class log_drf_1_Tree_28_class_13 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
         (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.2548828f ? 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <590.5f ? 
                 (data[2 /* no_of_characters */] <60.5f ? 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.3671875f ? 
                        0.90625f : 
                        0.0f) : 
                    0.0f) : 
                0.8917749f) : 
             (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.19140625f ? 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.018229166f ? 
                     (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.28645834f ? 
                        4.467477E-5f : 
                        0.0029239766f) : 
                    0.0f) : 
                 (data[5 /* 4_letter_word */] <0.41205597f ? 
                     (data[9 /* 8_letter_word */] <0.21739705f ? 
                        0.052419353f : 
                        0.0f) : 
                    0.0f))) : 
         (data[6 /* 5_letter_word */] <0.028320312f ? 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <592.5f ? 
                0.0f : 
                 (data[7 /* 6_letter_word */] <0.16796875f ? 
                    1.0f : 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <499.5f ? 
                        0.0f : 
                        0.05882353f))) : 
            0.0f));
    return pred;
  } // constant pool size = 58B, number of visited nodes = 14, static init size = 0B
}

class log_drf_1_Tree_28_class_14 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.19091797f ? 
         (data[1 /* type_of_time */] <2.5f ? 
             (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.18359375f ? 
                0.0f : 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.171875f ? 
                    0.0f : 
                     (data[6 /* 5_letter_word */] <0.26651f ? 
                        1.0f : 
                        0.0f))) : 
            0.0f) : 
         (data[6 /* 5_letter_word */] <0.0625f ? 
             (data[8 /* 7_letter_word */] <0.22460938f ? 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.1015625f ? 
                    0.0f : 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.10002136f ? 
                        0.0f : 
                        0.6315789f)) : 
                0.0f) : 
            0.0f));
    return pred;
  } // constant pool size = 38B, number of visited nodes = 9, static init size = 0B
}

class log_drf_1_Tree_28_class_15 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <1.5f ? 
         (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.63378906f ? 
             (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.53515625f ? 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.321846f ? 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.38464355f ? 
                        2.912056E-4f : 
                        0.01021535f) : 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <129.5f ? 
                        0.0010135135f : 
                        0.05904659f)) : 
                0.0f) : 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <230.5f ? 
                 (data[7 /* 6_letter_word */] <0.874115f ? 
                    0.0f : 
                     (data[1 /* type_of_time */] <4.5f ? 
                        0.0f : 
                        0.009240924f)) : 
                 (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.22265625f ? 
                     (data[0 /* vlan */] <89.5f ? 
                        0.0f : 
                        0.45454547f) : 
                    1.0f))) : 
         (data[6 /* 5_letter_word */] <0.041992188f ? 
             (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <2.5f ? 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <210.5f ? 
                     (data[0 /* vlan */] <28.5f ? 
                        0.0f : 
                        0.08589882f) : 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.21875f ? 
                        0.94736844f : 
                        0.04347826f)) : 
                0.0f) : 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <85.5f ? 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.4609375f ? 
                    0.0f : 
                     (data[6 /* 5_letter_word */] <0.37130737f ? 
                        0.0f : 
                        4.1631973E-4f)) : 
                 (data[3 /* no_of_ips */] <2.5f ? 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.3671875f ? 
                        0.0f : 
                        1.0f) : 
                    0.0f))));
    return pred;
  } // constant pool size = 86B, number of visited nodes = 21, static init size = 0B
}

class log_drf_1_Tree_28_class_16 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.3095703f ? 
         (data[2 /* no_of_characters */] <80.5f ? 
             (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.125f ? 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <79.0f ? 
                    0.0f : 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.5f ? 
                        0.0f : 
                        0.71428573f)) : 
                0.0f) : 
             (data[2 /* no_of_characters */] <111.5f ? 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.0859375f ? 
                     (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.1015625f ? 
                        2.2200844E-4f : 
                        0.0f) : 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <110.5f ? 
                        8.3963055E-4f : 
                        0.006024096f)) : 
                 (data[2 /* no_of_characters */] <162.5f ? 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.46875f ? 
                        5.9292637E-5f : 
                        2.7034333E-4f) : 
                    0.0f))) : 
         (data[11 /* 10_letter_word */] <0.36688137f ? 
             (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.16796875f ? 
                 (data[0 /* vlan */] <57.5f ? 
                     (data[6 /* 5_letter_word */] <0.0859375f ? 
                        0.037037037f : 
                        0.0f) : 
                    0.0f) : 
                0.0f) : 
            0.0f));
    return pred;
  } // constant pool size = 62B, number of visited nodes = 15, static init size = 0B
}

class log_drf_1_Tree_28_class_17 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <3.5f ? 
         (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <659.0f ? 
            0.0f : 
             (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.064453125f ? 
                 (data[0 /* vlan */] <174.5f ? 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.0625f ? 
                        0.0f : 
                        0.09090909f) : 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.078125f ? 
                        0.8192771f : 
                        0.0f)) : 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <1106.5f ? 
                    0.0f : 
                     (data[9 /* 8_letter_word */] <0.09375f ? 
                        0.0f : 
                        0.5f)))) : 
         (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.5830078f ? 
             (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.3097229f ? 
                 (data[7 /* 6_letter_word */] <0.07421875f ? 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <178.5f ? 
                        0.0f : 
                        1.0f) : 
                    0.0f) : 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.2265625f ? 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <178.5f ? 
                        0.0f : 
                        0.8372093f) : 
                     (data[2 /* no_of_characters */] <599.5f ? 
                        0.0f : 
                        1.0f))) : 
            1.0f));
    return pred;
  } // constant pool size = 62B, number of visited nodes = 15, static init size = 0B
}

class log_drf_1_Tree_28_class_18 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.07470703f ? 
        0.0f : 
         (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <330.5f ? 
            0.0f : 
             (data[6 /* 5_letter_word */] <0.03515625f ? 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.15625f ? 
                    0.0f : 
                    0.5f) : 
                0.0f)));
    return pred;
  } // constant pool size = 18B, number of visited nodes = 4, static init size = 0B
}

class log_drf_1_Tree_28_class_19 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.23583984f ? 
         (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.19726562f ? 
            0.0f : 
             (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                0.0f : 
                 (data[3 /* no_of_ips */] <1.5f ? 
                     (data[7 /* 6_letter_word */] <0.22862244f ? 
                        0.25f : 
                        0.0f) : 
                    0.0f))) : 
         (data[11 /* 10_letter_word */] <0.2679286f ? 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <140.5f ? 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.125f ? 
                     (data[2 /* no_of_characters */] <123.5f ? 
                        0.0f : 
                        0.9969419f) : 
                    0.0f) : 
                 (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.125f ? 
                    0.0f : 
                     (data[1 /* type_of_time */] <4.5f ? 
                        0.0f : 
                        0.007936508f))) : 
            0.0f));
    return pred;
  } // constant pool size = 46B, number of visited nodes = 11, static init size = 0B
}

class log_drf_1_Tree_28_class_20 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
         (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.44921875f ? 
             (data[0 /* vlan */] <25.5f ? 
                 (data[1 /* type_of_time */] <4.5f ? 
                    0.0f : 
                     (data[0 /* vlan */] <18.0f ? 
                        0.0f : 
                        0.99979186f)) : 
                0.0f) : 
             (data[9 /* 8_letter_word */] <0.25f ? 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.25f ? 
                     (data[5 /* 4_letter_word */] <0.4140625f ? 
                        0.6077348f : 
                        0.548f) : 
                     (data[0 /* vlan */] <98.0f ? 
                        1.0f : 
                        0.0f)) : 
                1.0f)) : 
         (data[6 /* 5_letter_word */] <0.028320312f ? 
             (data[0 /* vlan */] <25.5f ? 
                 (data[10 /* 9_letter_word */] <0.10546875f ? 
                     (data[5 /* 4_letter_word */] <0.21875f ? 
                        0.93636364f : 
                        0.03539823f) : 
                    1.0f) : 
                0.0f) : 
             (data[0 /* vlan */] <25.5f ? 
                 (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.74948883f ? 
                     (data[2 /* no_of_characters */] <228.5f ? 
                        0.90588236f : 
                        0.0015360983f) : 
                    0.989726f) : 
                0.0f)));
    return pred;
  } // constant pool size = 66B, number of visited nodes = 16, static init size = 0B
}

class log_drf_1_Tree_28_class_21 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.15478516f ? 
         (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <222.5f ? 
             (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                 (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.3203125f ? 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.8984375f ? 
                        4.5878574E-4f : 
                        0.0020932667f) : 
                     (data[2 /* no_of_characters */] <126.5f ? 
                        0.005430758f : 
                        0.0015613196f)) : 
                0.0f) : 
             (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.15429688f ? 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.76171875f ? 
                     (data[8 /* 7_letter_word */] <0.15625f ? 
                        0.0010655301f : 
                        0.009076628f) : 
                     (data[7 /* 6_letter_word */] <0.9273987f ? 
                        0.33333334f : 
                        0.011627907f)) : 
                 (data[2 /* no_of_characters */] <268.5f ? 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <255.5f ? 
                        0.0f : 
                        0.009009009f) : 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.15625f ? 
                        0.0f : 
                        0.0049751243f)))) : 
         (data[6 /* 5_letter_word */] <0.1171875f ? 
             (Double.isNaN(data[12]) || data[12 /* 11_letter_word */] <0.125f ? 
                 (data[11 /* 10_letter_word */] <0.18619792f ? 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.4140625f ? 
                        0.0f : 
                        0.9047619f) : 
                     (data[11 /* 10_letter_word */] <0.23706055f ? 
                        0.09322034f : 
                        7.6599006E-4f)) : 
                0.9876543f) : 
            0.0f));
    return pred;
  } // constant pool size = 74B, number of visited nodes = 18, static init size = 0B
}

class log_drf_1_Tree_28_class_22 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.16015625f ? 
         (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <325.5f ? 
            0.0f : 
             (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.47070312f ? 
                0.0f : 
                 (data[3 /* no_of_ips */] <2.5f ? 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.1171875f ? 
                        0.0f : 
                        0.5f) : 
                    0.0f))) : 
         (data[6 /* 5_letter_word */] <0.0625f ? 
             (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.083984375f ? 
                0.0f : 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.0859375f ? 
                     (data[9 /* 8_letter_word */] <0.18148804f ? 
                        0.2f : 
                        0.0f) : 
                    0.0f)) : 
            0.0f));
    return pred;
  } // constant pool size = 38B, number of visited nodes = 9, static init size = 0B
}

class log_drf_1_Tree_28_class_23 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.13378906f ? 
         (data[2 /* no_of_characters */] <153.5f ? 
             (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <151.5f ? 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.0546875f ? 
                        0.055334244f : 
                        4.3566656E-4f) : 
                     (data[9 /* 8_letter_word */] <0.578125f ? 
                        0.0f : 
                        0.99804306f)) : 
                0.0f) : 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <242.5f ? 
                 (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.3671875f ? 
                     (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.3125f ? 
                        1.7599126E-5f : 
                        0.025641026f) : 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.4453125f ? 
                        0.0117746005f : 
                        0.02631579f)) : 
                 (data[2 /* no_of_characters */] <250.5f ? 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.6875f ? 
                        0.0f : 
                        0.71428573f) : 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.265625f ? 
                        0.0013265113f : 
                        0.024169184f)))) : 
         (data[11 /* 10_letter_word */] <0.15493679f ? 
             (data[9 /* 8_letter_word */] <0.072265625f ? 
                0.0f : 
                 (data[8 /* 7_letter_word */] <0.21484375f ? 
                    0.0f : 
                    0.9990521f)) : 
            0.0f));
    return pred;
  } // constant pool size = 66B, number of visited nodes = 16, static init size = 0B
}

class log_drf_1_Tree_28_class_24 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
        0.0f : 
         (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <143.5f ? 
            0.0f : 
             (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.9160156f ? 
                0.0f : 
                 (data[0 /* vlan */] <94.0f ? 
                    1.0f : 
                    0.0f))));
    return pred;
  } // constant pool size = 18B, number of visited nodes = 4, static init size = 0B
}

class log_drf_1_Tree_28_class_25 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <1.5f ? 
         (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
            0.0f : 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <29.5f ? 
                 (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.15625f ? 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.0390625f ? 
                        8.4271055E-4f : 
                        0.0f) : 
                     (data[3 /* no_of_ips */] <0.5f ? 
                        0.02208202f : 
                        0.0035874438f)) : 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <158.5f ? 
                     (Double.isNaN(data[12]) || data[12 /* 11_letter_word */] <0.0859375f ? 
                        0.41630816f : 
                        0.9932796f) : 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.4609375f ? 
                        0.8316327f : 
                        0.99734396f)))) : 
         (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.4638672f ? 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <170.5f ? 
                 (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.1015625f ? 
                     (data[2 /* no_of_characters */] <99.0f ? 
                        0.9934762f : 
                        0.8834125f) : 
                     (data[9 /* 8_letter_word */] <0.125f ? 
                        0.24949698f : 
                        0.0f)) : 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.83203125f ? 
                     (Double.isNaN(data[4]) || data[4 /* no_of_macs */] <0.5f ? 
                        0.03911707f : 
                        1.0f) : 
                    1.0f)) : 
             (data[0 /* vlan */] <23.5f ? 
                0.0f : 
                 (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.1015625f ? 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.0859375f ? 
                        0.98703665f : 
                        0.99509f) : 
                    1.0f))));
    return pred;
  } // constant pool size = 78B, number of visited nodes = 19, static init size = 0B
}

class log_drf_1_Tree_28_class_26 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
         (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.6455078f ? 
            0.0f : 
             (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.6905117f ? 
                 (data[2 /* no_of_characters */] <70.5f ? 
                    1.0f : 
                    0.0f) : 
                0.0f)) : 
        0.0f);
    return pred;
  } // constant pool size = 18B, number of visited nodes = 4, static init size = 0B
}

class log_drf_1_Tree_28_class_27 {
  static final double score0(double[] data) {
    double pred =     1.0E-5f;
    return pred;
  } // constant pool size = 2B, number of visited nodes = 0, static init size = 0B
}

class log_drf_1_Tree_28_class_28 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <5.5f ? 
         (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <472.5f ? 
            0.0f : 
             (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.16015625f ? 
                0.0f : 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <98.0f ? 
                    1.0f : 
                    0.0f))) : 
         (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.4638672f ? 
             (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.26757812f ? 
                1.0f : 
                0.9f) : 
             (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.41601562f ? 
                1.0f : 
                0.0f)));
    return pred;
  } // constant pool size = 30B, number of visited nodes = 7, static init size = 0B
}

class log_drf_1_Tree_28_class_29 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.0087890625f ? 
         (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <420.0f ? 
             (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.19140625f ? 
                0.0f : 
                 (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.7734375f ? 
                    0.0f : 
                    0.15384616f)) : 
             (data[2 /* no_of_characters */] <430.5f ? 
                 (data[7 /* 6_letter_word */] <0.5f ? 
                    1.0f : 
                    0.0f) : 
                0.0f)) : 
         (data[11 /* 10_letter_word */] <0.051380157f ? 
             (data[7 /* 6_letter_word */] <0.091796875f ? 
                1.0f : 
                0.0f) : 
            0.0f));
    return pred;
  } // constant pool size = 34B, number of visited nodes = 8, static init size = 0B
}

class log_drf_1_Tree_28_class_30 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <2.5f ? 
         (data[1 /* type_of_time */] <1.5f ? 
            1.0f : 
            0.0f) : 
         (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.3486328f ? 
             (data[1 /* type_of_time */] <2.0f ? 
                1.0f : 
                0.0f) : 
            0.0f));
    return pred;
  } // constant pool size = 18B, number of visited nodes = 4, static init size = 0B
}

class log_drf_1_Tree_28_class_31 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.23583984f ? 
         (data[2 /* no_of_characters */] <113.5f ? 
             (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <1.5f ? 
                 (Double.isNaN(data[15]) || data[15 /* 14_letter_word */] <0.1015625f ? 
                     (data[2 /* no_of_characters */] <73.5f ? 
                        0.012908778f : 
                        0.04636974f) : 
                    0.94871795f) : 
                0.0f) : 
             (data[2 /* no_of_characters */] <139.5f ? 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <126.5f ? 
                    0.0f : 
                     (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.057117462f ? 
                        0.009424658f : 
                        0.8333333f)) : 
                 (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
                    0.0f : 
                     (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <1.5f ? 
                        4.8285854E-4f : 
                        0.0f)))) : 
         (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.4492674f ? 
             (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.125f ? 
                 (data[2 /* no_of_characters */] <110.5f ? 
                     (data[5 /* 4_letter_word */] <0.2890625f ? 
                        0.0f : 
                        0.90697676f) : 
                     (data[0 /* vlan */] <33.5f ? 
                        0.0f : 
                        0.171875f)) : 
                0.0f) : 
             (data[6 /* 5_letter_word */] <0.125f ? 
                 (data[2 /* no_of_characters */] <110.5f ? 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <104.5f ? 
                        0.0f : 
                        0.14285715f) : 
                    0.0f) : 
                0.0f)));
    return pred;
  } // constant pool size = 74B, number of visited nodes = 18, static init size = 0B
}

class log_drf_1_Tree_28_class_32 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.19091797f ? 
         (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.24316406f ? 
            0.0f : 
             (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.029296875f ? 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <25.5f ? 
                    0.0f : 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.21875f ? 
                        0.01080108f : 
                        0.05035971f)) : 
                0.0f)) : 
         (data[6 /* 5_letter_word */] <0.0625f ? 
             (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.22460938f ? 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.546875f ? 
                     (data[2 /* no_of_characters */] <100.5f ? 
                        0.040793825f : 
                        0.0f) : 
                     (data[3 /* no_of_ips */] <0.5f ? 
                        0.0f : 
                        1.0f)) : 
                0.0f) : 
            0.0f));
    return pred;
  } // constant pool size = 42B, number of visited nodes = 10, static init size = 0B
}

class log_drf_1_Tree_28_class_33 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[4]) || data[4 /* no_of_macs */] <1.5f ? 
         (data[2 /* no_of_characters */] <70.5f ? 
             (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.4140625f ? 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.2890625f ? 
                        0.0025094103f : 
                        0.30769232f) : 
                    0.9f) : 
                0.0f) : 
             (data[2 /* no_of_characters */] <84.5f ? 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.87109375f ? 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.41513062f ? 
                        0.011140991f : 
                        0.084337346f) : 
                     (data[2 /* no_of_characters */] <81.5f ? 
                        0.5f : 
                        1.0f)) : 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <274.5f ? 
                     (data[8 /* 7_letter_word */] <0.2578125f ? 
                        7.277602E-4f : 
                        1.0051767E-4f) : 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.40625f ? 
                        2.8690288E-4f : 
                        0.03717754f)))) : 
         (data[6 /* 5_letter_word */] <0.091796875f ? 
             (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.087890625f ? 
                0.0f : 
                1.0f) : 
            0.0f));
    return pred;
  } // constant pool size = 58B, number of visited nodes = 14, static init size = 0B
}

class log_drf_1_Tree_28_class_34 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.123535156f ? 
        0.0f : 
         (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <215.5f ? 
             (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.31054688f ? 
                0.0f : 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.0859375f ? 
                    0.0f : 
                     (data[2 /* no_of_characters */] <110.5f ? 
                        0.0f : 
                        0.05f))) : 
             (data[10 /* 9_letter_word */] <0.12695885f ? 
                 (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                    0.0f : 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.0625f ? 
                        0.0f : 
                        0.5f)) : 
                0.0f)));
    return pred;
  } // constant pool size = 34B, number of visited nodes = 8, static init size = 0B
}

class log_drf_1_Tree_28_class_35 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.087402344f ? 
         (data[2 /* no_of_characters */] <83.5f ? 
             (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.1015625f ? 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.125f ? 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.171875f ? 
                        0.005482456f : 
                        0.0f) : 
                    0.0f) : 
                0.0f) : 
             (data[2 /* no_of_characters */] <140.5f ? 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <126.5f ? 
                    0.0f : 
                     (data[2 /* no_of_characters */] <127.5f ? 
                        0.009404388f : 
                        4.5962923E-4f)) : 
                 (data[8 /* 7_letter_word */] <0.17578125f ? 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <206.5f ? 
                        0.0f : 
                        3.6598757E-4f) : 
                    0.0f))) : 
         (data[6 /* 5_letter_word */] <0.034179688f ? 
             (data[0 /* vlan */] <13.5f ? 
                 (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.25138474f ? 
                    0.0f : 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.16796875f ? 
                        0.0f : 
                        1.0f)) : 
                 (data[10 /* 9_letter_word */] <0.10522652f ? 
                    0.5f : 
                    0.0f)) : 
             (data[2 /* no_of_characters */] <110.5f ? 
                 (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                    0.125f : 
                    0.0f) : 
                0.0f)));
    return pred;
  } // constant pool size = 70B, number of visited nodes = 17, static init size = 0B
}

class log_drf_1_Tree_28_class_36 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.16015625f ? 
        0.0f : 
         (data[2 /* no_of_characters */] <133.5f ? 
             (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.16796875f ? 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <125.5f ? 
                    0.0f : 
                     (data[10 /* 9_letter_word */] <0.18640137f ? 
                        0.8f : 
                        0.0f)) : 
                0.0f) : 
            0.0f));
    return pred;
  } // constant pool size = 22B, number of visited nodes = 5, static init size = 0B
}

class log_drf_1_Tree_28_class_37 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
         (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.29101562f ? 
             (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
                 (data[1 /* type_of_time */] <3.5f ? 
                     (data[2 /* no_of_characters */] <200.5f ? 
                        0.9714286f : 
                        0.2580645f) : 
                     (data[8 /* 7_letter_word */] <0.15625f ? 
                        0.9996181f : 
                        0.9977982f)) : 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.015625f ? 
                     (Double.isNaN(data[12]) || data[12 /* 11_letter_word */] <0.7421875f ? 
                        0.0055616195f : 
                        0.20833333f) : 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.3203125f ? 
                        0.0f : 
                        0.0031595577f))) : 
             (data[9 /* 8_letter_word */] <0.41601562f ? 
                 (data[10 /* 9_letter_word */] <0.3671875f ? 
                     (data[1 /* type_of_time */] <4.5f ? 
                        1.0f : 
                        0.0f) : 
                     (data[2 /* no_of_characters */] <140.5f ? 
                        0.015306123f : 
                        0.525f)) : 
                0.0f)) : 
         (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.9160156f ? 
             (data[1 /* type_of_time */] <4.5f ? 
                 (data[9 /* 8_letter_word */] <0.1015625f ? 
                     (Double.isNaN(data[1]) || data[1 /* type_of_time */] <3.5f ? 
                        0.0f : 
                        0.9574468f) : 
                     (Double.isNaN(data[1]) || data[1 /* type_of_time */] <3.5f ? 
                        0.0f : 
                        1.0f)) : 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.04296875f ? 
                     (data[3 /* no_of_ips */] <2.5f ? 
                        0.0f : 
                        1.9755037E-4f) : 
                    0.0f)) : 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <115.5f ? 
                1.0f : 
                0.0f)));
    return pred;
  } // constant pool size = 86B, number of visited nodes = 21, static init size = 0B
}

class log_drf_1_Tree_28_class_38 {
  static final double score0(double[] data) {
    double pred =     1.5E-5f;
    return pred;
  } // constant pool size = 2B, number of visited nodes = 0, static init size = 0B
}


class log_drf_1_Forest_29 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += log_drf_1_Tree_29_class_0.score0(fdata);
    preds[2] += log_drf_1_Tree_29_class_1.score0(fdata);
    preds[3] += log_drf_1_Tree_29_class_2.score0(fdata);
    preds[4] += log_drf_1_Tree_29_class_3.score0(fdata);
    preds[5] += log_drf_1_Tree_29_class_4.score0(fdata);
    preds[6] += log_drf_1_Tree_29_class_5.score0(fdata);
    preds[7] += log_drf_1_Tree_29_class_6.score0(fdata);
    preds[8] += log_drf_1_Tree_29_class_7.score0(fdata);
    preds[9] += log_drf_1_Tree_29_class_8.score0(fdata);
    preds[10] += log_drf_1_Tree_29_class_9.score0(fdata);
    preds[11] += log_drf_1_Tree_29_class_10.score0(fdata);
    preds[12] += log_drf_1_Tree_29_class_11.score0(fdata);
    preds[13] += log_drf_1_Tree_29_class_12.score0(fdata);
    preds[14] += log_drf_1_Tree_29_class_13.score0(fdata);
    preds[15] += log_drf_1_Tree_29_class_14.score0(fdata);
    preds[16] += log_drf_1_Tree_29_class_15.score0(fdata);
    preds[17] += log_drf_1_Tree_29_class_16.score0(fdata);
    preds[18] += log_drf_1_Tree_29_class_17.score0(fdata);
    preds[19] += log_drf_1_Tree_29_class_18.score0(fdata);
    preds[20] += log_drf_1_Tree_29_class_19.score0(fdata);
    preds[21] += log_drf_1_Tree_29_class_20.score0(fdata);
    preds[22] += log_drf_1_Tree_29_class_21.score0(fdata);
    preds[23] += log_drf_1_Tree_29_class_22.score0(fdata);
    preds[24] += log_drf_1_Tree_29_class_23.score0(fdata);
    preds[25] += log_drf_1_Tree_29_class_24.score0(fdata);
    preds[26] += log_drf_1_Tree_29_class_25.score0(fdata);
    preds[27] += log_drf_1_Tree_29_class_26.score0(fdata);
    preds[28] += log_drf_1_Tree_29_class_27.score0(fdata);
    preds[29] += log_drf_1_Tree_29_class_28.score0(fdata);
    preds[30] += log_drf_1_Tree_29_class_29.score0(fdata);
    preds[31] += log_drf_1_Tree_29_class_30.score0(fdata);
    preds[32] += log_drf_1_Tree_29_class_31.score0(fdata);
    preds[33] += log_drf_1_Tree_29_class_32.score0(fdata);
    preds[34] += log_drf_1_Tree_29_class_33.score0(fdata);
    preds[35] += log_drf_1_Tree_29_class_34.score0(fdata);
    preds[36] += log_drf_1_Tree_29_class_35.score0(fdata);
    preds[37] += log_drf_1_Tree_29_class_36.score0(fdata);
    preds[38] += log_drf_1_Tree_29_class_37.score0(fdata);
    preds[39] += log_drf_1_Tree_29_class_38.score0(fdata);
  }
}
class log_drf_1_Tree_29_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[12]) || data[12 /* 11_letter_word */] <0.017578125f ? 
         (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.009765625f ? 
             (Double.isNaN(data[4]) || data[4 /* no_of_macs */] <0.5f ? 
                0.0f : 
                 (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.07421875f ? 
                     (data[3 /* no_of_ips */] <0.5f ? 
                        1.0f : 
                        0.0f) : 
                    0.0f)) : 
             (Double.isNaN(data[4]) || data[4 /* no_of_macs */] <0.5f ? 
                0.0f : 
                 (data[5 /* 4_letter_word */] <0.38671875f ? 
                     (data[5 /* 4_letter_word */] <0.22961426f ? 
                        0.5f : 
                        1.0f) : 
                    0.0f))) : 
         (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.034179688f ? 
            0.0f : 
             (Double.isNaN(data[4]) || data[4 /* no_of_macs */] <0.5f ? 
                0.0f : 
                1.0f)));
    return pred;
  } // constant pool size = 42B, number of visited nodes = 10, static init size = 0B
}

class log_drf_1_Tree_29_class_1 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0]) || data[0 /* vlan */] <142.0f ? 
        0.0f : 
         (data[0 /* vlan */] <148.0f ? 
            1.0f : 
            0.0f));
    return pred;
  } // constant pool size = 10B, number of visited nodes = 2, static init size = 0B
}

class log_drf_1_Tree_29_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0]) || data[0 /* vlan */] <181.5f ? 
         (Double.isNaN(data[0]) || data[0 /* vlan */] <136.5f ? 
            0.0f : 
             (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.1328125f ? 
                 (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
                    0.0f : 
                     (data[2 /* no_of_characters */] <240.5f ? 
                        0.014492754f : 
                        0.0f)) : 
                 (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
                    0.0f : 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.4512329f ? 
                        0.7188329f : 
                        0.20955883f)))) : 
         (data[1 /* type_of_time */] <4.5f ? 
            0.0f : 
             (data[5 /* 4_letter_word */] <0.03125f ? 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <90.5f ? 
                    0.0f : 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.21875f ? 
                        0.6730769f : 
                        1.0f)) : 
                 (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <1.5f ? 
                     (data[7 /* 6_letter_word */] <0.171875f ? 
                        0.0f : 
                        1.0f) : 
                    0.0f))));
    return pred;
  } // constant pool size = 54B, number of visited nodes = 13, static init size = 0B
}

class log_drf_1_Tree_29_class_3 {
  static final double score0(double[] data) {
    double pred =      (data[0 /* vlan */] <29.5f ? 
         (Double.isNaN(data[0]) || data[0 /* vlan */] <28.5f ? 
             (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.46289062f ? 
                0.0f : 
                 (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.07421875f ? 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.1015625f ? 
                        5.627462E-4f : 
                        0.0f) : 
                    0.0f)) : 
             (data[6 /* 5_letter_word */] <0.125f ? 
                0.0f : 
                1.0f)) : 
         (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.028320312f ? 
             (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
                 (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.93359375f ? 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.07293701f ? 
                        3.712346E-4f : 
                        0.0f) : 
                     (data[2 /* no_of_characters */] <120.5f ? 
                        0.02631579f : 
                        0.0f)) : 
                0.0f) : 
            0.0f));
    return pred;
  } // constant pool size = 46B, number of visited nodes = 11, static init size = 0B
}

class log_drf_1_Tree_29_class_4 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.3095703f ? 
         (data[0 /* vlan */] <27.5f ? 
             (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.4140625f ? 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <24.5f ? 
                    0.0f : 
                     (data[3 /* no_of_ips */] <1.5f ? 
                        0.06521739f : 
                        0.0f)) : 
                 (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.07421875f ? 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.078125f ? 
                        5.980861E-4f : 
                        0.0f) : 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <24.5f ? 
                        0.0f : 
                        1.0f))) : 
            0.0f) : 
         (data[6 /* 5_letter_word */] <0.41601562f ? 
             (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.29169846f ? 
                0.0f : 
                 (data[5 /* 4_letter_word */] <0.16666667f ? 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.171875f ? 
                        0.87096775f : 
                        0.0f) : 
                    0.0f)) : 
            0.0f));
    return pred;
  } // constant pool size = 50B, number of visited nodes = 12, static init size = 0B
}

class log_drf_1_Tree_29_class_5 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0]) || data[0 /* vlan */] <85.5f ? 
         (Double.isNaN(data[0]) || data[0 /* vlan */] <64.5f ? 
             (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.27929688f ? 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.22265625f ? 
                    0.0f : 
                     (data[8 /* 7_letter_word */] <0.27124023f ? 
                        8.6805556E-4f : 
                        0.0f)) : 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <33.0f ? 
                    0.0f : 
                     (data[0 /* vlan */] <37.0f ? 
                        0.64705884f : 
                        0.007662835f))) : 
             (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.21679688f ? 
                 (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.58203125f ? 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.41378784f ? 
                        0.0f : 
                        0.04f) : 
                    1.0f) : 
                 (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.0390625f ? 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.1796875f ? 
                        0.0f : 
                        1.0f) : 
                    1.0f))) : 
        0.0f);
    return pred;
  } // constant pool size = 50B, number of visited nodes = 12, static init size = 0B
}

class log_drf_1_Tree_29_class_6 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0]) || data[0 /* vlan */] <133.5f ? 
         (Double.isNaN(data[0]) || data[0 /* vlan */] <132.0f ? 
             (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.32421875f ? 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.87109375f ? 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.05065918f ? 
                        2.3876931E-4f : 
                        0.0f) : 
                     (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                        0.0058729313f : 
                        0.0f)) : 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <84.5f ? 
                     (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.1796875f ? 
                        0.0f : 
                        0.0057411273f) : 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.265625f ? 
                        0.0f : 
                        0.80851066f))) : 
             (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.34960938f ? 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.26766968f ? 
                    1.0f : 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.078125f ? 
                        1.0f : 
                        0.8333333f)) : 
                0.0f)) : 
        0.0f);
    return pred;
  } // constant pool size = 50B, number of visited nodes = 12, static init size = 0B
}

class log_drf_1_Tree_29_class_7 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0]) || data[0 /* vlan */] <185.0f ? 
        0.0f : 
         (data[0 /* vlan */] <593.5f ? 
            1.0f : 
            0.0f));
    return pred;
  } // constant pool size = 10B, number of visited nodes = 2, static init size = 0B
}

class log_drf_1_Tree_29_class_8 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0]) || data[0 /* vlan */] <180.5f ? 
        0.0f : 
         (Double.isNaN(data[0]) || data[0 /* vlan */] <185.0f ? 
             (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.26757812f ? 
                 (data[0 /* vlan */] <181.5f ? 
                    0.21925133f : 
                    0.0f) : 
                 (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.51953125f ? 
                     (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.203125f ? 
                        0.10738255f : 
                        0.0f) : 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.6336452f ? 
                        1.0f : 
                        0.90909094f))) : 
            0.0f));
    return pred;
  } // constant pool size = 30B, number of visited nodes = 7, static init size = 0B
}

class log_drf_1_Tree_29_class_9 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.095703125f ? 
         (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.3095703f ? 
             (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <1.5f ? 
                 (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.23046875f ? 
                    0.0f : 
                     (data[6 /* 5_letter_word */] <0.26654053f ? 
                        8.133388E-5f : 
                        0.0f)) : 
                 (data[1 /* type_of_time */] <3.5f ? 
                     (data[7 /* 6_letter_word */] <0.125f ? 
                        0.0f : 
                        0.97887325f) : 
                    0.0f)) : 
             (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.41601562f ? 
                 (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <3.5f ? 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <154.5f ? 
                        0.0f : 
                        0.38274336f) : 
                    1.0f) : 
                 (Double.isNaN(data[1]) || data[1 /* type_of_time */] <3.5f ? 
                    1.0f : 
                    0.0f))) : 
         (data[1 /* type_of_time */] <3.5f ? 
             (data[1 /* type_of_time */] <2.5f ? 
                0.0f : 
                1.0f) : 
            0.0f));
    return pred;
  } // constant pool size = 54B, number of visited nodes = 13, static init size = 0B
}

class log_drf_1_Tree_29_class_10 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0]) || data[0 /* vlan */] <166.5f ? 
         (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.4716797f ? 
            0.0f : 
             (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.41601562f ? 
                0.0f : 
                 (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
                    0.0f : 
                     (Double.isNaN(data[4]) || data[4 /* no_of_macs */] <0.5f ? 
                        0.006369427f : 
                        0.0f)))) : 
         (data[5 /* 4_letter_word */] <0.36621094f ? 
             (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.3247261f ? 
                 (data[1 /* type_of_time */] <4.5f ? 
                    0.0f : 
                     (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                        0.0f : 
                        0.010928961f)) : 
                 (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
                    0.0f : 
                     (data[6 /* 5_letter_word */] <0.171875f ? 
                        0.75f : 
                        0.0f))) : 
            0.0f));
    return pred;
  } // constant pool size = 46B, number of visited nodes = 11, static init size = 0B
}

class log_drf_1_Tree_29_class_11 {
  static final double score0(double[] data) {
    double pred =     5.0E-6f;
    return pred;
  } // constant pool size = 2B, number of visited nodes = 0, static init size = 0B
}

class log_drf_1_Tree_29_class_12 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0]) || data[0 /* vlan */] <593.5f ? 
        0.0f : 
        0.13695653f);
    return pred;
  } // constant pool size = 6B, number of visited nodes = 1, static init size = 0B
}

class log_drf_1_Tree_29_class_13 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0]) || data[0 /* vlan */] <593.5f ? 
         (data[0 /* vlan */] <3.5f ? 
             (data[7 /* 6_letter_word */] <0.16796875f ? 
                1.0f : 
                0.0f) : 
             (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.25976562f ? 
                 (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.265625f ? 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.40625f ? 
                        0.0029435954f : 
                        0.0f) : 
                     (data[3 /* no_of_ips */] <0.5f ? 
                        0.0011498029f : 
                        0.0f)) : 
                0.0f)) : 
         (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.25f ? 
            0.7586207f : 
            1.0f));
    return pred;
  } // constant pool size = 34B, number of visited nodes = 8, static init size = 0B
}

class log_drf_1_Tree_29_class_14 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[12]) || data[12 /* 11_letter_word */] <0.18310547f ? 
         (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.18359375f ? 
            0.0f : 
             (data[3 /* no_of_ips */] <0.5f ? 
                 (data[1 /* type_of_time */] <3.0f ? 
                    0.16666667f : 
                    0.0f) : 
                0.0f)) : 
         (data[1 /* type_of_time */] <2.5f ? 
            1.0f : 
            0.0f));
    return pred;
  } // constant pool size = 22B, number of visited nodes = 5, static init size = 0B
}

class log_drf_1_Tree_29_class_15 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0]) || data[0 /* vlan */] <142.0f ? 
         (Double.isNaN(data[0]) || data[0 /* vlan */] <136.5f ? 
             (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.8984375f ? 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.0859375f ? 
                     (data[3 /* no_of_ips */] <0.5f ? 
                        1.9527436E-4f : 
                        0.0f) : 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <127.0f ? 
                        0.0013595353f : 
                        0.50574714f)) : 
                 (data[3 /* no_of_ips */] <1.5f ? 
                    0.0f : 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <100.5f ? 
                        0.12834395f : 
                        0.0f))) : 
             (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.44921875f ? 
                 (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.1015625f ? 
                     (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.125f ? 
                        0.06737588f : 
                        1.0f) : 
                    0.0f) : 
                 (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.22265625f ? 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.171875f ? 
                        0.9045454f : 
                        0.0f) : 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <180.5f ? 
                        0.0f : 
                        1.0f)))) : 
        0.0f);
    return pred;
  } // constant pool size = 58B, number of visited nodes = 14, static init size = 0B
}

class log_drf_1_Tree_29_class_16 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0]) || data[0 /* vlan */] <83.5f ? 
         (Double.isNaN(data[0]) || data[0 /* vlan */] <30.5f ? 
            0.0f : 
             (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.8730469f ? 
                 (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.2890625f ? 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.3125f ? 
                        0.0011995202f : 
                        0.0045801527f) : 
                    0.5f) : 
                0.012722646f)) : 
        0.0f);
    return pred;
  } // constant pool size = 22B, number of visited nodes = 5, static init size = 0B
}

class log_drf_1_Tree_29_class_17 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0]) || data[0 /* vlan */] <180.5f ? 
         (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.029296875f ? 
            0.0f : 
             (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.29492188f ? 
                0.0f : 
                 (data[1 /* type_of_time */] <4.5f ? 
                    0.0f : 
                     (data[7 /* 6_letter_word */] <0.3181559f ? 
                        1.0f : 
                        0.0f)))) : 
         (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.3095703f ? 
             (data[5 /* 4_letter_word */] <0.03125f ? 
                 (data[1 /* type_of_time */] <4.5f ? 
                    0.0f : 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.078125f ? 
                        0.29208925f : 
                        0.0f)) : 
                0.0f) : 
             (data[1 /* type_of_time */] <4.5f ? 
                0.0f : 
                 (data[3 /* no_of_ips */] <3.5f ? 
                    0.0f : 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.5208333f ? 
                        0.96575344f : 
                        0.23076923f)))));
    return pred;
  } // constant pool size = 50B, number of visited nodes = 12, static init size = 0B
}

class log_drf_1_Tree_29_class_18 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.07470703f ? 
        0.0f : 
        5.3321957E-5f);
    return pred;
  } // constant pool size = 6B, number of visited nodes = 1, static init size = 0B
}

class log_drf_1_Tree_29_class_19 {
  static final double score0(double[] data) {
    double pred =      (data[0 /* vlan */] <14.5f ? 
         (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.23535156f ? 
             (data[6 /* 5_letter_word */] <0.03125f ? 
                 (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.045572918f ? 
                    2.337541E-4f : 
                    0.0f) : 
                0.0f) : 
            1.0f) : 
        0.0f);
    return pred;
  } // constant pool size = 18B, number of visited nodes = 4, static init size = 0B
}

class log_drf_1_Tree_29_class_20 {
  static final double score0(double[] data) {
    double pred =      (data[0 /* vlan */] <23.5f ? 
         (data[0 /* vlan */] <17.5f ? 
            0.0f : 
             (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.47070312f ? 
                 (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.22265625f ? 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.04045105f ? 
                        0.9998558f : 
                        1.0f) : 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <180.5f ? 
                        1.0f : 
                        0.9981203f)) : 
                 (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.0859375f ? 
                    1.0f : 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.15625f ? 
                        0.99570817f : 
                        0.8f)))) : 
        0.0f);
    return pred;
  } // constant pool size = 34B, number of visited nodes = 8, static init size = 0B
}

class log_drf_1_Tree_29_class_21 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[12]) || data[12 /* 11_letter_word */] <0.22460938f ? 
         (data[0 /* vlan */] <11.5f ? 
             (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.78515625f ? 
                0.0f : 
                 (data[6 /* 5_letter_word */] <0.07421875f ? 
                    0.0f : 
                    0.42857143f)) : 
             (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.15429688f ? 
                 (Double.isNaN(data[13]) || data[13 /* 12_letter_word */] <0.18359375f ? 
                     (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.015625f ? 
                        0.0013932234f : 
                        8.9118614E-5f) : 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.171875f ? 
                        0.018181818f : 
                        0.0f)) : 
                 (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.44921875f ? 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.546875f ? 
                        0.0018450185f : 
                        0.125f) : 
                     (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.0859375f ? 
                        8.880995E-4f : 
                        0.4047619f)))) : 
         (data[1 /* type_of_time */] <3.5f ? 
            1.0f : 
            0.0f));
    return pred;
  } // constant pool size = 50B, number of visited nodes = 12, static init size = 0B
}

class log_drf_1_Tree_29_class_22 {
  static final double score0(double[] data) {
    double pred =      (data[0 /* vlan */] <5.5f ? 
         (Double.isNaN(data[0]) || data[0 /* vlan */] <4.5f ? 
            0.0f : 
            0.21428572f) : 
         (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.4765625f ? 
            0.0f : 
            4.7682624E-5f));
    return pred;
  } // constant pool size = 14B, number of visited nodes = 3, static init size = 0B
}

class log_drf_1_Tree_29_class_23 {
  static final double score0(double[] data) {
    double pred =      (data[0 /* vlan */] <14.5f ? 
         (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.26757812f ? 
             (data[5 /* 4_letter_word */] <0.056640625f ? 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.2890625f ? 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.7421875f ? 
                        0.78456837f : 
                        0.0f) : 
                     (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.0859375f ? 
                        0.06315789f : 
                        1.0f)) : 
                 (Double.isNaN(data[13]) || data[13 /* 12_letter_word */] <0.046875f ? 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.265625f ? 
                        2.3975066E-4f : 
                        0.21212122f) : 
                    1.0f)) : 
             (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.38085938f ? 
                 (data[1 /* type_of_time */] <4.5f ? 
                    0.0f : 
                     (data[9 /* 8_letter_word */] <0.3203125f ? 
                        0.0f : 
                        1.0f)) : 
                0.99903196f)) : 
        0.0f);
    return pred;
  } // constant pool size = 46B, number of visited nodes = 11, static init size = 0B
}

class log_drf_1_Tree_29_class_24 {
  static final double score0(double[] data) {
    double pred =      (data[0 /* vlan */] <11.5f ? 
         (Double.isNaN(data[0]) || data[0 /* vlan */] <8.5f ? 
            0.0f : 
             (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.8730469f ? 
                0.0f : 
                1.0f)) : 
        0.0f);
    return pred;
  } // constant pool size = 14B, number of visited nodes = 3, static init size = 0B
}

class log_drf_1_Tree_29_class_25 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0]) || data[0 /* vlan */] <41.0f ? 
         (Double.isNaN(data[0]) || data[0 /* vlan */] <29.5f ? 
             (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <1.5f ? 
                 (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.22265625f ? 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.046875f ? 
                        6.1597425E-4f : 
                        0.0f) : 
                     (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.203125f ? 
                        0.0010562704f : 
                        0.10236221f)) : 
                 (data[5 /* 4_letter_word */] <0.05859375f ? 
                     (data[3 /* no_of_ips */] <4.5f ? 
                        1.0f : 
                        0.0f) : 
                     (data[7 /* 6_letter_word */] <0.3203125f ? 
                        0.09132653f : 
                        2.4551927E-4f))) : 
             (Double.isNaN(data[4]) || data[4 /* no_of_macs */] <0.5f ? 
                 (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <2.5f ? 
                     (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <1.5f ? 
                        0.9793415f : 
                        0.8662463f) : 
                     (data[6 /* 5_letter_word */] <0.4296875f ? 
                        1.0f : 
                        0.9995632f)) : 
                 (data[4 /* no_of_macs */] <1.5f ? 
                    1.0f : 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.7421875f ? 
                        1.0f : 
                        0.9979654f)))) : 
         (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
            0.0f : 
             (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.9746094f ? 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.578125f ? 
                    0.0f : 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <128.0f ? 
                        0.0f : 
                        0.2857143f)) : 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <120.5f ? 
                    0.0f : 
                     (data[2 /* no_of_characters */] <566.5f ? 
                        1.0f : 
                        0.0f)))));
    return pred;
  } // constant pool size = 86B, number of visited nodes = 21, static init size = 0B
}

class log_drf_1_Tree_29_class_26 {
  static final double score0(double[] data) {
    double pred =      (data[0 /* vlan */] <29.5f ? 
         (Double.isNaN(data[0]) || data[0 /* vlan */] <28.5f ? 
            0.0f : 
             (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.31054688f ? 
                0.0f : 
                 (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.25f ? 
                    0.9952153f : 
                    0.0f))) : 
        0.0f);
    return pred;
  } // constant pool size = 18B, number of visited nodes = 4, static init size = 0B
}

class log_drf_1_Tree_29_class_27 {
  static final double score0(double[] data) {
    double pred =      (data[0 /* vlan */] <14.5f ? 
         (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.22460938f ? 
            0.0f : 
             (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.46289062f ? 
                0.0f : 
                 (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.04296875f ? 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <210.5f ? 
                        0.0f : 
                        0.4f) : 
                    0.0f))) : 
        0.0f);
    return pred;
  } // constant pool size = 22B, number of visited nodes = 5, static init size = 0B
}

class log_drf_1_Tree_29_class_28 {
  static final double score0(double[] data) {
    double pred =      (data[0 /* vlan */] <14.5f ? 
         (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.041992188f ? 
             (data[6 /* 5_letter_word */] <0.18359375f ? 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.53515625f ? 
                     (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.15625f ? 
                        0.004858531f : 
                        0.082666665f) : 
                     (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.1015625f ? 
                        0.7487923f : 
                        0.0f)) : 
                 (data[1 /* type_of_time */] <4.5f ? 
                    0.0f : 
                     (data[3 /* no_of_ips */] <3.5f ? 
                        0.0f : 
                        1.0f))) : 
             (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <4.0f ? 
                0.0f : 
                1.0f)) : 
        0.0f);
    return pred;
  } // constant pool size = 38B, number of visited nodes = 9, static init size = 0B
}

class log_drf_1_Tree_29_class_29 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[12]) || data[12 /* 11_letter_word */] <0.0087890625f ? 
         (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.18359375f ? 
            0.0f : 
             (data[3 /* no_of_ips */] <0.5f ? 
                 (data[10 /* 9_letter_word */] <0.22505188f ? 
                     (data[2 /* no_of_characters */] <200.5f ? 
                        0.012345679f : 
                        0.0f) : 
                    0.0f) : 
                0.0f)) : 
         (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.6904297f ? 
             (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.5340042f ? 
                 (data[12 /* 11_letter_word */] <0.055252075f ? 
                     (data[4 /* no_of_macs */] <0.5f ? 
                        0.6666667f : 
                        0.0f) : 
                    0.0f) : 
                 (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.02734375f ? 
                    0.0f : 
                    1.0f)) : 
            1.0f));
    return pred;
  } // constant pool size = 42B, number of visited nodes = 10, static init size = 0B
}

class log_drf_1_Tree_29_class_30 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0]) || data[0 /* vlan */] <177.0f ? 
        0.0f : 
         (data[0 /* vlan */] <180.5f ? 
             (data[3 /* no_of_ips */] <1.0f ? 
                0.0f : 
                1.0f) : 
            0.0f));
    return pred;
  } // constant pool size = 14B, number of visited nodes = 3, static init size = 0B
}

class log_drf_1_Tree_29_class_31 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[13]) || data[13 /* 12_letter_word */] <0.23583984f ? 
         (Double.isNaN(data[0]) || data[0 /* vlan */] <99.5f ? 
             (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <1.5f ? 
                 (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.1484375f ? 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <83.5f ? 
                        0.0011922396f : 
                        0.89979124f) : 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.41455078f ? 
                        0.012085881f : 
                        0.0f)) : 
                0.0f) : 
             (data[8 /* 7_letter_word */] <0.25976562f ? 
                 (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
                    0.0f : 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <280.5f ? 
                        0.0f : 
                        0.001776199f)) : 
                0.0f)) : 
         (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
            0.0f : 
             (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.16796875f ? 
                 (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.084635414f ? 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.5800781f ? 
                        0.85f : 
                        0.0f) : 
                    0.0f) : 
                0.0f)));
    return pred;
  } // constant pool size = 54B, number of visited nodes = 13, static init size = 0B
}

class log_drf_1_Tree_29_class_32 {
  static final double score0(double[] data) {
    double pred =      (data[0 /* vlan */] <29.5f ? 
         (Double.isNaN(data[0]) || data[0 /* vlan */] <28.5f ? 
             (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.05078125f ? 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.125f ? 
                     (Double.isNaN(data[13]) || data[13 /* 12_letter_word */] <0.2890625f ? 
                        0.0f : 
                        0.083333336f) : 
                    0.0f) : 
                0.0f) : 
             (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.125f ? 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.3203125f ? 
                     (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.3671875f ? 
                        0.0f : 
                        1.0f) : 
                     (data[10 /* 9_letter_word */] <0.1015625f ? 
                        0.8703704f : 
                        1.0f)) : 
                1.0f)) : 
        0.0f);
    return pred;
  } // constant pool size = 38B, number of visited nodes = 9, static init size = 0B
}

class log_drf_1_Tree_29_class_33 {
  static final double score0(double[] data) {
    double pred =      (data[0 /* vlan */] <7.5f ? 
         (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.083984375f ? 
            1.0f : 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <3.5f ? 
                0.0f : 
                 (data[5 /* 4_letter_word */] <0.37109375f ? 
                    1.0f : 
                    0.0f))) : 
         (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.40820312f ? 
             (data[8 /* 7_letter_word */] <0.25976562f ? 
                 (data[1 /* type_of_time */] <2.5f ? 
                     (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                        0.009345794f : 
                        0.0f) : 
                     (data[1 /* type_of_time */] <4.5f ? 
                        0.0f : 
                        5.991791E-4f)) : 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.5286789f ? 
                     (data[9 /* 8_letter_word */] <0.03125f ? 
                        2.3030861E-4f : 
                        0.0f) : 
                    0.0f)) : 
             (data[5 /* 4_letter_word */] <0.4706192f ? 
                 (data[0 /* vlan */] <18.5f ? 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <440.0f ? 
                        0.98039216f : 
                        0.0f) : 
                    0.0f) : 
                 (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.06640625f ? 
                     (data[2 /* no_of_characters */] <100.5f ? 
                        0.0072855954f : 
                        1.13318725E-4f) : 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.15625f ? 
                        0.008822401f : 
                        0.14965986f)))));
    return pred;
  } // constant pool size = 70B, number of visited nodes = 17, static init size = 0B
}

class log_drf_1_Tree_29_class_34 {
  static final double score0(double[] data) {
    double pred =      (data[0 /* vlan */] <10.0f ? 
        0.003058104f : 
        5.0081885E-6f);
    return pred;
  } // constant pool size = 6B, number of visited nodes = 1, static init size = 0B
}

class log_drf_1_Tree_29_class_35 {
  static final double score0(double[] data) {
    double pred =      (data[0 /* vlan */] <12.5f ? 
         (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.21582031f ? 
            0.0f : 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <11.5f ? 
                 (data[2 /* no_of_characters */] <135.5f ? 
                    0.5f : 
                    0.0f) : 
                1.0f)) : 
         (data[1 /* type_of_time */] <4.5f ? 
            0.0f : 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <140.5f ? 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <126.5f ? 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.0859375f ? 
                        1.3856174E-4f : 
                        0.0f) : 
                     (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <1.5f ? 
                        0.0014887282f : 
                        0.0f)) : 
                 (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.51953125f ? 
                    0.0f : 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.0703125f ? 
                        1.9731649E-4f : 
                        0.005524862f)))));
    return pred;
  } // constant pool size = 46B, number of visited nodes = 11, static init size = 0B
}

class log_drf_1_Tree_29_class_36 {
  static final double score0(double[] data) {
    double pred =      (data[0 /* vlan */] <5.5f ? 
         (Double.isNaN(data[0]) || data[0 /* vlan */] <4.5f ? 
            0.0f : 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <130.5f ? 
                1.0f : 
                0.4f)) : 
        0.0f);
    return pred;
  } // constant pool size = 14B, number of visited nodes = 3, static init size = 0B
}

class log_drf_1_Tree_29_class_37 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0]) || data[0 /* vlan */] <156.5f ? 
         (data[0 /* vlan */] <14.5f ? 
             (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                 (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
                     (data[1 /* type_of_time */] <3.0f ? 
                        0.98f : 
                        1.0f) : 
                     (data[9 /* 8_letter_word */] <0.0625f ? 
                        0.004784689f : 
                        0.0f)) : 
                0.0f) : 
             (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.20703125f ? 
                 (data[3 /* no_of_ips */] <0.5f ? 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <22.5f ? 
                        1.3014056E-4f : 
                        0.018081367f) : 
                    1.4303424E-4f) : 
                 (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.2890625f ? 
                    0.0f : 
                     (data[3 /* no_of_ips */] <0.5f ? 
                        0.010309278f : 
                        0.0f)))) : 
         (data[1 /* type_of_time */] <3.5f ? 
             (data[1 /* type_of_time */] <2.5f ? 
                 (data[8 /* 7_letter_word */] <0.125f ? 
                     (data[5 /* 4_letter_word */] <0.5f ? 
                        0.06666667f : 
                        0.0f) : 
                    0.0f) : 
                0.0f) : 
             (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
                 (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.22265625f ? 
                     (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                        0.9987301f : 
                        1.0f) : 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <260.5f ? 
                        0.99778885f : 
                        0.98846895f)) : 
                 (data[0 /* vlan */] <170.5f ? 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.3671875f ? 
                        0.75f : 
                        0.0f) : 
                     (data[2 /* no_of_characters */] <90.5f ? 
                        0.12987013f : 
                        0.0f)))));
    return pred;
  } // constant pool size = 90B, number of visited nodes = 22, static init size = 0B
}

class log_drf_1_Tree_29_class_38 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0]) || data[0 /* vlan */] <85.5f ? 
        0.0f : 
         (data[0 /* vlan */] <99.5f ? 
             (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.83203125f ? 
                0.0f : 
                0.007575758f) : 
            0.0f));
    return pred;
  } // constant pool size = 14B, number of visited nodes = 3, static init size = 0B
}


class log_drf_1_Forest_30 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += log_drf_1_Tree_30_class_0.score0(fdata);
    preds[2] += log_drf_1_Tree_30_class_1.score0(fdata);
    preds[3] += log_drf_1_Tree_30_class_2.score0(fdata);
    preds[4] += log_drf_1_Tree_30_class_3.score0(fdata);
    preds[5] += log_drf_1_Tree_30_class_4.score0(fdata);
    preds[6] += log_drf_1_Tree_30_class_5.score0(fdata);
    preds[7] += log_drf_1_Tree_30_class_6.score0(fdata);
    preds[8] += log_drf_1_Tree_30_class_7.score0(fdata);
    preds[9] += log_drf_1_Tree_30_class_8.score0(fdata);
    preds[10] += log_drf_1_Tree_30_class_9.score0(fdata);
    preds[11] += log_drf_1_Tree_30_class_10.score0(fdata);
    preds[12] += log_drf_1_Tree_30_class_11.score0(fdata);
    preds[13] += log_drf_1_Tree_30_class_12.score0(fdata);
    preds[14] += log_drf_1_Tree_30_class_13.score0(fdata);
    preds[15] += log_drf_1_Tree_30_class_14.score0(fdata);
    preds[16] += log_drf_1_Tree_30_class_15.score0(fdata);
    preds[17] += log_drf_1_Tree_30_class_16.score0(fdata);
    preds[18] += log_drf_1_Tree_30_class_17.score0(fdata);
    preds[19] += log_drf_1_Tree_30_class_18.score0(fdata);
    preds[20] += log_drf_1_Tree_30_class_19.score0(fdata);
    preds[21] += log_drf_1_Tree_30_class_20.score0(fdata);
    preds[22] += log_drf_1_Tree_30_class_21.score0(fdata);
    preds[23] += log_drf_1_Tree_30_class_22.score0(fdata);
    preds[24] += log_drf_1_Tree_30_class_23.score0(fdata);
    preds[25] += log_drf_1_Tree_30_class_24.score0(fdata);
    preds[26] += log_drf_1_Tree_30_class_25.score0(fdata);
    preds[27] += log_drf_1_Tree_30_class_26.score0(fdata);
    preds[28] += log_drf_1_Tree_30_class_27.score0(fdata);
    preds[29] += log_drf_1_Tree_30_class_28.score0(fdata);
    preds[30] += log_drf_1_Tree_30_class_29.score0(fdata);
    preds[31] += log_drf_1_Tree_30_class_30.score0(fdata);
    preds[32] += log_drf_1_Tree_30_class_31.score0(fdata);
    preds[33] += log_drf_1_Tree_30_class_32.score0(fdata);
    preds[34] += log_drf_1_Tree_30_class_33.score0(fdata);
    preds[35] += log_drf_1_Tree_30_class_34.score0(fdata);
    preds[36] += log_drf_1_Tree_30_class_35.score0(fdata);
    preds[37] += log_drf_1_Tree_30_class_36.score0(fdata);
    preds[38] += log_drf_1_Tree_30_class_37.score0(fdata);
    preds[39] += log_drf_1_Tree_30_class_38.score0(fdata);
  }
}
class log_drf_1_Tree_30_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[12]) || data[12 /* 11_letter_word */] <0.017578125f ? 
         (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.0126953125f ? 
             (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.0234375f ? 
                 (Double.isNaN(data[4]) || data[4 /* no_of_macs */] <0.5f ? 
                    0.0f : 
                     (data[3 /* no_of_ips */] <0.5f ? 
                        1.0f : 
                        0.0f)) : 
                 (Double.isNaN(data[4]) || data[4 /* no_of_macs */] <0.5f ? 
                    0.0f : 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.1328125f ? 
                        0.0f : 
                        0.85714287f))) : 
             (Double.isNaN(data[4]) || data[4 /* no_of_macs */] <0.5f ? 
                0.0f : 
                1.0f)) : 
         (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <740.5f ? 
            0.0f : 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <965.0f ? 
                1.0f : 
                0.0f)));
    return pred;
  } // constant pool size = 42B, number of visited nodes = 10, static init size = 0B
}

class log_drf_1_Tree_30_class_1 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.39208984f ? 
         (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
            0.0f : 
             (data[6 /* 5_letter_word */] <0.17382812f ? 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <260.5f ? 
                    0.0f : 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.2890625f ? 
                        0.0f : 
                        0.6f)) : 
                 (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.70954895f ? 
                    0.0f : 
                     (data[6 /* 5_letter_word */] <0.7912383f ? 
                        0.2631579f : 
                        0.0f)))) : 
         (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <257.5f ? 
            0.0f : 
             (data[3 /* no_of_ips */] <1.5f ? 
                 (data[8 /* 7_letter_word */] <0.265625f ? 
                    0.0f : 
                     (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
                        0.045454547f : 
                        0.9101124f)) : 
                0.0f)));
    return pred;
  } // constant pool size = 46B, number of visited nodes = 11, static init size = 0B
}

class log_drf_1_Tree_30_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.49560547f ? 
         (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <1.5f ? 
             (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.20898438f ? 
                 (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.6328125f ? 
                        9.154635E-4f : 
                        0.019908117f) : 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.921875f ? 
                        0.00295858f : 
                        0.7446808f)) : 
                 (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
                    0.0f : 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.26716232f ? 
                        0.0034019116f : 
                        0.031347964f))) : 
             (Double.isNaN(data[4]) || data[4 /* no_of_macs */] <1.5f ? 
                0.0f : 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.22265625f ? 
                    0.0f : 
                     (data[9 /* 8_letter_word */] <0.125f ? 
                        0.2f : 
                        0.0f)))) : 
         (data[2 /* no_of_characters */] <158.5f ? 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <147.5f ? 
                 (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.0859375f ? 
                     (data[3 /* no_of_ips */] <0.5f ? 
                        0.035787024f : 
                        0.0038517092f) : 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <140.5f ? 
                        0.0f : 
                        0.95652175f)) : 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.4140625f ? 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.078125f ? 
                        4.214075E-4f : 
                        0.45945945f) : 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <152.5f ? 
                        0.9350649f : 
                        0.98344374f))) : 
             (data[2 /* no_of_characters */] <165.5f ? 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <174.5f ? 
                    0.0f : 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <185.0f ? 
                        0.16666667f : 
                        0.0f)) : 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.4609375f ? 
                    0.0f : 
                     (Double.isNaN(data[4]) || data[4 /* no_of_macs */] <0.5f ? 
                        0.0051282053f : 
                        0.0f)))));
    return pred;
  } // constant pool size = 98B, number of visited nodes = 24, static init size = 0B
}

class log_drf_1_Tree_30_class_3 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.39208984f ? 
         (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.026367188f ? 
             (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.35351562f ? 
                 (data[2 /* no_of_characters */] <110.5f ? 
                     (data[1 /* type_of_time */] <4.5f ? 
                        0.014880952f : 
                        0.0f) : 
                    0.0f) : 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.265625f ? 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.22619629f ? 
                        0.0f : 
                        0.15517241f) : 
                     (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
                        0.0f : 
                        0.8023599f))) : 
             (data[8 /* 7_letter_word */] <0.25976562f ? 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.2364273f ? 
                    0.0f : 
                     (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.0625f ? 
                        0.0025641026f : 
                        0.0f)) : 
                0.0f)) : 
         (data[2 /* no_of_characters */] <158.5f ? 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <141.5f ? 
                 (data[1 /* type_of_time */] <4.5f ? 
                     (data[2 /* no_of_characters */] <90.0f ? 
                        0.25f : 
                        0.0f) : 
                    0.0f) : 
                 (data[6 /* 5_letter_word */] <0.22265625f ? 
                    0.0f : 
                     (data[3 /* no_of_ips */] <0.5f ? 
                        0.0f : 
                        0.9675939f))) : 
             (data[2 /* no_of_characters */] <165.5f ? 
                 (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.3671875f ? 
                    0.0f : 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.4515625f ? 
                        1.0f : 
                        0.1f)) : 
                0.0f)));
    return pred;
  } // constant pool size = 82B, number of visited nodes = 20, static init size = 0B
}

class log_drf_1_Tree_30_class_4 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.3095703f ? 
         (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.87402344f ? 
             (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.12109375f ? 
                2.8705936E-5f : 
                 (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <1.5f ? 
                     (data[6 /* 5_letter_word */] <0.14855957f ? 
                        0.01577287f : 
                        5.5406268E-5f) : 
                    0.0f)) : 
             (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <25.5f ? 
                    0.0f : 
                     (data[0 /* vlan */] <28.5f ? 
                        1.0f : 
                        0.0f)) : 
                0.0f)) : 
         (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.29101562f ? 
            0.0f : 
             (data[2 /* no_of_characters */] <118.0f ? 
                 (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.16796875f ? 
                    0.0f : 
                    1.0f) : 
                0.0f)));
    return pred;
  } // constant pool size = 46B, number of visited nodes = 11, static init size = 0B
}

class log_drf_1_Tree_30_class_5 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.27929688f ? 
         (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.22460938f ? 
            0.0f : 
             (data[6 /* 5_letter_word */] <0.234375f ? 
                 (data[2 /* no_of_characters */] <100.5f ? 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.1265564f ? 
                        0.0f : 
                        0.015873017f) : 
                    0.0f) : 
                 (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.26660156f ? 
                     (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
                        0.0f : 
                        0.010014306f) : 
                    0.0f))) : 
         (data[1 /* type_of_time */] <4.5f ? 
            0.0f : 
             (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.046875f ? 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.12276786f ? 
                     (data[3 /* no_of_ips */] <0.5f ? 
                        4.8559404E-4f : 
                        0.0f) : 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.046875f ? 
                        0.0021331059f : 
                        0.014380531f)) : 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <33.5f ? 
                    0.0f : 
                     (data[10 /* 9_letter_word */] <0.100138344f ? 
                        0.75f : 
                        0.021052632f)))));
    return pred;
  } // constant pool size = 58B, number of visited nodes = 14, static init size = 0B
}

class log_drf_1_Tree_30_class_6 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.24804688f ? 
         (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.8330078f ? 
             (data[6 /* 5_letter_word */] <0.029296875f ? 
                 (data[2 /* no_of_characters */] <50.5f ? 
                     (data[0 /* vlan */] <106.0f ? 
                        0.8888889f : 
                        0.0f) : 
                    0.0f) : 
                0.0f) : 
             (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <89.5f ? 
                    0.0f : 
                     (data[0 /* vlan */] <149.5f ? 
                        1.0f : 
                        0.0f)) : 
                0.0f)) : 
         (data[2 /* no_of_characters */] <98.5f ? 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <109.5f ? 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <85.0f ? 
                     (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.1015625f ? 
                        0.0f : 
                        0.8f) : 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.171875f ? 
                        0.252809f : 
                        0.0f)) : 
                 (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.8296356f ? 
                        0.9955556f : 
                        0.0f) : 
                    0.0f)) : 
             (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.17382812f ? 
                 (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.15625f ? 
                    0.0f : 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.15820312f ? 
                        0.0f : 
                        0.022315789f)) : 
                0.0f)));
    return pred;
  } // constant pool size = 74B, number of visited nodes = 18, static init size = 0B
}

class log_drf_1_Tree_30_class_7 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.94970703f ? 
        0.0f : 
         (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <2.5f ? 
            0.026555246f : 
            0.0f));
    return pred;
  } // constant pool size = 10B, number of visited nodes = 2, static init size = 0B
}

class log_drf_1_Tree_30_class_8 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.53759766f ? 
         (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.018554688f ? 
             (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.9746094f ? 
                 (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.84897614f ? 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <178.5f ? 
                        0.0f : 
                        0.028502122f) : 
                    1.0f) : 
                0.0f) : 
             (data[8 /* 7_letter_word */] <0.013671875f ? 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <864.0f ? 
                    0.0f : 
                    0.07692308f) : 
                0.0f)) : 
         (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <830.0f ? 
            0.0f : 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <946.5f ? 
                1.0f : 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <174.5f ? 
                    0.0f : 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <1021.5f ? 
                        1.0f : 
                        0.2f)))));
    return pred;
  } // constant pool size = 46B, number of visited nodes = 11, static init size = 0B
}

class log_drf_1_Tree_30_class_9 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.095703125f ? 
         (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.3095703f ? 
             (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.19106293f ? 
                 (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.16015625f ? 
                     (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                        0.0f : 
                        7.91703E-5f) : 
                     (data[6 /* 5_letter_word */] <0.17327881f ? 
                        0.013446568f : 
                        0.0012470024f)) : 
                 (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <2.5f ? 
                    0.0f : 
                     (data[6 /* 5_letter_word */] <0.0546875f ? 
                        1.0f : 
                        0.0f))) : 
             (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <3.5f ? 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <154.5f ? 
                    0.0f : 
                     (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <2.0f ? 
                        0.0f : 
                        1.0f)) : 
                1.0f)) : 
         (data[1 /* type_of_time */] <3.5f ? 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <173.5f ? 
                 (data[3 /* no_of_ips */] <1.0f ? 
                    0.0f : 
                    1.0f) : 
                0.0f) : 
            0.0f));
    return pred;
  } // constant pool size = 58B, number of visited nodes = 14, static init size = 0B
}

class log_drf_1_Tree_30_class_10 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.6455078f ? 
        5.9287013E-6f : 
         (data[2 /* no_of_characters */] <94.5f ? 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <88.0f ? 
                0.0f : 
                1.0f) : 
            0.0f));
    return pred;
  } // constant pool size = 14B, number of visited nodes = 3, static init size = 0B
}

class log_drf_1_Tree_30_class_11 {
  static final double score0(double[] data) {
    double pred =     5.0E-6f;
    return pred;
  } // constant pool size = 2B, number of visited nodes = 0, static init size = 0B
}

class log_drf_1_Tree_30_class_12 {
  static final double score0(double[] data) {
    double pred =      (data[8 /* 7_letter_word */] <0.012207031f ? 
         (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.5830078f ? 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <423.0f ? 
                0.0f : 
                 (data[3 /* no_of_ips */] <1.5f ? 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <589.0f ? 
                        0.0f : 
                        1.0f) : 
                    0.0f)) : 
            0.009779952f) : 
        0.0f);
    return pred;
  } // constant pool size = 22B, number of visited nodes = 5, static init size = 0B
}

class log_drf_1_Tree_30_class_13 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.26123047f ? 
         (data[3 /* no_of_ips */] <0.5f ? 
             (data[2 /* no_of_characters */] <55.5f ? 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <36.5f ? 
                     (data[0 /* vlan */] <17.5f ? 
                        0.0f : 
                        1.0f) : 
                     (data[5 /* 4_letter_word */] <0.125f ? 
                        0.0f : 
                        1.0f)) : 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <593.0f ? 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.19184113f ? 
                        0.0f : 
                        0.0070422534f) : 
                    1.0f)) : 
             (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.1908207f ? 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <593.0f ? 
                    0.0f : 
                    0.041666668f) : 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <174.5f ? 
                    0.0f : 
                     (Double.isNaN(data[1]) || data[1 /* type_of_time */] <3.0f ? 
                        0.0f : 
                        0.33333334f)))) : 
         (data[2 /* no_of_characters */] <47.0f ? 
             (data[2 /* no_of_characters */] <37.5f ? 
                0.0f : 
                0.33333334f) : 
            0.0f));
    return pred;
  } // constant pool size = 58B, number of visited nodes = 14, static init size = 0B
}

class log_drf_1_Tree_30_class_14 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[12]) || data[12 /* 11_letter_word */] <0.18310547f ? 
         (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.19140625f ? 
            0.0f : 
             (data[11 /* 10_letter_word */] <0.21035767f ? 
                 (data[3 /* no_of_ips */] <0.5f ? 
                     (data[1 /* type_of_time */] <3.0f ? 
                        1.0f : 
                        0.0f) : 
                    0.0f) : 
                0.0f)) : 
         (data[1 /* type_of_time */] <2.5f ? 
            1.0f : 
            0.0f));
    return pred;
  } // constant pool size = 26B, number of visited nodes = 6, static init size = 0B
}

class log_drf_1_Tree_30_class_15 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.94970703f ? 
         (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.3095703f ? 
             (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.4140625f ? 
                 (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.38656616f ? 
                     (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <1.5f ? 
                        0.0012889341f : 
                        0.0053384f) : 
                     (data[2 /* no_of_characters */] <160.5f ? 
                        0.1308017f : 
                        0.0f)) : 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <150.5f ? 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.4140625f ? 
                        0.0f : 
                        0.0012376237f) : 
                     (data[3 /* no_of_ips */] <0.5f ? 
                        0.0017953322f : 
                        3.152585E-4f))) : 
             (data[3 /* no_of_ips */] <0.5f ? 
                 (data[1 /* type_of_time */] <4.5f ? 
                    0.0f : 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <136.0f ? 
                        0.0f : 
                        1.0f)) : 
                0.0f)) : 
         (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <100.5f ? 
             (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <2.5f ? 
                 (Double.isNaN(data[4]) || data[4 /* no_of_macs */] <0.5f ? 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <97.5f ? 
                        0.0f : 
                        0.30832708f) : 
                    0.0f) : 
                0.0f) : 
            0.0f));
    return pred;
  } // constant pool size = 66B, number of visited nodes = 16, static init size = 0B
}

class log_drf_1_Tree_30_class_16 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.94970703f ? 
         (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.3095703f ? 
             (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.32226562f ? 
                 (data[2 /* no_of_characters */] <110.5f ? 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <33.5f ? 
                        3.0432135E-4f : 
                        0.0f) : 
                    0.0f) : 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.15625f ? 
                     (data[3 /* no_of_ips */] <0.5f ? 
                        1.7421602E-4f : 
                        0.0f) : 
                     (data[8 /* 7_letter_word */] <0.1841634f ? 
                        0.016949153f : 
                        1.7035776E-4f))) : 
             (data[3 /* no_of_ips */] <0.5f ? 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.16666667f ? 
                    0.0f : 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.41666666f ? 
                        0.004237288f : 
                        0.0f)) : 
                0.0f)) : 
         (data[2 /* no_of_characters */] <80.5f ? 
             (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                0.02247191f : 
                0.0f) : 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <99.5f ? 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <98.5f ? 
                    0.0f : 
                     (data[3 /* no_of_ips */] <1.0f ? 
                        0.5f : 
                        0.0f)) : 
                0.0f)));
    return pred;
  } // constant pool size = 66B, number of visited nodes = 16, static init size = 0B
}

class log_drf_1_Tree_30_class_17 {
  static final double score0(double[] data) {
    double pred =      (data[8 /* 7_letter_word */] <0.122558594f ? 
         (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <3.5f ? 
             (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.064453125f ? 
                 (Double.isNaN(data[14]) || data[14 /* 13_letter_word */] <0.03125f ? 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <178.5f ? 
                        0.0f : 
                        0.0889409f) : 
                    0.33333334f) : 
                0.0f) : 
             (data[3 /* no_of_ips */] <4.5f ? 
                 (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.83203125f ? 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.171875f ? 
                        0.6760563f : 
                        0.41538462f) : 
                    0.0f) : 
                0.0f)) : 
         (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <1011.5f ? 
            0.0f : 
             (data[3 /* no_of_ips */] <2.0f ? 
                0.0f : 
                1.0f)));
    return pred;
  } // constant pool size = 42B, number of visited nodes = 10, static init size = 0B
}

class log_drf_1_Tree_30_class_18 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.07470703f ? 
        0.0f : 
         (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.07421875f ? 
            0.0f : 
             (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.45898438f ? 
                0.0f : 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <320.5f ? 
                    0.0f : 
                    0.1f))));
    return pred;
  } // constant pool size = 18B, number of visited nodes = 4, static init size = 0B
}

class log_drf_1_Tree_30_class_19 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.24804688f ? 
         (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.19140625f ? 
            0.0f : 
             (data[11 /* 10_letter_word */] <0.21035767f ? 
                 (data[2 /* no_of_characters */] <170.5f ? 
                    0.33333334f : 
                    0.0f) : 
                0.0f)) : 
         (data[2 /* no_of_characters */] <138.5f ? 
             (data[3 /* no_of_ips */] <0.5f ? 
                0.0f : 
                 (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.125f ? 
                    0.0f : 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <17.5f ? 
                        1.0f : 
                        0.0f))) : 
             (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.22460938f ? 
                0.0f : 
                 (data[0 /* vlan */] <24.5f ? 
                     (data[2 /* no_of_characters */] <180.0f ? 
                        0.071428575f : 
                        0.0f) : 
                    0.0f))));
    return pred;
  } // constant pool size = 46B, number of visited nodes = 11, static init size = 0B
}

class log_drf_1_Tree_30_class_20 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.26123047f ? 
         (data[3 /* no_of_ips */] <0.5f ? 
             (data[1 /* type_of_time */] <4.5f ? 
                0.0f : 
                 (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.53515625f ? 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.0234375f ? 
                        0.7600159f : 
                        0.56247175f) : 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.265625f ? 
                        0.9781491f : 
                        1.0f))) : 
             (data[3 /* no_of_ips */] <1.5f ? 
                 (data[0 /* vlan */] <25.5f ? 
                     (data[7 /* 6_letter_word */] <0.046875f ? 
                        0.9197531f : 
                        0.0025773195f) : 
                    0.0f) : 
                 (data[0 /* vlan */] <25.5f ? 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.0390625f ? 
                        0.0016820858f : 
                        0.05f) : 
                    0.0f))) : 
         (data[2 /* no_of_characters */] <133.5f ? 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <25.5f ? 
                 (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.265625f ? 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.578125f ? 
                        0.9977058f : 
                        0.0f) : 
                     (data[8 /* 7_letter_word */] <0.42045453f ? 
                        0.7647059f : 
                        1.0f)) : 
                0.0f) : 
             (Double.isNaN(data[15]) || data[15 /* 14_letter_word */] <0.13867188f ? 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.30859375f ? 
                     (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <1.5f ? 
                        0.0032660277f : 
                        0.47413385f) : 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.25f ? 
                        0.02590909f : 
                        0.84435797f)) : 
                1.0f)));
    return pred;
  } // constant pool size = 82B, number of visited nodes = 20, static init size = 0B
}

class log_drf_1_Tree_30_class_21 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[12]) || data[12 /* 11_letter_word */] <0.22460938f ? 
         (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <1.5f ? 
             (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.1484375f ? 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <260.5f ? 
                     (data[0 /* vlan */] <18.5f ? 
                        0.010099188f : 
                        0.0013405062f) : 
                     (data[0 /* vlan */] <74.5f ? 
                        0.057291668f : 
                        0.009771987f)) : 
                 (data[6 /* 5_letter_word */] <0.27816772f ? 
                     (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                        6.596306E-5f : 
                        0.0015576323f) : 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <160.5f ? 
                        2.1208907E-4f : 
                        0.0017796473f))) : 
             (data[3 /* no_of_ips */] <2.5f ? 
                0.0f : 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <260.5f ? 
                    0.0f : 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <17.5f ? 
                        0.0f : 
                        0.0027777778f)))) : 
         (data[1 /* type_of_time */] <3.5f ? 
            1.0f : 
            0.0f));
    return pred;
  } // constant pool size = 54B, number of visited nodes = 13, static init size = 0B
}

class log_drf_1_Tree_30_class_22 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.16015625f ? 
        2.2002563E-5f : 
         (data[2 /* no_of_characters */] <133.5f ? 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <130.5f ? 
                0.0f : 
                 (data[0 /* vlan */] <13.5f ? 
                    0.75f : 
                    0.0f)) : 
            0.0f));
    return pred;
  } // constant pool size = 18B, number of visited nodes = 4, static init size = 0B
}

class log_drf_1_Tree_30_class_23 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.13378906f ? 
         (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.5830078f ? 
             (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.1171875f ? 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <240.5f ? 
                     (Double.isNaN(data[13]) || data[13 /* 12_letter_word */] <0.21875f ? 
                        2.688443E-4f : 
                        0.03448276f) : 
                     (data[14 /* 13_letter_word */] <0.078125f ? 
                        0.05761844f : 
                        0.0f)) : 
                 (data[0 /* vlan */] <17.5f ? 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.0625f ? 
                        0.9952741f : 
                        0.0f) : 
                    0.0f)) : 
             (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.16796875f ? 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.16796875f ? 
                     (data[1 /* type_of_time */] <4.5f ? 
                        0.0f : 
                        0.43050846f) : 
                    0.0f) : 
                 (data[1 /* type_of_time */] <4.5f ? 
                    0.0f : 
                    0.9990167f))) : 
         (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <257.5f ? 
             (data[0 /* vlan */] <13.5f ? 
                 (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.58203125f ? 
                    0.0f : 
                    0.5f) : 
                 (data[0 /* vlan */] <21.5f ? 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <177.5f ? 
                        0.0f : 
                        0.0018796993f) : 
                    0.0f)) : 
             (data[6 /* 5_letter_word */] <0.18359375f ? 
                 (Double.isNaN(data[12]) || data[12 /* 11_letter_word */] <0.0859375f ? 
                     (data[8 /* 7_letter_word */] <0.0390625f ? 
                        0.016997168f : 
                        0.0f) : 
                     (data[2 /* no_of_characters */] <374.0f ? 
                        0.0f : 
                        1.0f)) : 
                0.0f)));
    return pred;
  } // constant pool size = 86B, number of visited nodes = 21, static init size = 0B
}

class log_drf_1_Tree_30_class_24 {
  static final double score0(double[] data) {
    double pred =      (data[8 /* 7_letter_word */] <0.012207031f ? 
         (data[3 /* no_of_ips */] <0.5f ? 
            0.0f : 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <140.5f ? 
                0.0f : 
                 (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.87109375f ? 
                    0.0f : 
                     (data[0 /* vlan */] <90.0f ? 
                        1.0f : 
                        0.0f)))) : 
        0.0f);
    return pred;
  } // constant pool size = 22B, number of visited nodes = 5, static init size = 0B
}

class log_drf_1_Tree_30_class_25 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.94970703f ? 
         (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <1.5f ? 
             (Double.isNaN(data[12]) || data[12 /* 11_letter_word */] <0.15429688f ? 
                 (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.46875f ? 
                        0.069082566f : 
                        6.2912866E-4f) : 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <149.5f ? 
                        0.03746127f : 
                        0.50106156f)) : 
                 (data[1 /* type_of_time */] <4.5f ? 
                    0.0f : 
                     (data[0 /* vlan */] <25.0f ? 
                        0.0f : 
                        0.9936485f))) : 
             (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <5.5f ? 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <85.5f ? 
                     (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.0390625f ? 
                        0.99871147f : 
                        0.71949947f) : 
                     (data[9 /* 8_letter_word */] <0.078125f ? 
                        0.0023121387f : 
                        0.0f)) : 
                 (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <6.5f ? 
                    0.0f : 
                    1.0f))) : 
         (data[2 /* no_of_characters */] <98.5f ? 
             (data[3 /* no_of_ips */] <0.5f ? 
                0.0f : 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <93.5f ? 
                    1.0f : 
                    0.0f)) : 
             (data[0 /* vlan */] <29.5f ? 
                0.0f : 
                 (Double.isNaN(data[4]) || data[4 /* no_of_macs */] <0.5f ? 
                     (data[1 /* type_of_time */] <4.5f ? 
                        0.0f : 
                        0.67064315f) : 
                     (data[3 /* no_of_ips */] <1.5f ? 
                        0.0f : 
                        1.0f)))));
    return pred;
  } // constant pool size = 82B, number of visited nodes = 20, static init size = 0B
}

class log_drf_1_Tree_30_class_26 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.6513672f ? 
        0.0f : 
         (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
             (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.69086075f ? 
                 (data[8 /* 7_letter_word */] <0.25f ? 
                    0.0f : 
                     (data[0 /* vlan */] <33.5f ? 
                        0.9382151f : 
                        0.0f)) : 
                0.0f) : 
            0.0f));
    return pred;
  } // constant pool size = 22B, number of visited nodes = 5, static init size = 0B
}

class log_drf_1_Tree_30_class_27 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.49560547f ? 
        0.0f : 
         (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
             (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.5153084f ? 
                 (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.05078125f ? 
                     (data[0 /* vlan */] <17.5f ? 
                        0.004608295f : 
                        0.0f) : 
                    0.0f) : 
                0.0f) : 
            0.0f));
    return pred;
  } // constant pool size = 22B, number of visited nodes = 5, static init size = 0B
}

class log_drf_1_Tree_30_class_28 {
  static final double score0(double[] data) {
    double pred =      (data[8 /* 7_letter_word */] <0.012207031f ? 
         (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <5.5f ? 
             (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.15429688f ? 
                0.0f : 
                 (data[6 /* 5_letter_word */] <0.18359375f ? 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.2890625f ? 
                        0.0f : 
                        0.2173913f) : 
                    0.0f)) : 
             (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <6.5f ? 
                1.0f : 
                0.0f)) : 
         (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <489.5f ? 
            0.0f : 
             (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <5.5f ? 
                0.0f : 
                1.0f)));
    return pred;
  } // constant pool size = 34B, number of visited nodes = 8, static init size = 0B
}

class log_drf_1_Tree_30_class_29 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[12]) || data[12 /* 11_letter_word */] <0.0087890625f ? 
        1.0136693E-5f : 
         (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <958.5f ? 
             (data[12 /* 11_letter_word */] <0.06686783f ? 
                 (data[2 /* no_of_characters */] <737.5f ? 
                    0.5f : 
                    0.0f) : 
                0.0f) : 
            0.6666667f));
    return pred;
  } // constant pool size = 18B, number of visited nodes = 4, static init size = 0B
}

class log_drf_1_Tree_30_class_30 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.24804688f ? 
        0.0f : 
         (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <2.5f ? 
             (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.51387405f ? 
                 (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <1.5f ? 
                    0.0f : 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <178.5f ? 
                        0.0f : 
                        1.0f)) : 
                0.0f) : 
             (data[1 /* type_of_time */] <2.0f ? 
                1.0f : 
                0.0f)));
    return pred;
  } // constant pool size = 26B, number of visited nodes = 6, static init size = 0B
}

class log_drf_1_Tree_30_class_31 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.12109375f ? 
         (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.028320312f ? 
             (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.44921875f ? 
                 (data[2 /* no_of_characters */] <90.5f ? 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.4140625f ? 
                        0.067738235f : 
                        0.82539684f) : 
                     (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
                        0.0f : 
                        0.0023458118f)) : 
                0.0f) : 
             (data[8 /* 7_letter_word */] <0.05078125f ? 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <65.5f ? 
                    0.0f : 
                     (data[2 /* no_of_characters */] <100.5f ? 
                        0.045454547f : 
                        0.0f)) : 
                0.0f)) : 
         (Double.isNaN(data[15]) || data[15 /* 14_letter_word */] <0.22460938f ? 
             (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.31054688f ? 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.56315106f ? 
                     (data[1 /* type_of_time */] <4.5f ? 
                        0.0f : 
                        0.0151525065f) : 
                     (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.171875f ? 
                        0.111560225f : 
                        0.0f)) : 
                 (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.16666667f ? 
                        0.14285715f : 
                        0.0f) : 
                     (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <1.5f ? 
                        0.9673913f : 
                        0.0f))) : 
             (data[15 /* 14_letter_word */] <0.2915001f ? 
                 (data[2 /* no_of_characters */] <87.5f ? 
                    1.0f : 
                    0.8333333f) : 
                1.0f)));
    return pred;
  } // constant pool size = 78B, number of visited nodes = 19, static init size = 0B
}

class log_drf_1_Tree_30_class_32 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.19091797f ? 
         (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.23535156f ? 
             (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.029296875f ? 
                7.514503E-4f : 
                0.0f) : 
             (data[3 /* no_of_ips */] <1.5f ? 
                 (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                    0.0f : 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <27.5f ? 
                        0.0f : 
                        0.26785713f)) : 
                0.0f)) : 
         (data[2 /* no_of_characters */] <115.5f ? 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <113.5f ? 
                 (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                    0.0f : 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <94.0f ? 
                        0.97619045f : 
                        0.0f)) : 
                 (data[5 /* 4_letter_word */] <0.1f ? 
                    0.0f : 
                    1.0f)) : 
            0.0f));
    return pred;
  } // constant pool size = 46B, number of visited nodes = 11, static init size = 0B
}

class log_drf_1_Tree_30_class_33 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.40820312f ? 
         (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.44921875f ? 
             (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.9746094f ? 
                 (data[2 /* no_of_characters */] <60.5f ? 
                    0.015873017f : 
                     (data[8 /* 7_letter_word */] <0.2578125f ? 
                        3.64154E-4f : 
                        8.508647E-5f)) : 
                 (data[1 /* type_of_time */] <3.0f ? 
                    0.5f : 
                     (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
                        0.0f : 
                        0.001754386f))) : 
             (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.083984375f ? 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <41.5f ? 
                     (data[9 /* 8_letter_word */] <0.5826111f ? 
                        6.574622E-4f : 
                        0.0f) : 
                     (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
                        0.0f : 
                        0.17460318f)) : 
                0.0f)) : 
         (data[2 /* no_of_characters */] <85.5f ? 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <63.0f ? 
                0.0f : 
                 (data[0 /* vlan */] <17.5f ? 
                    1.0f : 
                    0.0f)) : 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <295.5f ? 
                 (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.1328125f ? 
                     (data[2 /* no_of_characters */] <115.5f ? 
                        7.079646E-4f : 
                        8.409014E-5f) : 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.26339287f ? 
                        0.0061728396f : 
                        0.4f)) : 
                 (data[0 /* vlan */] <17.5f ? 
                     (data[8 /* 7_letter_word */] <0.08035714f ? 
                        0.0f : 
                        0.94285715f) : 
                    0.0f))));
    return pred;
  } // constant pool size = 82B, number of visited nodes = 20, static init size = 0B
}

class log_drf_1_Tree_30_class_34 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.123535156f ? 
        0.0f : 
         (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <1.5f ? 
             (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.31054688f ? 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <210.5f ? 
                    0.0f : 
                     (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                        0.0f : 
                        0.5f)) : 
                 (data[3 /* no_of_ips */] <0.5f ? 
                     (data[0 /* vlan */] <17.5f ? 
                        0.5f : 
                        0.0f) : 
                    0.0f)) : 
            0.0f));
    return pred;
  } // constant pool size = 30B, number of visited nodes = 7, static init size = 0B
}

class log_drf_1_Tree_30_class_35 {
  static final double score0(double[] data) {
    double pred =      (data[8 /* 7_letter_word */] <0.16992188f ? 
         (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.87402344f ? 
             (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.4140625f ? 
                 (data[2 /* no_of_characters */] <120.5f ? 
                    0.0f : 
                     (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <2.5f ? 
                        6.053269E-4f : 
                        0.0f)) : 
                 (data[0 /* vlan */] <17.5f ? 
                     (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.0859375f ? 
                        0.0f : 
                        0.071428575f) : 
                    0.0f)) : 
             (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                 (data[1 /* type_of_time */] <4.5f ? 
                    0.0f : 
                     (data[2 /* no_of_characters */] <100.5f ? 
                        0.0042643924f : 
                        0.0f)) : 
                0.0f)) : 
         (data[2 /* no_of_characters */] <88.5f ? 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <87.5f ? 
                 (data[0 /* vlan */] <19.5f ? 
                     (data[1 /* type_of_time */] <3.5f ? 
                        0.0f : 
                        0.012345679f) : 
                    0.0f) : 
                 (data[3 /* no_of_ips */] <0.5f ? 
                    0.75f : 
                    0.0f)) : 
             (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.234375f ? 
                0.0f : 
                 (data[0 /* vlan */] <17.5f ? 
                     (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                        0.0f : 
                        0.33333334f) : 
                    0.0f))));
    return pred;
  } // constant pool size = 74B, number of visited nodes = 18, static init size = 0B
}

class log_drf_1_Tree_30_class_36 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.16015625f ? 
        0.0f : 
         (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.14550781f ? 
            0.0f : 
             (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.44921875f ? 
                0.0f : 
                 (data[8 /* 7_letter_word */] <0.0859375f ? 
                    0.0f : 
                    0.7692308f))));
    return pred;
  } // constant pool size = 18B, number of visited nodes = 4, static init size = 0B
}

class log_drf_1_Tree_30_class_37 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.29296875f ? 
         (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <1.5f ? 
             (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.9746094f ? 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <150.5f ? 
                     (data[1 /* type_of_time */] <4.5f ? 
                        0.9942149f : 
                        0.0040860535f) : 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.27923584f ? 
                        0.43962902f : 
                        0.0050872094f)) : 
                 (data[0 /* vlan */] <122.0f ? 
                    3.0048078E-4f : 
                     (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
                        1.0f : 
                        0.71153843f))) : 
             (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.18310547f ? 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <154.5f ? 
                     (data[2 /* no_of_characters */] <140.5f ? 
                        0.0f : 
                        3.6613274E-4f) : 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.2890625f ? 
                        0.0f : 
                        0.013921114f)) : 
                 (data[3 /* no_of_ips */] <2.5f ? 
                     (data[6 /* 5_letter_word */] <0.32421875f ? 
                        0.04f : 
                        0.89285713f) : 
                    0.0f))) : 
         (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
             (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <2.5f ? 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <255.5f ? 
                     (data[1 /* type_of_time */] <1.5f ? 
                        0.0f : 
                        0.99853164f) : 
                     (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                        0.9929453f : 
                        0.3846154f)) : 
                0.0f) : 
             (data[2 /* no_of_characters */] <122.5f ? 
                 (data[0 /* vlan */] <17.5f ? 
                     (data[0 /* vlan */] <12.5f ? 
                        0.0f : 
                        0.2f) : 
                    0.0f) : 
                0.0f)));
    return pred;
  } // constant pool size = 90B, number of visited nodes = 22, static init size = 0B
}

class log_drf_1_Tree_30_class_38 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.94970703f ? 
        5.3063627E-6f : 
        1.7320516E-4f);
    return pred;
  } // constant pool size = 6B, number of visited nodes = 1, static init size = 0B
}


class log_drf_1_Forest_31 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += log_drf_1_Tree_31_class_0.score0(fdata);
    preds[2] += log_drf_1_Tree_31_class_1.score0(fdata);
    preds[3] += log_drf_1_Tree_31_class_2.score0(fdata);
    preds[4] += log_drf_1_Tree_31_class_3.score0(fdata);
    preds[5] += log_drf_1_Tree_31_class_4.score0(fdata);
    preds[6] += log_drf_1_Tree_31_class_5.score0(fdata);
    preds[7] += log_drf_1_Tree_31_class_6.score0(fdata);
    preds[8] += log_drf_1_Tree_31_class_7.score0(fdata);
    preds[9] += log_drf_1_Tree_31_class_8.score0(fdata);
    preds[10] += log_drf_1_Tree_31_class_9.score0(fdata);
    preds[11] += log_drf_1_Tree_31_class_10.score0(fdata);
    preds[12] += log_drf_1_Tree_31_class_11.score0(fdata);
    preds[13] += log_drf_1_Tree_31_class_12.score0(fdata);
    preds[14] += log_drf_1_Tree_31_class_13.score0(fdata);
    preds[15] += log_drf_1_Tree_31_class_14.score0(fdata);
    preds[16] += log_drf_1_Tree_31_class_15.score0(fdata);
    preds[17] += log_drf_1_Tree_31_class_16.score0(fdata);
    preds[18] += log_drf_1_Tree_31_class_17.score0(fdata);
    preds[19] += log_drf_1_Tree_31_class_18.score0(fdata);
    preds[20] += log_drf_1_Tree_31_class_19.score0(fdata);
    preds[21] += log_drf_1_Tree_31_class_20.score0(fdata);
    preds[22] += log_drf_1_Tree_31_class_21.score0(fdata);
    preds[23] += log_drf_1_Tree_31_class_22.score0(fdata);
    preds[24] += log_drf_1_Tree_31_class_23.score0(fdata);
    preds[25] += log_drf_1_Tree_31_class_24.score0(fdata);
    preds[26] += log_drf_1_Tree_31_class_25.score0(fdata);
    preds[27] += log_drf_1_Tree_31_class_26.score0(fdata);
    preds[28] += log_drf_1_Tree_31_class_27.score0(fdata);
    preds[29] += log_drf_1_Tree_31_class_28.score0(fdata);
    preds[30] += log_drf_1_Tree_31_class_29.score0(fdata);
    preds[31] += log_drf_1_Tree_31_class_30.score0(fdata);
    preds[32] += log_drf_1_Tree_31_class_31.score0(fdata);
    preds[33] += log_drf_1_Tree_31_class_32.score0(fdata);
    preds[34] += log_drf_1_Tree_31_class_33.score0(fdata);
    preds[35] += log_drf_1_Tree_31_class_34.score0(fdata);
    preds[36] += log_drf_1_Tree_31_class_35.score0(fdata);
    preds[37] += log_drf_1_Tree_31_class_36.score0(fdata);
    preds[38] += log_drf_1_Tree_31_class_37.score0(fdata);
    preds[39] += log_drf_1_Tree_31_class_38.score0(fdata);
  }
}
class log_drf_1_Tree_31_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[4]) || data[4 /* no_of_macs */] <2.5f ? 
         (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.015625f ? 
             (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.30273438f ? 
                0.0f : 
                 (Double.isNaN(data[4]) || data[4 /* no_of_macs */] <0.5f ? 
                    0.0f : 
                     (data[5 /* 4_letter_word */] <0.53342015f ? 
                        0.011494253f : 
                        0.0f))) : 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <507.0f ? 
                0.0f : 
                 (data[7 /* 6_letter_word */] <0.0703125f ? 
                    0.0f : 
                     (Double.isNaN(data[12]) || data[12 /* 11_letter_word */] <0.046875f ? 
                        1.0f : 
                        0.5f)))) : 
         (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.037109375f ? 
            0.0f : 
            1.0f));
    return pred;
  } // constant pool size = 38B, number of visited nodes = 9, static init size = 0B
}

class log_drf_1_Tree_31_class_1 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.39208984f ? 
         (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.16015625f ? 
            0.0f : 
             (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.3231678f ? 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.02734375f ? 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.70474243f ? 
                        0.0f : 
                        0.0011029006f) : 
                    0.0f) : 
                 (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
                    0.0f : 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.140625f ? 
                        0.0f : 
                        0.17857143f)))) : 
         (Double.isNaN(data[0]) || data[0 /* vlan */] <141.5f ? 
            0.0f : 
             (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.1328125f ? 
                0.0f : 
                 (data[0 /* vlan */] <152.0f ? 
                    1.0f : 
                    0.0f))));
    return pred;
  } // constant pool size = 42B, number of visited nodes = 10, static init size = 0B
}

class log_drf_1_Tree_31_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.49560547f ? 
         (Double.isNaN(data[0]) || data[0 /* vlan */] <181.5f ? 
             (data[0 /* vlan */] <142.0f ? 
                 (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.24753289f ? 
                     (Double.isNaN(data[4]) || data[4 /* no_of_macs */] <2.5f ? 
                        0.0015814295f : 
                        0.5f) : 
                     (data[3 /* no_of_ips */] <0.5f ? 
                        0.01451562f : 
                        0.0f)) : 
                0.0f) : 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <135.5f ? 
                0.0f : 
                 (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.25f ? 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.029296875f ? 
                        0.4111675f : 
                        1.0f) : 
                    0.0f))) : 
         (Double.isNaN(data[0]) || data[0 /* vlan */] <181.5f ? 
             (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.15527344f ? 
                 (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.1328125f ? 
                    0.0f : 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.13343811f ? 
                        0.0f : 
                        0.21052632f)) : 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <129.0f ? 
                    0.0f : 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <151.5f ? 
                        1.0f : 
                        0.0f))) : 
             (data[7 /* 6_letter_word */] <0.25f ? 
                0.0f : 
                1.0f)));
    return pred;
  } // constant pool size = 66B, number of visited nodes = 16, static init size = 0B
}

class log_drf_1_Tree_31_class_3 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.39208984f ? 
         (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.35351562f ? 
             (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                 (data[0 /* vlan */] <25.5f ? 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.4609375f ? 
                        0.0f : 
                        4.901961E-4f) : 
                    0.0f) : 
                 (data[1 /* type_of_time */] <4.5f ? 
                     (data[5 /* 4_letter_word */] <0.10253906f ? 
                        0.013833992f : 
                        0.0f) : 
                    0.0f)) : 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <295.5f ? 
                0.0f : 
                 (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.43603516f ? 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.1953125f ? 
                        0.9855596f : 
                        0.0f) : 
                    0.0f))) : 
         (data[0 /* vlan */] <29.5f ? 
             (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.0421875f ? 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <28.0f ? 
                    0.0f : 
                    0.8897134f) : 
                0.0f) : 
             (data[8 /* 7_letter_word */] <0.013671875f ? 
                 (Double.isNaN(data[4]) || data[4 /* no_of_macs */] <0.5f ? 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <139.5f ? 
                        0.0f : 
                        4.1841005E-4f) : 
                    0.0f) : 
                0.0f)));
    return pred;
  } // constant pool size = 66B, number of visited nodes = 16, static init size = 0B
}

class log_drf_1_Tree_31_class_4 {
  static final double score0(double[] data) {
    double pred =      (data[1 /* type_of_time */] <4.5f ? 
        0.0f : 
         (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.3095703f ? 
             (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <1.5f ? 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <25.5f ? 
                    0.0f : 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.109375f ? 
                        1.0535187E-4f : 
                        0.0011532125f)) : 
                0.0f) : 
             (data[10 /* 9_letter_word */] <0.36620712f ? 
                 (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.16666667f ? 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.16666667f ? 
                        0.06423983f : 
                        0.0f) : 
                    0.0f) : 
                0.0f)));
    return pred;
  } // constant pool size = 34B, number of visited nodes = 8, static init size = 0B
}

class log_drf_1_Tree_31_class_5 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.27929688f ? 
         (data[0 /* vlan */] <83.5f ? 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <63.0f ? 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.234375f ? 
                    0.0f : 
                     (data[8 /* 7_letter_word */] <0.27026367f ? 
                        8.992806E-4f : 
                        0.0f)) : 
                 (data[6 /* 5_letter_word */] <0.2890625f ? 
                    0.54545456f : 
                    0.0f)) : 
            0.0f) : 
         (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.08984375f ? 
             (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.13476562f ? 
                 (data[1 /* type_of_time */] <4.5f ? 
                    0.0f : 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <65.5f ? 
                        9.849306E-5f : 
                        0.0043144776f)) : 
                 (data[10 /* 9_letter_word */] <0.15346527f ? 
                     (data[2 /* no_of_characters */] <148.5f ? 
                        1.0f : 
                        0.0f) : 
                    0.0f)) : 
             (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.17447917f ? 
                 (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.15625f ? 
                    0.0f : 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.2932129f ? 
                        0.01173709f : 
                        0.0f)) : 
                 (Double.isNaN(data[4]) || data[4 /* no_of_macs */] <0.5f ? 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.234375f ? 
                        0.020642202f : 
                        1.0f) : 
                    0.0f))));
    return pred;
  } // constant pool size = 70B, number of visited nodes = 17, static init size = 0B
}

class log_drf_1_Tree_31_class_6 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.24804688f ? 
         (data[0 /* vlan */] <17.5f ? 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <14.5f ? 
                0.0f : 
                0.90909094f) : 
             (data[2 /* no_of_characters */] <70.5f ? 
                 (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.62109375f ? 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.125f ? 
                        0.010600707f : 
                        0.0f) : 
                     (data[2 /* no_of_characters */] <62.0f ? 
                        0.0f : 
                        1.0f)) : 
                 (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.03125f ? 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.828125f ? 
                        0.0f : 
                        0.0030464586f) : 
                    0.0f))) : 
         (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.15527344f ? 
             (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.27978516f ? 
                 (data[0 /* vlan */] <17.5f ? 
                     (data[6 /* 5_letter_word */] <0.046875f ? 
                        0.0075018755f : 
                        0.0f) : 
                    0.0f) : 
                 (Double.isNaN(data[13]) || data[13 /* 12_letter_word */] <0.071614586f ? 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.265625f ? 
                        0.0016753537f : 
                        0.08793456f) : 
                    0.0f)) : 
             (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
                0.0f : 
                 (data[9 /* 8_letter_word */] <0.21102905f ? 
                     (data[6 /* 5_letter_word */] <0.140625f ? 
                        0.0f : 
                        0.24774775f) : 
                     (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.203125f ? 
                        0.0454691f : 
                        0.6849315f)))));
    return pred;
  } // constant pool size = 78B, number of visited nodes = 19, static init size = 0B
}

class log_drf_1_Tree_31_class_7 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.94970703f ? 
        0.0f : 
         (Double.isNaN(data[0]) || data[0 /* vlan */] <184.5f ? 
            0.0f : 
             (data[2 /* no_of_characters */] <150.5f ? 
                0.5f : 
                1.0f)));
    return pred;
  } // constant pool size = 14B, number of visited nodes = 3, static init size = 0B
}

class log_drf_1_Tree_31_class_8 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.53759766f ? 
         (Double.isNaN(data[0]) || data[0 /* vlan */] <177.5f ? 
            0.0f : 
             (data[0 /* vlan */] <181.5f ? 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.83203125f ? 
                     (data[0 /* vlan */] <180.5f ? 
                        0.0f : 
                        0.17168675f) : 
                    1.0f) : 
                0.0f)) : 
         (Double.isNaN(data[0]) || data[0 /* vlan */] <173.5f ? 
            0.0f : 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <577.0f ? 
                0.0f : 
                 (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <3.5f ? 
                    1.0f : 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.046875f ? 
                        0.4f : 
                        1.0f)))));
    return pred;
  } // constant pool size = 38B, number of visited nodes = 9, static init size = 0B
}

class log_drf_1_Tree_31_class_9 {
  static final double score0(double[] data) {
    double pred =      (data[1 /* type_of_time */] <3.5f ? 
         (data[0 /* vlan */] <159.5f ? 
            0.0f : 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <200.5f ? 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <173.5f ? 
                    1.0f : 
                    0.0f) : 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <244.0f ? 
                    0.0f : 
                    1.0f))) : 
        0.0f);
    return pred;
  } // constant pool size = 22B, number of visited nodes = 5, static init size = 0B
}

class log_drf_1_Tree_31_class_10 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.6455078f ? 
         (Double.isNaN(data[0]) || data[0 /* vlan */] <165.5f ? 
            0.0f : 
             (data[5 /* 4_letter_word */] <0.03125f ? 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.44921875f ? 
                    0.0f : 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.54818726f ? 
                        0.0020661156f : 
                        0.0f)) : 
                0.0f)) : 
         (data[0 /* vlan */] <165.5f ? 
            0.0f : 
            1.7727353E-4f));
    return pred;
  } // constant pool size = 26B, number of visited nodes = 6, static init size = 0B
}

class log_drf_1_Tree_31_class_11 {
  static final double score0(double[] data) {
    double pred =     5.0E-6f;
    return pred;
  } // constant pool size = 2B, number of visited nodes = 0, static init size = 0B
}

class log_drf_1_Tree_31_class_12 {
  static final double score0(double[] data) {
    double pred =      (data[8 /* 7_letter_word */] <0.012207031f ? 
         (Double.isNaN(data[0]) || data[0 /* vlan */] <593.5f ? 
            0.0f : 
             (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.16796875f ? 
                0.0f : 
                1.0f)) : 
        0.0f);
    return pred;
  } // constant pool size = 14B, number of visited nodes = 3, static init size = 0B
}

class log_drf_1_Tree_31_class_13 {
  static final double score0(double[] data) {
    double pred =      (data[1 /* type_of_time */] <4.5f ? 
        0.0f : 
         (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.2548828f ? 
             (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                 (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.265625f ? 
                     (data[2 /* no_of_characters */] <60.5f ? 
                        0.868984f : 
                        5.8380523E-5f) : 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <589.0f ? 
                        0.0022573364f : 
                        1.0f)) : 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <589.0f ? 
                    0.0f : 
                     (data[7 /* 6_letter_word */] <0.171875f ? 
                        1.0f : 
                        0.0f))) : 
             (data[5 /* 4_letter_word */] <0.40769005f ? 
                 (data[0 /* vlan */] <17.5f ? 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.1796875f ? 
                        0.0f : 
                        0.1627907f) : 
                    0.0f) : 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <593.0f ? 
                    0.0f : 
                    1.0f))));
    return pred;
  } // constant pool size = 50B, number of visited nodes = 12, static init size = 0B
}

class log_drf_1_Tree_31_class_14 {
  static final double score0(double[] data) {
    double pred =      (data[1 /* type_of_time */] <2.5f ? 
         (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.10058594f ? 
             (data[2 /* no_of_characters */] <185.5f ? 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <170.5f ? 
                    0.0f : 
                    1.0f) : 
                0.0f) : 
             (Double.isNaN(data[12]) || data[12 /* 11_letter_word */] <0.1015625f ? 
                0.0f : 
                1.0f)) : 
        0.0f);
    return pred;
  } // constant pool size = 22B, number of visited nodes = 5, static init size = 0B
}

class log_drf_1_Tree_31_class_15 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.94970703f ? 
         (data[0 /* vlan */] <141.5f ? 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <136.5f ? 
                 (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.18984374f ? 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.1875f ? 
                        0.0f : 
                        8.5402705E-4f) : 
                     (data[5 /* 4_letter_word */] <0.22313231f ? 
                        0.013941699f : 
                        9.199632E-4f)) : 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.44921875f ? 
                     (data[2 /* no_of_characters */] <120.5f ? 
                        0.015267176f : 
                        0.30331755f) : 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.171875f ? 
                        0.8211382f : 
                        0.0f))) : 
            0.0f) : 
         (data[0 /* vlan */] <26.5f ? 
            0.0f : 
             (data[2 /* no_of_characters */] <95.5f ? 
                0.0f : 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <34.5f ? 
                     (Double.isNaN(data[4]) || data[4 /* no_of_macs */] <0.5f ? 
                        0.1997997f : 
                        0.0f) : 
                    0.0f))));
    return pred;
  } // constant pool size = 54B, number of visited nodes = 13, static init size = 0B
}

class log_drf_1_Tree_31_class_16 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.94970703f ? 
         (data[0 /* vlan */] <83.5f ? 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <80.5f ? 
                 (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.48164064f ? 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.3236023f ? 
                        0.0f : 
                        1.496558E-4f) : 
                     (data[0 /* vlan */] <29.0f ? 
                        0.0f : 
                        5.5172417E-4f)) : 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.3671875f ? 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.31640625f ? 
                        0.0f : 
                        0.030303031f) : 
                    0.04f)) : 
            0.0f) : 
         (data[0 /* vlan */] <26.5f ? 
            0.0f : 
             (data[2 /* no_of_characters */] <80.5f ? 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <58.0f ? 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <30.5f ? 
                        0.0f : 
                        1.0f) : 
                    0.0f) : 
                1.707942E-4f)));
    return pred;
  } // constant pool size = 50B, number of visited nodes = 12, static init size = 0B
}

class log_drf_1_Tree_31_class_17 {
  static final double score0(double[] data) {
    double pred =      (data[1 /* type_of_time */] <4.5f ? 
        1.01495025E-5f : 
         (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <3.5f ? 
             (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.03125f ? 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <178.5f ? 
                    0.0f : 
                     (data[0 /* vlan */] <589.5f ? 
                        0.5210728f : 
                        0.0f)) : 
                 (data[0 /* vlan */] <17.5f ? 
                     (Double.isNaN(data[12]) || data[12 /* 11_letter_word */] <0.03125f ? 
                        9.478673E-4f : 
                        0.11111111f) : 
                    0.0f)) : 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <105.5f ? 
                0.0f : 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.16796875f ? 
                     (data[2 /* no_of_characters */] <988.5f ? 
                        0.0f : 
                        0.9661017f) : 
                    1.0f))));
    return pred;
  } // constant pool size = 42B, number of visited nodes = 10, static init size = 0B
}

class log_drf_1_Tree_31_class_18 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.4580078f ? 
        0.0f : 
         (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.044921875f ? 
            0.0f : 
             (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.25976562f ? 
                0.0f : 
                0.5f)));
    return pred;
  } // constant pool size = 14B, number of visited nodes = 3, static init size = 0B
}

class log_drf_1_Tree_31_class_19 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.24804688f ? 
         (data[0 /* vlan */] <17.5f ? 
             (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.18361282f ? 
                0.0f : 
                 (data[7 /* 6_letter_word */] <0.33203125f ? 
                    0.5f : 
                    0.0f)) : 
            0.0f) : 
         (data[0 /* vlan */] <17.5f ? 
             (data[2 /* no_of_characters */] <140.5f ? 
                 (data[7 /* 6_letter_word */] <0.12597656f ? 
                    0.0f : 
                     (data[11 /* 10_letter_word */] <0.125f ? 
                        0.0f : 
                        1.0f)) : 
                 (data[5 /* 4_letter_word */] <0.26273346f ? 
                     (data[6 /* 5_letter_word */] <0.1875f ? 
                        0.5f : 
                        0.0f) : 
                    0.0f)) : 
            0.0f));
    return pred;
  } // constant pool size = 42B, number of visited nodes = 10, static init size = 0B
}

class log_drf_1_Tree_31_class_20 {
  static final double score0(double[] data) {
    double pred =      (data[1 /* type_of_time */] <4.5f ? 
        0.0f : 
         (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.030273438f ? 
             (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <1.5f ? 
                 (data[0 /* vlan */] <17.5f ? 
                    0.0f : 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <33.5f ? 
                        0.9867156f : 
                        0.0f)) : 
                0.0f) : 
             (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.19140625f ? 
                 (data[0 /* vlan */] <25.5f ? 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <17.0f ? 
                        0.0f : 
                        0.99905926f) : 
                    0.0f) : 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <25.5f ? 
                     (data[10 /* 9_letter_word */] <0.22195435f ? 
                        0.9794239f : 
                        0.996124f) : 
                    0.0f))));
    return pred;
  } // constant pool size = 42B, number of visited nodes = 10, static init size = 0B
}

class log_drf_1_Tree_31_class_21 {
  static final double score0(double[] data) {
    double pred =      (data[1 /* type_of_time */] <3.5f ? 
         (data[0 /* vlan */] <114.5f ? 
             (Double.isNaN(data[12]) || data[12 /* 11_letter_word */] <0.22460938f ? 
                0.0f : 
                1.0f) : 
            0.0f) : 
         (data[0 /* vlan */] <11.5f ? 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <230.5f ? 
                0.0f : 
                 (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.1640625f ? 
                    0.3809524f : 
                    0.0f)) : 
             (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.24609375f ? 
                 (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.1171875f ? 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.105285645f ? 
                        0.0011887394f : 
                        0.46153846f) : 
                    8.523212E-5f) : 
                 (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.23828125f ? 
                     (data[8 /* 7_letter_word */] <0.140625f ? 
                        1.9235394E-4f : 
                        0.0030335265f) : 
                     (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.0625f ? 
                        0.008153205f : 
                        0.0f)))));
    return pred;
  } // constant pool size = 50B, number of visited nodes = 12, static init size = 0B
}

class log_drf_1_Tree_31_class_22 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.49560547f ? 
         (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.4765625f ? 
            0.0f : 
             (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.1461649f ? 
                0.0f : 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.15625f ? 
                    0.0f : 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.0859375f ? 
                        0.023809524f : 
                        0.0f)))) : 
         (data[0 /* vlan */] <7.5f ? 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <130.5f ? 
                0.0f : 
                0.25f) : 
             (data[5 /* 4_letter_word */] <0.65125847f ? 
                0.0f : 
                 (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.30859375f ? 
                    0.0f : 
                    0.0011600928f))));
    return pred;
  } // constant pool size = 38B, number of visited nodes = 9, static init size = 0B
}

class log_drf_1_Tree_31_class_23 {
  static final double score0(double[] data) {
    double pred =      (data[1 /* type_of_time */] <4.5f ? 
        0.0f : 
         (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.13378906f ? 
             (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                 (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.05859375f ? 
                     (data[0 /* vlan */] <17.5f ? 
                        0.99202806f : 
                        0.0f) : 
                     (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.0390625f ? 
                        0.0013051423f : 
                        0.0f)) : 
                 (data[0 /* vlan */] <17.5f ? 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.6875f ? 
                        0.029545454f : 
                        0.6666667f) : 
                    0.0f)) : 
             (Double.isNaN(data[13]) || data[13 /* 12_letter_word */] <0.0546875f ? 
                 (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.70703125f ? 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.265625f ? 
                        3.33667E-5f : 
                        0.004736842f) : 
                    0.33333334f) : 
                 (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.1640625f ? 
                    0.0f : 
                    1.0f))));
    return pred;
  } // constant pool size = 50B, number of visited nodes = 12, static init size = 0B
}

class log_drf_1_Tree_31_class_24 {
  static final double score0(double[] data) {
    double pred =      (data[8 /* 7_letter_word */] <0.012207031f ? 
        3.1508964E-5f : 
        0.0f);
    return pred;
  } // constant pool size = 6B, number of visited nodes = 1, static init size = 0B
}

class log_drf_1_Tree_31_class_25 {
  static final double score0(double[] data) {
    double pred =      (data[1 /* type_of_time */] <4.5f ? 
        0.0f : 
         (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.94921875f ? 
             (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <1.5f ? 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <25.5f ? 
                    0.0f : 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <41.5f ? 
                        0.5821033f : 
                        5.673759E-4f)) : 
                 (data[0 /* vlan */] <25.5f ? 
                    0.0f : 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <85.5f ? 
                        0.99966574f : 
                        0.012048192f))) : 
            0.74196815f));
    return pred;
  } // constant pool size = 30B, number of visited nodes = 7, static init size = 0B
}

class log_drf_1_Tree_31_class_26 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.6513672f ? 
        0.0f : 
         (data[0 /* vlan */] <29.5f ? 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <28.0f ? 
                0.0f : 
                0.2198364f) : 
            0.0f));
    return pred;
  } // constant pool size = 14B, number of visited nodes = 3, static init size = 0B
}

class log_drf_1_Tree_31_class_27 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.49560547f ? 
        0.0f : 
        3.716298E-5f);
    return pred;
  } // constant pool size = 6B, number of visited nodes = 1, static init size = 0B
}

class log_drf_1_Tree_31_class_28 {
  static final double score0(double[] data) {
    double pred =      (data[8 /* 7_letter_word */] <0.012207031f ? 
         (data[0 /* vlan */] <18.5f ? 
             (data[3 /* no_of_ips */] <3.0f ? 
                0.0f : 
                1.0f) : 
            0.0f) : 
         (Double.isNaN(data[14]) || data[14 /* 13_letter_word */] <0.09765625f ? 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <489.5f ? 
                0.0f : 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.31640625f ? 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.15625f ? 
                        0.009433962f : 
                        0.6666667f) : 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.2265625f ? 
                        0.0f : 
                        1.0f))) : 
             (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.19628906f ? 
                0.0f : 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <17.5f ? 
                    1.0f : 
                    0.0f))));
    return pred;
  } // constant pool size = 42B, number of visited nodes = 10, static init size = 0B
}

class log_drf_1_Tree_31_class_29 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.51464844f ? 
         (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.13574219f ? 
            0.0f : 
             (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.47343636f ? 
                0.0f : 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.0859375f ? 
                    0.0f : 
                     (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.015625f ? 
                        0.0f : 
                        0.6666667f)))) : 
         (Double.isNaN(data[14]) || data[14 /* 13_letter_word */] <0.0068359375f ? 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <956.0f ? 
                 (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.77628326f ? 
                    0.0f : 
                     (data[5 /* 4_letter_word */] <0.81648237f ? 
                        0.14285715f : 
                        0.0f)) : 
                 (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.0921875f ? 
                    0.0f : 
                    1.0f)) : 
            0.021276595f));
    return pred;
  } // constant pool size = 42B, number of visited nodes = 10, static init size = 0B
}

class log_drf_1_Tree_31_class_30 {
  static final double score0(double[] data) {
    double pred =      (data[1 /* type_of_time */] <1.5f ? 
        1.0f : 
        0.0f);
    return pred;
  } // constant pool size = 6B, number of visited nodes = 1, static init size = 0B
}

class log_drf_1_Tree_31_class_31 {
  static final double score0(double[] data) {
    double pred =      (data[1 /* type_of_time */] <4.5f ? 
        0.0f : 
         (Double.isNaN(data[15]) || data[15 /* 14_letter_word */] <0.22460938f ? 
             (Double.isNaN(data[13]) || data[13 /* 12_letter_word */] <0.234375f ? 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <65.5f ? 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <37.0f ? 
                        3.534443E-5f : 
                        0.005973716f) : 
                     (data[0 /* vlan */] <104.0f ? 
                        0.9119171f : 
                        3.324468E-4f)) : 
                 (data[0 /* vlan */] <33.5f ? 
                    0.0f : 
                     (data[0 /* vlan */] <62.0f ? 
                        0.6666667f : 
                        1.0f))) : 
             (data[5 /* 4_letter_word */] <0.125f ? 
                0.0f : 
                 (data[5 /* 4_letter_word */] <0.29101562f ? 
                    0.9411765f : 
                    1.0f))));
    return pred;
  } // constant pool size = 42B, number of visited nodes = 10, static init size = 0B
}

class log_drf_1_Tree_31_class_32 {
  static final double score0(double[] data) {
    double pred =      (data[1 /* type_of_time */] <4.5f ? 
        0.0f : 
         (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.19140625f ? 
             (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.234375f ? 
                 (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.4921875f ? 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.3203125f ? 
                        0.0f : 
                        3.118179E-4f) : 
                     (data[2 /* no_of_characters */] <140.5f ? 
                        0.0046291193f : 
                        0.0f)) : 
                 (data[11 /* 10_letter_word */] <0.26727295f ? 
                     (data[2 /* no_of_characters */] <120.5f ? 
                        0.49f : 
                        0.0f) : 
                    0.0f)) : 
             (data[10 /* 9_letter_word */] <0.21035767f ? 
                 (data[5 /* 4_letter_word */] <0.296875f ? 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.1015625f ? 
                        0.110843375f : 
                        0.0f) : 
                    0.0f) : 
                 (data[0 /* vlan */] <25.5f ? 
                    0.0f : 
                     (data[10 /* 9_letter_word */] <0.41666666f ? 
                        0.0f : 
                        0.012755859f)))));
    return pred;
  } // constant pool size = 54B, number of visited nodes = 13, static init size = 0B
}

class log_drf_1_Tree_31_class_33 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.40820312f ? 
         (data[0 /* vlan */] <7.5f ? 
             (data[5 /* 4_letter_word */] <0.12517166f ? 
                1.0f : 
                 (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.2890625f ? 
                    0.018518519f : 
                    1.0f)) : 
             (data[2 /* no_of_characters */] <100.5f ? 
                 (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.22483063f ? 
                     (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                        0.002031488f : 
                        0.0f) : 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.4453125f ? 
                        0.003717472f : 
                        0.027027028f)) : 
                 (data[1 /* type_of_time */] <2.5f ? 
                     (data[5 /* 4_letter_word */] <0.05102539f ? 
                        0.012820513f : 
                        0.0f) : 
                     (data[2 /* no_of_characters */] <118.5f ? 
                        8.0847276E-5f : 
                        0.0f)))) : 
         (data[0 /* vlan */] <3.5f ? 
            1.0f : 
             (data[5 /* 4_letter_word */] <0.45906067f ? 
                 (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.04296875f ? 
                     (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                        0.0f : 
                        0.41860464f) : 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.1171875f ? 
                        1.0f : 
                        0.3809524f)) : 
                 (data[0 /* vlan */] <20.5f ? 
                     (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
                        0.0f : 
                        0.48305085f) : 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.23828125f ? 
                        2.062848E-4f : 
                        0.005338809f)))));
    return pred;
  } // constant pool size = 78B, number of visited nodes = 19, static init size = 0B
}

class log_drf_1_Tree_31_class_34 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.24804688f ? 
        0.0f : 
         (data[0 /* vlan */] <9.5f ? 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <4.5f ? 
                0.0f : 
                0.071428575f) : 
            0.0f));
    return pred;
  } // constant pool size = 14B, number of visited nodes = 3, static init size = 0B
}

class log_drf_1_Tree_31_class_35 {
  static final double score0(double[] data) {
    double pred =      (data[1 /* type_of_time */] <4.5f ? 
        0.0f : 
         (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.08691406f ? 
             (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <2.5f ? 
                 (data[0 /* vlan */] <17.5f ? 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.5859375f ? 
                        0.0019249278f : 
                        0.060606062f) : 
                    0.0f) : 
                0.0f) : 
             (data[10 /* 9_letter_word */] <0.09583092f ? 
                0.037037037f : 
                 (data[0 /* vlan */] <17.5f ? 
                     (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.2229797f ? 
                        0.0f : 
                        0.3f) : 
                    0.0f))));
    return pred;
  } // constant pool size = 34B, number of visited nodes = 8, static init size = 0B
}

class log_drf_1_Tree_31_class_36 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.49560547f ? 
        0.0f : 
         (data[0 /* vlan */] <7.5f ? 
             (data[7 /* 6_letter_word */] <0.25f ? 
                0.9230769f : 
                0.0f) : 
            0.0f));
    return pred;
  } // constant pool size = 14B, number of visited nodes = 3, static init size = 0B
}

class log_drf_1_Tree_31_class_37 {
  static final double score0(double[] data) {
    double pred =      (data[1 /* type_of_time */] <4.5f ? 
         (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.05078125f ? 
             (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <2.5f ? 
                 (data[0 /* vlan */] <157.0f ? 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <82.0f ? 
                        0.99892855f : 
                        0.007633588f) : 
                     (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <1.5f ? 
                        0.9982164f : 
                        0.81313133f)) : 
                 (data[11 /* 10_letter_word */] <0.2890625f ? 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <220.5f ? 
                        0.0f : 
                        0.015625f) : 
                    0.0f)) : 
             (data[2 /* no_of_characters */] <145.5f ? 
                 (Double.isNaN(data[1]) || data[1 /* type_of_time */] <3.5f ? 
                     (data[3 /* no_of_ips */] <1.0f ? 
                        1.0f : 
                        0.0f) : 
                    1.0f) : 
                 (data[10 /* 9_letter_word */] <0.1140625f ? 
                     (data[3 /* no_of_ips */] <2.5f ? 
                        1.0f : 
                        0.0f) : 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.2890625f ? 
                        0.9934303f : 
                        0.74f)))) : 
         (data[3 /* no_of_ips */] <0.5f ? 
             (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.013671875f ? 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <154.5f ? 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.3203125f ? 
                        0.0f : 
                        3.8572805E-4f) : 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.3671875f ? 
                        0.20100503f : 
                        0.0f)) : 
                0.0f) : 
             (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.4765625f ? 
                0.0f : 
                 (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.0859375f ? 
                     (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.25f ? 
                        2.780481E-4f : 
                        0.0f) : 
                    0.0f))));
    return pred;
  } // constant pool size = 90B, number of visited nodes = 22, static init size = 0B
}

class log_drf_1_Tree_31_class_38 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.94970703f ? 
        5.3063627E-6f : 
         (Double.isNaN(data[0]) || data[0 /* vlan */] <62.5f ? 
            0.0f : 
             (data[1 /* type_of_time */] <4.5f ? 
                0.0f : 
                0.0068728523f)));
    return pred;
  } // constant pool size = 14B, number of visited nodes = 3, static init size = 0B
}


class log_drf_1_Forest_32 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += log_drf_1_Tree_32_class_0.score0(fdata);
    preds[2] += log_drf_1_Tree_32_class_1.score0(fdata);
    preds[3] += log_drf_1_Tree_32_class_2.score0(fdata);
    preds[4] += log_drf_1_Tree_32_class_3.score0(fdata);
    preds[5] += log_drf_1_Tree_32_class_4.score0(fdata);
    preds[6] += log_drf_1_Tree_32_class_5.score0(fdata);
    preds[7] += log_drf_1_Tree_32_class_6.score0(fdata);
    preds[8] += log_drf_1_Tree_32_class_7.score0(fdata);
    preds[9] += log_drf_1_Tree_32_class_8.score0(fdata);
    preds[10] += log_drf_1_Tree_32_class_9.score0(fdata);
    preds[11] += log_drf_1_Tree_32_class_10.score0(fdata);
    preds[12] += log_drf_1_Tree_32_class_11.score0(fdata);
    preds[13] += log_drf_1_Tree_32_class_12.score0(fdata);
    preds[14] += log_drf_1_Tree_32_class_13.score0(fdata);
    preds[15] += log_drf_1_Tree_32_class_14.score0(fdata);
    preds[16] += log_drf_1_Tree_32_class_15.score0(fdata);
    preds[17] += log_drf_1_Tree_32_class_16.score0(fdata);
    preds[18] += log_drf_1_Tree_32_class_17.score0(fdata);
    preds[19] += log_drf_1_Tree_32_class_18.score0(fdata);
    preds[20] += log_drf_1_Tree_32_class_19.score0(fdata);
    preds[21] += log_drf_1_Tree_32_class_20.score0(fdata);
    preds[22] += log_drf_1_Tree_32_class_21.score0(fdata);
    preds[23] += log_drf_1_Tree_32_class_22.score0(fdata);
    preds[24] += log_drf_1_Tree_32_class_23.score0(fdata);
    preds[25] += log_drf_1_Tree_32_class_24.score0(fdata);
    preds[26] += log_drf_1_Tree_32_class_25.score0(fdata);
    preds[27] += log_drf_1_Tree_32_class_26.score0(fdata);
    preds[28] += log_drf_1_Tree_32_class_27.score0(fdata);
    preds[29] += log_drf_1_Tree_32_class_28.score0(fdata);
    preds[30] += log_drf_1_Tree_32_class_29.score0(fdata);
    preds[31] += log_drf_1_Tree_32_class_30.score0(fdata);
    preds[32] += log_drf_1_Tree_32_class_31.score0(fdata);
    preds[33] += log_drf_1_Tree_32_class_32.score0(fdata);
    preds[34] += log_drf_1_Tree_32_class_33.score0(fdata);
    preds[35] += log_drf_1_Tree_32_class_34.score0(fdata);
    preds[36] += log_drf_1_Tree_32_class_35.score0(fdata);
    preds[37] += log_drf_1_Tree_32_class_36.score0(fdata);
    preds[38] += log_drf_1_Tree_32_class_37.score0(fdata);
    preds[39] += log_drf_1_Tree_32_class_38.score0(fdata);
  }
}
class log_drf_1_Tree_32_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[12]) || data[12 /* 11_letter_word */] <0.017578125f ? 
         (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <1128.0f ? 
             (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.009765625f ? 
                 (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.4765625f ? 
                    0.0f : 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.4609375f ? 
                        0.0f : 
                        0.0014347202f)) : 
                 (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.015625f ? 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.2578125f ? 
                        1.8183471E-4f : 
                        0.010869565f) : 
                     (Double.isNaN(data[4]) || data[4 /* no_of_macs */] <0.5f ? 
                        0.0f : 
                        1.0f))) : 
            1.0f) : 
         (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <748.0f ? 
            0.0f : 
             (data[10 /* 9_letter_word */] <0.01953125f ? 
                 (data[9 /* 8_letter_word */] <0.05345395f ? 
                    0.0f : 
                    0.33333334f) : 
                1.0f)));
    return pred;
  } // constant pool size = 46B, number of visited nodes = 11, static init size = 0B
}

class log_drf_1_Tree_32_class_1 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.39208984f ? 
         (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <262.5f ? 
             (data[0 /* vlan */] <149.5f ? 
                 (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.70703125f ? 
                    0.0f : 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.0859375f ? 
                        0.002708396f : 
                        0.0f)) : 
                0.0f) : 
             (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.16210938f ? 
                0.0f : 
                 (data[9 /* 8_letter_word */] <0.18174744f ? 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.25f ? 
                        0.0f : 
                        1.0f) : 
                    0.0f))) : 
         (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <257.5f ? 
            0.0f : 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <139.5f ? 
                0.0f : 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.44921875f ? 
                     (data[3 /* no_of_ips */] <0.5f ? 
                        0.0f : 
                        0.6340326f) : 
                    0.0f))));
    return pred;
  } // constant pool size = 50B, number of visited nodes = 12, static init size = 0B
}

class log_drf_1_Tree_32_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.49560547f ? 
         (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.7314453f ? 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <181.5f ? 
                 (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
                    0.0f : 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.64572906f ? 
                        0.0015147984f : 
                        0.027439024f)) : 
                 (Double.isNaN(data[13]) || data[13 /* 12_letter_word */] <0.03125f ? 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <180.5f ? 
                        0.0f : 
                        0.20588236f) : 
                     (data[11 /* 10_letter_word */] <0.03125f ? 
                        0.6666667f : 
                        1.0f))) : 
            0.061177816f) : 
         (data[2 /* no_of_characters */] <158.5f ? 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <175.5f ? 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <137.0f ? 
                    0.0f : 
                     (data[2 /* no_of_characters */] <119.0f ? 
                        0.6690141f : 
                        0.2615063f)) : 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <185.0f ? 
                     (data[1 /* type_of_time */] <4.5f ? 
                        0.0f : 
                        1.0f) : 
                    0.0f)) : 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <181.5f ? 
                0.0f : 
                 (data[5 /* 4_letter_word */] <0.55078125f ? 
                     (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
                        0.0f : 
                        0.9375f) : 
                    0.0f))));
    return pred;
  } // constant pool size = 70B, number of visited nodes = 17, static init size = 0B
}

class log_drf_1_Tree_32_class_3 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.39208984f ? 
         (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <295.5f ? 
             (data[0 /* vlan */] <157.5f ? 
                 (data[1 /* type_of_time */] <4.5f ? 
                     (data[2 /* no_of_characters */] <107.5f ? 
                        0.27272728f : 
                        0.0f) : 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <23.5f ? 
                        0.0f : 
                        6.276282E-5f)) : 
                0.0f) : 
             (data[14 /* 13_letter_word */] <0.0087890625f ? 
                 (data[5 /* 4_letter_word */] <0.1546917f ? 
                     (data[7 /* 6_letter_word */] <0.09375f ? 
                        0.0f : 
                        0.62945366f) : 
                    0.0f) : 
                0.0f)) : 
         (data[2 /* no_of_characters */] <158.5f ? 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <29.5f ? 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <28.0f ? 
                    0.0f : 
                     (data[2 /* no_of_characters */] <131.0f ? 
                        0.0f : 
                        1.0f)) : 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <146.5f ? 
                    0.0f : 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.8734375f ? 
                        0.0f : 
                        0.008130081f))) : 
             (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.18359375f ? 
                 (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                    0.0f : 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.475f ? 
                        0.0f : 
                        4.27716E-4f)) : 
                 (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.32421875f ? 
                    0.0f : 
                    0.9411765f))));
    return pred;
  } // constant pool size = 78B, number of visited nodes = 19, static init size = 0B
}

class log_drf_1_Tree_32_class_4 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.28759766f ? 
         (data[2 /* no_of_characters */] <113.5f ? 
             (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.29101562f ? 
                 (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.74609375f ? 
                    0.0f : 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <93.5f ? 
                        0.0f : 
                        0.05882353f)) : 
                 (Double.isNaN(data[13]) || data[13 /* 12_letter_word */] <0.16796875f ? 
                     (data[10 /* 9_letter_word */] <0.4128723f ? 
                        0.93939394f : 
                        0.0f) : 
                    0.0f)) : 
             (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.31054688f ? 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.4140625f ? 
                    0.0f : 
                     (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                        0.0f : 
                        0.0015356265f)) : 
                 (data[10 /* 9_letter_word */] <0.36710358f ? 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.171875f ? 
                        0.0f : 
                        0.22222222f) : 
                    0.0f))) : 
         (data[2 /* no_of_characters */] <118.5f ? 
             (data[5 /* 4_letter_word */] <0.5351049f ? 
                 (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.22265625f ? 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.4140625f ? 
                        0.0f : 
                        0.0045351475f) : 
                     (data[6 /* 5_letter_word */] <0.26775107f ? 
                        0.057142857f : 
                        0.0f)) : 
                0.0f) : 
             (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.119140625f ? 
                0.0f : 
                 (data[6 /* 5_letter_word */] <0.12769572f ? 
                    0.055555556f : 
                    0.0f))));
    return pred;
  } // constant pool size = 78B, number of visited nodes = 19, static init size = 0B
}

class log_drf_1_Tree_32_class_5 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.27929688f ? 
         (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.4716797f ? 
            0.0f : 
             (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.22460938f ? 
                0.0f : 
                 (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.20703125f ? 
                    0.0f : 
                    0.8333333f))) : 
         (data[5 /* 4_letter_word */] <0.30885696f ? 
             (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.21679688f ? 
                0.0f : 
                 (data[9 /* 8_letter_word */] <0.25791386f ? 
                    1.0f : 
                    0.0f)) : 
             (data[5 /* 4_letter_word */] <0.4370964f ? 
                 (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.42259577f ? 
                     (Double.isNaN(data[12]) || data[12 /* 11_letter_word */] <0.28645834f ? 
                        8.00897E-4f : 
                        0.2f) : 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.21875f ? 
                        0.0f : 
                        0.10526316f)) : 
                 (data[1 /* type_of_time */] <4.5f ? 
                    0.0f : 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <65.5f ? 
                        1.7595309E-4f : 
                        0.008054523f)))));
    return pred;
  } // constant pool size = 54B, number of visited nodes = 13, static init size = 0B
}

class log_drf_1_Tree_32_class_6 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.1616211f ? 
         (data[2 /* no_of_characters */] <70.5f ? 
             (data[0 /* vlan */] <19.5f ? 
                 (data[7 /* 6_letter_word */] <0.16796875f ? 
                    1.0f : 
                    0.049295776f) : 
                0.02200489f) : 
             (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.19140625f ? 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.27734375f ? 
                    0.0f : 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.265625f ? 
                        0.0f : 
                        0.01089838f)) : 
                 (data[0 /* vlan */] <17.5f ? 
                     (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
                        0.0f : 
                        0.57894737f) : 
                    0.0f))) : 
         (data[2 /* no_of_characters */] <83.5f ? 
             (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.44970703f ? 
                 (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.74783134f ? 
                    0.0f : 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <75.0f ? 
                        0.7368421f : 
                        0.0f)) : 
                1.0f) : 
             (data[8 /* 7_letter_word */] <0.29101562f ? 
                 (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.22558594f ? 
                     (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.21875f ? 
                        0.011763185f : 
                        0.058954395f) : 
                    0.0f) : 
                0.0f)));
    return pred;
  } // constant pool size = 66B, number of visited nodes = 16, static init size = 0B
}

class log_drf_1_Tree_32_class_7 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.94970703f ? 
        0.0f : 
         (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <168.5f ? 
            0.009606725f : 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <183.5f ? 
                0.0f : 
                1.0f)));
    return pred;
  } // constant pool size = 14B, number of visited nodes = 3, static init size = 0B
}

class log_drf_1_Tree_32_class_8 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.53759766f ? 
         (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <750.5f ? 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <177.5f ? 
                0.0f : 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.1015625f ? 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <589.0f ? 
                        0.003481288f : 
                        0.0f) : 
                    0.0f)) : 
             (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.013671875f ? 
                 (data[1 /* type_of_time */] <4.5f ? 
                    0.0f : 
                     (data[3 /* no_of_ips */] <3.5f ? 
                        0.92f : 
                        0.024193548f)) : 
                 (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.39689827f ? 
                     (data[6 /* 5_letter_word */] <0.03125f ? 
                        0.25f : 
                        0.0f) : 
                     (data[2 /* no_of_characters */] <948.5f ? 
                        1.0f : 
                        0.0f)))) : 
         (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <830.0f ? 
            0.0f : 
             (data[0 /* vlan */] <173.5f ? 
                0.0f : 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <1024.0f ? 
                     (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <3.5f ? 
                        1.0f : 
                        0.9f) : 
                    0.33333334f))));
    return pred;
  } // constant pool size = 62B, number of visited nodes = 15, static init size = 0B
}

class log_drf_1_Tree_32_class_9 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.19335938f ? 
         (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.8564453f ? 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <157.5f ? 
                0.0f : 
                 (data[1 /* type_of_time */] <3.5f ? 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <200.5f ? 
                        0.980916f : 
                        0.023809524f) : 
                    0.0f)) : 
            0.3255814f) : 
         (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.29101562f ? 
             (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.18310547f ? 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.3671875f ? 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <188.5f ? 
                        4.54221E-4f : 
                        0.0028749402f) : 
                     (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.1015625f ? 
                        0.0f : 
                        0.8490566f)) : 
                 (data[1 /* type_of_time */] <3.5f ? 
                     (data[1 /* type_of_time */] <2.5f ? 
                        0.0f : 
                        1.0f) : 
                    0.0f)) : 
             (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.41632462f ? 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <174.5f ? 
                     (data[3 /* no_of_ips */] <2.5f ? 
                        0.0f : 
                        1.0f) : 
                    0.0f) : 
                0.8375f)));
    return pred;
  } // constant pool size = 62B, number of visited nodes = 15, static init size = 0B
}

class log_drf_1_Tree_32_class_10 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.3388672f ? 
         (data[2 /* no_of_characters */] <93.5f ? 
             (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.291214f ? 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <150.0f ? 
                    0.0f : 
                     (Double.isNaN(data[12]) || data[12 /* 11_letter_word */] <0.5f ? 
                        0.0018348624f : 
                        0.0f)) : 
                 (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.16796875f ? 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.5f ? 
                        0.0f : 
                        0.22222222f) : 
                    0.0f)) : 
            0.0f) : 
        0.0f);
    return pred;
  } // constant pool size = 30B, number of visited nodes = 7, static init size = 0B
}

class log_drf_1_Tree_32_class_11 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.14111328f ? 
        0.0f : 
         (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.26757812f ? 
            0.0f : 
             (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.26757812f ? 
                0.0f : 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <85.5f ? 
                    0.0f : 
                    0.2f))));
    return pred;
  } // constant pool size = 18B, number of visited nodes = 4, static init size = 0B
}

class log_drf_1_Tree_32_class_12 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.5830078f ? 
         (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.9277344f ? 
            0.0f : 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <590.5f ? 
                0.0f : 
                0.94736844f)) : 
         (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <397.5f ? 
            0.0f : 
            0.93333334f));
    return pred;
  } // constant pool size = 18B, number of visited nodes = 4, static init size = 0B
}

class log_drf_1_Tree_32_class_13 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.2553711f ? 
         (data[2 /* no_of_characters */] <61.0f ? 
             (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.29101562f ? 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.25f ? 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.125f ? 
                        0.875f : 
                        1.0f) : 
                    0.1f) : 
                0.16666667f) : 
             (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.18359375f ? 
                0.0f : 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.3671875f ? 
                    0.0f : 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <178.5f ? 
                        0.0f : 
                        0.33333334f)))) : 
         (data[2 /* no_of_characters */] <85.5f ? 
             (data[5 /* 4_letter_word */] <0.45048076f ? 
                 (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.1015625f ? 
                     (data[2 /* no_of_characters */] <59.0f ? 
                        0.5f : 
                        0.0f) : 
                    1.0f) : 
                0.0f) : 
             (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.4765625f ? 
                0.0f : 
                3.8138826E-4f)));
    return pred;
  } // constant pool size = 54B, number of visited nodes = 13, static init size = 0B
}

class log_drf_1_Tree_32_class_14 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[12]) || data[12 /* 11_letter_word */] <0.18310547f ? 
         (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.18359375f ? 
            0.0f : 
             (data[0 /* vlan */] <29.5f ? 
                 (data[1 /* type_of_time */] <3.5f ? 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <160.5f ? 
                        0.0f : 
                        1.0f) : 
                    0.0f) : 
                0.0f)) : 
         (data[5 /* 4_letter_word */] <0.22460938f ? 
             (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.1829338f ? 
                0.0f : 
                 (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.203125f ? 
                    1.0f : 
                    0.0f)) : 
            0.0f));
    return pred;
  } // constant pool size = 34B, number of visited nodes = 8, static init size = 0B
}

class log_drf_1_Tree_32_class_15 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.94970703f ? 
         (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.59472656f ? 
             (data[0 /* vlan */] <141.5f ? 
                 (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.30859375f ? 
                     (Double.isNaN(data[15]) || data[15 /* 14_letter_word */] <0.22265625f ? 
                        0.0016407808f : 
                        0.04950495f) : 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <137.5f ? 
                        0.0f : 
                        1.0f)) : 
                0.0f) : 
             (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.1015625f ? 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <113.5f ? 
                    0.0f : 
                     (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.171875f ? 
                        0.26585367f : 
                        1.0f)) : 
                0.0f)) : 
         (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <100.5f ? 
             (Double.isNaN(data[4]) || data[4 /* no_of_macs */] <0.5f ? 
                 (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <2.5f ? 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <98.5f ? 
                        0.0f : 
                        0.32278994f) : 
                    0.0f) : 
                0.0f) : 
            0.0f));
    return pred;
  } // constant pool size = 54B, number of visited nodes = 13, static init size = 0B
}

class log_drf_1_Tree_32_class_16 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.94970703f ? 
         (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.3095703f ? 
             (data[0 /* vlan */] <85.5f ? 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.38671875f ? 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.15581131f ? 
                        0.0f : 
                        1.7936416E-4f) : 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.21875f ? 
                        7.6657726E-4f : 
                        0.0f)) : 
                0.0f) : 
             (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.16796875f ? 
                 (data[3 /* no_of_ips */] <0.5f ? 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <160.5f ? 
                        0.0074074073f : 
                        0.0f) : 
                    0.0f) : 
                0.0f)) : 
         (data[2 /* no_of_characters */] <80.5f ? 
            0.034965035f : 
            0.0f));
    return pred;
  } // constant pool size = 42B, number of visited nodes = 10, static init size = 0B
}

class log_drf_1_Tree_32_class_17 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.36914062f ? 
         (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <659.0f ? 
             (data[0 /* vlan */] <17.5f ? 
                 (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.87109375f ? 
                    0.0f : 
                    0.25f) : 
                0.0f) : 
             (Double.isNaN(data[14]) || data[14 /* 13_letter_word */] <0.0087890625f ? 
                 (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.03125f ? 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.171875f ? 
                        0.8201058f : 
                        0.95098037f) : 
                     (data[3 /* no_of_ips */] <2.5f ? 
                        0.0f : 
                        1.0f)) : 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.234375f ? 
                    0.0f : 
                    0.5f))) : 
         (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <996.5f ? 
            0.0f : 
             (data[0 /* vlan */] <173.5f ? 
                0.0f : 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <1020.5f ? 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.5800781f ? 
                        1.0f : 
                        0.0f) : 
                     (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <4.5f ? 
                        1.0f : 
                        0.0f)))));
    return pred;
  } // constant pool size = 58B, number of visited nodes = 14, static init size = 0B
}

class log_drf_1_Tree_32_class_18 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.07470703f ? 
        0.0f : 
         (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <329.0f ? 
            0.0f : 
             (data[2 /* no_of_characters */] <334.5f ? 
                0.25f : 
                0.0f)));
    return pred;
  } // constant pool size = 14B, number of visited nodes = 3, static init size = 0B
}

class log_drf_1_Tree_32_class_19 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.24023438f ? 
         (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.18359375f ? 
            0.0f : 
             (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.17173004f ? 
                0.0f : 
                 (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.1015625f ? 
                    0.0f : 
                     (data[2 /* no_of_characters */] <200.5f ? 
                        0.5f : 
                        0.0f)))) : 
         (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.22460938f ? 
            0.0f : 
             (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.29217148f ? 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.125f ? 
                     (data[2 /* no_of_characters */] <126.5f ? 
                        0.5092593f : 
                        0.9873618f) : 
                    0.0f) : 
                0.0f)));
    return pred;
  } // constant pool size = 38B, number of visited nodes = 9, static init size = 0B
}

class log_drf_1_Tree_32_class_20 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.44970703f ? 
         (data[2 /* no_of_characters */] <135.5f ? 
             (data[0 /* vlan */] <25.5f ? 
                 (data[1 /* type_of_time */] <4.5f ? 
                    0.0f : 
                     (data[0 /* vlan */] <18.0f ? 
                        0.0f : 
                        0.9998391f)) : 
                0.0f) : 
             (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.12109375f ? 
                 (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.73046875f ? 
                     (data[2 /* no_of_characters */] <153.5f ? 
                        0.12208405f : 
                        0.022701968f) : 
                     (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.125f ? 
                        0.2935054f : 
                        1.0f)) : 
                 (data[1 /* type_of_time */] <4.5f ? 
                    0.0f : 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.1875f ? 
                        0.17700139f : 
                        0.86632717f)))) : 
         (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <135.5f ? 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <25.5f ? 
                 (data[0 /* vlan */] <18.0f ? 
                    0.0f : 
                    1.0f) : 
                0.0f) : 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <19.5f ? 
                0.0f : 
                 (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <2.0f ? 
                     (data[0 /* vlan */] <35.5f ? 
                        0.99717516f : 
                        0.0f) : 
                    0.0f))));
    return pred;
  } // constant pool size = 70B, number of visited nodes = 17, static init size = 0B
}

class log_drf_1_Tree_32_class_21 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[12]) || data[12 /* 11_letter_word */] <0.22460938f ? 
         (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <240.5f ? 
             (data[0 /* vlan */] <17.5f ? 
                 (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.18359375f ? 
                     (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.19335938f ? 
                        0.0f : 
                        1.0f) : 
                     (data[9 /* 8_letter_word */] <0.22824097f ? 
                        0.3043478f : 
                        0.009381515f)) : 
                 (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.078125f ? 
                        0.0018300905f : 
                        3.5232978E-4f) : 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <33.5f ? 
                        1.09313514E-4f : 
                        0.0013328891f))) : 
             (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.16015625f ? 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.78515625f ? 
                     (data[6 /* 5_letter_word */] <0.03125f ? 
                        0.007412515f : 
                        9.75202E-4f) : 
                     (data[3 /* no_of_ips */] <0.5f ? 
                        0.02631579f : 
                        0.20967741f)) : 
                 (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
                    0.0f : 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.140625f ? 
                        0.0f : 
                        0.94736844f)))) : 
         (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.125f ? 
            0.0f : 
            0.9875f));
    return pred;
  } // constant pool size = 66B, number of visited nodes = 16, static init size = 0B
}

class log_drf_1_Tree_32_class_22 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.49560547f ? 
        6.8407408E-6f : 
         (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <227.5f ? 
             (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.083984375f ? 
                0.0f : 
                 (data[10 /* 9_letter_word */] <0.1831131f ? 
                     (data[8 /* 7_letter_word */] <0.083984375f ? 
                        0.0f : 
                        0.14285715f) : 
                    0.0f)) : 
             (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.6513672f ? 
                0.0f : 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <25.5f ? 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.125f ? 
                        0.012244898f : 
                        0.0f) : 
                    0.0f))));
    return pred;
  } // constant pool size = 34B, number of visited nodes = 8, static init size = 0B
}

class log_drf_1_Tree_32_class_23 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.5830078f ? 
         (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.13378906f ? 
             (data[0 /* vlan */] <13.5f ? 
                 (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.15429688f ? 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <160.5f ? 
                        0.0055555557f : 
                        0.8243243f) : 
                    0.0f) : 
                 (Double.isNaN(data[13]) || data[13 /* 12_letter_word */] <0.234375f ? 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <180.5f ? 
                        4.1027324E-5f : 
                        5.5249943E-4f) : 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.203125f ? 
                        0.0f : 
                        0.25f))) : 
             (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.12639427f ? 
                0.0f : 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.265625f ? 
                    0.0f : 
                     (data[2 /* no_of_characters */] <230.5f ? 
                        0.0f : 
                        0.99900496f)))) : 
         (data[2 /* no_of_characters */] <135.5f ? 
            0.0031670625f : 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <155.5f ? 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <17.5f ? 
                    1.0f : 
                    0.0f) : 
                 (data[9 /* 8_letter_word */] <0.8322258f ? 
                     (data[2 /* no_of_characters */] <194.5f ? 
                        0.25f : 
                        0.0f) : 
                    0.0f))));
    return pred;
  } // constant pool size = 66B, number of visited nodes = 16, static init size = 0B
}

class log_drf_1_Tree_32_class_24 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.029785156f ? 
         (data[2 /* no_of_characters */] <145.5f ? 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <143.5f ? 
                0.0f : 
                 (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.74609375f ? 
                    0.0f : 
                     (data[0 /* vlan */] <17.5f ? 
                        1.0f : 
                        0.0f))) : 
            0.0f) : 
        0.0f);
    return pred;
  } // constant pool size = 22B, number of visited nodes = 5, static init size = 0B
}

class log_drf_1_Tree_32_class_25 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.94970703f ? 
         (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.4716797f ? 
             (data[0 /* vlan */] <41.5f ? 
                 (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.44921875f ? 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.4453125f ? 
                        0.2533062f : 
                        0.519726f) : 
                     (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <1.5f ? 
                        0.0042861854f : 
                        1.0f)) : 
                 (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.322752f ? 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <539.5f ? 
                        4.9023212E-5f : 
                        0.0036764706f) : 
                    0.0f)) : 
             (Double.isNaN(data[14]) || data[14 /* 13_letter_word */] <0.072265625f ? 
                 (data[1 /* type_of_time */] <4.5f ? 
                    0.0f : 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.80078125f ? 
                        0.60755914f : 
                        0.21618357f)) : 
                0.0f)) : 
         (data[2 /* no_of_characters */] <98.5f ? 
             (Double.isNaN(data[4]) || data[4 /* no_of_macs */] <0.5f ? 
                0.9535923f : 
                1.0f) : 
            0.53248525f));
    return pred;
  } // constant pool size = 54B, number of visited nodes = 13, static init size = 0B
}

class log_drf_1_Tree_32_class_26 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.6513672f ? 
        0.0f : 
         (data[2 /* no_of_characters */] <63.5f ? 
             (data[8 /* 7_letter_word */] <0.16796875f ? 
                0.0f : 
                0.9953488f) : 
            0.0f));
    return pred;
  } // constant pool size = 14B, number of visited nodes = 3, static init size = 0B
}

class log_drf_1_Tree_32_class_27 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.49560547f ? 
        0.0f : 
         (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <255.5f ? 
            0.0f : 
             (data[2 /* no_of_characters */] <259.5f ? 
                 (data[1 /* type_of_time */] <4.5f ? 
                    0.0f : 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.22265625f ? 
                        0.0f : 
                        0.33333334f)) : 
                0.0f)));
    return pred;
  } // constant pool size = 22B, number of visited nodes = 5, static init size = 0B
}

class log_drf_1_Tree_32_class_28 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.12109375f ? 
         (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <494.5f ? 
             (data[0 /* vlan */] <17.5f ? 
                 (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.171875f ? 
                    0.0f : 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.3671875f ? 
                        0.0f : 
                        0.11111111f)) : 
                0.0f) : 
             (data[14 /* 13_letter_word */] <0.072265625f ? 
                0.0f : 
                1.0f)) : 
         (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <447.5f ? 
            0.0f : 
             (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.41381836f ? 
                 (data[1 /* type_of_time */] <4.5f ? 
                    0.0f : 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <17.5f ? 
                        0.99977815f : 
                        0.0f)) : 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.20703125f ? 
                    0.0f : 
                     (data[3 /* no_of_ips */] <3.0f ? 
                        0.0f : 
                        1.0f)))));
    return pred;
  } // constant pool size = 50B, number of visited nodes = 12, static init size = 0B
}

class log_drf_1_Tree_32_class_29 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[12]) || data[12 /* 11_letter_word */] <0.0087890625f ? 
         (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <185.5f ? 
            0.0f : 
             (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.18359375f ? 
                0.0f : 
                 (data[10 /* 9_letter_word */] <0.21014404f ? 
                     (data[8 /* 7_letter_word */] <0.1015625f ? 
                        0.16666667f : 
                        0.0f) : 
                    0.0f))) : 
         (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <956.5f ? 
             (data[12 /* 11_letter_word */] <0.06686783f ? 
                 (data[9 /* 8_letter_word */] <0.05f ? 
                    0.5f : 
                    0.0f) : 
                0.0f) : 
             (data[5 /* 4_letter_word */] <0.42829242f ? 
                0.0f : 
                1.0f)));
    return pred;
  } // constant pool size = 38B, number of visited nodes = 9, static init size = 0B
}

class log_drf_1_Tree_32_class_30 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.24804688f ? 
        0.0f : 
         (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <217.5f ? 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <196.5f ? 
                0.0f : 
                 (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.0390625f ? 
                     (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.22265625f ? 
                        0.0021709634f : 
                        0.27272728f) : 
                    0.0f)) : 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <173.5f ? 
                0.0f : 
                 (data[5 /* 4_letter_word */] <0.52121735f ? 
                     (data[3 /* no_of_ips */] <3.5f ? 
                        0.8194444f : 
                        0.0f) : 
                     (data[1 /* type_of_time */] <2.5f ? 
                        1.0f : 
                        0.0f)))));
    return pred;
  } // constant pool size = 38B, number of visited nodes = 9, static init size = 0B
}

class log_drf_1_Tree_32_class_31 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.12109375f ? 
         (data[2 /* no_of_characters */] <95.5f ? 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <63.5f ? 
                 (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.125f ? 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <34.5f ? 
                        0.0f : 
                        0.25f) : 
                    0.0f) : 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.1015625f ? 
                     (Double.isNaN(data[12]) || data[12 /* 11_letter_word */] <0.5f ? 
                        0.18668596f : 
                        0.0f) : 
                     (data[13 /* 12_letter_word */] <0.25f ? 
                        0.59090906f : 
                        1.0f))) : 
             (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.029296875f ? 
                 (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
                    0.0f : 
                     (data[6 /* 5_letter_word */] <0.0625f ? 
                        2.3391812E-4f : 
                        0.0f)) : 
                0.0f)) : 
         (Double.isNaN(data[15]) || data[15 /* 14_letter_word */] <0.22460938f ? 
             (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.30970982f ? 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <81.5f ? 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.3515625f ? 
                        9.5472403E-4f : 
                        0.0f) : 
                     (data[0 /* vlan */] <104.0f ? 
                        0.8008021f : 
                        4.160253E-5f)) : 
                 (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.0859375f ? 
                     (data[1 /* type_of_time */] <4.5f ? 
                        0.0f : 
                        0.7196262f) : 
                    0.0f)) : 
             (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.125f ? 
                1.0f : 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <102.5f ? 
                    1.0f : 
                    0.6666667f))));
    return pred;
  } // constant pool size = 82B, number of visited nodes = 20, static init size = 0B
}

class log_drf_1_Tree_32_class_32 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.1977539f ? 
         (data[2 /* no_of_characters */] <88.5f ? 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <25.5f ? 
                0.0f : 
                 (Double.isNaN(data[12]) || data[12 /* 11_letter_word */] <0.5f ? 
                     (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.25f ? 
                        0.0f : 
                        0.47619048f) : 
                    0.0f)) : 
            0.0f) : 
         (data[2 /* no_of_characters */] <123.5f ? 
             (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.18359375f ? 
                 (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.22321428f ? 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.4453125f ? 
                        0.0f : 
                        0.065918654f) : 
                     (data[0 /* vlan */] <33.5f ? 
                        0.654321f : 
                        0.0f)) : 
                 (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.125f ? 
                     (data[5 /* 4_letter_word */] <0.26875f ? 
                        1.0f : 
                        0.0f) : 
                    0.0f)) : 
            0.0f));
    return pred;
  } // constant pool size = 50B, number of visited nodes = 12, static init size = 0B
}

class log_drf_1_Tree_32_class_33 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.40820312f ? 
         (data[2 /* no_of_characters */] <58.5f ? 
             (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.29101562f ? 
                 (data[0 /* vlan */] <9.5f ? 
                     (data[5 /* 4_letter_word */] <0.12756348f ? 
                        1.0f : 
                        0.016393442f) : 
                    0.0f) : 
                0.8333333f) : 
             (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.44921875f ? 
                 (data[1 /* type_of_time */] <2.5f ? 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.828125f ? 
                        0.0f : 
                        0.25f) : 
                     (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                        2.2659927E-4f : 
                        3.525596E-5f)) : 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <61.5f ? 
                     (data[2 /* no_of_characters */] <116.5f ? 
                        7.683442E-4f : 
                        0.0f) : 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.4140625f ? 
                        0.0f : 
                        0.06521739f)))) : 
         (data[2 /* no_of_characters */] <83.5f ? 
             (data[0 /* vlan */] <19.5f ? 
                1.0f : 
                0.0f) : 
             (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.080078125f ? 
                 (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                     (data[0 /* vlan */] <101.5f ? 
                        0.0012963864f : 
                        0.0f) : 
                    0.0f) : 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <275.5f ? 
                     (data[1 /* type_of_time */] <4.5f ? 
                        0.0f : 
                        0.008465609f) : 
                     (data[3 /* no_of_ips */] <0.5f ? 
                        0.0f : 
                        0.8933333f)))));
    return pred;
  } // constant pool size = 82B, number of visited nodes = 20, static init size = 0B
}

class log_drf_1_Tree_32_class_34 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.24804688f ? 
        0.0f : 
         (data[2 /* no_of_characters */] <118.5f ? 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <115.5f ? 
                0.0f : 
                 (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.0859375f ? 
                     (data[0 /* vlan */] <17.5f ? 
                        0.5f : 
                        0.0f) : 
                    0.0f)) : 
             (data[0 /* vlan */] <9.5f ? 
                0.06666667f : 
                0.0f)));
    return pred;
  } // constant pool size = 26B, number of visited nodes = 6, static init size = 0B
}

class log_drf_1_Tree_32_class_35 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.8745117f ? 
         (data[2 /* no_of_characters */] <88.5f ? 
             (data[0 /* vlan */] <19.5f ? 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.2890625f ? 
                    0.0f : 
                     (data[8 /* 7_letter_word */] <0.41125488f ? 
                        0.75f : 
                        0.11111111f)) : 
                0.0f) : 
             (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.17421913f ? 
                 (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.16196935f ? 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.59375f ? 
                        3.879678E-5f : 
                        1.7745179E-4f) : 
                     (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                        0.0f : 
                        0.023809524f)) : 
                0.0f)) : 
         (data[2 /* no_of_characters */] <83.5f ? 
            0.2f : 
            0.0f));
    return pred;
  } // constant pool size = 42B, number of visited nodes = 10, static init size = 0B
}

class log_drf_1_Tree_32_class_36 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.1616211f ? 
        0.0f : 
         (data[2 /* no_of_characters */] <133.5f ? 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <128.5f ? 
                 (data[9 /* 8_letter_word */] <0.1812706f ? 
                     (data[0 /* vlan */] <75.5f ? 
                        1.0f : 
                        0.0f) : 
                    0.0f) : 
                 (data[9 /* 8_letter_word */] <0.1812706f ? 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <130.5f ? 
                        1.0f : 
                        0.6f) : 
                    0.0f)) : 
            0.0f));
    return pred;
  } // constant pool size = 30B, number of visited nodes = 7, static init size = 0B
}

class log_drf_1_Tree_32_class_37 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.29296875f ? 
         (data[2 /* no_of_characters */] <163.5f ? 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <157.5f ? 
                 (data[1 /* type_of_time */] <4.5f ? 
                     (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                        0.99893165f : 
                        0.0f) : 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.3125f ? 
                        0.0f : 
                        3.4286498E-4f)) : 
                 (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.22265625f ? 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <586.0f ? 
                        0.97473586f : 
                        0.099236645f) : 
                     (data[5 /* 4_letter_word */] <0.29553223f ? 
                        0.0035460992f : 
                        0.622701f))) : 
             (Double.isNaN(data[14]) || data[14 /* 13_letter_word */] <0.0068359375f ? 
                 (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
                     (data[8 /* 7_letter_word */] <0.2578125f ? 
                        0.92156285f : 
                        0.994574f) : 
                    0.0f) : 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <150.0f ? 
                    0.0f : 
                     (data[6 /* 5_letter_word */] <0.21875f ? 
                        0.9464286f : 
                        0.9974619f)))) : 
         (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <198.5f ? 
             (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.29101562f ? 
                 (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.58203125f ? 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <170.5f ? 
                        0.0076719206f : 
                        0.121839084f) : 
                    0.0f) : 
                 (data[3 /* no_of_ips */] <1.0f ? 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.41448975f ? 
                        1.0f : 
                        0.0f) : 
                    0.0f)) : 
             (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.12109375f ? 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <257.5f ? 
                     (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
                        0.9855247f : 
                        0.0f) : 
                     (data[1 /* type_of_time */] <4.5f ? 
                        1.0f : 
                        0.0f)) : 
                 (data[6 /* 5_letter_word */] <0.36679077f ? 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <98.0f ? 
                        0.0f : 
                        0.29411766f) : 
                     (data[1 /* type_of_time */] <4.5f ? 
                        1.0f : 
                        0.0f)))));
    return pred;
  } // constant pool size = 110B, number of visited nodes = 27, static init size = 0B
}

class log_drf_1_Tree_32_class_38 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.94970703f ? 
         (data[2 /* no_of_characters */] <93.5f ? 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <85.5f ? 
                0.0f : 
                 (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.12613297f ? 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.25f ? 
                        0.0f : 
                        0.05f) : 
                    0.0f)) : 
            0.0f) : 
         (data[2 /* no_of_characters */] <90.5f ? 
            0.0018365473f : 
            0.0f));
    return pred;
  } // constant pool size = 26B, number of visited nodes = 6, static init size = 0B
}


class log_drf_1_Forest_33 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += log_drf_1_Tree_33_class_0.score0(fdata);
    preds[2] += log_drf_1_Tree_33_class_1.score0(fdata);
    preds[3] += log_drf_1_Tree_33_class_2.score0(fdata);
    preds[4] += log_drf_1_Tree_33_class_3.score0(fdata);
    preds[5] += log_drf_1_Tree_33_class_4.score0(fdata);
    preds[6] += log_drf_1_Tree_33_class_5.score0(fdata);
    preds[7] += log_drf_1_Tree_33_class_6.score0(fdata);
    preds[8] += log_drf_1_Tree_33_class_7.score0(fdata);
    preds[9] += log_drf_1_Tree_33_class_8.score0(fdata);
    preds[10] += log_drf_1_Tree_33_class_9.score0(fdata);
    preds[11] += log_drf_1_Tree_33_class_10.score0(fdata);
    preds[12] += log_drf_1_Tree_33_class_11.score0(fdata);
    preds[13] += log_drf_1_Tree_33_class_12.score0(fdata);
    preds[14] += log_drf_1_Tree_33_class_13.score0(fdata);
    preds[15] += log_drf_1_Tree_33_class_14.score0(fdata);
    preds[16] += log_drf_1_Tree_33_class_15.score0(fdata);
    preds[17] += log_drf_1_Tree_33_class_16.score0(fdata);
    preds[18] += log_drf_1_Tree_33_class_17.score0(fdata);
    preds[19] += log_drf_1_Tree_33_class_18.score0(fdata);
    preds[20] += log_drf_1_Tree_33_class_19.score0(fdata);
    preds[21] += log_drf_1_Tree_33_class_20.score0(fdata);
    preds[22] += log_drf_1_Tree_33_class_21.score0(fdata);
    preds[23] += log_drf_1_Tree_33_class_22.score0(fdata);
    preds[24] += log_drf_1_Tree_33_class_23.score0(fdata);
    preds[25] += log_drf_1_Tree_33_class_24.score0(fdata);
    preds[26] += log_drf_1_Tree_33_class_25.score0(fdata);
    preds[27] += log_drf_1_Tree_33_class_26.score0(fdata);
    preds[28] += log_drf_1_Tree_33_class_27.score0(fdata);
    preds[29] += log_drf_1_Tree_33_class_28.score0(fdata);
    preds[30] += log_drf_1_Tree_33_class_29.score0(fdata);
    preds[31] += log_drf_1_Tree_33_class_30.score0(fdata);
    preds[32] += log_drf_1_Tree_33_class_31.score0(fdata);
    preds[33] += log_drf_1_Tree_33_class_32.score0(fdata);
    preds[34] += log_drf_1_Tree_33_class_33.score0(fdata);
    preds[35] += log_drf_1_Tree_33_class_34.score0(fdata);
    preds[36] += log_drf_1_Tree_33_class_35.score0(fdata);
    preds[37] += log_drf_1_Tree_33_class_36.score0(fdata);
    preds[38] += log_drf_1_Tree_33_class_37.score0(fdata);
    preds[39] += log_drf_1_Tree_33_class_38.score0(fdata);
  }
}
class log_drf_1_Tree_33_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[4]) || data[4 /* no_of_macs */] <2.5f ? 
         (Double.isNaN(data[13]) || data[13 /* 12_letter_word */] <0.009765625f ? 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <1051.0f ? 
                 (Double.isNaN(data[4]) || data[4 /* no_of_macs */] <0.5f ? 
                    0.0f : 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <73.5f ? 
                        0.0f : 
                        1.0f)) : 
                 (data[5 /* 4_letter_word */] <0.23046875f ? 
                    0.33333334f : 
                    1.0f)) : 
             (data[13 /* 12_letter_word */] <0.036842346f ? 
                1.0f : 
                0.0f)) : 
         (data[5 /* 4_letter_word */] <0.43164062f ? 
            0.6666667f : 
            0.0f));
    return pred;
  } // constant pool size = 34B, number of visited nodes = 8, static init size = 0B
}

class log_drf_1_Tree_33_class_1 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
        0.0f : 
         (data[3 /* no_of_ips */] <1.5f ? 
             (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.3671875f ? 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <255.5f ? 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.6171875f ? 
                        0.0f : 
                        0.0015546726f) : 
                     (data[0 /* vlan */] <89.5f ? 
                        0.0f : 
                        0.4796748f)) : 
                 (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.3671875f ? 
                    0.0f : 
                     (data[2 /* no_of_characters */] <220.5f ? 
                        0.0f : 
                        0.9957627f))) : 
            0.0f));
    return pred;
  } // constant pool size = 34B, number of visited nodes = 8, static init size = 0B
}

class log_drf_1_Tree_33_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
         (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.56933594f ? 
             (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.27929688f ? 
                 (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
                    0.0f : 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.015625f ? 
                        0.005571726f : 
                        0.0022571147f)) : 
                 (data[6 /* 5_letter_word */] <0.2933731f ? 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <113.5f ? 
                        0.0f : 
                        0.2f) : 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.51971453f ? 
                        0.0037313432f : 
                        0.0f))) : 
             (data[2 /* no_of_characters */] <150.5f ? 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <137.5f ? 
                    0.0f : 
                     (data[7 /* 6_letter_word */] <0.078125f ? 
                        0.0f : 
                        1.0f)) : 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.18359375f ? 
                    0.0f : 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.1f ? 
                        0.0f : 
                        1.0f)))) : 
         (data[6 /* 5_letter_word */] <0.05859375f ? 
             (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.13085938f ? 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.3671875f ? 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.0859375f ? 
                        1.2817227E-4f : 
                        0.0f) : 
                     (data[2 /* no_of_characters */] <140.5f ? 
                        0.010869565f : 
                        0.9316006f)) : 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <350.5f ? 
                    0.0f : 
                     (data[11 /* 10_letter_word */] <0.1015625f ? 
                        0.33333334f : 
                        1.0f))) : 
             (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.19140625f ? 
                 (data[6 /* 5_letter_word */] <0.26820374f ? 
                     (data[3 /* no_of_ips */] <1.5f ? 
                        0.012698413f : 
                        0.0f) : 
                    0.0f) : 
                 (data[2 /* no_of_characters */] <120.5f ? 
                    0.020618556f : 
                    0.0f))));
    return pred;
  } // constant pool size = 98B, number of visited nodes = 24, static init size = 0B
}

class log_drf_1_Tree_33_class_3 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
         (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
            0.0f : 
             (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.36914062f ? 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <25.5f ? 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.234375f ? 
                        0.0f : 
                        1.4316392E-4f) : 
                    0.0f) : 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.1171875f ? 
                    0.0f : 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.4677124f ? 
                        0.9009585f : 
                        0.0f)))) : 
         (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.4765625f ? 
             (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.18359375f ? 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <150.5f ? 
                    0.0f : 
                     (data[2 /* no_of_characters */] <110.5f ? 
                        0.2631579f : 
                        0.0f)) : 
                 (data[3 /* no_of_ips */] <1.5f ? 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.28125f ? 
                        0.0f : 
                        0.9951923f) : 
                    0.0f)) : 
             (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.31054688f ? 
                 (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.22563171f ? 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <146.5f ? 
                        0.0f : 
                        0.0012484394f) : 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.5338135f ? 
                        0.5f : 
                        0.0f)) : 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.05859375f ? 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <200.5f ? 
                        0.9788109f : 
                        0.0f) : 
                    0.0f))));
    return pred;
  } // constant pool size = 78B, number of visited nodes = 19, static init size = 0B
}

class log_drf_1_Tree_33_class_4 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.3095703f ? 
         (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
            0.0f : 
             (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.12109375f ? 
                 (data[2 /* no_of_characters */] <110.5f ? 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.7421875f ? 
                        7.4052135E-5f : 
                        0.0010649627f) : 
                    0.0f) : 
                 (data[0 /* vlan */] <25.5f ? 
                    0.0f : 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.109375f ? 
                        9.7143966E-5f : 
                        0.002688172f)))) : 
         (data[6 /* 5_letter_word */] <0.41601562f ? 
             (data[10 /* 9_letter_word */] <0.36620712f ? 
                 (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.2502594f ? 
                    0.0f : 
                     (data[5 /* 4_letter_word */] <0.16666667f ? 
                        0.8181818f : 
                        0.0f)) : 
                0.0f) : 
            0.0f));
    return pred;
  } // constant pool size = 46B, number of visited nodes = 11, static init size = 0B
}

class log_drf_1_Tree_33_class_5 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.07470703f ? 
         (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
            0.0f : 
             (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.087890625f ? 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.22265625f ? 
                    0.0f : 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <65.5f ? 
                        9.724789E-5f : 
                        0.018789144f)) : 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <33.5f ? 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.052083332f ? 
                        0.0f : 
                        9.765625E-4f) : 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.28125f ? 
                        0.015547703f : 
                        0.0f)))) : 
         (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.30566406f ? 
            0.0f : 
             (data[10 /* 9_letter_word */] <0.08012867f ? 
                0.4375f : 
                 (data[5 /* 4_letter_word */] <0.44083405f ? 
                     (data[2 /* no_of_characters */] <148.5f ? 
                        0.017897092f : 
                        0.0f) : 
                    0.0f))));
    return pred;
  } // constant pool size = 50B, number of visited nodes = 12, static init size = 0B
}

class log_drf_1_Tree_33_class_6 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
         (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
            0.0f : 
             (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.15429688f ? 
                 (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.32421875f ? 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.8984375f ? 
                        3.85119E-4f : 
                        0.0036784026f) : 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <65.5f ? 
                        0.0025022342f : 
                        0.08740741f)) : 
                 (data[2 /* no_of_characters */] <80.5f ? 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <113.5f ? 
                        0.0f : 
                        1.0f) : 
                     (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.015625f ? 
                        0.019031532f : 
                        0.0f)))) : 
        0.0f);
    return pred;
  } // constant pool size = 38B, number of visited nodes = 9, static init size = 0B
}

class log_drf_1_Tree_33_class_7 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <1.5f ? 
         (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
            0.0f : 
             (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.029296875f ? 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <150.5f ? 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <178.5f ? 
                        0.0f : 
                        0.0034188034f) : 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.8984375f ? 
                        0.0f : 
                        0.056145675f)) : 
                0.0f)) : 
         (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.87402344f ? 
            0.0f : 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <109.5f ? 
                0.0f : 
                1.0f)));
    return pred;
  } // constant pool size = 34B, number of visited nodes = 8, static init size = 0B
}

class log_drf_1_Tree_33_class_8 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <2.5f ? 
         (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
            0.0f : 
             (Double.isNaN(data[4]) || data[4 /* no_of_macs */] <0.5f ? 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <178.5f ? 
                    0.0f : 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <878.5f ? 
                        0.00154202f : 
                        0.94f)) : 
                0.0f)) : 
         (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.52246094f ? 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <736.5f ? 
                0.0f : 
                 (data[3 /* no_of_ips */] <3.5f ? 
                    1.0f : 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.171875f ? 
                        0.022058824f : 
                        0.0f))) : 
             (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.2265625f ? 
                0.0f : 
                 (data[2 /* no_of_characters */] <574.5f ? 
                    0.0f : 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.078125f ? 
                        0.9576271f : 
                        1.0f)))));
    return pred;
  } // constant pool size = 50B, number of visited nodes = 12, static init size = 0B
}

class log_drf_1_Tree_33_class_9 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <2.5f ? 
         (data[1 /* type_of_time */] <3.5f ? 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <161.5f ? 
                0.0f : 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.1640625f ? 
                    1.0f : 
                    0.0f)) : 
            0.0f) : 
         (data[6 /* 5_letter_word */] <0.26757812f ? 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <95.5f ? 
                0.0f : 
                 (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.44921875f ? 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <174.0f ? 
                        1.0f : 
                        0.0f) : 
                    0.0f)) : 
             (data[6 /* 5_letter_word */] <0.34768677f ? 
                 (data[5 /* 4_letter_word */] <0.07421875f ? 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.171875f ? 
                        1.0f : 
                        0.0f) : 
                    0.0f) : 
                0.0f)));
    return pred;
  } // constant pool size = 46B, number of visited nodes = 11, static init size = 0B
}

class log_drf_1_Tree_33_class_10 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
        7.4042264E-6f : 
         (data[6 /* 5_letter_word */] <0.028320312f ? 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <165.5f ? 
                0.0f : 
                 (data[2 /* no_of_characters */] <105.5f ? 
                    0.5f : 
                    0.0f)) : 
            0.0f));
    return pred;
  } // constant pool size = 18B, number of visited nodes = 4, static init size = 0B
}

class log_drf_1_Tree_33_class_11 {
  static final double score0(double[] data) {
    double pred =     5.0E-6f;
    return pred;
  } // constant pool size = 2B, number of visited nodes = 0, static init size = 0B
}

class log_drf_1_Tree_33_class_12 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
        0.0f : 
         (data[3 /* no_of_ips */] <1.5f ? 
             (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.58203125f ? 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <415.5f ? 
                    0.0f : 
                     (data[7 /* 6_letter_word */] <0.7890625f ? 
                        0.0f : 
                        1.0f)) : 
                 (data[9 /* 8_letter_word */] <0.8318329f ? 
                    1.0f : 
                    0.0f)) : 
            0.0f));
    return pred;
  } // constant pool size = 26B, number of visited nodes = 6, static init size = 0B
}

class log_drf_1_Tree_33_class_13 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
         (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
            0.0f : 
             (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.01953125f ? 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.265625f ? 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.265625f ? 
                        0.030842341f : 
                        0.0f) : 
                     (data[2 /* no_of_characters */] <60.5f ? 
                        0.0023474179f : 
                        0.0f)) : 
                0.0f)) : 
         (data[6 /* 5_letter_word */] <0.028320312f ? 
             (data[2 /* no_of_characters */] <45.5f ? 
                1.0f : 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.171875f ? 
                    0.0f : 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <166.5f ? 
                        0.0f : 
                        0.083333336f))) : 
            0.0f));
    return pred;
  } // constant pool size = 42B, number of visited nodes = 10, static init size = 0B
}

class log_drf_1_Tree_33_class_14 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.19091797f ? 
         (data[1 /* type_of_time */] <2.5f ? 
             (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.18359375f ? 
                0.0f : 
                 (data[6 /* 5_letter_word */] <0.2696991f ? 
                    0.032258064f : 
                    0.0f)) : 
            0.0f) : 
         (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.18359375f ? 
            0.0f : 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <215.5f ? 
                0.0f : 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <26.5f ? 
                    0.0f : 
                     (data[1 /* type_of_time */] <3.0f ? 
                        0.39130434f : 
                        0.0f)))));
    return pred;
  } // constant pool size = 34B, number of visited nodes = 8, static init size = 0B
}

class log_drf_1_Tree_33_class_15 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <1.5f ? 
         (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
            0.0f : 
             (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.4140625f ? 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <125.5f ? 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.109375f ? 
                        0.0f : 
                        0.002198962f) : 
                     (data[5 /* 4_letter_word */] <0.3828125f ? 
                        0.21248835f : 
                        0.0098335855f)) : 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <150.5f ? 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <113.5f ? 
                        0.0f : 
                        0.018181818f) : 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <89.5f ? 
                        0.0f : 
                        0.25f)))) : 
         (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.87402344f ? 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <85.5f ? 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.4609375f ? 
                    0.0f : 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <164.5f ? 
                        0.0f : 
                        0.0010493179f)) : 
                 (data[3 /* no_of_ips */] <2.5f ? 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.22533417f ? 
                        0.27659574f : 
                        0.011363637f) : 
                    0.0f)) : 
            0.09176633f));
    return pred;
  } // constant pool size = 62B, number of visited nodes = 15, static init size = 0B
}

class log_drf_1_Tree_33_class_16 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
         (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.9277344f ? 
             (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
                0.0f : 
                 (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.15220642f ? 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.3671875f ? 
                        0.0f : 
                        3.354579E-4f) : 
                     (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.3125f ? 
                        8.4663765E-4f : 
                        0.028846154f))) : 
            0.0020100502f) : 
        0.0f);
    return pred;
  } // constant pool size = 26B, number of visited nodes = 6, static init size = 0B
}

class log_drf_1_Tree_33_class_17 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <3.5f ? 
         (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
             (data[2 /* no_of_characters */] <95.5f ? 
                 (data[1 /* type_of_time */] <2.5f ? 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <93.0f ? 
                        0.0f : 
                        0.25f) : 
                    0.0f) : 
                0.0f) : 
             (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.03125f ? 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <659.5f ? 
                    0.0f : 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <885.0f ? 
                        0.9936709f : 
                        0.0f)) : 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <1128.5f ? 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <821.5f ? 
                        0.0f : 
                        0.0057803467f) : 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.2265625f ? 
                        0.0f : 
                        0.5f)))) : 
         (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.5830078f ? 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <991.0f ? 
                0.0f : 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.16666667f ? 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.046875f ? 
                        0.9622642f : 
                        0.8333333f) : 
                    1.0f)) : 
            1.0f));
    return pred;
  } // constant pool size = 62B, number of visited nodes = 15, static init size = 0B
}

class log_drf_1_Tree_33_class_18 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.07470703f ? 
        0.0f : 
         (data[3 /* no_of_ips */] <0.5f ? 
             (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.064453125f ? 
                0.0f : 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <305.5f ? 
                    0.0f : 
                     (data[4 /* no_of_macs */] <0.5f ? 
                        0.5f : 
                        0.0f))) : 
            0.0f));
    return pred;
  } // constant pool size = 22B, number of visited nodes = 5, static init size = 0B
}

class log_drf_1_Tree_33_class_19 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
        0.0f : 
         (data[3 /* no_of_ips */] <1.5f ? 
             (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.22460938f ? 
                 (data[6 /* 5_letter_word */] <0.03125f ? 
                     (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.1796875f ? 
                        0.0f : 
                        0.0018450185f) : 
                    0.0f) : 
                 (data[5 /* 4_letter_word */] <0.22265625f ? 
                    0.0f : 
                    0.87874836f)) : 
            0.0f));
    return pred;
  } // constant pool size = 26B, number of visited nodes = 6, static init size = 0B
}

class log_drf_1_Tree_33_class_20 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
         (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
            0.0f : 
             (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.01953125f ? 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <25.5f ? 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.578125f ? 
                        0.98688805f : 
                        0.38653734f) : 
                    0.0f) : 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <25.5f ? 
                     (data[7 /* 6_letter_word */] <0.41966912f ? 
                        0.9867314f : 
                        0.64844906f) : 
                    0.0f))) : 
         (data[6 /* 5_letter_word */] <0.028320312f ? 
             (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.087890625f ? 
                 (data[0 /* vlan */] <22.5f ? 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <17.0f ? 
                        0.0f : 
                        1.0f) : 
                    0.0f) : 
                 (data[1 /* type_of_time */] <4.0f ? 
                    0.0f : 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <22.5f ? 
                        0.9993921f : 
                        0.0f))) : 
             (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.9164963f ? 
                 (data[6 /* 5_letter_word */] <0.18335144f ? 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <17.5f ? 
                        0.0f : 
                        0.0921659f) : 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.4765625f ? 
                        0.0014984689f : 
                        0.013326226f)) : 
                0.046663236f)));
    return pred;
  } // constant pool size = 70B, number of visited nodes = 17, static init size = 0B
}

class log_drf_1_Tree_33_class_21 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
         (data[1 /* type_of_time */] <3.5f ? 
             (Double.isNaN(data[12]) || data[12 /* 11_letter_word */] <0.22460938f ? 
                0.0f : 
                1.0f) : 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <260.5f ? 
                 (Double.isNaN(data[13]) || data[13 /* 12_letter_word */] <0.18359375f ? 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.0625f ? 
                        9.6667005E-4f : 
                        0.0023695186f) : 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.3671875f ? 
                        0.006153846f : 
                        0.5f)) : 
                 (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.15625f ? 
                     (data[0 /* vlan */] <73.5f ? 
                        0.06042885f : 
                        0.009325288f) : 
                    0.0f))) : 
         (data[6 /* 5_letter_word */] <0.18359375f ? 
             (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.1341095f ? 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.59375f ? 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.4609375f ? 
                        0.0f : 
                        4.302926E-4f) : 
                     (data[0 /* vlan */] <22.5f ? 
                        1.0f : 
                        0.0f)) : 
                 (data[6 /* 5_letter_word */] <0.15471208f ? 
                     (data[9 /* 8_letter_word */] <0.078125f ? 
                        0.28070176f : 
                        0.0f) : 
                     (data[3 /* no_of_ips */] <1.5f ? 
                        0.013888889f : 
                        0.0f))) : 
             (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.1328125f ? 
                0.0f : 
                 (Double.isNaN(data[4]) || data[4 /* no_of_macs */] <0.5f ? 
                     (data[0 /* vlan */] <17.5f ? 
                        0.05f : 
                        0.0014044944f) : 
                    0.0f))));
    return pred;
  } // constant pool size = 82B, number of visited nodes = 20, static init size = 0B
}

class log_drf_1_Tree_33_class_22 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.16015625f ? 
         (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
            0.0f : 
             (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.32226562f ? 
                0.0f : 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <220.5f ? 
                    0.0f : 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.6328125f ? 
                        9.157509E-4f : 
                        0.039215688f)))) : 
         (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.4638672f ? 
            0.0f : 
             (data[0 /* vlan */] <9.5f ? 
                0.21428572f : 
                0.0f)));
    return pred;
  } // constant pool size = 30B, number of visited nodes = 7, static init size = 0B
}

class log_drf_1_Tree_33_class_23 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
         (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.5830078f ? 
             (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.1484375f ? 
                 (data[0 /* vlan */] <17.5f ? 
                     (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
                        0.0f : 
                        0.8303914f) : 
                    0.0f) : 
                 (Double.isNaN(data[13]) || data[13 /* 12_letter_word */] <0.046875f ? 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.2375f ? 
                        0.0f : 
                        2.4093482E-4f) : 
                     (data[0 /* vlan */] <17.5f ? 
                        1.0f : 
                        0.0f))) : 
             (data[2 /* no_of_characters */] <135.5f ? 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <134.5f ? 
                    0.0f : 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <17.5f ? 
                        1.0f : 
                        0.0f)) : 
                 (data[1 /* type_of_time */] <4.5f ? 
                    0.0f : 
                     (data[9 /* 8_letter_word */] <0.8333333f ? 
                        0.9895338f : 
                        0.96268654f)))) : 
         (data[5 /* 4_letter_word */] <0.030273438f ? 
             (data[6 /* 5_letter_word */] <0.31054688f ? 
                 (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.2680893f ? 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.078125f ? 
                        0.0076949983f : 
                        0.0f) : 
                    1.0f) : 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.2890625f ? 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <220.5f ? 
                        0.0f : 
                        0.04109589f) : 
                     (data[3 /* no_of_ips */] <1.5f ? 
                        0.5f : 
                        0.0f))) : 
            0.0f));
    return pred;
  } // constant pool size = 82B, number of visited nodes = 20, static init size = 0B
}

class log_drf_1_Tree_33_class_24 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
        0.0f : 
         (data[3 /* no_of_ips */] <1.5f ? 
             (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.04296875f ? 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <140.5f ? 
                    0.0f : 
                     (data[5 /* 4_letter_word */] <0.0859375f ? 
                        0.0078125f : 
                        0.0f)) : 
                0.0f) : 
            0.0f));
    return pred;
  } // constant pool size = 22B, number of visited nodes = 5, static init size = 0B
}

class log_drf_1_Tree_33_class_25 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <1.5f ? 
         (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
            0.0f : 
             (Double.isNaN(data[12]) || data[12 /* 11_letter_word */] <0.13867188f ? 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <25.5f ? 
                    0.0f : 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <160.5f ? 
                        0.25245798f : 
                        0.7721857f)) : 
                 (data[5 /* 4_letter_word */] <0.2890625f ? 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <33.5f ? 
                        0.0f : 
                        0.5f) : 
                     (data[3 /* no_of_ips */] <0.5f ? 
                        0.0f : 
                        1.0f)))) : 
         (data[5 /* 4_letter_word */] <0.1171875f ? 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <85.5f ? 
                 (data[0 /* vlan */] <24.5f ? 
                    0.0f : 
                     (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.125f ? 
                        0.9995442f : 
                        1.0f)) : 
                 (data[3 /* no_of_ips */] <2.5f ? 
                    0.04255319f : 
                    0.0f)) : 
             (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.04296875f ? 
                 (Double.isNaN(data[4]) || data[4 /* no_of_macs */] <0.5f ? 
                     (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.0625f ? 
                        0.8610086f : 
                        0.07245337f) : 
                    1.0f) : 
                 (Double.isNaN(data[14]) || data[14 /* 13_letter_word */] <0.0625f ? 
                     (data[7 /* 6_letter_word */] <0.3203125f ? 
                        0.17940354f : 
                        0.007498897f) : 
                    0.0f))));
    return pred;
  } // constant pool size = 74B, number of visited nodes = 18, static init size = 0B
}

class log_drf_1_Tree_33_class_26 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
         (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.6455078f ? 
            0.0f : 
             (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
                0.0f : 
                 (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.0859375f ? 
                     (data[2 /* no_of_characters */] <60.5f ? 
                        0.99760765f : 
                        0.0f) : 
                    0.0f))) : 
        0.0f);
    return pred;
  } // constant pool size = 22B, number of visited nodes = 5, static init size = 0B
}

class log_drf_1_Tree_33_class_27 {
  static final double score0(double[] data) {
    double pred =     1.0E-5f;
    return pred;
  } // constant pool size = 2B, number of visited nodes = 0, static init size = 0B
}

class log_drf_1_Tree_33_class_28 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <5.5f ? 
         (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <3.5f ? 
            0.0f : 
             (data[0 /* vlan */] <23.5f ? 
                1.0f : 
                0.0f)) : 
         (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.4638672f ? 
             (data[2 /* no_of_characters */] <449.5f ? 
                0.8333333f : 
                1.0f) : 
             (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.41601562f ? 
                1.0f : 
                0.0f)));
    return pred;
  } // constant pool size = 26B, number of visited nodes = 6, static init size = 0B
}

class log_drf_1_Tree_33_class_29 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.0063476562f ? 
         (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
            0.0f : 
             (Double.isNaN(data[12]) || data[12 /* 11_letter_word */] <0.009765625f ? 
                0.0f : 
                 (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.17578125f ? 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <123.5f ? 
                        0.0f : 
                        0.14285715f) : 
                     (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.0390625f ? 
                        0.6666667f : 
                        1.0f)))) : 
         (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.77441406f ? 
             (data[10 /* 9_letter_word */] <0.016051292f ? 
                1.0f : 
                0.0f) : 
            0.11764706f));
    return pred;
  } // constant pool size = 34B, number of visited nodes = 8, static init size = 0B
}

class log_drf_1_Tree_33_class_30 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <2.5f ? 
         (data[1 /* type_of_time */] <1.5f ? 
            1.0f : 
            0.0f) : 
         (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.22460938f ? 
            0.0f : 
             (data[1 /* type_of_time */] <2.0f ? 
                1.0f : 
                0.0f)));
    return pred;
  } // constant pool size = 18B, number of visited nodes = 4, static init size = 0B
}

class log_drf_1_Tree_33_class_31 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <1.5f ? 
         (Double.isNaN(data[13]) || data[13 /* 12_letter_word */] <0.22460938f ? 
             (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.1328125f ? 
                 (data[2 /* no_of_characters */] <80.5f ? 
                     (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.25f ? 
                        0.024390243f : 
                        0.90909094f) : 
                     (data[0 /* vlan */] <113.5f ? 
                        0.0033852404f : 
                        0.0f)) : 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.56640625f ? 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.15625f ? 
                        0.006476353f : 
                        0.055426054f) : 
                     (data[8 /* 7_letter_word */] <0.57683307f ? 
                        0.75510204f : 
                        0.09646856f))) : 
             (data[2 /* no_of_characters */] <115.5f ? 
                0.75757575f : 
                0.0f)) : 
        0.0f);
    return pred;
  } // constant pool size = 42B, number of visited nodes = 10, static init size = 0B
}

class log_drf_1_Tree_33_class_32 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.19091797f ? 
         (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
            0.0f : 
             (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.029296875f ? 
                 (data[2 /* no_of_characters */] <110.5f ? 
                     (Double.isNaN(data[13]) || data[13 /* 12_letter_word */] <0.2890625f ? 
                        0.0f : 
                        0.020408163f) : 
                     (data[2 /* no_of_characters */] <125.5f ? 
                        0.022530328f : 
                        0.0f)) : 
                0.0f)) : 
         (data[6 /* 5_letter_word */] <0.05078125f ? 
             (data[2 /* no_of_characters */] <115.5f ? 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.4140625f ? 
                    0.042f : 
                     (data[10 /* 9_letter_word */] <0.4125f ? 
                        0.0f : 
                        0.5294118f)) : 
                0.0f) : 
            0.0f));
    return pred;
  } // constant pool size = 42B, number of visited nodes = 10, static init size = 0B
}

class log_drf_1_Tree_33_class_33 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[4]) || data[4 /* no_of_macs */] <1.5f ? 
         (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
             (data[1 /* type_of_time */] <2.5f ? 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.07421875f ? 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.828125f ? 
                        0.0f : 
                        0.25f) : 
                    0.0f) : 
                0.0f) : 
             (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.40820312f ? 
                 (data[2 /* no_of_characters */] <60.5f ? 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.2890625f ? 
                        0.010723861f : 
                        1.0f) : 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.24375f ? 
                        2.0817843E-4f : 
                        9.887285E-4f)) : 
                 (data[2 /* no_of_characters */] <70.5f ? 
                     (data[5 /* 4_letter_word */] <0.5792694f ? 
                        0.8450704f : 
                        0.0f) : 
                     (data[5 /* 4_letter_word */] <0.42207336f ? 
                        1.0f : 
                        0.005809177f)))) : 
         (data[6 /* 5_letter_word */] <0.091796875f ? 
             (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.08175659f ? 
                0.0f : 
                1.0f) : 
            0.0f));
    return pred;
  } // constant pool size = 58B, number of visited nodes = 14, static init size = 0B
}

class log_drf_1_Tree_33_class_34 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.123535156f ? 
        0.0f : 
         (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <1.5f ? 
             (data[0 /* vlan */] <9.5f ? 
                0.06666667f : 
                 (data[10 /* 9_letter_word */] <0.17489052f ? 
                     (data[7 /* 6_letter_word */] <0.041666668f ? 
                        0.037037037f : 
                        0.0f) : 
                    0.0f)) : 
            0.0f));
    return pred;
  } // constant pool size = 22B, number of visited nodes = 5, static init size = 0B
}

class log_drf_1_Tree_33_class_35 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.087402344f ? 
         (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
            0.0f : 
             (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.34960938f ? 
                 (data[2 /* no_of_characters */] <90.5f ? 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.828125f ? 
                        2.127207E-4f : 
                        0.004278075f) : 
                     (data[0 /* vlan */] <17.5f ? 
                        0.001023076f : 
                        0.0f)) : 
                0.0f)) : 
         (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.24023438f ? 
            0.0f : 
             (data[2 /* no_of_characters */] <90.5f ? 
                0.6666667f : 
                 (data[3 /* no_of_ips */] <0.5f ? 
                     (data[5 /* 4_letter_word */] <0.26289064f ? 
                        0.0021321962f : 
                        0.0f) : 
                    0.0f))));
    return pred;
  } // constant pool size = 42B, number of visited nodes = 10, static init size = 0B
}

class log_drf_1_Tree_33_class_36 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.16015625f ? 
        0.0f : 
         (data[3 /* no_of_ips */] <0.5f ? 
             (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.14453125f ? 
                0.0f : 
                 (Double.isNaN(data[12]) || data[12 /* 11_letter_word */] <0.0859375f ? 
                     (data[0 /* vlan */] <17.5f ? 
                        0.78571427f : 
                        0.0f) : 
                    0.0f)) : 
            0.0f));
    return pred;
  } // constant pool size = 22B, number of visited nodes = 5, static init size = 0B
}

class log_drf_1_Tree_33_class_37 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
         (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
             (Double.isNaN(data[12]) || data[12 /* 11_letter_word */] <0.18359375f ? 
                 (data[0 /* vlan */] <21.5f ? 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.0859375f ? 
                        0.999613f : 
                        1.0f) : 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.4453125f ? 
                        0.99804837f : 
                        0.99475753f)) : 
                 (data[11 /* 10_letter_word */] <0.125f ? 
                     (data[0 /* vlan */] <98.0f ? 
                        0.0f : 
                        1.0f) : 
                    0.0f)) : 
             (data[2 /* no_of_characters */] <48.0f ? 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <38.5f ? 
                    0.0f : 
                     (data[0 /* vlan */] <500.5f ? 
                        0.0f : 
                        0.9705882f)) : 
                 (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.97265625f ? 
                     (Double.isNaN(data[12]) || data[12 /* 11_letter_word */] <0.7421875f ? 
                        0.0015546918f : 
                        0.2173913f) : 
                    0.010187315f))) : 
         (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.9160156f ? 
             (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.19140625f ? 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.23828125f ? 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <162.5f ? 
                        0.0f : 
                        0.0037425149f) : 
                     (data[1 /* type_of_time */] <4.5f ? 
                        0.028846154f : 
                        3.1410324E-4f)) : 
                 (data[1 /* type_of_time */] <4.5f ? 
                     (Double.isNaN(data[1]) || data[1 /* type_of_time */] <3.5f ? 
                        0.0f : 
                        1.0f) : 
                    0.0f)) : 
             (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
                1.0f : 
                0.0f)));
    return pred;
  } // constant pool size = 86B, number of visited nodes = 21, static init size = 0B
}

class log_drf_1_Tree_33_class_38 {
  static final double score0(double[] data) {
    double pred =     1.5E-5f;
    return pred;
  } // constant pool size = 2B, number of visited nodes = 0, static init size = 0B
}


class log_drf_1_Forest_34 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += log_drf_1_Tree_34_class_0.score0(fdata);
    preds[2] += log_drf_1_Tree_34_class_1.score0(fdata);
    preds[3] += log_drf_1_Tree_34_class_2.score0(fdata);
    preds[4] += log_drf_1_Tree_34_class_3.score0(fdata);
    preds[5] += log_drf_1_Tree_34_class_4.score0(fdata);
    preds[6] += log_drf_1_Tree_34_class_5.score0(fdata);
    preds[7] += log_drf_1_Tree_34_class_6.score0(fdata);
    preds[8] += log_drf_1_Tree_34_class_7.score0(fdata);
    preds[9] += log_drf_1_Tree_34_class_8.score0(fdata);
    preds[10] += log_drf_1_Tree_34_class_9.score0(fdata);
    preds[11] += log_drf_1_Tree_34_class_10.score0(fdata);
    preds[12] += log_drf_1_Tree_34_class_11.score0(fdata);
    preds[13] += log_drf_1_Tree_34_class_12.score0(fdata);
    preds[14] += log_drf_1_Tree_34_class_13.score0(fdata);
    preds[15] += log_drf_1_Tree_34_class_14.score0(fdata);
    preds[16] += log_drf_1_Tree_34_class_15.score0(fdata);
    preds[17] += log_drf_1_Tree_34_class_16.score0(fdata);
    preds[18] += log_drf_1_Tree_34_class_17.score0(fdata);
    preds[19] += log_drf_1_Tree_34_class_18.score0(fdata);
    preds[20] += log_drf_1_Tree_34_class_19.score0(fdata);
    preds[21] += log_drf_1_Tree_34_class_20.score0(fdata);
    preds[22] += log_drf_1_Tree_34_class_21.score0(fdata);
    preds[23] += log_drf_1_Tree_34_class_22.score0(fdata);
    preds[24] += log_drf_1_Tree_34_class_23.score0(fdata);
    preds[25] += log_drf_1_Tree_34_class_24.score0(fdata);
    preds[26] += log_drf_1_Tree_34_class_25.score0(fdata);
    preds[27] += log_drf_1_Tree_34_class_26.score0(fdata);
    preds[28] += log_drf_1_Tree_34_class_27.score0(fdata);
    preds[29] += log_drf_1_Tree_34_class_28.score0(fdata);
    preds[30] += log_drf_1_Tree_34_class_29.score0(fdata);
    preds[31] += log_drf_1_Tree_34_class_30.score0(fdata);
    preds[32] += log_drf_1_Tree_34_class_31.score0(fdata);
    preds[33] += log_drf_1_Tree_34_class_32.score0(fdata);
    preds[34] += log_drf_1_Tree_34_class_33.score0(fdata);
    preds[35] += log_drf_1_Tree_34_class_34.score0(fdata);
    preds[36] += log_drf_1_Tree_34_class_35.score0(fdata);
    preds[37] += log_drf_1_Tree_34_class_36.score0(fdata);
    preds[38] += log_drf_1_Tree_34_class_37.score0(fdata);
    preds[39] += log_drf_1_Tree_34_class_38.score0(fdata);
  }
}
class log_drf_1_Tree_34_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <1040.0f ? 
         (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <730.5f ? 
             (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.0234375f ? 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.46875f ? 
                    0.0f : 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.0625f ? 
                        2.7654867E-4f : 
                        0.0f)) : 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <505.5f ? 
                    0.0f : 
                     (data[4 /* no_of_macs */] <0.5f ? 
                        0.0f : 
                        1.0f))) : 
             (Double.isNaN(data[12]) || data[12 /* 11_letter_word */] <0.009765625f ? 
                 (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.05078125f ? 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.125f ? 
                        0.0f : 
                        0.05f) : 
                    0.6666667f) : 
                 (data[8 /* 7_letter_word */] <0.04296875f ? 
                    0.0f : 
                    1.0f))) : 
         (data[10 /* 9_letter_word */] <0.028320312f ? 
            0.5f : 
            1.0f));
    return pred;
  } // constant pool size = 50B, number of visited nodes = 12, static init size = 0B
}

class log_drf_1_Tree_34_class_1 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <261.5f ? 
         (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <260.5f ? 
             (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.4140625f ? 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <177.0f ? 
                    0.0f : 
                     (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
                        0.0f : 
                        0.0024740228f)) : 
                0.0f) : 
             (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.083984375f ? 
                0.0f : 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.30078125f ? 
                    0.0f : 
                    1.0f))) : 
         (data[2 /* no_of_characters */] <289.5f ? 
             (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                0.0f : 
                 (data[8 /* 7_letter_word */] <0.2421875f ? 
                    0.0f : 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <282.5f ? 
                        0.9846154f : 
                        0.9137931f))) : 
             (data[7 /* 6_letter_word */] <0.025390625f ? 
                 (data[8 /* 7_letter_word */] <0.44921875f ? 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.38604736f ? 
                        0.005574136f : 
                        0.94285715f) : 
                    0.0f) : 
                0.0f)));
    return pred;
  } // constant pool size = 58B, number of visited nodes = 14, static init size = 0B
}

class log_drf_1_Tree_34_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0]) || data[0 /* vlan */] <181.5f ? 
         (data[2 /* no_of_characters */] <150.5f ? 
             (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.5644531f ? 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.1328125f ? 
                    0.0f : 
                     (data[1 /* type_of_time */] <4.5f ? 
                        0.0f : 
                        0.014744146f)) : 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <111.0f ? 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <107.5f ? 
                        0.0f : 
                        0.022900764f) : 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.078125f ? 
                        0.0f : 
                        0.7537879f))) : 
             (data[8 /* 7_letter_word */] <0.25976562f ? 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.13698578f ? 
                     (data[6 /* 5_letter_word */] <0.125f ? 
                        0.0013654208f : 
                        0.0f) : 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.4453125f ? 
                        0.002839296f : 
                        0.0f)) : 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.22265625f ? 
                    0.0f : 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.21875f ? 
                        0.0f : 
                        0.004201681f)))) : 
         (data[2 /* no_of_characters */] <138.5f ? 
            0.0f : 
             (data[7 /* 6_letter_word */] <0.36132812f ? 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.16796875f ? 
                    0.0f : 
                    1.0f) : 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.3671875f ? 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.2265625f ? 
                        0.9475921f : 
                        0.0f) : 
                    0.0f))));
    return pred;
  } // constant pool size = 78B, number of visited nodes = 19, static init size = 0B
}

class log_drf_1_Tree_34_class_3 {
  static final double score0(double[] data) {
    double pred =      (data[0 /* vlan */] <29.5f ? 
         (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <140.5f ? 
            0.0f : 
             (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.4921875f ? 
                 (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.3515625f ? 
                    0.0f : 
                     (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <3.5f ? 
                        0.7632027f : 
                        0.0f)) : 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <28.0f ? 
                    0.0f : 
                    1.0f))) : 
         (data[2 /* no_of_characters */] <105.5f ? 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <146.5f ? 
                0.0f : 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <103.5f ? 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <580.5f ? 
                        0.0019762847f : 
                        0.0f) : 
                    0.1891892f)) : 
            0.0f));
    return pred;
  } // constant pool size = 42B, number of visited nodes = 10, static init size = 0B
}

class log_drf_1_Tree_34_class_4 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* no_of_characters */] <113.5f ? 
         (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <109.5f ? 
             (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.44921875f ? 
                1.15340255E-4f : 
                 (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <99.5f ? 
                        0.0f : 
                        0.02631579f) : 
                    0.0f)) : 
             (data[3 /* no_of_ips */] <0.5f ? 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <25.5f ? 
                    0.0f : 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.2890625f ? 
                        0.0f : 
                        0.47457626f)) : 
                0.0f)) : 
         (data[2 /* no_of_characters */] <118.5f ? 
             (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.26757812f ? 
                 (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
                    0.0f : 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.2890625f ? 
                        7.142857E-4f : 
                        0.0f)) : 
                 (data[10 /* 9_letter_word */] <0.41635132f ? 
                    1.0f : 
                    0.0f)) : 
             (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.421875f ? 
                0.0f : 
                 (data[1 /* type_of_time */] <4.5f ? 
                    0.0f : 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.1328125f ? 
                        0.0f : 
                        0.001910828f)))));
    return pred;
  } // constant pool size = 66B, number of visited nodes = 16, static init size = 0B
}

class log_drf_1_Tree_34_class_5 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0]) || data[0 /* vlan */] <85.5f ? 
         (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <205.5f ? 
             (data[2 /* no_of_characters */] <102.5f ? 
                0.0f : 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <81.5f ? 
                     (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.1328125f ? 
                        5.947248E-5f : 
                        9.769714E-4f) : 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.25f ? 
                        0.053691275f : 
                        1.0f))) : 
             (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.087890625f ? 
                 (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.31640625f ? 
                    0.0f : 
                     (Double.isNaN(data[12]) || data[12 /* 11_letter_word */] <0.171875f ? 
                        0.0f : 
                        1.0f)) : 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <61.5f ? 
                     (data[9 /* 8_letter_word */] <0.10398865f ? 
                        0.2631579f : 
                        5.364807E-4f) : 
                    1.0f))) : 
        0.0f);
    return pred;
  } // constant pool size = 46B, number of visited nodes = 11, static init size = 0B
}

class log_drf_1_Tree_34_class_6 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* no_of_characters */] <98.5f ? 
         (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <92.5f ? 
             (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.8730469f ? 
                 (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.2890625f ? 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.7421875f ? 
                        0.0031670625f : 
                        0.0625f) : 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <113.5f ? 
                        0.0f : 
                        0.9396552f)) : 
                0.33333334f) : 
             (data[3 /* no_of_ips */] <0.5f ? 
                 (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.41601562f ? 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.100753784f ? 
                        0.18819188f : 
                        1.0f) : 
                    0.0f) : 
                0.0f)) : 
         (data[2 /* no_of_characters */] <117.5f ? 
             (data[3 /* no_of_ips */] <0.5f ? 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <109.5f ? 
                    0.0f : 
                     (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
                        0.0f : 
                        0.21164021f)) : 
                0.0f) : 
            0.0f));
    return pred;
  } // constant pool size = 54B, number of visited nodes = 13, static init size = 0B
}

class log_drf_1_Tree_34_class_7 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0]) || data[0 /* vlan */] <185.0f ? 
        0.0f : 
         (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <109.5f ? 
            0.0f : 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <200.5f ? 
                1.0f : 
                0.0f)));
    return pred;
  } // constant pool size = 14B, number of visited nodes = 3, static init size = 0B
}

class log_drf_1_Tree_34_class_8 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <900.5f ? 
         (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <751.0f ? 
             (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.05078125f ? 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <604.5f ? 
                     (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
                        0.0f : 
                        6.2922765E-5f) : 
                     (data[2 /* no_of_characters */] <659.0f ? 
                        1.0f : 
                        0.0f)) : 
                0.0f) : 
             (data[8 /* 7_letter_word */] <0.0625f ? 
                0.4f : 
                0.0f)) : 
         (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <1011.5f ? 
             (data[6 /* 5_letter_word */] <0.19335938f ? 
                 (Double.isNaN(data[12]) || data[12 /* 11_letter_word */] <0.01171875f ? 
                     (Double.isNaN(data[13]) || data[13 /* 12_letter_word */] <0.015625f ? 
                        0.8611111f : 
                        0.0f) : 
                    0.0f) : 
                1.0f) : 
             (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.12695312f ? 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.04296875f ? 
                     (data[3 /* no_of_ips */] <2.5f ? 
                        0.25f : 
                        0.020618556f) : 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.515625f ? 
                        0.0f : 
                        0.7777778f)) : 
                 (data[0 /* vlan */] <161.5f ? 
                    0.0f : 
                     (data[5 /* 4_letter_word */] <0.171875f ? 
                        0.071428575f : 
                        0.0f)))));
    return pred;
  } // constant pool size = 70B, number of visited nodes = 17, static init size = 0B
}

class log_drf_1_Tree_34_class_9 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0]) || data[0 /* vlan */] <159.5f ? 
        0.0f : 
         (data[2 /* no_of_characters */] <143.5f ? 
             (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.1015625f ? 
                 (data[1 /* type_of_time */] <3.5f ? 
                    1.0f : 
                    0.0f) : 
                 (data[3 /* no_of_ips */] <1.0f ? 
                    0.0f : 
                    1.0f)) : 
             (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.31054688f ? 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.31640625f ? 
                     (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.4140625f ? 
                        9.999584E-4f : 
                        0.71895427f) : 
                     (data[7 /* 6_letter_word */] <0.41253662f ? 
                        0.19634703f : 
                        0.027920647f)) : 
                 (data[2 /* no_of_characters */] <199.5f ? 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.74684143f ? 
                        0.7322835f : 
                        0.0f) : 
                     (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <4.5f ? 
                        0.0f : 
                        1.0f)))));
    return pred;
  } // constant pool size = 50B, number of visited nodes = 12, static init size = 0B
}

class log_drf_1_Tree_34_class_10 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0]) || data[0 /* vlan */] <166.5f ? 
         (data[2 /* no_of_characters */] <113.5f ? 
             (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.083984375f ? 
                 (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.125f ? 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <109.5f ? 
                        0.0f : 
                        0.0015748031f) : 
                    0.0f) : 
                0.0f) : 
            0.0f) : 
         (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.6230469f ? 
            0.0f : 
             (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                0.0f : 
                0.75f)));
    return pred;
  } // constant pool size = 30B, number of visited nodes = 7, static init size = 0B
}

class log_drf_1_Tree_34_class_11 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* no_of_characters */] <134.5f ? 
         (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <133.5f ? 
            0.0f : 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <85.5f ? 
                0.0f : 
                 (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.07421875f ? 
                    0.0f : 
                    0.5f))) : 
        0.0f);
    return pred;
  } // constant pool size = 18B, number of visited nodes = 4, static init size = 0B
}

class log_drf_1_Tree_34_class_12 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0]) || data[0 /* vlan */] <593.5f ? 
        0.0f : 
         (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <319.0f ? 
            0.0f : 
            1.0f));
    return pred;
  } // constant pool size = 10B, number of visited nodes = 2, static init size = 0B
}

class log_drf_1_Tree_34_class_13 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* no_of_characters */] <54.0f ? 
         (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <28.5f ? 
            1.0f : 
             (data[6 /* 5_letter_word */] <0.125f ? 
                 (data[2 /* no_of_characters */] <36.5f ? 
                     (data[8 /* 7_letter_word */] <0.5f ? 
                        0.33333334f : 
                        0.16666667f) : 
                    0.0f) : 
                 (data[5 /* 4_letter_word */] <0.125f ? 
                    0.33333334f : 
                    1.0f))) : 
         (data[2 /* no_of_characters */] <85.5f ? 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <582.5f ? 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.1015625f ? 
                    0.0f : 
                     (Double.isNaN(data[15]) || data[15 /* 14_letter_word */] <0.125f ? 
                        0.016544119f : 
                        0.0f)) : 
                1.0f) : 
             (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.4765625f ? 
                0.0f : 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <203.5f ? 
                    0.0f : 
                     (data[2 /* no_of_characters */] <217.5f ? 
                        0.018518519f : 
                        0.0f)))));
    return pred;
  } // constant pool size = 54B, number of visited nodes = 13, static init size = 0B
}

class log_drf_1_Tree_34_class_14 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <215.5f ? 
        1.7675027E-5f : 
         (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.19140625f ? 
            0.0f : 
             (data[5 /* 4_letter_word */] <0.22460938f ? 
                 (data[1 /* type_of_time */] <3.0f ? 
                    1.0f : 
                    0.0f) : 
                0.0f)));
    return pred;
  } // constant pool size = 18B, number of visited nodes = 4, static init size = 0B
}

class log_drf_1_Tree_34_class_15 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* no_of_characters */] <100.5f ? 
         (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <98.5f ? 
            0.0f : 
             (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.7480469f ? 
                0.0f : 
                 (Double.isNaN(data[4]) || data[4 /* no_of_macs */] <0.5f ? 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <99.5f ? 
                        0.2705602f : 
                        0.5f) : 
                    0.0f))) : 
         (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.4716797f ? 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <85.5f ? 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <37.0f ? 
                    0.0f : 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.36458334f ? 
                        0.0017883755f : 
                        0.08938547f)) : 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <208.5f ? 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.27083334f ? 
                        0.015010301f : 
                        8.2884374E-4f) : 
                     (data[0 /* vlan */] <152.0f ? 
                        0.27130434f : 
                        0.0f))) : 
            0.0f));
    return pred;
  } // constant pool size = 50B, number of visited nodes = 12, static init size = 0B
}

class log_drf_1_Tree_34_class_16 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* no_of_characters */] <84.5f ? 
        0.0011774601f : 
         (data[2 /* no_of_characters */] <105.5f ? 
             (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.53515625f ? 
                 (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.30859375f ? 
                     (Double.isNaN(data[4]) || data[4 /* no_of_macs */] <0.5f ? 
                        3.0750307E-4f : 
                        0.0f) : 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.171875f ? 
                        0.0f : 
                        0.036363635f)) : 
                0.0f) : 
             (data[0 /* vlan */] <33.5f ? 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <30.5f ? 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.0390625f ? 
                        3.5902776E-5f : 
                        0.0f) : 
                    1.0f) : 
                0.0f)));
    return pred;
  } // constant pool size = 38B, number of visited nodes = 9, static init size = 0B
}

class log_drf_1_Tree_34_class_17 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <659.0f ? 
        5.020912E-6f : 
         (data[2 /* no_of_characters */] <718.0f ? 
             (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.056640625f ? 
                1.0f : 
                0.0f) : 
             (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <3.5f ? 
                 (data[6 /* 5_letter_word */] <0.0625f ? 
                     (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.015625f ? 
                        0.033333335f : 
                        0.5f) : 
                    0.0f) : 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.16796875f ? 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.171875f ? 
                        0.8852459f : 
                        1.0f) : 
                    1.0f))));
    return pred;
  } // constant pool size = 34B, number of visited nodes = 8, static init size = 0B
}

class log_drf_1_Tree_34_class_18 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <330.5f ? 
        0.0f : 
        9.973073E-5f);
    return pred;
  } // constant pool size = 6B, number of visited nodes = 1, static init size = 0B
}

class log_drf_1_Tree_34_class_19 {
  static final double score0(double[] data) {
    double pred =      (data[0 /* vlan */] <14.5f ? 
         (data[2 /* no_of_characters */] <135.5f ? 
             (data[2 /* no_of_characters */] <124.5f ? 
                 (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                    0.0f : 
                    0.75f) : 
                 (data[7 /* 6_letter_word */] <0.1015625f ? 
                    0.0f : 
                    1.0f)) : 
             (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.18359375f ? 
                0.0f : 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.22265625f ? 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.1015625f ? 
                        0.0f : 
                        0.016949153f) : 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.26687622f ? 
                        0.6707317f : 
                        0.0f)))) : 
        0.0f);
    return pred;
  } // constant pool size = 38B, number of visited nodes = 9, static init size = 0B
}

class log_drf_1_Tree_34_class_20 {
  static final double score0(double[] data) {
    double pred =      (data[0 /* vlan */] <23.5f ? 
         (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <135.5f ? 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <122.5f ? 
                 (data[1 /* type_of_time */] <4.5f ? 
                    0.0f : 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.4140625f ? 
                        0.98903847f : 
                        0.91521347f)) : 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.22265625f ? 
                     (data[0 /* vlan */] <17.0f ? 
                        0.0f : 
                        0.99953467f) : 
                     (data[9 /* 8_letter_word */] <0.125f ? 
                        0.99825174f : 
                        0.075075075f))) : 
             (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.1171875f ? 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <17.0f ? 
                    0.0f : 
                    0.9984432f) : 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <205.5f ? 
                    0.99549776f : 
                     (data[5 /* 4_letter_word */] <0.546875f ? 
                        0.6666667f : 
                        0.022435898f)))) : 
        0.0f);
    return pred;
  } // constant pool size = 50B, number of visited nodes = 12, static init size = 0B
}

class log_drf_1_Tree_34_class_21 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <220.5f ? 
         (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <162.5f ? 
             (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.29101562f ? 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <127.5f ? 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.4609375f ? 
                        1.5299098E-4f : 
                        6.6172576E-4f) : 
                    0.0f) : 
                 (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.2890625f ? 
                     (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                        0.0012799415f : 
                        0.0f) : 
                     (data[5 /* 4_letter_word */] <0.36576334f ? 
                        0.06451613f : 
                        0.010189229f))) : 
             (data[0 /* vlan */] <17.5f ? 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.46484375f ? 
                     (data[5 /* 4_letter_word */] <0.1328125f ? 
                        0.33333334f : 
                        0.0f) : 
                     (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.171875f ? 
                        1.0f : 
                        0.0f)) : 
                 (Double.isNaN(data[13]) || data[13 /* 12_letter_word */] <0.1015625f ? 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.8984375f ? 
                        9.3096733E-4f : 
                        0.0026467924f) : 
                    0.033333335f))) : 
         (data[2 /* no_of_characters */] <223.5f ? 
             (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.083984375f ? 
                 (data[8 /* 7_letter_word */] <0.1015625f ? 
                     (data[12 /* 11_letter_word */] <0.125f ? 
                        0.0f : 
                        1.0f) : 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.078125f ? 
                        0.0021881838f : 
                        0.0f)) : 
                0.0f) : 
             (data[0 /* vlan */] <13.5f ? 
                 (Double.isNaN(data[12]) || data[12 /* 11_letter_word */] <0.046875f ? 
                    0.3207547f : 
                    0.0f) : 
                 (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.15625f ? 
                     (data[0 /* vlan */] <29.5f ? 
                        1.4505367E-4f : 
                        0.007445195f) : 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.4609375f ? 
                        0.0022123894f : 
                        0.28395063f)))));
    return pred;
  } // constant pool size = 98B, number of visited nodes = 24, static init size = 0B
}

class log_drf_1_Tree_34_class_22 {
  static final double score0(double[] data) {
    double pred =      (data[0 /* vlan */] <5.5f ? 
        0.012658228f : 
         (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <227.5f ? 
            0.0f : 
             (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.6503906f ? 
                 (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                    0.0f : 
                     (data[7 /* 6_letter_word */] <0.1796875f ? 
                        0.0013986015f : 
                        0.0f)) : 
                 (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.30859375f ? 
                    0.0f : 
                     (data[1 /* type_of_time */] <3.0f ? 
                        0.0f : 
                        0.06521739f)))));
    return pred;
  } // constant pool size = 30B, number of visited nodes = 7, static init size = 0B
}

class log_drf_1_Tree_34_class_23 {
  static final double score0(double[] data) {
    double pred =      (data[0 /* vlan */] <14.5f ? 
         (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <260.5f ? 
             (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.26757812f ? 
                 (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                     (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
                        0.0f : 
                        0.7753141f) : 
                     (data[11 /* 10_letter_word */] <0.1015625f ? 
                        0.5740741f : 
                        0.0f)) : 
                 (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.11328125f ? 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.41635132f ? 
                        0.99853945f : 
                        0.033846155f) : 
                    0.0f)) : 
             (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.12890625f ? 
                0.0f : 
                 (data[5 /* 4_letter_word */] <0.30078125f ? 
                    1.0f : 
                    0.0f))) : 
        0.0f);
    return pred;
  } // constant pool size = 42B, number of visited nodes = 10, static init size = 0B
}

class log_drf_1_Tree_34_class_24 {
  static final double score0(double[] data) {
    double pred =      (data[0 /* vlan */] <11.5f ? 
         (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <142.0f ? 
            0.0f : 
             (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.046875f ? 
                 (data[2 /* no_of_characters */] <149.5f ? 
                    1.0f : 
                    0.0f) : 
                0.0f)) : 
        0.0f);
    return pred;
  } // constant pool size = 18B, number of visited nodes = 4, static init size = 0B
}

class log_drf_1_Tree_34_class_25 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0]) || data[0 /* vlan */] <41.0f ? 
         (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <257.5f ? 
             (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.44921875f ? 
                 (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.4140625f ? 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <157.5f ? 
                        0.32867423f : 
                        0.6717717f) : 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.171875f ? 
                        0.96393734f : 
                        0.11111111f)) : 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.16796875f ? 
                     (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <2.0f ? 
                        0.03428126f : 
                        1.0f) : 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <26.0f ? 
                        0.0f : 
                        0.9583333f))) : 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <34.0f ? 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.4609375f ? 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.3125f ? 
                        0.0015703518f : 
                        0.5f) : 
                     (data[3 /* no_of_ips */] <5.5f ? 
                        0.75510204f : 
                        0.0027100272f)) : 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.0859375f ? 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.4453125f ? 
                        1.0f : 
                        0.9496403f) : 
                     (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.0859375f ? 
                        0.75961536f : 
                        0.0f)))) : 
         (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <550.0f ? 
             (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <1.5f ? 
                0.0f : 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <172.5f ? 
                    0.0f : 
                     (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.12760417f ? 
                        0.020304568f : 
                        0.0f))) : 
             (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.0390625f ? 
                0.0f : 
                 (Double.isNaN(data[12]) || data[12 /* 11_letter_word */] <0.01171875f ? 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.4140625f ? 
                        0.0f : 
                        1.0f) : 
                    0.0f))));
    return pred;
  } // constant pool size = 94B, number of visited nodes = 23, static init size = 0B
}

class log_drf_1_Tree_34_class_26 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* no_of_characters */] <57.5f ? 
         (data[2 /* no_of_characters */] <54.0f ? 
            0.0f : 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <56.5f ? 
                0.9951923f : 
                0.0f)) : 
        0.0f);
    return pred;
  } // constant pool size = 14B, number of visited nodes = 3, static init size = 0B
}

class log_drf_1_Tree_34_class_27 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <256.5f ? 
        0.0f : 
         (data[2 /* no_of_characters */] <258.5f ? 
             (data[8 /* 7_letter_word */] <0.26757812f ? 
                 (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.44921875f ? 
                    0.0f : 
                     (data[5 /* 4_letter_word */] <0.54818726f ? 
                        0.5f : 
                        0.0f)) : 
                0.0f) : 
            0.0f));
    return pred;
  } // constant pool size = 22B, number of visited nodes = 5, static init size = 0B
}

class log_drf_1_Tree_34_class_28 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <447.5f ? 
        0.0f : 
         (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <533.5f ? 
             (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.41601562f ? 
                 (data[3 /* no_of_ips */] <2.5f ? 
                    0.0f : 
                    1.0f) : 
                0.0f) : 
             (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.28125f ? 
                0.0f : 
                 (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <5.0f ? 
                    0.0f : 
                    1.0f))));
    return pred;
  } // constant pool size = 26B, number of visited nodes = 6, static init size = 0B
}

class log_drf_1_Tree_34_class_29 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <957.5f ? 
         (Double.isNaN(data[12]) || data[12 /* 11_letter_word */] <0.041015625f ? 
             (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.7734375f ? 
                0.0f : 
                 (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.1484375f ? 
                    0.0f : 
                    0.07692308f)) : 
             (data[12 /* 11_letter_word */] <0.08034897f ? 
                0.5f : 
                0.0f)) : 
         (data[2 /* no_of_characters */] <962.5f ? 
            1.0f : 
            0.0f));
    return pred;
  } // constant pool size = 26B, number of visited nodes = 6, static init size = 0B
}

class log_drf_1_Tree_34_class_30 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0]) || data[0 /* vlan */] <177.0f ? 
        0.0f : 
         (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <193.0f ? 
            0.0f : 
             (data[0 /* vlan */] <180.5f ? 
                 (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.1015625f ? 
                     (Double.isNaN(data[1]) || data[1 /* type_of_time */] <2.5f ? 
                        1.0f : 
                        0.0f) : 
                    0.0f) : 
                0.0f)));
    return pred;
  } // constant pool size = 22B, number of visited nodes = 5, static init size = 0B
}

class log_drf_1_Tree_34_class_31 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* no_of_characters */] <113.5f ? 
         (Double.isNaN(data[15]) || data[15 /* 14_letter_word */] <0.100097656f ? 
             (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.083984375f ? 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.4140625f ? 
                     (Double.isNaN(data[13]) || data[13 /* 12_letter_word */] <0.12760417f ? 
                        0.009904113f : 
                        0.4814815f) : 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.171875f ? 
                        0.051002614f : 
                        0.82608694f)) : 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.3671875f ? 
                     (Double.isNaN(data[13]) || data[13 /* 12_letter_word */] <0.4140625f ? 
                        0.07828572f : 
                        1.0f) : 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.125f ? 
                        0.92537314f : 
                        0.0f))) : 
             (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.16796875f ? 
                 (data[5 /* 4_letter_word */] <0.22552083f ? 
                    1.0f : 
                    0.9117647f) : 
                1.0f)) : 
         (data[2 /* no_of_characters */] <139.5f ? 
             (data[6 /* 5_letter_word */] <0.1328125f ? 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.53515625f ? 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.0859375f ? 
                        0.025586702f : 
                        0.0f) : 
                     (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
                        0.0f : 
                        0.31343284f)) : 
                0.0f) : 
             (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.234375f ? 
                 (Double.isNaN(data[4]) || data[4 /* no_of_macs */] <1.5f ? 
                     (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                        0.0f : 
                        2.739726E-4f) : 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <287.0f ? 
                        0.0016522098f : 
                        0.04761905f)) : 
                 (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
                    0.0f : 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.4609375f ? 
                        0.0f : 
                        0.08163265f)))));
    return pred;
  } // constant pool size = 90B, number of visited nodes = 22, static init size = 0B
}

class log_drf_1_Tree_34_class_32 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* no_of_characters */] <123.5f ? 
         (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <121.5f ? 
             (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.18359375f ? 
                 (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.078125f ? 
                        1.7341542E-4f : 
                        0.0f) : 
                     (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.125f ? 
                        0.0f : 
                        0.2721519f)) : 
                 (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                    0.0f : 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <115.5f ? 
                        0.7419355f : 
                        0.0f))) : 
             (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.44921875f ? 
                0.0f : 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.4140625f ? 
                    0.0f : 
                    1.0f))) : 
        0.0f);
    return pred;
  } // constant pool size = 42B, number of visited nodes = 10, static init size = 0B
}

class log_drf_1_Tree_34_class_33 {
  static final double score0(double[] data) {
    double pred =      (data[0 /* vlan */] <7.5f ? 
         (data[2 /* no_of_characters */] <59.5f ? 
             (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.16796875f ? 
                0.0f : 
                1.0f) : 
             (data[7 /* 6_letter_word */] <0.125f ? 
                0.0f : 
                1.0f)) : 
         (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <282.5f ? 
             (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                 (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.70703125f ? 
                     (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
                        0.0f : 
                        9.475564E-4f) : 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.125f ? 
                        0.010440836f : 
                        0.56f)) : 
                0.0f) : 
             (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.080078125f ? 
                 (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.421875f ? 
                     (data[1 /* type_of_time */] <4.5f ? 
                        0.0f : 
                        1.7217631E-4f) : 
                     (data[5 /* 4_letter_word */] <0.4354248f ? 
                        0.34f : 
                        0.019607844f)) : 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.17578125f ? 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.0703125f ? 
                        0.0f : 
                        0.2777778f) : 
                     (data[3 /* no_of_ips */] <0.5f ? 
                        0.0f : 
                        0.9722222f)))));
    return pred;
  } // constant pool size = 66B, number of visited nodes = 16, static init size = 0B
}

class log_drf_1_Tree_34_class_34 {
  static final double score0(double[] data) {
    double pred =      (data[0 /* vlan */] <10.0f ? 
         (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <136.0f ? 
            0.0f : 
            0.5f) : 
         (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.15527344f ? 
            0.0f : 
             (data[0 /* vlan */] <17.5f ? 
                 (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.2578125f ? 
                    0.0f : 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.125f ? 
                        0.0f : 
                        0.33333334f)) : 
                0.0f)));
    return pred;
  } // constant pool size = 26B, number of visited nodes = 6, static init size = 0B
}

class log_drf_1_Tree_34_class_35 {
  static final double score0(double[] data) {
    double pred =      (data[0 /* vlan */] <12.5f ? 
         (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <85.5f ? 
            0.0f : 
             (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.21484375f ? 
                0.0f : 
                 (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.125f ? 
                    0.0f : 
                    1.0f))) : 
         (data[2 /* no_of_characters */] <128.5f ? 
             (data[0 /* vlan */] <16.5f ? 
                 (data[2 /* no_of_characters */] <90.0f ? 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.6640625f ? 
                        0.022727273f : 
                        0.4f) : 
                     (data[9 /* 8_letter_word */] <0.125f ? 
                        0.028708134f : 
                        0.0f)) : 
                0.0f) : 
             (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                0.0f : 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.15625f ? 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.59375f ? 
                        0.0f : 
                        3.6376863E-4f) : 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.15625f ? 
                        1.7346053E-4f : 
                        0.005509642f)))));
    return pred;
  } // constant pool size = 54B, number of visited nodes = 13, static init size = 0B
}

class log_drf_1_Tree_34_class_36 {
  static final double score0(double[] data) {
    double pred =      (data[0 /* vlan */] <5.5f ? 
         (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <109.5f ? 
            0.0f : 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <130.5f ? 
                1.0f : 
                0.8f)) : 
        0.0f);
    return pred;
  } // constant pool size = 14B, number of visited nodes = 3, static init size = 0B
}

class log_drf_1_Tree_34_class_37 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0]) || data[0 /* vlan */] <156.5f ? 
         (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <150.5f ? 
             (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.70703125f ? 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <131.0f ? 
                     (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                        0.0040356084f : 
                        0.0f) : 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.46398926f ? 
                        0.02395151f : 
                        0.057016402f)) : 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.125f ? 
                     (data[5 /* 4_letter_word */] <0.8984375f ? 
                        0.0f : 
                        0.046837095f) : 
                    0.98507464f)) : 
             (data[0 /* vlan */] <17.0f ? 
                 (data[7 /* 6_letter_word */] <0.3515625f ? 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <270.5f ? 
                        0.70273286f : 
                        0.0f) : 
                    0.0f) : 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.2109375f ? 
                     (data[3 /* no_of_ips */] <0.5f ? 
                        0.012707301f : 
                        6.0144346E-4f) : 
                     (data[1 /* type_of_time */] <2.5f ? 
                        1.0f : 
                        1.779043E-4f)))) : 
         (data[8 /* 7_letter_word */] <0.15527344f ? 
             (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <1.5f ? 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <174.0f ? 
                     (data[3 /* no_of_ips */] <0.5f ? 
                        0.98691434f : 
                        0.9994616f) : 
                     (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.15625f ? 
                        0.21912351f : 
                        1.0f)) : 
                 (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.30859375f ? 
                    0.0f : 
                     (data[0 /* vlan */] <170.5f ? 
                        0.1388889f : 
                        0.0f))) : 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <172.5f ? 
                 (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.4140625f ? 
                     (data[1 /* type_of_time */] <3.5f ? 
                        0.0f : 
                        0.9977693f) : 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <250.0f ? 
                        0.10810811f : 
                        1.0f)) : 
                 (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.22265625f ? 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <257.5f ? 
                        0.9879518f : 
                        0.0f) : 
                    0.0f))));
    return pred;
  } // constant pool size = 110B, number of visited nodes = 27, static init size = 0B
}

class log_drf_1_Tree_34_class_38 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* no_of_characters */] <93.5f ? 
         (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <88.5f ? 
            0.0f : 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <85.5f ? 
                0.0f : 
                 (data[5 /* 4_letter_word */] <0.58203125f ? 
                    0.0f : 
                     (data[2 /* no_of_characters */] <92.5f ? 
                        0.125f : 
                        0.0f)))) : 
        0.0f);
    return pred;
  } // constant pool size = 22B, number of visited nodes = 5, static init size = 0B
}


class log_drf_1_Forest_35 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += log_drf_1_Tree_35_class_0.score0(fdata);
    preds[2] += log_drf_1_Tree_35_class_1.score0(fdata);
    preds[3] += log_drf_1_Tree_35_class_2.score0(fdata);
    preds[4] += log_drf_1_Tree_35_class_3.score0(fdata);
    preds[5] += log_drf_1_Tree_35_class_4.score0(fdata);
    preds[6] += log_drf_1_Tree_35_class_5.score0(fdata);
    preds[7] += log_drf_1_Tree_35_class_6.score0(fdata);
    preds[8] += log_drf_1_Tree_35_class_7.score0(fdata);
    preds[9] += log_drf_1_Tree_35_class_8.score0(fdata);
    preds[10] += log_drf_1_Tree_35_class_9.score0(fdata);
    preds[11] += log_drf_1_Tree_35_class_10.score0(fdata);
    preds[12] += log_drf_1_Tree_35_class_11.score0(fdata);
    preds[13] += log_drf_1_Tree_35_class_12.score0(fdata);
    preds[14] += log_drf_1_Tree_35_class_13.score0(fdata);
    preds[15] += log_drf_1_Tree_35_class_14.score0(fdata);
    preds[16] += log_drf_1_Tree_35_class_15.score0(fdata);
    preds[17] += log_drf_1_Tree_35_class_16.score0(fdata);
    preds[18] += log_drf_1_Tree_35_class_17.score0(fdata);
    preds[19] += log_drf_1_Tree_35_class_18.score0(fdata);
    preds[20] += log_drf_1_Tree_35_class_19.score0(fdata);
    preds[21] += log_drf_1_Tree_35_class_20.score0(fdata);
    preds[22] += log_drf_1_Tree_35_class_21.score0(fdata);
    preds[23] += log_drf_1_Tree_35_class_22.score0(fdata);
    preds[24] += log_drf_1_Tree_35_class_23.score0(fdata);
    preds[25] += log_drf_1_Tree_35_class_24.score0(fdata);
    preds[26] += log_drf_1_Tree_35_class_25.score0(fdata);
    preds[27] += log_drf_1_Tree_35_class_26.score0(fdata);
    preds[28] += log_drf_1_Tree_35_class_27.score0(fdata);
    preds[29] += log_drf_1_Tree_35_class_28.score0(fdata);
    preds[30] += log_drf_1_Tree_35_class_29.score0(fdata);
    preds[31] += log_drf_1_Tree_35_class_30.score0(fdata);
    preds[32] += log_drf_1_Tree_35_class_31.score0(fdata);
    preds[33] += log_drf_1_Tree_35_class_32.score0(fdata);
    preds[34] += log_drf_1_Tree_35_class_33.score0(fdata);
    preds[35] += log_drf_1_Tree_35_class_34.score0(fdata);
    preds[36] += log_drf_1_Tree_35_class_35.score0(fdata);
    preds[37] += log_drf_1_Tree_35_class_36.score0(fdata);
    preds[38] += log_drf_1_Tree_35_class_37.score0(fdata);
    preds[39] += log_drf_1_Tree_35_class_38.score0(fdata);
  }
}
class log_drf_1_Tree_35_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[12]) || data[12 /* 11_letter_word */] <0.017578125f ? 
         (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <1050.0f ? 
             (Double.isNaN(data[13]) || data[13 /* 12_letter_word */] <0.009765625f ? 
                 (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.0859375f ? 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.4765625f ? 
                        0.0f : 
                        9.8629054E-5f) : 
                     (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.0234375f ? 
                        0.0f : 
                        0.003478261f)) : 
                 (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.01171875f ? 
                    0.0f : 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <583.0f ? 
                        0.0f : 
                        1.0f))) : 
             (data[2 /* no_of_characters */] <1128.0f ? 
                0.6666667f : 
                1.0f)) : 
         (Double.isNaN(data[14]) || data[14 /* 13_letter_word */] <0.0146484375f ? 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <998.5f ? 
                0.0f : 
                0.5f) : 
             (Double.isNaN(data[14]) || data[14 /* 13_letter_word */] <0.021191461f ? 
                1.0f : 
                0.5f)));
    return pred;
  } // constant pool size = 50B, number of visited nodes = 12, static init size = 0B
}

class log_drf_1_Tree_35_class_1 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.39208984f ? 
         (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <262.5f ? 
             (data[8 /* 7_letter_word */] <0.25976562f ? 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <183.5f ? 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.0625f ? 
                        3.964007E-5f : 
                        0.0f) : 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.052074432f ? 
                        0.004599816f : 
                        0.0f)) : 
                0.0f) : 
             (data[2 /* no_of_characters */] <270.5f ? 
                 (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                    0.0f : 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.29100418f ? 
                        0.0f : 
                        0.8787879f)) : 
                 (data[3 /* no_of_ips */] <1.5f ? 
                     (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.010416667f ? 
                        0.0025657474f : 
                        0.0f) : 
                    0.0f))) : 
         (Double.isNaN(data[0]) || data[0 /* vlan */] <141.5f ? 
            0.0f : 
             (data[0 /* vlan */] <149.0f ? 
                 (data[1 /* type_of_time */] <4.0f ? 
                    1.0f : 
                     (data[8 /* 7_letter_word */] <0.3671875f ? 
                        1.0f : 
                        0.99545455f)) : 
                0.0f)));
    return pred;
  } // constant pool size = 62B, number of visited nodes = 15, static init size = 0B
}

class log_drf_1_Tree_35_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0]) || data[0 /* vlan */] <181.5f ? 
         (data[2 /* no_of_characters */] <150.5f ? 
             (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.22460938f ? 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <135.5f ? 
                    0.0f : 
                     (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.10002136f ? 
                        0.03727357f : 
                        0.12162162f)) : 
                0.0f) : 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <1086.5f ? 
                 (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
                    0.0f : 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.1875f ? 
                        5.2388936E-5f : 
                        0.0016478989f)) : 
                0.16666667f)) : 
         (data[7 /* 6_letter_word */] <0.36132812f ? 
             (Double.isNaN(data[13]) || data[13 /* 12_letter_word */] <0.072265625f ? 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.2890625f ? 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.2890625f ? 
                        0.0f : 
                        0.0028490028f) : 
                     (data[8 /* 7_letter_word */] <0.41125488f ? 
                        0.5f : 
                        0.0f)) : 
                 (data[2 /* no_of_characters */] <465.0f ? 
                    0.0f : 
                    1.0f)) : 
             (data[1 /* type_of_time */] <4.5f ? 
                0.0f : 
                 (data[5 /* 4_letter_word */] <0.03125f ? 
                     (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.125f ? 
                        0.8061224f : 
                        1.0f) : 
                    1.0f))));
    return pred;
  } // constant pool size = 70B, number of visited nodes = 17, static init size = 0B
}

class log_drf_1_Tree_35_class_3 {
  static final double score0(double[] data) {
    double pred =      (data[0 /* vlan */] <29.5f ? 
         (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <140.5f ? 
            0.0f : 
             (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.03125f ? 
                 (data[2 /* no_of_characters */] <148.5f ? 
                     (data[0 /* vlan */] <28.0f ? 
                        0.0f : 
                        1.0f) : 
                     (data[5 /* 4_letter_word */] <0.3828125f ? 
                        0.0f : 
                        0.11721866f)) : 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <28.0f ? 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.4609375f ? 
                        0.0f : 
                        0.04f) : 
                    1.0f))) : 
         (data[0 /* vlan */] <156.5f ? 
             (data[2 /* no_of_characters */] <105.5f ? 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <147.5f ? 
                    0.0f : 
                    1.0f) : 
                0.0f) : 
            0.0f));
    return pred;
  } // constant pool size = 46B, number of visited nodes = 11, static init size = 0B
}

class log_drf_1_Tree_35_class_4 {
  static final double score0(double[] data) {
    double pred =      (data[0 /* vlan */] <27.5f ? 
         (data[2 /* no_of_characters */] <118.5f ? 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <24.5f ? 
                0.0f : 
                 (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.2890625f ? 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.4140625f ? 
                        0.013888889f : 
                        0.75f) : 
                     (data[2 /* no_of_characters */] <106.5f ? 
                        0.0f : 
                        0.9677419f))) : 
             (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.111328125f ? 
                0.0f : 
                 (data[8 /* 7_letter_word */] <0.14951324f ? 
                     (data[3 /* no_of_ips */] <0.5f ? 
                        0.0f : 
                        0.24242425f) : 
                    0.0f))) : 
        0.0f);
    return pred;
  } // constant pool size = 38B, number of visited nodes = 9, static init size = 0B
}

class log_drf_1_Tree_35_class_5 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.27929688f ? 
         (data[2 /* no_of_characters */] <105.5f ? 
             (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.29101562f ? 
                 (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.22265625f ? 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <89.5f ? 
                        0.0f : 
                        4.8496606E-4f) : 
                     (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                        0.002548853f : 
                        0.0f)) : 
                0.0f) : 
            0.0f) : 
         (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.095703125f ? 
             (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.3515625f ? 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.22395833f ? 
                        8.96928E-4f : 
                        3.6036037E-4f) : 
                    0.0f) : 
                0.0f) : 
             (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.19335938f ? 
                 (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.06640625f ? 
                    1.6806723E-4f : 
                     (data[7 /* 6_letter_word */] <0.1536916f ? 
                        0.3125f : 
                        0.019704433f)) : 
                 (data[1 /* type_of_time */] <4.5f ? 
                    0.0f : 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.046875f ? 
                        0.0f : 
                        0.2888889f)))));
    return pred;
  } // constant pool size = 62B, number of visited nodes = 15, static init size = 0B
}

class log_drf_1_Tree_35_class_6 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.24804688f ? 
         (data[2 /* no_of_characters */] <70.5f ? 
             (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.7480469f ? 
                 (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.6640625f ? 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.7421875f ? 
                        0.0f : 
                        0.6f) : 
                    0.7f) : 
                 (data[2 /* no_of_characters */] <33.0f ? 
                    0.75f : 
                    1.0f)) : 
             (data[2 /* no_of_characters */] <75.5f ? 
                 (data[1 /* type_of_time */] <4.5f ? 
                    0.0f : 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.5f ? 
                        0.0f : 
                        1.0f)) : 
                0.0f)) : 
         (Double.isNaN(data[0]) || data[0 /* vlan */] <85.5f ? 
             (data[2 /* no_of_characters */] <100.5f ? 
                 (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.1015625f ? 
                    0.0f : 
                     (data[5 /* 4_letter_word */] <0.5652771f ? 
                        0.0f : 
                        1.0f)) : 
                0.0f) : 
             (data[2 /* no_of_characters */] <100.5f ? 
                 (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.83257294f ? 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.125f ? 
                        0.76282054f : 
                        0.0f) : 
                    0.0f) : 
                 (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.15625f ? 
                    0.0f : 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.3203125f ? 
                        0.0f : 
                        0.040427156f)))));
    return pred;
  } // constant pool size = 74B, number of visited nodes = 18, static init size = 0B
}

class log_drf_1_Tree_35_class_7 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0]) || data[0 /* vlan */] <185.0f ? 
        0.0f : 
         (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <109.5f ? 
            0.0f : 
             (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.16796875f ? 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <200.0f ? 
                    1.0f : 
                    0.0f) : 
                0.0f)));
    return pred;
  } // constant pool size = 18B, number of visited nodes = 4, static init size = 0B
}

class log_drf_1_Tree_35_class_8 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0]) || data[0 /* vlan */] <180.5f ? 
        0.0f : 
         (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <885.0f ? 
             (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.083984375f ? 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <187.5f ? 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.1015625f ? 
                        0.00877193f : 
                        0.0f) : 
                    0.0f) : 
                0.0f) : 
             (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.25f ? 
                 (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <3.5f ? 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.5390625f ? 
                        1.0f : 
                        0.6666667f) : 
                     (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <4.5f ? 
                        0.015037594f : 
                        1.0f)) : 
                 (data[3 /* no_of_ips */] <2.5f ? 
                    0.5f : 
                    0.0f))));
    return pred;
  } // constant pool size = 42B, number of visited nodes = 10, static init size = 0B
}

class log_drf_1_Tree_35_class_9 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0]) || data[0 /* vlan */] <159.5f ? 
        0.0f : 
         (data[2 /* no_of_characters */] <143.5f ? 
             (data[6 /* 5_letter_word */] <0.1015625f ? 
                 (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.546875f ? 
                     (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.125f ? 
                        0.0f : 
                        0.33333334f) : 
                     (data[1 /* type_of_time */] <3.5f ? 
                        1.0f : 
                        0.0f)) : 
                 (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <1.0f ? 
                    0.0f : 
                    1.0f)) : 
             (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.31640625f ? 
                 (data[2 /* no_of_characters */] <157.5f ? 
                     (data[1 /* type_of_time */] <3.5f ? 
                        1.0f : 
                        0.0f) : 
                     (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.4140625f ? 
                        0.0011352613f : 
                        0.70454544f)) : 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <170.0f ? 
                     (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <2.5f ? 
                        0.0f : 
                        1.0f) : 
                    0.0f))));
    return pred;
  } // constant pool size = 54B, number of visited nodes = 13, static init size = 0B
}

class log_drf_1_Tree_35_class_10 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0]) || data[0 /* vlan */] <166.5f ? 
        5.0979834E-6f : 
         (data[0 /* vlan */] <171.0f ? 
             (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                0.0f : 
                 (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
                    0.0f : 
                    1.0f)) : 
            0.0f));
    return pred;
  } // constant pool size = 18B, number of visited nodes = 4, static init size = 0B
}

class log_drf_1_Tree_35_class_11 {
  static final double score0(double[] data) {
    double pred =     5.0E-6f;
    return pred;
  } // constant pool size = 2B, number of visited nodes = 0, static init size = 0B
}

class log_drf_1_Tree_35_class_12 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0]) || data[0 /* vlan */] <593.5f ? 
        0.0f : 
         (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <319.0f ? 
            0.0f : 
            1.0f));
    return pred;
  } // constant pool size = 10B, number of visited nodes = 2, static init size = 0B
}

class log_drf_1_Tree_35_class_13 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0]) || data[0 /* vlan */] <593.5f ? 
         (data[2 /* no_of_characters */] <53.5f ? 
             (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.37304688f ? 
                 (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.2890625f ? 
                     (data[9 /* 8_letter_word */] <0.12646484f ? 
                        0.87096775f : 
                        1.0f) : 
                    0.0f) : 
                0.0f) : 
             (data[2 /* no_of_characters */] <86.5f ? 
                 (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.25f ? 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.1015625f ? 
                        0.0f : 
                        0.011876484f) : 
                    0.0f) : 
                0.0f)) : 
         (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.16699219f ? 
             (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.25f ? 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.16796875f ? 
                    0.88065845f : 
                    1.0f) : 
                1.0f) : 
             (data[2 /* no_of_characters */] <429.5f ? 
                0.5f : 
                0.0f)));
    return pred;
  } // constant pool size = 50B, number of visited nodes = 12, static init size = 0B
}

class log_drf_1_Tree_35_class_14 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[12]) || data[12 /* 11_letter_word */] <0.18310547f ? 
         (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <175.5f ? 
            0.0f : 
             (data[8 /* 7_letter_word */] <0.20703125f ? 
                 (data[1 /* type_of_time */] <2.5f ? 
                     (data[0 /* vlan */] <106.0f ? 
                        0.029411765f : 
                        0.0f) : 
                    0.0f) : 
                0.0f)) : 
         (data[0 /* vlan */] <28.5f ? 
             (data[12 /* 11_letter_word */] <0.2245884f ? 
                 (data[7 /* 6_letter_word */] <0.1015625f ? 
                    0.0f : 
                    0.9285714f) : 
                0.0f) : 
            0.0f));
    return pred;
  } // constant pool size = 34B, number of visited nodes = 8, static init size = 0B
}

class log_drf_1_Tree_35_class_15 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.94970703f ? 
         (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <213.5f ? 
             (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.47070312f ? 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <33.5f ? 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.4609375f ? 
                        0.0f : 
                        1.9267823E-4f) : 
                     (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
                        0.0f : 
                        0.04130109f)) : 
                0.0f) : 
             (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.029296875f ? 
                 (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <1.5f ? 
                     (data[5 /* 4_letter_word */] <0.029678345f ? 
                        0.03825364f : 
                        0.002034818f) : 
                     (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.0625f ? 
                        0.8727273f : 
                        0.0f)) : 
                 (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.234375f ? 
                    0.0f : 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <375.5f ? 
                        0.0f : 
                        1.0f)))) : 
         (data[0 /* vlan */] <26.5f ? 
            0.0f : 
             (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <2.5f ? 
                 (data[3 /* no_of_ips */] <1.5f ? 
                    0.0f : 
                    0.1533717f) : 
                0.0f)));
    return pred;
  } // constant pool size = 62B, number of visited nodes = 15, static init size = 0B
}

class log_drf_1_Tree_35_class_16 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.94970703f ? 
         (data[2 /* no_of_characters */] <113.5f ? 
             (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.083984375f ? 
                 (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.07421875f ? 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <89.5f ? 
                        2.0894274E-4f : 
                        0.0f) : 
                    0.0f) : 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.0859375f ? 
                     (data[8 /* 7_letter_word */] <0.5849304f ? 
                        0.0027322404f : 
                        0.0f) : 
                     (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                        0.008830022f : 
                        0.0f))) : 
             (data[2 /* no_of_characters */] <158.5f ? 
                 (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.2890625f ? 
                     (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.0546875f ? 
                        7.7654826E-5f : 
                        0.0f) : 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <148.5f ? 
                        4.5495905E-4f : 
                        0.006289308f)) : 
                0.0f)) : 
         (data[0 /* vlan */] <26.5f ? 
            0.0f : 
             (data[3 /* no_of_ips */] <0.5f ? 
                0.0062695923f : 
                0.0f)));
    return pred;
  } // constant pool size = 58B, number of visited nodes = 14, static init size = 0B
}

class log_drf_1_Tree_35_class_17 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0]) || data[0 /* vlan */] <180.5f ? 
         (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <1117.0f ? 
             (Double.isNaN(data[14]) || data[14 /* 13_letter_word */] <0.052734375f ? 
                0.0f : 
                 (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.015625f ? 
                    0.0f : 
                    0.6666667f)) : 
             (data[6 /* 5_letter_word */] <0.14257812f ? 
                0.5f : 
                0.0f)) : 
         (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.36132812f ? 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <186.0f ? 
                 (data[1 /* type_of_time */] <4.5f ? 
                    0.0f : 
                     (data[2 /* no_of_characters */] <729.5f ? 
                        0.96575344f : 
                        0.45808384f)) : 
                0.0f) : 
             (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.37304688f ? 
                0.0f : 
                 (data[1 /* type_of_time */] <4.5f ? 
                    0.0f : 
                    0.71428573f))));
    return pred;
  } // constant pool size = 46B, number of visited nodes = 11, static init size = 0B
}

class log_drf_1_Tree_35_class_18 {
  static final double score0(double[] data) {
    double pred =      (data[0 /* vlan */] <14.5f ? 
        5.034233E-5f : 
        0.0f);
    return pred;
  } // constant pool size = 6B, number of visited nodes = 1, static init size = 0B
}

class log_drf_1_Tree_35_class_19 {
  static final double score0(double[] data) {
    double pred =      (data[0 /* vlan */] <14.5f ? 
         (data[2 /* no_of_characters */] <135.5f ? 
             (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.1015625f ? 
                0.0f : 
                1.0f) : 
             (data[7 /* 6_letter_word */] <0.25585938f ? 
                 (data[1 /* type_of_time */] <4.5f ? 
                    0.0f : 
                     (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.21875f ? 
                        3.7950664E-4f : 
                        1.0f)) : 
                0.0f)) : 
        0.0f);
    return pred;
  } // constant pool size = 26B, number of visited nodes = 6, static init size = 0B
}

class log_drf_1_Tree_35_class_20 {
  static final double score0(double[] data) {
    double pred =      (data[0 /* vlan */] <23.5f ? 
         (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <135.5f ? 
             (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.1015625f ? 
                 (data[0 /* vlan */] <18.5f ? 
                    0.0f : 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.0859375f ? 
                        0.9997329f : 
                        1.0f)) : 
                 (data[0 /* vlan */] <17.0f ? 
                    0.0f : 
                    1.0f)) : 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <17.0f ? 
                0.0f : 
                 (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.3203125f ? 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.828125f ? 
                        1.0f : 
                        0.987013f) : 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <214.5f ? 
                        0.99814814f : 
                        0.9661017f)))) : 
        0.0f);
    return pred;
  } // constant pool size = 42B, number of visited nodes = 10, static init size = 0B
}

class log_drf_1_Tree_35_class_21 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[12]) || data[12 /* 11_letter_word */] <0.22460938f ? 
         (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <215.5f ? 
             (Double.isNaN(data[13]) || data[13 /* 12_letter_word */] <0.171875f ? 
                 (data[0 /* vlan */] <17.5f ? 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.546875f ? 
                        0.004468719f : 
                        0.375f) : 
                     (data[1 /* type_of_time */] <4.5f ? 
                        0.0010421562f : 
                        2.1492771E-4f)) : 
                 (data[0 /* vlan */] <61.5f ? 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.3671875f ? 
                        0.0f : 
                        0.8333333f) : 
                     (data[13 /* 12_letter_word */] <0.23010254f ? 
                        0.0f : 
                        0.008928572f))) : 
             (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.15429688f ? 
                 (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.10546875f ? 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.7578125f ? 
                        0.004444033f : 
                        0.14049587f) : 
                     (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.15066965f ? 
                        0.0f : 
                        0.8787879f)) : 
                 (data[1 /* type_of_time */] <3.5f ? 
                    0.0f : 
                     (data[3 /* no_of_ips */] <3.5f ? 
                        0.002019386f : 
                        0.0f)))) : 
         (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.18652344f ? 
            0.0f : 
             (data[2 /* no_of_characters */] <205.5f ? 
                0.0f : 
                1.0f)));
    return pred;
  } // constant pool size = 70B, number of visited nodes = 17, static init size = 0B
}

class log_drf_1_Tree_35_class_22 {
  static final double score0(double[] data) {
    double pred =      (data[0 /* vlan */] <5.5f ? 
         (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <130.5f ? 
            0.0f : 
            0.5f) : 
         (data[0 /* vlan */] <23.5f ? 
             (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.32226562f ? 
                0.0f : 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <224.5f ? 
                    0.0f : 
                     (data[7 /* 6_letter_word */] <0.1796875f ? 
                        0.04f : 
                        0.0f))) : 
            0.0f));
    return pred;
  } // constant pool size = 26B, number of visited nodes = 6, static init size = 0B
}

class log_drf_1_Tree_35_class_23 {
  static final double score0(double[] data) {
    double pred =      (data[0 /* vlan */] <14.5f ? 
         (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <260.5f ? 
             (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.15429688f ? 
                 (data[1 /* type_of_time */] <4.5f ? 
                    0.0f : 
                     (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.171875f ? 
                        0.92909896f : 
                        0.0f)) : 
                 (data[5 /* 4_letter_word */] <0.0859375f ? 
                     (data[0 /* vlan */] <8.5f ? 
                        0.0f : 
                        0.6818182f) : 
                     (data[11 /* 10_letter_word */] <0.083984375f ? 
                        0.0023894862f : 
                        0.0f))) : 
             (data[0 /* vlan */] <12.5f ? 
                1.0f : 
                0.0f)) : 
        0.0f);
    return pred;
  } // constant pool size = 38B, number of visited nodes = 9, static init size = 0B
}

class log_drf_1_Tree_35_class_24 {
  static final double score0(double[] data) {
    double pred =      (data[0 /* vlan */] <11.5f ? 
         (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <138.5f ? 
            0.0f : 
             (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.39257812f ? 
                0.0f : 
                0.11111111f)) : 
        0.0f);
    return pred;
  } // constant pool size = 14B, number of visited nodes = 3, static init size = 0B
}

class log_drf_1_Tree_35_class_25 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0]) || data[0 /* vlan */] <41.0f ? 
         (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <257.5f ? 
             (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.41601562f ? 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <27.0f ? 
                    0.0f : 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.0546875f ? 
                        0.7508081f : 
                        0.96017766f)) : 
                 (data[3 /* no_of_ips */] <1.5f ? 
                     (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                        0.02374169f : 
                        0.06818182f) : 
                    1.0f)) : 
             (data[2 /* no_of_characters */] <333.5f ? 
                 (data[11 /* 10_letter_word */] <0.0390625f ? 
                     (data[5 /* 4_letter_word */] <0.0625f ? 
                        0.9411765f : 
                        0.2860666f) : 
                     (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.0390625f ? 
                        0.011690647f : 
                        0.0f)) : 
                0.0f)) : 
         (Double.isNaN(data[0]) || data[0 /* vlan */] <170.5f ? 
            0.0f : 
             (data[2 /* no_of_characters */] <145.5f ? 
                 (data[1 /* type_of_time */] <4.5f ? 
                    0.0f : 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.5f ? 
                        0.0f : 
                        0.22222222f)) : 
                0.0f)));
    return pred;
  } // constant pool size = 62B, number of visited nodes = 15, static init size = 0B
}

class log_drf_1_Tree_35_class_26 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.6513672f ? 
        0.0f : 
         (data[2 /* no_of_characters */] <63.5f ? 
            0.88160676f : 
            0.0f));
    return pred;
  } // constant pool size = 10B, number of visited nodes = 2, static init size = 0B
}

class log_drf_1_Tree_35_class_27 {
  static final double score0(double[] data) {
    double pred =      (data[0 /* vlan */] <14.5f ? 
         (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <254.0f ? 
            0.0f : 
             (data[7 /* 6_letter_word */] <0.25585938f ? 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.22587585f ? 
                    0.0f : 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.37109375f ? 
                        0.022222223f : 
                        0.0f)) : 
                0.0f)) : 
        0.0f);
    return pred;
  } // constant pool size = 22B, number of visited nodes = 5, static init size = 0B
}

class log_drf_1_Tree_35_class_28 {
  static final double score0(double[] data) {
    double pred =      (data[0 /* vlan */] <14.5f ? 
         (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <419.0f ? 
            0.0f : 
             (data[6 /* 5_letter_word */] <0.13085938f ? 
                0.0f : 
                1.0f)) : 
        0.0f);
    return pred;
  } // constant pool size = 14B, number of visited nodes = 3, static init size = 0B
}

class log_drf_1_Tree_35_class_29 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[12]) || data[12 /* 11_letter_word */] <0.0087890625f ? 
         (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <185.5f ? 
            0.0f : 
             (data[0 /* vlan */] <137.5f ? 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <133.5f ? 
                    0.0f : 
                     (data[6 /* 5_letter_word */] <0.171875f ? 
                        1.0f : 
                        0.0f)) : 
                0.0f)) : 
         (Double.isNaN(data[0]) || data[0 /* vlan */] <125.5f ? 
            0.0f : 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <353.0f ? 
                0.0f : 
                 (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.23046875f ? 
                    1.0f : 
                    0.5f))));
    return pred;
  } // constant pool size = 34B, number of visited nodes = 8, static init size = 0B
}

class log_drf_1_Tree_35_class_30 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0]) || data[0 /* vlan */] <177.0f ? 
        0.0f : 
         (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <193.0f ? 
            0.0f : 
             (data[6 /* 5_letter_word */] <0.22460938f ? 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.18359375f ? 
                    0.0f : 
                     (data[2 /* no_of_characters */] <284.5f ? 
                        1.0f : 
                        0.0f)) : 
                 (data[6 /* 5_letter_word */] <0.27004242f ? 
                    1.0f : 
                     (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <3.5f ? 
                        0.33168316f : 
                        0.0f)))));
    return pred;
  } // constant pool size = 30B, number of visited nodes = 7, static init size = 0B
}

class log_drf_1_Tree_35_class_31 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[15]) || data[15 /* 14_letter_word */] <0.22485352f ? 
         (data[2 /* no_of_characters */] <113.5f ? 
             (Double.isNaN(data[13]) || data[13 /* 12_letter_word */] <0.125f ? 
                 (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.2890625f ? 
                     (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <1.5f ? 
                        0.039104708f : 
                        0.0f) : 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.171875f ? 
                        0.0f : 
                        0.6764706f)) : 
                 (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.16796875f ? 
                     (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                        1.0f : 
                        0.9677419f) : 
                    0.0f)) : 
             (data[2 /* no_of_characters */] <140.5f ? 
                 (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.2890625f ? 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.0625f ? 
                        1.2221951E-4f : 
                        0.021686748f) : 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <33.5f ? 
                        0.0f : 
                        0.47692308f)) : 
                 (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
                    0.0f : 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.0234375f ? 
                        0.003082978f : 
                        6.6462846E-5f)))) : 
         (data[0 /* vlan */] <53.5f ? 
            0.0f : 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <85.5f ? 
                1.0f : 
                 (data[2 /* no_of_characters */] <100.5f ? 
                    1.0f : 
                    0.8636364f))));
    return pred;
  } // constant pool size = 70B, number of visited nodes = 17, static init size = 0B
}

class log_drf_1_Tree_35_class_32 {
  static final double score0(double[] data) {
    double pred =      (data[0 /* vlan */] <29.5f ? 
         (data[2 /* no_of_characters */] <123.5f ? 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <28.0f ? 
                0.0f : 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.125f ? 
                    0.089324616f : 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.671875f ? 
                        1.0f : 
                        0.0f))) : 
            0.0f) : 
        0.0f);
    return pred;
  } // constant pool size = 22B, number of visited nodes = 5, static init size = 0B
}

class log_drf_1_Tree_35_class_33 {
  static final double score0(double[] data) {
    double pred =      (data[0 /* vlan */] <7.5f ? 
         (data[2 /* no_of_characters */] <54.5f ? 
             (data[5 /* 4_letter_word */] <0.125f ? 
                1.0f : 
                0.0f) : 
             (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.083984375f ? 
                1.0f : 
                 (data[9 /* 8_letter_word */] <0.0859375f ? 
                    1.0f : 
                    0.0f))) : 
         (data[0 /* vlan */] <17.5f ? 
             (Double.isNaN(data[4]) || data[4 /* no_of_macs */] <1.0f ? 
                 (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.8984375f ? 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.4071045f ? 
                        1.01183854E-4f : 
                        0.025486562f) : 
                    0.09198813f) : 
                0.85714287f) : 
             (data[2 /* no_of_characters */] <115.5f ? 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.15625f ? 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.1953125f ? 
                        4.575961E-4f : 
                        0.004840011f) : 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.4140625f ? 
                        0.002902156f : 
                        0.019662922f)) : 
                0.0f)));
    return pred;
  } // constant pool size = 54B, number of visited nodes = 13, static init size = 0B
}

class log_drf_1_Tree_35_class_34 {
  static final double score0(double[] data) {
    double pred =      (data[0 /* vlan */] <10.0f ? 
        0.003058104f : 
        5.0081885E-6f);
    return pred;
  } // constant pool size = 6B, number of visited nodes = 1, static init size = 0B
}

class log_drf_1_Tree_35_class_35 {
  static final double score0(double[] data) {
    double pred =      (data[0 /* vlan */] <12.5f ? 
         (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <84.5f ? 
            0.0f : 
             (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.29101562f ? 
                 (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.390625f ? 
                    0.0f : 
                     (data[2 /* no_of_characters */] <121.0f ? 
                        0.33333334f : 
                        0.0f)) : 
                 (data[1 /* type_of_time */] <3.5f ? 
                    0.0f : 
                    1.0f))) : 
         (data[0 /* vlan */] <14.5f ? 
             (data[2 /* no_of_characters */] <90.5f ? 
                 (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.59765625f ? 
                     (data[5 /* 4_letter_word */] <0.3671875f ? 
                        0.33333334f : 
                        0.0f) : 
                    1.0f) : 
                 (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <3.0f ? 
                     (data[1 /* type_of_time */] <4.5f ? 
                        0.0f : 
                        0.002538071f) : 
                    0.0f)) : 
            0.0f));
    return pred;
  } // constant pool size = 50B, number of visited nodes = 12, static init size = 0B
}

class log_drf_1_Tree_35_class_36 {
  static final double score0(double[] data) {
    double pred =      (data[0 /* vlan */] <5.5f ? 
         (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <109.5f ? 
            0.0f : 
            0.7692308f) : 
        0.0f);
    return pred;
  } // constant pool size = 10B, number of visited nodes = 2, static init size = 0B
}

class log_drf_1_Tree_35_class_37 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0]) || data[0 /* vlan */] <156.5f ? 
         (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <150.5f ? 
             (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.47070312f ? 
                 (data[0 /* vlan */] <17.0f ? 
                     (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                        0.30392158f : 
                        0.0f) : 
                     (data[1 /* type_of_time */] <3.0f ? 
                        0.95238096f : 
                        2.8861694E-5f)) : 
                 (data[1 /* type_of_time */] <4.5f ? 
                    1.0f : 
                    0.0f)) : 
             (data[3 /* no_of_ips */] <0.5f ? 
                 (data[1 /* type_of_time */] <4.5f ? 
                     (Double.isNaN(data[12]) || data[12 /* 11_letter_word */] <0.171875f ? 
                        0.9996199f : 
                        0.0f) : 
                    0.0f) : 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.4609375f ? 
                    0.0f : 
                     (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <3.5f ? 
                        0.0025445293f : 
                        0.0f)))) : 
         (Double.isNaN(data[0]) || data[0 /* vlan */] <170.5f ? 
             (data[0 /* vlan */] <165.0f ? 
                 (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <1.5f ? 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.0859375f ? 
                        1.0f : 
                        0.0f) : 
                     (data[3 /* no_of_ips */] <2.5f ? 
                        0.023255814f : 
                        0.0f)) : 
                 (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.265625f ? 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.2890625f ? 
                        0.99012f : 
                        0.41761363f) : 
                     (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <1.5f ? 
                        0.99831283f : 
                        0.4f))) : 
             (data[1 /* type_of_time */] <4.5f ? 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <230.5f ? 
                     (data[1 /* type_of_time */] <2.5f ? 
                        0.0f : 
                        1.0f) : 
                     (data[3 /* no_of_ips */] <1.5f ? 
                        1.0f : 
                        0.0f)) : 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <592.5f ? 
                    0.0f : 
                     (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                        0.115079366f : 
                        0.0f)))));
    return pred;
  } // constant pool size = 106B, number of visited nodes = 26, static init size = 0B
}

class log_drf_1_Tree_35_class_38 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.94970703f ? 
         (data[2 /* no_of_characters */] <93.5f ? 
             (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.16796875f ? 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <65.5f ? 
                    0.0f : 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.4140625f ? 
                        0.0f : 
                        0.01369863f)) : 
                0.0f) : 
            0.0f) : 
         (Double.isNaN(data[0]) || data[0 /* vlan */] <62.5f ? 
            0.0f : 
             (data[0 /* vlan */] <119.5f ? 
                 (data[3 /* no_of_ips */] <0.5f ? 
                    0.0f : 
                    0.025f) : 
                0.0f)));
    return pred;
  } // constant pool size = 34B, number of visited nodes = 8, static init size = 0B
}


class log_drf_1_Forest_36 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += log_drf_1_Tree_36_class_0.score0(fdata);
    preds[2] += log_drf_1_Tree_36_class_1.score0(fdata);
    preds[3] += log_drf_1_Tree_36_class_2.score0(fdata);
    preds[4] += log_drf_1_Tree_36_class_3.score0(fdata);
    preds[5] += log_drf_1_Tree_36_class_4.score0(fdata);
    preds[6] += log_drf_1_Tree_36_class_5.score0(fdata);
    preds[7] += log_drf_1_Tree_36_class_6.score0(fdata);
    preds[8] += log_drf_1_Tree_36_class_7.score0(fdata);
    preds[9] += log_drf_1_Tree_36_class_8.score0(fdata);
    preds[10] += log_drf_1_Tree_36_class_9.score0(fdata);
    preds[11] += log_drf_1_Tree_36_class_10.score0(fdata);
    preds[12] += log_drf_1_Tree_36_class_11.score0(fdata);
    preds[13] += log_drf_1_Tree_36_class_12.score0(fdata);
    preds[14] += log_drf_1_Tree_36_class_13.score0(fdata);
    preds[15] += log_drf_1_Tree_36_class_14.score0(fdata);
    preds[16] += log_drf_1_Tree_36_class_15.score0(fdata);
    preds[17] += log_drf_1_Tree_36_class_16.score0(fdata);
    preds[18] += log_drf_1_Tree_36_class_17.score0(fdata);
    preds[19] += log_drf_1_Tree_36_class_18.score0(fdata);
    preds[20] += log_drf_1_Tree_36_class_19.score0(fdata);
    preds[21] += log_drf_1_Tree_36_class_20.score0(fdata);
    preds[22] += log_drf_1_Tree_36_class_21.score0(fdata);
    preds[23] += log_drf_1_Tree_36_class_22.score0(fdata);
    preds[24] += log_drf_1_Tree_36_class_23.score0(fdata);
    preds[25] += log_drf_1_Tree_36_class_24.score0(fdata);
    preds[26] += log_drf_1_Tree_36_class_25.score0(fdata);
    preds[27] += log_drf_1_Tree_36_class_26.score0(fdata);
    preds[28] += log_drf_1_Tree_36_class_27.score0(fdata);
    preds[29] += log_drf_1_Tree_36_class_28.score0(fdata);
    preds[30] += log_drf_1_Tree_36_class_29.score0(fdata);
    preds[31] += log_drf_1_Tree_36_class_30.score0(fdata);
    preds[32] += log_drf_1_Tree_36_class_31.score0(fdata);
    preds[33] += log_drf_1_Tree_36_class_32.score0(fdata);
    preds[34] += log_drf_1_Tree_36_class_33.score0(fdata);
    preds[35] += log_drf_1_Tree_36_class_34.score0(fdata);
    preds[36] += log_drf_1_Tree_36_class_35.score0(fdata);
    preds[37] += log_drf_1_Tree_36_class_36.score0(fdata);
    preds[38] += log_drf_1_Tree_36_class_37.score0(fdata);
    preds[39] += log_drf_1_Tree_36_class_38.score0(fdata);
  }
}
class log_drf_1_Tree_36_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <1040.0f ? 
         (Double.isNaN(data[14]) || data[14 /* 13_letter_word */] <0.0146484375f ? 
             (data[8 /* 7_letter_word */] <0.19140625f ? 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <520.5f ? 
                     (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.0234375f ? 
                        3.9629856E-5f : 
                        2.585984E-4f) : 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.14355469f ? 
                        0.0036429872f : 
                        0.3f)) : 
                0.0f) : 
             (Double.isNaN(data[12]) || data[12 /* 11_letter_word */] <0.009765625f ? 
                 (data[7 /* 6_letter_word */] <0.21484375f ? 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <658.5f ? 
                        0.0f : 
                        1.0f) : 
                    0.0f) : 
                1.0f)) : 
         (data[5 /* 4_letter_word */] <0.21289062f ? 
            0.5f : 
            1.0f));
    return pred;
  } // constant pool size = 42B, number of visited nodes = 10, static init size = 0B
}

class log_drf_1_Tree_36_class_1 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <261.5f ? 
         (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.7080078f ? 
             (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
                0.0f : 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.30859375f ? 
                    0.0f : 
                     (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                        0.0f : 
                        9.30752E-4f))) : 
             (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.125f ? 
                0.0f : 
                1.0f)) : 
         (data[5 /* 4_letter_word */] <0.32421875f ? 
            0.0f : 
             (data[7 /* 6_letter_word */] <0.01953125f ? 
                 (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                    0.0f : 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.21875f ? 
                        0.84682083f : 
                        0.0f)) : 
                0.0f)));
    return pred;
  } // constant pool size = 42B, number of visited nodes = 10, static init size = 0B
}

class log_drf_1_Tree_36_class_2 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* no_of_characters */] <158.5f ? 
         (Double.isNaN(data[0]) || data[0 /* vlan */] <181.5f ? 
             (data[1 /* type_of_time */] <4.5f ? 
                0.0f : 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <139.5f ? 
                    0.0f : 
                     (data[2 /* no_of_characters */] <103.5f ? 
                        0.073529415f : 
                        0.74458873f))) : 
             (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.125f ? 
                 (data[7 /* 6_letter_word */] <0.37109375f ? 
                    0.0f : 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.74942017f ? 
                        0.9950658f : 
                        0.9130435f)) : 
                0.0f)) : 
         (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.055664062f ? 
             (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.46289062f ? 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <1085.5f ? 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.37971497f ? 
                        4.9785096E-5f : 
                        7.930214E-4f) : 
                     (data[11 /* 10_letter_word */] <0.015625f ? 
                        0.5f : 
                        0.0f)) : 
                 (data[1 /* type_of_time */] <4.5f ? 
                    0.0f : 
                     (data[3 /* no_of_ips */] <1.5f ? 
                        0.020628683f : 
                        0.0f))) : 
             (data[11 /* 10_letter_word */] <0.06488609f ? 
                0.5f : 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <174.5f ? 
                    0.0f : 
                     (data[11 /* 10_letter_word */] <0.291359f ? 
                        0.625f : 
                        0.0f)))));
    return pred;
  } // constant pool size = 74B, number of visited nodes = 18, static init size = 0B
}

class log_drf_1_Tree_36_class_3 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
         (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <295.5f ? 
             (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.47070312f ? 
                0.0f : 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.22265625f ? 
                    0.0f : 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.125f ? 
                        0.0f : 
                        0.33333334f))) : 
             (data[0 /* vlan */] <33.5f ? 
                 (data[8 /* 7_letter_word */] <0.23046875f ? 
                    0.0f : 
                     (data[7 /* 6_letter_word */] <0.109375f ? 
                        0.0f : 
                        0.99615383f)) : 
                0.0f)) : 
         (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.4765625f ? 
             (data[3 /* no_of_ips */] <1.5f ? 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <150.5f ? 
                     (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
                        0.0011088523f : 
                        0.0f) : 
                     (data[8 /* 7_letter_word */] <0.046875f ? 
                        0.5338983f : 
                        0.0f)) : 
                0.0f) : 
             (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <1.5f ? 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.18359375f ? 
                     (data[2 /* no_of_characters */] <140.5f ? 
                        5.3418806E-4f : 
                        0.8175f) : 
                    0.0f) : 
                0.0f)));
    return pred;
  } // constant pool size = 66B, number of visited nodes = 16, static init size = 0B
}

class log_drf_1_Tree_36_class_4 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* no_of_characters */] <113.5f ? 
         (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.3095703f ? 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <29.5f ? 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.4140625f ? 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <24.5f ? 
                        0.0f : 
                        0.0036630037f) : 
                     (data[2 /* no_of_characters */] <97.5f ? 
                        0.0f : 
                        0.004149378f)) : 
                0.0f) : 
             (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.29101562f ? 
                0.0f : 
                 (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <1.0f ? 
                    1.0f : 
                    0.0f))) : 
         (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.14160156f ? 
            0.0f : 
             (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.4140625f ? 
                 (data[2 /* no_of_characters */] <123.5f ? 
                     (data[6 /* 5_letter_word */] <0.36961365f ? 
                        0.018348623f : 
                        0.0f) : 
                    0.0f) : 
                 (data[6 /* 5_letter_word */] <0.15501404f ? 
                     (data[3 /* no_of_ips */] <3.5f ? 
                        0.071428575f : 
                        0.0f) : 
                    0.0f))));
    return pred;
  } // constant pool size = 58B, number of visited nodes = 14, static init size = 0B
}

class log_drf_1_Tree_36_class_5 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.09033203f ? 
         (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.42285156f ? 
             (data[8 /* 7_letter_word */] <0.04296875f ? 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <220.5f ? 
                    0.0f : 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.3125f ? 
                        0.0f : 
                        0.0015151515f)) : 
                0.0f) : 
             (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.35351562f ? 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.09375f ? 
                     (data[1 /* type_of_time */] <4.5f ? 
                        0.0f : 
                        4.964891E-4f) : 
                     (data[5 /* 4_letter_word */] <0.44539642f ? 
                        0.12162162f : 
                        4.1476564E-4f)) : 
                0.0f)) : 
         (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.30371094f ? 
             (data[2 /* no_of_characters */] <110.5f ? 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <103.5f ? 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <65.5f ? 
                        0.0f : 
                        0.012345679f) : 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <57.5f ? 
                        0.0f : 
                        1.0f)) : 
                0.0f) : 
             (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.17382812f ? 
                 (data[0 /* vlan */] <17.5f ? 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.4780426f ? 
                        0.0f : 
                        0.018518519f) : 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.58612823f ? 
                        7.0348225E-4f : 
                        0.002444988f)) : 
                 (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.0546875f ? 
                     (data[5 /* 4_letter_word */] <0.36995697f ? 
                        0.28947368f : 
                        0.0f) : 
                     (data[9 /* 8_letter_word */] <0.21114731f ? 
                        0.0f : 
                        1.0f)))));
    return pred;
  } // constant pool size = 86B, number of visited nodes = 21, static init size = 0B
}

class log_drf_1_Tree_36_class_6 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* no_of_characters */] <98.5f ? 
         (Double.isNaN(data[0]) || data[0 /* vlan */] <109.5f ? 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <34.5f ? 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.87109375f ? 
                     (data[0 /* vlan */] <19.0f ? 
                        0.044827588f : 
                        0.0f) : 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <40.5f ? 
                        1.0f : 
                        0.0f)) : 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.265625f ? 
                     (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.25f ? 
                        0.020325202f : 
                        0.0f) : 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.171875f ? 
                        0.2361111f : 
                        0.0f))) : 
             (data[0 /* vlan */] <137.0f ? 
                1.0f : 
                0.0f)) : 
         (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.32421875f ? 
            0.0f : 
             (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.15429688f ? 
                 (data[2 /* no_of_characters */] <117.5f ? 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.21875f ? 
                        0.0f : 
                        0.14545454f) : 
                    0.0f) : 
                 (data[2 /* no_of_characters */] <117.5f ? 
                     (data[7 /* 6_letter_word */] <0.1823171f ? 
                        0.5319149f : 
                        0.0f) : 
                    0.0f))));
    return pred;
  } // constant pool size = 66B, number of visited nodes = 16, static init size = 0B
}

class log_drf_1_Tree_36_class_7 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <1.5f ? 
         (Double.isNaN(data[0]) || data[0 /* vlan */] <185.5f ? 
            0.0f : 
            0.12962963f) : 
         (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.8564453f ? 
            0.0f : 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <109.5f ? 
                0.0f : 
                1.0f)));
    return pred;
  } // constant pool size = 18B, number of visited nodes = 4, static init size = 0B
}

class log_drf_1_Tree_36_class_8 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <900.5f ? 
         (Double.isNaN(data[0]) || data[0 /* vlan */] <177.5f ? 
            0.0f : 
             (data[1 /* type_of_time */] <4.5f ? 
                0.0f : 
                 (data[3 /* no_of_ips */] <0.5f ? 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.25f ? 
                        0.012953368f : 
                        0.0f) : 
                    0.0f))) : 
         (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.53808594f ? 
             (data[2 /* no_of_characters */] <1011.5f ? 
                 (data[0 /* vlan */] <173.5f ? 
                    0.0f : 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.0625f ? 
                        1.0f : 
                        0.6f)) : 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.54296875f ? 
                     (data[6 /* 5_letter_word */] <0.046875f ? 
                        0.36363637f : 
                        0.01438849f) : 
                    0.5f)) : 
             (data[3 /* no_of_ips */] <1.0f ? 
                0.0f : 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.071428575f ? 
                     (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.078125f ? 
                        0.97321427f : 
                        1.0f) : 
                    1.0f))));
    return pred;
  } // constant pool size = 58B, number of visited nodes = 14, static init size = 0B
}

class log_drf_1_Tree_36_class_9 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <2.5f ? 
         (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.24609375f ? 
            0.0f : 
             (data[1 /* type_of_time */] <3.5f ? 
                 (data[2 /* no_of_characters */] <120.5f ? 
                     (data[1 /* type_of_time */] <2.5f ? 
                        0.0f : 
                        1.0f) : 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.21875f ? 
                        0.0f : 
                        0.4f)) : 
                0.0f)) : 
         (data[6 /* 5_letter_word */] <0.26757812f ? 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <95.5f ? 
                0.0f : 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <173.5f ? 
                    1.0f : 
                    0.0f)) : 
             (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.58203125f ? 
                0.0f : 
                1.0f)));
    return pred;
  } // constant pool size = 42B, number of visited nodes = 10, static init size = 0B
}

class log_drf_1_Tree_36_class_10 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* no_of_characters */] <92.5f ? 
         (Double.isNaN(data[0]) || data[0 /* vlan */] <164.5f ? 
            0.0f : 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <582.5f ? 
                 (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                    0.0f : 
                     (data[1 /* type_of_time */] <4.0f ? 
                        0.0f : 
                        1.0f)) : 
                0.0f)) : 
        5.364749E-6f);
    return pred;
  } // constant pool size = 22B, number of visited nodes = 5, static init size = 0B
}

class log_drf_1_Tree_36_class_11 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.14111328f ? 
        0.0f : 
        2.21283E-5f);
    return pred;
  } // constant pool size = 6B, number of visited nodes = 1, static init size = 0B
}

class log_drf_1_Tree_36_class_12 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <529.5f ? 
         (Double.isNaN(data[0]) || data[0 /* vlan */] <593.5f ? 
            0.0f : 
            0.10227273f) : 
         (data[6 /* 5_letter_word */] <0.028320312f ? 
             (data[2 /* no_of_characters */] <549.0f ? 
                1.0f : 
                0.0f) : 
            0.0f));
    return pred;
  } // constant pool size = 18B, number of visited nodes = 4, static init size = 0B
}

class log_drf_1_Tree_36_class_13 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* no_of_characters */] <54.0f ? 
         (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.125f ? 
             (data[0 /* vlan */] <103.5f ? 
                0.0f : 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <35.5f ? 
                    1.0f : 
                    0.0f)) : 
            1.0f) : 
         (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.38671875f ? 
             (data[8 /* 7_letter_word */] <0.03125f ? 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <589.0f ? 
                    0.0f : 
                    0.04255319f) : 
                0.0f) : 
             (data[2 /* no_of_characters */] <87.5f ? 
                0.00490566f : 
                 (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.47578126f ? 
                    0.0f : 
                    3.8910506E-4f))));
    return pred;
  } // constant pool size = 38B, number of visited nodes = 9, static init size = 0B
}

class log_drf_1_Tree_36_class_14 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <215.5f ? 
         (data[0 /* vlan */] <27.5f ? 
             (data[1 /* type_of_time */] <3.0f ? 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.1015625f ? 
                    0.0f : 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <20.5f ? 
                        0.0f : 
                        0.25f)) : 
                0.0f) : 
            0.0f) : 
         (data[5 /* 4_letter_word */] <0.2109375f ? 
             (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.18359375f ? 
                0.0f : 
                 (data[7 /* 6_letter_word */] <0.1015625f ? 
                    0.0f : 
                     (data[8 /* 7_letter_word */] <0.296875f ? 
                        0.78571427f : 
                        0.0f))) : 
            0.0f));
    return pred;
  } // constant pool size = 38B, number of visited nodes = 9, static init size = 0B
}

class log_drf_1_Tree_36_class_15 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* no_of_characters */] <100.5f ? 
         (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.89941406f ? 
            0.0f : 
             (data[0 /* vlan */] <27.5f ? 
                0.0f : 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <97.0f ? 
                    0.0f : 
                     (data[2 /* no_of_characters */] <98.5f ? 
                        0.0f : 
                        0.3298217f)))) : 
         (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.3095703f ? 
             (data[0 /* vlan */] <141.5f ? 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <124.5f ? 
                     (Double.isNaN(data[15]) || data[15 /* 14_letter_word */] <0.10546875f ? 
                        2.4135642E-4f : 
                        0.033472802f) : 
                     (data[5 /* 4_letter_word */] <0.21875f ? 
                        0.7389163f : 
                        0.06806283f)) : 
                0.0f) : 
             (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.41601562f ? 
                 (data[2 /* no_of_characters */] <128.5f ? 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <124.0f ? 
                        0.0f : 
                        0.50574714f) : 
                     (data[2 /* no_of_characters */] <135.5f ? 
                        0.0020533882f : 
                        0.0f)) : 
                 (data[2 /* no_of_characters */] <128.5f ? 
                     (data[7 /* 6_letter_word */] <0.5833333f ? 
                        1.0f : 
                        0.0f) : 
                     (data[2 /* no_of_characters */] <272.0f ? 
                        0.875f : 
                        1.0f)))));
    return pred;
  } // constant pool size = 70B, number of visited nodes = 17, static init size = 0B
}

class log_drf_1_Tree_36_class_16 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* no_of_characters */] <84.5f ? 
         (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.8330078f ? 
            0.0f : 
             (data[0 /* vlan */] <27.5f ? 
                0.0f : 
                0.04587156f)) : 
         (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.3095703f ? 
             (data[2 /* no_of_characters */] <112.5f ? 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <64.5f ? 
                    1.4129282E-4f : 
                     (Double.isNaN(data[15]) || data[15 /* 14_letter_word */] <0.1015625f ? 
                        0.0036036037f : 
                        0.0f)) : 
                 (data[2 /* no_of_characters */] <149.5f ? 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.3125f ? 
                        0.0f : 
                        2.686006E-4f) : 
                    0.0f)) : 
             (data[3 /* no_of_ips */] <0.5f ? 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.16796875f ? 
                     (data[11 /* 10_letter_word */] <0.41744995f ? 
                        0.009569378f : 
                        0.0f) : 
                    0.0f) : 
                0.0f)));
    return pred;
  } // constant pool size = 50B, number of visited nodes = 12, static init size = 0B
}

class log_drf_1_Tree_36_class_17 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <659.0f ? 
         (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.9160156f ? 
            0.0f : 
             (data[1 /* type_of_time */] <3.0f ? 
                0.25f : 
                0.0f)) : 
         (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.51464844f ? 
             (data[0 /* vlan */] <173.5f ? 
                 (data[0 /* vlan */] <18.5f ? 
                    1.0f : 
                    0.0f) : 
                 (data[2 /* no_of_characters */] <734.5f ? 
                    0.9932886f : 
                     (data[3 /* no_of_ips */] <3.5f ? 
                        0.06451613f : 
                        0.9699248f))) : 
             (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <3.5f ? 
                0.0f : 
                0.3f)));
    return pred;
  } // constant pool size = 38B, number of visited nodes = 9, static init size = 0B
}

class log_drf_1_Tree_36_class_18 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <330.5f ? 
        0.0f : 
         (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.4580078f ? 
            0.0f : 
             (data[5 /* 4_letter_word */] <0.49505806f ? 
                0.33333334f : 
                0.0f)));
    return pred;
  } // constant pool size = 14B, number of visited nodes = 3, static init size = 0B
}

class log_drf_1_Tree_36_class_19 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.23583984f ? 
         (data[0 /* vlan */] <17.5f ? 
             (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.19140625f ? 
                0.0f : 
                 (data[2 /* no_of_characters */] <140.5f ? 
                     (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                        0.0f : 
                        1.0f) : 
                    0.0f)) : 
            0.0f) : 
         (data[11 /* 10_letter_word */] <0.2679286f ? 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <19.5f ? 
                1.0f : 
                0.0f) : 
            0.0f));
    return pred;
  } // constant pool size = 30B, number of visited nodes = 7, static init size = 0B
}

class log_drf_1_Tree_36_class_20 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* no_of_characters */] <134.5f ? 
         (Double.isNaN(data[0]) || data[0 /* vlan */] <24.5f ? 
             (data[1 /* type_of_time */] <4.5f ? 
                0.0f : 
                 (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.2890625f ? 
                        0.97493035f : 
                        0.9975998f) : 
                     (data[0 /* vlan */] <16.5f ? 
                        0.0f : 
                        1.0f))) : 
            0.0f) : 
         (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.77441406f ? 
             (data[0 /* vlan */] <25.5f ? 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <17.0f ? 
                    0.0f : 
                     (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.03125f ? 
                        0.99816066f : 
                        1.0f)) : 
                0.0f) : 
             (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <1.5f ? 
                 (Double.isNaN(data[4]) || data[4 /* no_of_macs */] <1.0f ? 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <33.5f ? 
                        0.83474064f : 
                        0.0f) : 
                    0.0f) : 
                0.0f)));
    return pred;
  } // constant pool size = 54B, number of visited nodes = 13, static init size = 0B
}

class log_drf_1_Tree_36_class_21 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.15478516f ? 
         (data[0 /* vlan */] <11.5f ? 
             (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.046875f ? 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.78515625f ? 
                    0.0f : 
                    0.2972973f) : 
                0.0f) : 
             (data[8 /* 7_letter_word */] <0.13671875f ? 
                 (data[0 /* vlan */] <19.5f ? 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.3125f ? 
                        0.0f : 
                        0.02434457f) : 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <200.5f ? 
                        2.0165356E-4f : 
                        0.0021840874f)) : 
                 (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.01171875f ? 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.21875f ? 
                        0.0012171648f : 
                        0.003285405f) : 
                    0.0f))) : 
         (data[6 /* 5_letter_word */] <0.1171875f ? 
             (data[3 /* no_of_ips */] <0.5f ? 
                 (data[8 /* 7_letter_word */] <0.18359375f ? 
                     (Double.isNaN(data[12]) || data[12 /* 11_letter_word */] <0.125f ? 
                        0.065539114f : 
                        1.0f) : 
                    0.0f) : 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.5494792f ? 
                     (data[2 /* no_of_characters */] <108.5f ? 
                        0.027777778f : 
                        0.0f) : 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <151.5f ? 
                        0.0f : 
                        1.0f))) : 
            0.0f));
    return pred;
  } // constant pool size = 70B, number of visited nodes = 17, static init size = 0B
}

class log_drf_1_Tree_36_class_22 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <227.5f ? 
         (data[0 /* vlan */] <5.5f ? 
             (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.083984375f ? 
                0.0f : 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <130.5f ? 
                    0.0f : 
                    0.6666667f)) : 
            0.0f) : 
         (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.6455078f ? 
            0.0f : 
             (data[2 /* no_of_characters */] <232.5f ? 
                 (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <1.5f ? 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.171875f ? 
                        0.0f : 
                        0.4f) : 
                    0.0f) : 
                0.0f)));
    return pred;
  } // constant pool size = 34B, number of visited nodes = 8, static init size = 0B
}

class log_drf_1_Tree_36_class_23 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.5830078f ? 
         (data[0 /* vlan */] <17.5f ? 
             (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.26757812f ? 
                 (Double.isNaN(data[13]) || data[13 /* 12_letter_word */] <0.045898438f ? 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.4609375f ? 
                        0.0050033354f : 
                        0.121212125f) : 
                    1.0f) : 
                 (data[2 /* no_of_characters */] <175.5f ? 
                    0.0f : 
                     (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                        1.0f : 
                        0.0f))) : 
            0.0f) : 
         (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.083984375f ? 
             (data[2 /* no_of_characters */] <135.5f ? 
                0.008647799f : 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.16796875f ? 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <17.5f ? 
                        1.0f : 
                        0.0f) : 
                    0.0f)) : 
            0.0f));
    return pred;
  } // constant pool size = 46B, number of visited nodes = 11, static init size = 0B
}

class log_drf_1_Tree_36_class_24 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
        0.0f : 
         (data[0 /* vlan */] <12.5f ? 
             (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.7480469f ? 
                0.0f : 
                1.0f) : 
            0.0f));
    return pred;
  } // constant pool size = 14B, number of visited nodes = 3, static init size = 0B
}

class log_drf_1_Tree_36_class_25 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <1.5f ? 
         (data[0 /* vlan */] <40.5f ? 
             (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.31640625f ? 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <37.0f ? 
                     (Double.isNaN(data[12]) || data[12 /* 11_letter_word */] <0.4140625f ? 
                        0.04295909f : 
                        0.9739369f) : 
                     (data[0 /* vlan */] <38.5f ? 
                        0.6926407f : 
                        0.99835867f)) : 
                 (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.22265625f ? 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <29.0f ? 
                        0.0f : 
                        0.87167764f) : 
                    0.0f)) : 
             (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.5761719f ? 
                0.0f : 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <524.5f ? 
                    0.0f : 
                    1.0f))) : 
         (data[5 /* 4_letter_word */] <0.1171875f ? 
             (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <5.5f ? 
                 (data[1 /* type_of_time */] <4.5f ? 
                    0.0f : 
                     (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <3.5f ? 
                        0.9988703f : 
                        0.93255514f)) : 
                 (data[14 /* 13_letter_word */] <0.07421875f ? 
                    1.0f : 
                    0.0f)) : 
             (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <4.5f ? 
                 (data[5 /* 4_letter_word */] <0.42410278f ? 
                     (data[10 /* 9_letter_word */] <0.0390625f ? 
                        0.693f : 
                        0.055741828f) : 
                     (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.046875f ? 
                        0.8647721f : 
                        0.109375f)) : 
                 (Double.isNaN(data[14]) || data[14 /* 13_letter_word */] <0.0625f ? 
                     (data[2 /* no_of_characters */] <250.5f ? 
                        1.0f : 
                        0.0f) : 
                    0.0f))));
    return pred;
  } // constant pool size = 86B, number of visited nodes = 21, static init size = 0B
}

class log_drf_1_Tree_36_class_26 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* no_of_characters */] <57.5f ? 
         (data[5 /* 4_letter_word */] <0.5f ? 
            0.0f : 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <29.5f ? 
                0.9976019f : 
                0.0f)) : 
        0.0f);
    return pred;
  } // constant pool size = 14B, number of visited nodes = 3, static init size = 0B
}

class log_drf_1_Tree_36_class_27 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <256.5f ? 
        0.0f : 
         (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.4951172f ? 
            0.0f : 
             (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.5148392f ? 
                 (data[0 /* vlan */] <18.5f ? 
                     (data[2 /* no_of_characters */] <280.5f ? 
                        1.0f : 
                        0.0f) : 
                    0.0f) : 
                0.0f)));
    return pred;
  } // constant pool size = 22B, number of visited nodes = 5, static init size = 0B
}

class log_drf_1_Tree_36_class_28 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <5.5f ? 
         (data[0 /* vlan */] <17.5f ? 
             (data[1 /* type_of_time */] <4.5f ? 
                0.0f : 
                 (data[8 /* 7_letter_word */] <0.0390625f ? 
                     (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <3.0f ? 
                        0.0f : 
                        1.0f) : 
                    0.0f)) : 
            0.0f) : 
         (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.4638672f ? 
             (data[2 /* no_of_characters */] <449.5f ? 
                0.8f : 
                1.0f) : 
             (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.41601562f ? 
                1.0f : 
                0.0f)));
    return pred;
  } // constant pool size = 34B, number of visited nodes = 8, static init size = 0B
}

class log_drf_1_Tree_36_class_29 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <957.5f ? 
         (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.6904297f ? 
            0.0f : 
             (data[1 /* type_of_time */] <4.5f ? 
                0.0f : 
                 (data[5 /* 4_letter_word */] <0.7315445f ? 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.025390625f ? 
                        0.0f : 
                        1.0f) : 
                     (data[5 /* 4_letter_word */] <0.8993292f ? 
                        0.010928961f : 
                        0.0f)))) : 
         (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.0087890625f ? 
            0.0f : 
             (data[2 /* no_of_characters */] <992.0f ? 
                1.0f : 
                0.0f)));
    return pred;
  } // constant pool size = 34B, number of visited nodes = 8, static init size = 0B
}

class log_drf_1_Tree_36_class_30 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <2.5f ? 
         (Double.isNaN(data[0]) || data[0 /* vlan */] <177.5f ? 
            0.0f : 
             (data[1 /* type_of_time */] <2.5f ? 
                1.0f : 
                0.0f)) : 
         (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.22460938f ? 
            0.0f : 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <173.5f ? 
                0.0f : 
                 (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <3.5f ? 
                     (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.19791667f ? 
                        0.36923078f : 
                        1.0f) : 
                    0.0f))));
    return pred;
  } // constant pool size = 30B, number of visited nodes = 7, static init size = 0B
}

class log_drf_1_Tree_36_class_31 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* no_of_characters */] <113.5f ? 
         (Double.isNaN(data[0]) || data[0 /* vlan */] <64.5f ? 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <34.5f ? 
                0.0f : 
                 (data[0 /* vlan */] <38.5f ? 
                     (data[5 /* 4_letter_word */] <0.265625f ? 
                        0.0f : 
                        0.8666667f) : 
                    0.0f)) : 
             (data[0 /* vlan */] <110.0f ? 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.265625f ? 
                     (data[8 /* 7_letter_word */] <0.3671875f ? 
                        0.94174755f : 
                        0.98445594f) : 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <90.5f ? 
                        0.95327103f : 
                        0.328125f)) : 
                0.0f)) : 
         (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.23535156f ? 
             (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.1171875f ? 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <295.5f ? 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <239.5f ? 
                        9.4829105E-5f : 
                        4.973887E-4f) : 
                     (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.078125f ? 
                        0.0012547051f : 
                        0.02739726f)) : 
                 (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.1171875f ? 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.703125f ? 
                        0.0022229115f : 
                        0.21875f) : 
                     (data[2 /* no_of_characters */] <132.5f ? 
                        0.27210885f : 
                        0.0f))) : 
             (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.29101562f ? 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <159.5f ? 
                    0.0f : 
                     (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.125f ? 
                        0.0f : 
                        0.96875f)) : 
                 (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.0625f ? 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.171875f ? 
                        0.0f : 
                        0.6797386f) : 
                    0.0f))));
    return pred;
  } // constant pool size = 90B, number of visited nodes = 22, static init size = 0B
}

class log_drf_1_Tree_36_class_32 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* no_of_characters */] <123.5f ? 
         (Double.isNaN(data[0]) || data[0 /* vlan */] <29.5f ? 
             (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.22460938f ? 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.4140625f ? 
                     (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                        0.0038345435f : 
                        0.2200957f) : 
                     (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                        0.0f : 
                        0.962963f)) : 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.125f ? 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <28.0f ? 
                        0.0f : 
                        1.0f) : 
                    0.0f)) : 
            0.0f) : 
        0.0f);
    return pred;
  } // constant pool size = 34B, number of visited nodes = 8, static init size = 0B
}

class log_drf_1_Tree_36_class_33 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* no_of_characters */] <69.5f ? 
         (data[0 /* vlan */] <10.5f ? 
             (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.125f ? 
                1.0f : 
                 (data[8 /* 7_letter_word */] <0.125f ? 
                    1.0f : 
                    0.0f)) : 
             (data[2 /* no_of_characters */] <40.5f ? 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <37.0f ? 
                    0.0f : 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <38.5f ? 
                        0.5714286f : 
                        0.0f)) : 
                0.0f)) : 
         (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.40820312f ? 
             (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.2421875f ? 
                 (data[2 /* no_of_characters */] <107.5f ? 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.25193787f ? 
                        7.5091183E-4f : 
                        0.008333334f) : 
                    0.0f) : 
                 (data[1 /* type_of_time */] <4.5f ? 
                    0.0f : 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <65.5f ? 
                        3.0957835E-4f : 
                        0.010964912f))) : 
             (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.08984375f ? 
                 (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.1015625f ? 
                     (data[0 /* vlan */] <17.5f ? 
                        0.04271632f : 
                        6.4467604E-4f) : 
                    0.0f) : 
                 (data[0 /* vlan */] <17.5f ? 
                     (data[8 /* 7_letter_word */] <0.078125f ? 
                        0.07692308f : 
                        0.93333334f) : 
                     (data[7 /* 6_letter_word */] <0.18276978f ? 
                        0.0037037036f : 
                        0.0f)))));
    return pred;
  } // constant pool size = 78B, number of visited nodes = 19, static init size = 0B
}

class log_drf_1_Tree_36_class_34 {
  static final double score0(double[] data) {
    double pred =     1.0E-5f;
    return pred;
  } // constant pool size = 2B, number of visited nodes = 0, static init size = 0B
}

class log_drf_1_Tree_36_class_35 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* no_of_characters */] <88.5f ? 
         (data[0 /* vlan */] <18.5f ? 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <11.5f ? 
                0.0f : 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <85.0f ? 
                     (data[5 /* 4_letter_word */] <0.203125f ? 
                        0.3846154f : 
                        0.0f) : 
                     (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.171875f ? 
                        0.16666667f : 
                        1.0f))) : 
            0.0f) : 
         (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.53808594f ? 
             (data[0 /* vlan */] <13.5f ? 
                 (data[7 /* 6_letter_word */] <0.046875f ? 
                     (Double.isNaN(data[1]) || data[1 /* type_of_time */] <3.5f ? 
                        0.0f : 
                        0.11764706f) : 
                    0.0f) : 
                 (data[2 /* no_of_characters */] <135.5f ? 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.4453125f ? 
                        1.8103643E-4f : 
                        8.2850043E-4f) : 
                    1.2833841E-5f)) : 
             (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.25976562f ? 
                 (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.3828125f ? 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.2243042f ? 
                        0.0f : 
                        0.0011248594f) : 
                     (data[5 /* 4_letter_word */] <0.5849991f ? 
                        0.0f : 
                        0.020408163f)) : 
                0.00390625f)));
    return pred;
  } // constant pool size = 66B, number of visited nodes = 16, static init size = 0B
}

class log_drf_1_Tree_36_class_36 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.1616211f ? 
        0.0f : 
         (data[0 /* vlan */] <5.5f ? 
             (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.375f ? 
                0.0f : 
                0.8333333f) : 
            0.0f));
    return pred;
  } // constant pool size = 14B, number of visited nodes = 3, static init size = 0B
}

class log_drf_1_Tree_36_class_37 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* no_of_characters */] <164.5f ? 
         (Double.isNaN(data[0]) || data[0 /* vlan */] <156.5f ? 
             (data[1 /* type_of_time */] <4.5f ? 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <116.0f ? 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.7421875f ? 
                        0.9989501f : 
                        0.8f) : 
                    0.0f) : 
                 (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <2.5f ? 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.3125f ? 
                        0.0f : 
                        2.283105E-4f) : 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.3671875f ? 
                        0.0f : 
                        0.0011007155f))) : 
             (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.22460938f ? 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <137.0f ? 
                     (data[2 /* no_of_characters */] <35.0f ? 
                        0.0f : 
                        0.9873177f) : 
                     (data[3 /* no_of_ips */] <0.5f ? 
                        0.9045454f : 
                        6.184292E-4f)) : 
                 (data[1 /* type_of_time */] <3.5f ? 
                    0.0f : 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.4453125f ? 
                        0.9979508f : 
                        0.98717946f)))) : 
         (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.3486328f ? 
             (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <243.5f ? 
                     (data[0 /* vlan */] <154.5f ? 
                        0.30938864f : 
                        0.99812025f) : 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <389.5f ? 
                        0.7080859f : 
                        0.11388889f)) : 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <154.5f ? 
                    0.0f : 
                     (Double.isNaN(data[1]) || data[1 /* type_of_time */] <3.5f ? 
                        0.0f : 
                        0.2f))) : 
             (data[3 /* no_of_ips */] <2.5f ? 
                 (data[1 /* type_of_time */] <4.5f ? 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.4453125f ? 
                        1.0f : 
                        0.99435025f) : 
                    0.0f) : 
                0.0f)));
    return pred;
  } // constant pool size = 98B, number of visited nodes = 24, static init size = 0B
}

class log_drf_1_Tree_36_class_38 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* no_of_characters */] <93.5f ? 
         (Double.isNaN(data[0]) || data[0 /* vlan */] <85.5f ? 
            0.0f : 
             (data[0 /* vlan */] <110.0f ? 
                 (Double.isNaN(data[13]) || data[13 /* 12_letter_word */] <0.25f ? 
                     (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                        0.0f : 
                        0.08695652f) : 
                    0.0f) : 
                0.0f)) : 
        0.0f);
    return pred;
  } // constant pool size = 22B, number of visited nodes = 5, static init size = 0B
}


class log_drf_1_Forest_37 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += log_drf_1_Tree_37_class_0.score0(fdata);
    preds[2] += log_drf_1_Tree_37_class_1.score0(fdata);
    preds[3] += log_drf_1_Tree_37_class_2.score0(fdata);
    preds[4] += log_drf_1_Tree_37_class_3.score0(fdata);
    preds[5] += log_drf_1_Tree_37_class_4.score0(fdata);
    preds[6] += log_drf_1_Tree_37_class_5.score0(fdata);
    preds[7] += log_drf_1_Tree_37_class_6.score0(fdata);
    preds[8] += log_drf_1_Tree_37_class_7.score0(fdata);
    preds[9] += log_drf_1_Tree_37_class_8.score0(fdata);
    preds[10] += log_drf_1_Tree_37_class_9.score0(fdata);
    preds[11] += log_drf_1_Tree_37_class_10.score0(fdata);
    preds[12] += log_drf_1_Tree_37_class_11.score0(fdata);
    preds[13] += log_drf_1_Tree_37_class_12.score0(fdata);
    preds[14] += log_drf_1_Tree_37_class_13.score0(fdata);
    preds[15] += log_drf_1_Tree_37_class_14.score0(fdata);
    preds[16] += log_drf_1_Tree_37_class_15.score0(fdata);
    preds[17] += log_drf_1_Tree_37_class_16.score0(fdata);
    preds[18] += log_drf_1_Tree_37_class_17.score0(fdata);
    preds[19] += log_drf_1_Tree_37_class_18.score0(fdata);
    preds[20] += log_drf_1_Tree_37_class_19.score0(fdata);
    preds[21] += log_drf_1_Tree_37_class_20.score0(fdata);
    preds[22] += log_drf_1_Tree_37_class_21.score0(fdata);
    preds[23] += log_drf_1_Tree_37_class_22.score0(fdata);
    preds[24] += log_drf_1_Tree_37_class_23.score0(fdata);
    preds[25] += log_drf_1_Tree_37_class_24.score0(fdata);
    preds[26] += log_drf_1_Tree_37_class_25.score0(fdata);
    preds[27] += log_drf_1_Tree_37_class_26.score0(fdata);
    preds[28] += log_drf_1_Tree_37_class_27.score0(fdata);
    preds[29] += log_drf_1_Tree_37_class_28.score0(fdata);
    preds[30] += log_drf_1_Tree_37_class_29.score0(fdata);
    preds[31] += log_drf_1_Tree_37_class_30.score0(fdata);
    preds[32] += log_drf_1_Tree_37_class_31.score0(fdata);
    preds[33] += log_drf_1_Tree_37_class_32.score0(fdata);
    preds[34] += log_drf_1_Tree_37_class_33.score0(fdata);
    preds[35] += log_drf_1_Tree_37_class_34.score0(fdata);
    preds[36] += log_drf_1_Tree_37_class_35.score0(fdata);
    preds[37] += log_drf_1_Tree_37_class_36.score0(fdata);
    preds[38] += log_drf_1_Tree_37_class_37.score0(fdata);
    preds[39] += log_drf_1_Tree_37_class_38.score0(fdata);
  }
}
class log_drf_1_Tree_37_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <1040.0f ? 
         (Double.isNaN(data[4]) || data[4 /* no_of_macs */] <0.5f ? 
            0.0f : 
             (data[3 /* no_of_ips */] <0.5f ? 
                1.0f : 
                0.0f)) : 
         (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.23339844f ? 
            1.0f : 
            0.0f));
    return pred;
  } // constant pool size = 18B, number of visited nodes = 4, static init size = 0B
}

class log_drf_1_Tree_37_class_1 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <261.5f ? 
         (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.045898438f ? 
             (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                0.0f : 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.234375f ? 
                    0.0f : 
                     (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <1.5f ? 
                        0.004385965f : 
                        0.0f))) : 
            0.0f) : 
         (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.31640625f ? 
             (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.2793274f ? 
                0.0f : 
                 (data[6 /* 5_letter_word */] <0.171875f ? 
                     (data[7 /* 6_letter_word */] <0.0546875f ? 
                        0.8333333f : 
                        0.0f) : 
                    0.0f)) : 
             (data[0 /* vlan */] <156.0f ? 
                 (Double.isNaN(data[14]) || data[14 /* 13_letter_word */] <0.0859375f ? 
                     (data[6 /* 5_letter_word */] <0.15625f ? 
                        0.0f : 
                        0.9897611f) : 
                    0.0f) : 
                0.0f)));
    return pred;
  } // constant pool size = 50B, number of visited nodes = 12, static init size = 0B
}

class log_drf_1_Tree_37_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.49560547f ? 
         (Double.isNaN(data[4]) || data[4 /* no_of_macs */] <3.0f ? 
             (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.73046875f ? 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.3515625f ? 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <129.5f ? 
                        0.0f : 
                        0.0052458136f) : 
                    2.6515352E-5f) : 
                0.0614182f) : 
            0.5f) : 
         (Double.isNaN(data[0]) || data[0 /* vlan */] <181.5f ? 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <137.5f ? 
                0.0f : 
                 (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.55859375f ? 
                     (data[0 /* vlan */] <142.0f ? 
                        1.0f : 
                        0.0f) : 
                     (data[2 /* no_of_characters */] <160.5f ? 
                        0.5848564f : 
                        0.0f))) : 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <185.5f ? 
                 (data[7 /* 6_letter_word */] <0.25f ? 
                    0.0f : 
                    1.0f) : 
                0.0f)));
    return pred;
  } // constant pool size = 50B, number of visited nodes = 12, static init size = 0B
}

class log_drf_1_Tree_37_class_3 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.39208984f ? 
         (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.013671875f ? 
             (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.1171875f ? 
                 (data[8 /* 7_letter_word */] <0.046875f ? 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <122.0f ? 
                        0.0f : 
                        0.0011129661f) : 
                    0.0f) : 
                 (Double.isNaN(data[14]) || data[14 /* 13_letter_word */] <0.0625f ? 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <280.5f ? 
                        0.0f : 
                        0.28752887f) : 
                    0.0f)) : 
             (data[8 /* 7_letter_word */] <0.25976562f ? 
                 (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <140.5f ? 
                        0.0f : 
                        4.5024764E-4f) : 
                    0.0f) : 
                0.0f)) : 
         (data[0 /* vlan */] <29.5f ? 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <28.0f ? 
                0.0f : 
                 (data[6 /* 5_letter_word */] <0.125f ? 
                    0.0f : 
                    1.0f)) : 
             (data[0 /* vlan */] <156.5f ? 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <142.0f ? 
                    0.0f : 
                     (data[2 /* no_of_characters */] <260.5f ? 
                        0.33333334f : 
                        0.0f)) : 
                0.0f)));
    return pred;
  } // constant pool size = 66B, number of visited nodes = 16, static init size = 0B
}

class log_drf_1_Tree_37_class_4 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* no_of_characters */] <113.5f ? 
         (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.10058594f ? 
             (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.2890625f ? 
                     (data[1 /* type_of_time */] <4.5f ? 
                        0.0f : 
                        3.6330608E-4f) : 
                     (data[8 /* 7_letter_word */] <0.3612671f ? 
                        0.04859813f : 
                        0.0f)) : 
                0.0f) : 
             (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.1015625f ? 
                 (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.1015625f ? 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.125f ? 
                        9.587728E-4f : 
                        0.0f) : 
                    0.0f) : 
                0.0f)) : 
         (data[0 /* vlan */] <27.5f ? 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <26.0f ? 
                0.0f : 
                 (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.07421875f ? 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.21875f ? 
                        0.0067114094f : 
                        0.13559322f) : 
                    0.0f)) : 
            0.0f));
    return pred;
  } // constant pool size = 54B, number of visited nodes = 13, static init size = 0B
}

class log_drf_1_Tree_37_class_5 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.27929688f ? 
         (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.22460938f ? 
            0.0f : 
             (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.41601562f ? 
                0.0f : 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <61.5f ? 
                    0.0f : 
                     (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
                        0.0f : 
                        0.25f)))) : 
         (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.095703125f ? 
             (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
                0.0f : 
                 (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.2578125f ? 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.15509033f ? 
                        7.564296E-4f : 
                        0.005882353f) : 
                    0.0f)) : 
             (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.07421875f ? 
                 (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.08203125f ? 
                     (data[3 /* no_of_ips */] <0.5f ? 
                        7.7429344E-4f : 
                        0.0f) : 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <300.5f ? 
                        0.0015673981f : 
                        0.09090909f)) : 
                 (data[3 /* no_of_ips */] <0.5f ? 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.1953125f ? 
                        0.082474224f : 
                        0.9f) : 
                    0.0f))));
    return pred;
  } // constant pool size = 62B, number of visited nodes = 15, static init size = 0B
}

class log_drf_1_Tree_37_class_6 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* no_of_characters */] <98.5f ? 
         (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.10058594f ? 
             (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.26757812f ? 
                 (data[0 /* vlan */] <17.5f ? 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.125f ? 
                        0.2962963f : 
                        0.0f) : 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <33.5f ? 
                        0.0f : 
                        0.0034722222f)) : 
                 (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.14453125f ? 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <113.5f ? 
                        0.021406727f : 
                        0.4347826f) : 
                     (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                        0.9183673f : 
                        0.0f))) : 
             (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.1015625f ? 
                 (data[9 /* 8_letter_word */] <0.4167862f ? 
                     (data[2 /* no_of_characters */] <89.5f ? 
                        0.0f : 
                        1.0f) : 
                     (data[2 /* no_of_characters */] <79.5f ? 
                        0.93333334f : 
                        0.005965463f)) : 
                0.0f)) : 
         (data[8 /* 7_letter_word */] <0.2607422f ? 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <125.5f ? 
                0.0f : 
                 (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.31640625f ? 
                    0.0f : 
                     (data[2 /* no_of_characters */] <117.5f ? 
                        0.26984128f : 
                        0.0f))) : 
            0.0f));
    return pred;
  } // constant pool size = 70B, number of visited nodes = 17, static init size = 0B
}

class log_drf_1_Tree_37_class_7 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.94970703f ? 
        0.0f : 
         (Double.isNaN(data[4]) || data[4 /* no_of_macs */] <0.5f ? 
            0.025028076f : 
            0.0f));
    return pred;
  } // constant pool size = 10B, number of visited nodes = 2, static init size = 0B
}

class log_drf_1_Tree_37_class_8 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <900.5f ? 
        3.5100387E-5f : 
         (data[0 /* vlan */] <173.5f ? 
            0.0f : 
             (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <3.5f ? 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <181.5f ? 
                    1.0f : 
                    0.0f) : 
                 (data[2 /* no_of_characters */] <1017.5f ? 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.4140625f ? 
                        0.0f : 
                        0.041666668f) : 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.515625f ? 
                        0.0125f : 
                        0.8333333f)))));
    return pred;
  } // constant pool size = 30B, number of visited nodes = 7, static init size = 0B
}

class log_drf_1_Tree_37_class_9 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.19335938f ? 
         (Double.isNaN(data[4]) || data[4 /* no_of_macs */] <0.5f ? 
             (data[1 /* type_of_time */] <3.5f ? 
                 (data[5 /* 4_letter_word */] <0.07421875f ? 
                     (data[3 /* no_of_ips */] <2.0f ? 
                        0.0f : 
                        1.0f) : 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.21875f ? 
                        0.39114392f : 
                        0.0f)) : 
                0.0f) : 
            0.0f) : 
         (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.29101562f ? 
             (data[1 /* type_of_time */] <3.5f ? 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.29003906f ? 
                     (data[1 /* type_of_time */] <2.5f ? 
                        0.0f : 
                        1.0f) : 
                    0.0f) : 
                0.0f) : 
             (data[3 /* no_of_ips */] <2.5f ? 
                0.0f : 
                1.0f)));
    return pred;
  } // constant pool size = 46B, number of visited nodes = 11, static init size = 0B
}

class log_drf_1_Tree_37_class_10 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* no_of_characters */] <92.5f ? 
         (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.10058594f ? 
             (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                0.0f : 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <158.5f ? 
                    0.0f : 
                     (data[8 /* 7_letter_word */] <0.3359375f ? 
                        0.0f : 
                        0.8f))) : 
            0.0f) : 
         (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.4716797f ? 
            0.0f : 
             (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.41601562f ? 
                0.0f : 
                 (data[0 /* vlan */] <98.0f ? 
                    0.0f : 
                     (data[2 /* no_of_characters */] <167.5f ? 
                        0.014925373f : 
                        0.0f)))));
    return pred;
  } // constant pool size = 38B, number of visited nodes = 9, static init size = 0B
}

class log_drf_1_Tree_37_class_11 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.14111328f ? 
        0.0f : 
        2.21283E-5f);
    return pred;
  } // constant pool size = 6B, number of visited nodes = 1, static init size = 0B
}

class log_drf_1_Tree_37_class_12 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <529.5f ? 
         (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.5830078f ? 
             (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.9277344f ? 
                0.0f : 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <589.0f ? 
                    0.0f : 
                    0.9444444f)) : 
             (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                0.0f : 
                 (data[9 /* 8_letter_word */] <0.8322258f ? 
                    1.0f : 
                    0.0f))) : 
         (Double.isNaN(data[0]) || data[0 /* vlan */] <590.5f ? 
            0.0f : 
            1.0f));
    return pred;
  } // constant pool size = 30B, number of visited nodes = 7, static init size = 0B
}

class log_drf_1_Tree_37_class_13 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* no_of_characters */] <54.0f ? 
         (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.29101562f ? 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <27.5f ? 
                1.0f : 
                 (data[8 /* 7_letter_word */] <0.125f ? 
                     (data[2 /* no_of_characters */] <36.5f ? 
                        0.33333334f : 
                        0.0f) : 
                     (data[6 /* 5_letter_word */] <0.125f ? 
                        0.22222222f : 
                        1.0f))) : 
            0.0f) : 
         (Double.isNaN(data[0]) || data[0 /* vlan */] <593.5f ? 
             (data[8 /* 7_letter_word */] <0.20703125f ? 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.19247437f ? 
                    0.0f : 
                     (data[0 /* vlan */] <20.5f ? 
                        0.039274924f : 
                        0.0011428571f)) : 
                0.0f) : 
             (data[3 /* no_of_ips */] <0.5f ? 
                1.0f : 
                 (data[9 /* 8_letter_word */] <0.1015625f ? 
                    0.0f : 
                    0.071428575f))));
    return pred;
  } // constant pool size = 50B, number of visited nodes = 12, static init size = 0B
}

class log_drf_1_Tree_37_class_14 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <215.5f ? 
        1.7675027E-5f : 
         (data[0 /* vlan */] <27.5f ? 
             (data[1 /* type_of_time */] <3.0f ? 
                 (data[2 /* no_of_characters */] <224.5f ? 
                    1.0f : 
                    0.0f) : 
                0.0f) : 
            0.0f));
    return pred;
  } // constant pool size = 18B, number of visited nodes = 4, static init size = 0B
}

class log_drf_1_Tree_37_class_15 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.94970703f ? 
         (Double.isNaN(data[15]) || data[15 /* 14_letter_word */] <0.10546875f ? 
             (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.59375f ? 
                 (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.30859375f ? 
                     (data[0 /* vlan */] <146.5f ? 
                        0.0015144799f : 
                        0.0f) : 
                     (data[3 /* no_of_ips */] <0.5f ? 
                        0.13154362f : 
                        0.0f)) : 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.18359375f ? 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <360.5f ? 
                        0.013019529f : 
                        0.63380283f) : 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <200.5f ? 
                        0.0f : 
                        1.0f))) : 
             (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                 (data[15 /* 14_letter_word */] <0.12704468f ? 
                    0.10294118f : 
                    0.0f) : 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.32421875f ? 
                    0.14285715f : 
                    0.0f))) : 
         (data[0 /* vlan */] <28.5f ? 
            0.0f : 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <30.5f ? 
                0.08187251f : 
                0.0f)));
    return pred;
  } // constant pool size = 58B, number of visited nodes = 14, static init size = 0B
}

class log_drf_1_Tree_37_class_16 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* no_of_characters */] <84.5f ? 
         (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.10058594f ? 
             (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.83203125f ? 
                0.0f : 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <77.0f ? 
                    0.0f : 
                     (data[2 /* no_of_characters */] <81.0f ? 
                        0.6666667f : 
                        0.0f))) : 
            0.0f) : 
         (data[0 /* vlan */] <83.5f ? 
             (data[3 /* no_of_ips */] <0.5f ? 
                 (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.15625f ? 
                    0.0f : 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.46875f ? 
                        3.719892E-4f : 
                        0.004889976f)) : 
                0.0f) : 
            0.0f));
    return pred;
  } // constant pool size = 38B, number of visited nodes = 9, static init size = 0B
}

class log_drf_1_Tree_37_class_17 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <659.0f ? 
        5.020912E-6f : 
         (data[0 /* vlan */] <173.5f ? 
             (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.25585938f ? 
                0.0f : 
                1.0f) : 
             (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <3.5f ? 
                 (data[2 /* no_of_characters */] <886.0f ? 
                     (data[2 /* no_of_characters */] <676.5f ? 
                        0.9807692f : 
                        1.0f) : 
                    0.0f) : 
                 (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.51953125f ? 
                     (data[2 /* no_of_characters */] <1013.5f ? 
                        0.95652175f : 
                        0.9913793f) : 
                     (data[8 /* 7_letter_word */] <0.04296875f ? 
                        0.5f : 
                        0.0f)))));
    return pred;
  } // constant pool size = 38B, number of visited nodes = 9, static init size = 0B
}

class log_drf_1_Tree_37_class_18 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <330.5f ? 
        0.0f : 
         (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.07519531f ? 
            0.0f : 
             (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.068359375f ? 
                0.0f : 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.2826287f ? 
                    0.0f : 
                     (data[8 /* 7_letter_word */] <0.1618449f ? 
                        0.33333334f : 
                        0.0f)))));
    return pred;
  } // constant pool size = 22B, number of visited nodes = 5, static init size = 0B
}

class log_drf_1_Tree_37_class_19 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.24023438f ? 
         (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.19167137f ? 
            0.0f : 
             (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.15039062f ? 
                0.0f : 
                 (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.1015625f ? 
                    0.0f : 
                     (data[5 /* 4_letter_word */] <0.30015868f ? 
                        0.6666667f : 
                        0.0f)))) : 
         (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.22460938f ? 
            0.0f : 
             (data[1 /* type_of_time */] <4.5f ? 
                0.0f : 
                 (data[5 /* 4_letter_word */] <0.125f ? 
                    0.0f : 
                     (data[3 /* no_of_ips */] <0.5f ? 
                        0.0f : 
                        0.9170068f)))));
    return pred;
  } // constant pool size = 38B, number of visited nodes = 9, static init size = 0B
}

class log_drf_1_Tree_37_class_20 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* no_of_characters */] <134.5f ? 
         (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.29101562f ? 
             (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                 (data[1 /* type_of_time */] <4.5f ? 
                    0.0f : 
                     (data[2 /* no_of_characters */] <68.0f ? 
                        0.0f : 
                        0.84859157f)) : 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.30859375f ? 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.8671875f ? 
                        1.2040939E-4f : 
                        0.053436458f) : 
                     (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.171875f ? 
                        0.5803213f : 
                        1.0f))) : 
             (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                 (data[1 /* type_of_time */] <4.5f ? 
                    0.0f : 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <33.5f ? 
                        0.99163085f : 
                        0.0f)) : 
                0.0f)) : 
         (data[0 /* vlan */] <23.5f ? 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <17.0f ? 
                0.0f : 
                 (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.64453125f ? 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <313.5f ? 
                        0.9995976f : 
                        0.98734176f) : 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.2890625f ? 
                        1.0f : 
                        0.95454544f))) : 
            0.0f));
    return pred;
  } // constant pool size = 66B, number of visited nodes = 16, static init size = 0B
}

class log_drf_1_Tree_37_class_21 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <220.5f ? 
         (Double.isNaN(data[13]) || data[13 /* 12_letter_word */] <0.171875f ? 
             (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.18359375f ? 
                 (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.046875f ? 
                     (data[0 /* vlan */] <17.5f ? 
                        0.007923033f : 
                        0.0010250206f) : 
                     (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                        4.8359798E-4f : 
                        0.0f)) : 
                 (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.05859375f ? 
                    0.0f : 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.5f ? 
                        0.006672227f : 
                        1.0f))) : 
             (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.3671875f ? 
                 (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.125f ? 
                    0.0f : 
                     (data[0 /* vlan */] <130.0f ? 
                        0.0f : 
                        0.015625f)) : 
                0.045454547f)) : 
         (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.22460938f ? 
             (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.16015625f ? 
                 (data[0 /* vlan */] <34.5f ? 
                     (data[0 /* vlan */] <12.5f ? 
                        0.27450982f : 
                        2.8372818E-4f) : 
                     (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.1328125f ? 
                        0.0062359693f : 
                        0.04054054f)) : 
                 (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                     (data[10 /* 9_letter_word */] <0.17398071f ? 
                        0.71875f : 
                        0.0f) : 
                    0.0f)) : 
             (data[0 /* vlan */] <112.5f ? 
                 (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.0f ? 
                    1.0f : 
                    0.0f) : 
                0.0f)));
    return pred;
  } // constant pool size = 82B, number of visited nodes = 20, static init size = 0B
}

class log_drf_1_Tree_37_class_22 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.49560547f ? 
         (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.16015625f ? 
            0.0f : 
             (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                0.0f : 
                 (data[0 /* vlan */] <25.5f ? 
                     (data[5 /* 4_letter_word */] <0.18198013f ? 
                        0.01724138f : 
                        0.0f) : 
                    0.0f))) : 
         (data[0 /* vlan */] <7.5f ? 
             (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.083984375f ? 
                0.0f : 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <130.5f ? 
                    0.0f : 
                    0.25f)) : 
             (data[0 /* vlan */] <23.5f ? 
                 (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.04296875f ? 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.3203125f ? 
                        0.0f : 
                        0.00397878f) : 
                    0.0f) : 
                0.0f)));
    return pred;
  } // constant pool size = 46B, number of visited nodes = 11, static init size = 0B
}

class log_drf_1_Tree_37_class_23 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.5830078f ? 
         (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.14062786f ? 
             (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.64453125f ? 
                 (data[0 /* vlan */] <17.5f ? 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.4609375f ? 
                        0.0010718113f : 
                        0.0927835f) : 
                    0.0f) : 
                 (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.07421875f ? 
                     (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.171875f ? 
                        0.0f : 
                        1.0f) : 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.8028259f ? 
                        0.118421055f : 
                        0.6666667f))) : 
             (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
                0.0f : 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <250.5f ? 
                     (data[0 /* vlan */] <17.5f ? 
                        0.024479805f : 
                        0.0f) : 
                     (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                        0.86583334f : 
                        0.0f)))) : 
         (Double.isNaN(data[0]) || data[0 /* vlan */] <18.5f ? 
             (data[1 /* type_of_time */] <3.5f ? 
                0.0f : 
                 (data[9 /* 8_letter_word */] <0.8322258f ? 
                    1.0f : 
                     (data[2 /* no_of_characters */] <120.5f ? 
                        0.0f : 
                        1.0f))) : 
            0.0f));
    return pred;
  } // constant pool size = 66B, number of visited nodes = 16, static init size = 0B
}

class log_drf_1_Tree_37_class_24 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* no_of_characters */] <144.5f ? 
         (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.055664062f ? 
             (data[0 /* vlan */] <13.5f ? 
                 (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                    0.0f : 
                    1.0f) : 
                0.0f) : 
            0.0f) : 
        0.0f);
    return pred;
  } // constant pool size = 18B, number of visited nodes = 4, static init size = 0B
}

class log_drf_1_Tree_37_class_25 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.94970703f ? 
         (Double.isNaN(data[4]) || data[4 /* no_of_macs */] <0.5f ? 
             (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
                0.0f : 
                 (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.44140625f ? 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <160.5f ? 
                        0.11952023f : 
                        0.30598903f) : 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.5505066f ? 
                        0.7410143f : 
                        0.01086351f))) : 
             (data[3 /* no_of_ips */] <1.5f ? 
                0.0f : 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.22265625f ? 
                    1.0f : 
                     (Double.isNaN(data[4]) || data[4 /* no_of_macs */] <1.5f ? 
                        1.0f : 
                        0.5f)))) : 
         (data[0 /* vlan */] <28.5f ? 
            0.0f : 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <62.5f ? 
                0.92242336f : 
                0.0f)));
    return pred;
  } // constant pool size = 46B, number of visited nodes = 11, static init size = 0B
}

class log_drf_1_Tree_37_class_26 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* no_of_characters */] <57.5f ? 
         (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.125f ? 
             (data[8 /* 7_letter_word */] <0.16796875f ? 
                0.0f : 
                 (data[2 /* no_of_characters */] <52.5f ? 
                    0.0f : 
                     (data[2 /* no_of_characters */] <55.5f ? 
                        1.0f : 
                        0.9949875f))) : 
            0.0f) : 
        0.0f);
    return pred;
  } // constant pool size = 22B, number of visited nodes = 5, static init size = 0B
}

class log_drf_1_Tree_37_class_27 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <256.5f ? 
        0.0f : 
         (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.013671875f ? 
             (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.23828125f ? 
                0.0f : 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.22265625f ? 
                    0.0f : 
                     (data[8 /* 7_letter_word */] <0.26208496f ? 
                        0.04761905f : 
                        0.0f))) : 
            0.0f));
    return pred;
  } // constant pool size = 22B, number of visited nodes = 5, static init size = 0B
}

class log_drf_1_Tree_37_class_28 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <447.5f ? 
        0.0f : 
         (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.29101562f ? 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <19.5f ? 
                 (data[3 /* no_of_ips */] <2.5f ? 
                    0.0f : 
                    1.0f) : 
                0.0f) : 
             (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <5.0f ? 
                0.0f : 
                1.0f)));
    return pred;
  } // constant pool size = 22B, number of visited nodes = 5, static init size = 0B
}

class log_drf_1_Tree_37_class_29 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <957.5f ? 
        2.0032552E-5f : 
         (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.0390625f ? 
             (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.008773804f ? 
                0.0f : 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <114.5f ? 
                    0.0f : 
                    0.5f)) : 
             (Double.isNaN(data[13]) || data[13 /* 12_letter_word */] <0.009765625f ? 
                1.0f : 
                0.0f)));
    return pred;
  } // constant pool size = 22B, number of visited nodes = 5, static init size = 0B
}

class log_drf_1_Tree_37_class_30 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <219.5f ? 
         (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.05078125f ? 
             (data[1 /* type_of_time */] <1.5f ? 
                1.0f : 
                0.0f) : 
            0.0f) : 
         (Double.isNaN(data[0]) || data[0 /* vlan */] <173.5f ? 
            0.0f : 
             (data[1 /* type_of_time */] <2.5f ? 
                1.0f : 
                0.0f)));
    return pred;
  } // constant pool size = 22B, number of visited nodes = 5, static init size = 0B
}

class log_drf_1_Tree_37_class_31 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[15]) || data[15 /* 14_letter_word */] <0.22485352f ? 
         (Double.isNaN(data[13]) || data[13 /* 12_letter_word */] <0.23535156f ? 
             (data[1 /* type_of_time */] <4.5f ? 
                0.0f : 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.38671875f ? 
                     (data[2 /* no_of_characters */] <130.5f ? 
                        0.015786069f : 
                        0.0028308972f) : 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.1328125f ? 
                        0.052172225f : 
                        0.15752742f))) : 
             (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
                0.0f : 
                 (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.07421875f ? 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.4140625f ? 
                        0.64705884f : 
                        0.96875f) : 
                    0.0f))) : 
         (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.37402344f ? 
            0.91549295f : 
            0.0f));
    return pred;
  } // constant pool size = 42B, number of visited nodes = 10, static init size = 0B
}

class log_drf_1_Tree_37_class_32 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* no_of_characters */] <123.5f ? 
         (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.29101562f ? 
             (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.20703125f ? 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.44921875f ? 
                     (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.4140625f ? 
                        0.0f : 
                        0.2804878f) : 
                     (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.1015625f ? 
                        0.02015355f : 
                        0.9361702f)) : 
                 (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                    0.0f : 
                     (data[5 /* 4_letter_word */] <0.2890625f ? 
                        0.75641024f : 
                        0.0f))) : 
            0.0f) : 
        0.0f);
    return pred;
  } // constant pool size = 34B, number of visited nodes = 8, static init size = 0B
}

class log_drf_1_Tree_37_class_33 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* no_of_characters */] <69.5f ? 
         (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.29101562f ? 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <67.5f ? 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.2890625f ? 
                    0.0f : 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.171875f ? 
                        0.15f : 
                        0.2f)) : 
                 (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.16796875f ? 
                     (data[5 /* 4_letter_word */] <0.25f ? 
                        0.0f : 
                        1.0f) : 
                    0.0f)) : 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <54.5f ? 
                1.0f : 
                0.0f)) : 
         (data[0 /* vlan */] <7.5f ? 
             (data[10 /* 9_letter_word */] <0.083984375f ? 
                1.0f : 
                0.0f) : 
             (data[0 /* vlan */] <17.5f ? 
                 (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.41015625f ? 
                     (data[2 /* no_of_characters */] <107.5f ? 
                        0.037037037f : 
                        1.0159504E-4f) : 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <277.5f ? 
                        0.013580247f : 
                        0.82222223f)) : 
                 (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.23828125f ? 
                     (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                        1.8826913E-4f : 
                        0.0f) : 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.703125f ? 
                        3.1297505E-4f : 
                        0.55263156f)))));
    return pred;
  } // constant pool size = 70B, number of visited nodes = 17, static init size = 0B
}

class log_drf_1_Tree_37_class_34 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.24804688f ? 
        0.0f : 
         (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.24023438f ? 
            0.0f : 
             (data[0 /* vlan */] <9.5f ? 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.0625f ? 
                    0.0f : 
                    0.5f) : 
                0.0f)));
    return pred;
  } // constant pool size = 18B, number of visited nodes = 4, static init size = 0B
}

class log_drf_1_Tree_37_class_35 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* no_of_characters */] <88.5f ? 
         (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.74902344f ? 
             (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.125f ? 
                 (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.16796875f ? 
                    0.0f : 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.171875f ? 
                        0.0f : 
                        0.6666667f)) : 
                0.0f) : 
             (data[0 /* vlan */] <19.5f ? 
                1.0f : 
                0.0f)) : 
         (data[0 /* vlan */] <11.5f ? 
             (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.21484375f ? 
                0.0f : 
                0.22222222f) : 
             (data[0 /* vlan */] <17.5f ? 
                 (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <1.5f ? 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.21875f ? 
                        9.151922E-4f : 
                        0.0039267014f) : 
                    0.0f) : 
                0.0f)));
    return pred;
  } // constant pool size = 46B, number of visited nodes = 11, static init size = 0B
}

class log_drf_1_Tree_37_class_36 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.1616211f ? 
        0.0f : 
         (data[9 /* 8_letter_word */] <0.1755395f ? 
             (data[0 /* vlan */] <9.5f ? 
                0.9285714f : 
                0.0f) : 
            0.0f));
    return pred;
  } // constant pool size = 14B, number of visited nodes = 3, static init size = 0B
}

class log_drf_1_Tree_37_class_37 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* no_of_characters */] <164.5f ? 
         (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.055664062f ? 
             (data[1 /* type_of_time */] <4.5f ? 
                 (data[6 /* 5_letter_word */] <0.22265625f ? 
                     (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                        1.0f : 
                        0.023255814f) : 
                     (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <1.5f ? 
                        0.99974436f : 
                        0.0f)) : 
                 (data[2 /* no_of_characters */] <85.0f ? 
                     (Double.isNaN(data[12]) || data[12 /* 11_letter_word */] <0.5f ? 
                        0.031025473f : 
                        1.0f) : 
                     (data[3 /* no_of_ips */] <0.5f ? 
                        9.801704E-4f : 
                        1.3803257E-4f))) : 
             (data[1 /* type_of_time */] <4.5f ? 
                 (data[3 /* no_of_ips */] <1.5f ? 
                     (data[0 /* vlan */] <17.5f ? 
                        0.75f : 
                        1.0f) : 
                    0.0f) : 
                0.0f)) : 
         (data[0 /* vlan */] <165.5f ? 
             (data[3 /* no_of_ips */] <0.5f ? 
                 (data[2 /* no_of_characters */] <182.5f ? 
                     (data[0 /* vlan */] <19.0f ? 
                        0.9883856f : 
                        0.022857143f) : 
                     (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.1875f ? 
                        0.007454258f : 
                        0.5733945f)) : 
                0.0f) : 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <174.5f ? 
                 (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.2890625f ? 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.3828125f ? 
                        0.9976222f : 
                        0.8960499f) : 
                     (data[1 /* type_of_time */] <3.5f ? 
                        0.0f : 
                        1.0f)) : 
                 (data[3 /* no_of_ips */] <0.5f ? 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.171875f ? 
                        0.1594203f : 
                        0.98333335f) : 
                    0.0f))));
    return pred;
  } // constant pool size = 94B, number of visited nodes = 23, static init size = 0B
}

class log_drf_1_Tree_37_class_38 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* no_of_characters */] <93.5f ? 
         (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.41601562f ? 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <85.5f ? 
                0.0f : 
                 (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                    0.0f : 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <122.5f ? 
                        0.055555556f : 
                        0.0f))) : 
             (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.25f ? 
                0.0f : 
                0.125f)) : 
        0.0f);
    return pred;
  } // constant pool size = 26B, number of visited nodes = 6, static init size = 0B
}


class log_drf_1_Forest_38 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += log_drf_1_Tree_38_class_0.score0(fdata);
    preds[2] += log_drf_1_Tree_38_class_1.score0(fdata);
    preds[3] += log_drf_1_Tree_38_class_2.score0(fdata);
    preds[4] += log_drf_1_Tree_38_class_3.score0(fdata);
    preds[5] += log_drf_1_Tree_38_class_4.score0(fdata);
    preds[6] += log_drf_1_Tree_38_class_5.score0(fdata);
    preds[7] += log_drf_1_Tree_38_class_6.score0(fdata);
    preds[8] += log_drf_1_Tree_38_class_7.score0(fdata);
    preds[9] += log_drf_1_Tree_38_class_8.score0(fdata);
    preds[10] += log_drf_1_Tree_38_class_9.score0(fdata);
    preds[11] += log_drf_1_Tree_38_class_10.score0(fdata);
    preds[12] += log_drf_1_Tree_38_class_11.score0(fdata);
    preds[13] += log_drf_1_Tree_38_class_12.score0(fdata);
    preds[14] += log_drf_1_Tree_38_class_13.score0(fdata);
    preds[15] += log_drf_1_Tree_38_class_14.score0(fdata);
    preds[16] += log_drf_1_Tree_38_class_15.score0(fdata);
    preds[17] += log_drf_1_Tree_38_class_16.score0(fdata);
    preds[18] += log_drf_1_Tree_38_class_17.score0(fdata);
    preds[19] += log_drf_1_Tree_38_class_18.score0(fdata);
    preds[20] += log_drf_1_Tree_38_class_19.score0(fdata);
    preds[21] += log_drf_1_Tree_38_class_20.score0(fdata);
    preds[22] += log_drf_1_Tree_38_class_21.score0(fdata);
    preds[23] += log_drf_1_Tree_38_class_22.score0(fdata);
    preds[24] += log_drf_1_Tree_38_class_23.score0(fdata);
    preds[25] += log_drf_1_Tree_38_class_24.score0(fdata);
    preds[26] += log_drf_1_Tree_38_class_25.score0(fdata);
    preds[27] += log_drf_1_Tree_38_class_26.score0(fdata);
    preds[28] += log_drf_1_Tree_38_class_27.score0(fdata);
    preds[29] += log_drf_1_Tree_38_class_28.score0(fdata);
    preds[30] += log_drf_1_Tree_38_class_29.score0(fdata);
    preds[31] += log_drf_1_Tree_38_class_30.score0(fdata);
    preds[32] += log_drf_1_Tree_38_class_31.score0(fdata);
    preds[33] += log_drf_1_Tree_38_class_32.score0(fdata);
    preds[34] += log_drf_1_Tree_38_class_33.score0(fdata);
    preds[35] += log_drf_1_Tree_38_class_34.score0(fdata);
    preds[36] += log_drf_1_Tree_38_class_35.score0(fdata);
    preds[37] += log_drf_1_Tree_38_class_36.score0(fdata);
    preds[38] += log_drf_1_Tree_38_class_37.score0(fdata);
    preds[39] += log_drf_1_Tree_38_class_38.score0(fdata);
  }
}
class log_drf_1_Tree_38_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <1040.0f ? 
         (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <532.5f ? 
             (data[8 /* 7_letter_word */] <0.19140625f ? 
                 (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.2265625f ? 
                    0.0f : 
                     (data[3 /* no_of_ips */] <0.5f ? 
                        3.7257824E-4f : 
                        0.0f)) : 
                0.0f) : 
             (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.044921875f ? 
                0.0f : 
                 (data[8 /* 7_letter_word */] <0.078125f ? 
                    0.0f : 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.2734375f ? 
                        0.962963f : 
                        0.0f)))) : 
         (data[4 /* no_of_macs */] <0.5f ? 
            0.0f : 
            1.0f));
    return pred;
  } // constant pool size = 38B, number of visited nodes = 9, static init size = 0B
}

class log_drf_1_Tree_38_class_1 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <261.5f ? 
         (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <260.5f ? 
             (data[8 /* 7_letter_word */] <0.234375f ? 
                0.0f : 
                2.764767E-4f) : 
             (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                0.0f : 
                 (data[0 /* vlan */] <85.5f ? 
                    0.0f : 
                    1.0f))) : 
         (data[3 /* no_of_ips */] <1.5f ? 
             (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                0.0f : 
                 (data[8 /* 7_letter_word */] <0.265625f ? 
                    0.0f : 
                     (data[6 /* 5_letter_word */] <0.15625f ? 
                        0.3125f : 
                        0.9930796f))) : 
            0.0f));
    return pred;
  } // constant pool size = 38B, number of visited nodes = 9, static init size = 0B
}

class log_drf_1_Tree_38_class_2 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* no_of_characters */] <158.5f ? 
         (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.36621094f ? 
             (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.31054688f ? 
                 (data[3 /* no_of_ips */] <0.5f ? 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.21875f ? 
                        0.015363903f : 
                        5.5803574E-4f) : 
                    0.0f) : 
                 (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.05078125f ? 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.29182434f ? 
                        0.0f : 
                        0.0054730256f) : 
                    0.0f)) : 
             (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <113.5f ? 
                    0.0f : 
                     (data[2 /* no_of_characters */] <127.5f ? 
                        0.8220339f : 
                        0.10650887f)) : 
                 (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.4140625f ? 
                     (data[6 /* 5_letter_word */] <0.0859375f ? 
                        0.15301724f : 
                        0.0f) : 
                     (data[0 /* vlan */] <178.5f ? 
                        0.0f : 
                        1.0f)))) : 
         (Double.isNaN(data[4]) || data[4 /* no_of_macs */] <2.5f ? 
             (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <1090.0f ? 
                     (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
                        0.0f : 
                        3.2237265E-4f) : 
                     (data[10 /* 9_letter_word */] <0.046875f ? 
                        0.5f : 
                        0.0f)) : 
                 (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.4765625f ? 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <178.5f ? 
                        0.0f : 
                        0.05462185f) : 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.4296875f ? 
                        0.0f : 
                        0.55f))) : 
            0.5f));
    return pred;
  } // constant pool size = 86B, number of visited nodes = 21, static init size = 0B
}

class log_drf_1_Tree_38_class_3 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
         (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.119140625f ? 
            0.0f : 
             (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.02734375f ? 
                 (data[7 /* 6_letter_word */] <0.1535492f ? 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <33.5f ? 
                        0.9710145f : 
                        0.0f) : 
                    0.0f) : 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.46322632f ? 
                    0.0f : 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.5283908f ? 
                        0.0015384615f : 
                        0.0f)))) : 
         (data[3 /* no_of_ips */] <1.5f ? 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <140.5f ? 
                 (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
                     (data[2 /* no_of_characters */] <107.0f ? 
                        0.875f : 
                        0.0f) : 
                    0.0f) : 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.04296875f ? 
                     (data[6 /* 5_letter_word */] <0.21875f ? 
                        0.0f : 
                        0.9740406f) : 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.3125f ? 
                        0.0f : 
                        0.40625f))) : 
            0.0f));
    return pred;
  } // constant pool size = 58B, number of visited nodes = 14, static init size = 0B
}

class log_drf_1_Tree_38_class_4 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* no_of_characters */] <113.5f ? 
         (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <109.5f ? 
             (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.1015625f ? 
                 (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.4140625f ? 
                        2.4452867E-4f : 
                        0.0034364262f) : 
                    0.0f) : 
                0.0f) : 
             (data[3 /* no_of_ips */] <0.5f ? 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <25.5f ? 
                    0.0f : 
                     (data[0 /* vlan */] <33.0f ? 
                        0.7222222f : 
                        0.0f)) : 
                0.0f)) : 
         (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
             (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.234375f ? 
                0.0f : 
                 (data[0 /* vlan */] <33.5f ? 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.0625f ? 
                        0.001025641f : 
                        0.0f) : 
                    0.0f)) : 
             (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.013671875f ? 
                 (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.265625f ? 
                    0.0f : 
                     (data[5 /* 4_letter_word */] <0.30578613f ? 
                        0.33333334f : 
                        1.6149871E-4f)) : 
                0.0f)));
    return pred;
  } // constant pool size = 62B, number of visited nodes = 15, static init size = 0B
}

class log_drf_1_Tree_38_class_5 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
         (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.10546875f ? 
             (Double.isNaN(data[12]) || data[12 /* 11_letter_word */] <0.29101562f ? 
                 (data[2 /* no_of_characters */] <150.5f ? 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.2890625f ? 
                        0.0f : 
                        0.0023734176f) : 
                     (data[0 /* vlan */] <113.5f ? 
                        0.0011293055f : 
                        0.0f)) : 
                 (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.16796875f ? 
                    0.0f : 
                     (data[6 /* 5_letter_word */] <0.4143982f ? 
                        1.0f : 
                        0.0f))) : 
             (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.08984375f ? 
                 (data[7 /* 6_letter_word */] <0.15438843f ? 
                     (data[1 /* type_of_time */] <4.5f ? 
                        0.0f : 
                        0.020100502f) : 
                    0.0f) : 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <33.5f ? 
                    0.0f : 
                     (data[9 /* 8_letter_word */] <0.098856606f ? 
                        0.3809524f : 
                        0.010647737f)))) : 
        0.0f);
    return pred;
  } // constant pool size = 54B, number of visited nodes = 13, static init size = 0B
}

class log_drf_1_Tree_38_class_6 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* no_of_characters */] <98.5f ? 
         (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.10058594f ? 
             (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.83203125f ? 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <109.5f ? 
                     (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.1015625f ? 
                        0.0f : 
                        0.008350731f) : 
                     (data[1 /* type_of_time */] <4.5f ? 
                        0.0f : 
                        0.27858627f)) : 
                0.0703125f) : 
             (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.29101562f ? 
                 (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.125f ? 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.1015625f ? 
                        0.030612245f : 
                        0.62096775f) : 
                    1.0f) : 
                0.0f)) : 
         (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
             (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.32421875f ? 
                0.0f : 
                 (data[0 /* vlan */] <137.5f ? 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.15625f ? 
                        0.0f : 
                        0.05639098f) : 
                    0.0f)) : 
            0.0f));
    return pred;
  } // constant pool size = 54B, number of visited nodes = 13, static init size = 0B
}

class log_drf_1_Tree_38_class_7 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <1.5f ? 
         (data[2 /* no_of_characters */] <158.5f ? 
             (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.056640625f ? 
                 (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.8984375f ? 
                    0.0f : 
                     (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                        0.029016277f : 
                        0.0f)) : 
                0.0f) : 
            0.0f) : 
         (data[3 /* no_of_ips */] <2.5f ? 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <160.5f ? 
                0.0f : 
                 (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.04296875f ? 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <178.5f ? 
                        0.0f : 
                        0.9464286f) : 
                    0.0f)) : 
            0.0f));
    return pred;
  } // constant pool size = 38B, number of visited nodes = 9, static init size = 0B
}

class log_drf_1_Tree_38_class_8 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <900.5f ? 
         (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <751.0f ? 
             (data[8 /* 7_letter_word */] <0.03125f ? 
                 (data[3 /* no_of_ips */] <0.5f ? 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.0625f ? 
                        2.649182E-4f : 
                        0.0f) : 
                    0.0f) : 
                0.0f) : 
             (data[9 /* 8_letter_word */] <0.029296875f ? 
                 (data[2 /* no_of_characters */] <828.0f ? 
                    0.5f : 
                    0.0f) : 
                0.0f)) : 
         (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <3.5f ? 
             (data[3 /* no_of_ips */] <1.5f ? 
                 (data[5 /* 4_letter_word */] <0.03125f ? 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.125f ? 
                        1.0f : 
                        0.5f) : 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.82592773f ? 
                        0.0f : 
                        0.05f)) : 
                1.0f) : 
            0.07746479f));
    return pred;
  } // constant pool size = 50B, number of visited nodes = 12, static init size = 0B
}

class log_drf_1_Tree_38_class_9 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <2.5f ? 
         (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.16015625f ? 
             (data[8 /* 7_letter_word */] <0.013671875f ? 
                2.8210336E-5f : 
                0.0f) : 
             (data[1 /* type_of_time */] <3.5f ? 
                 (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                    0.0f : 
                     (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.12760417f ? 
                        0.96153843f : 
                        0.0f)) : 
                0.0f)) : 
         (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <5.5f ? 
             (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.18359375f ? 
                 (data[1 /* type_of_time */] <3.5f ? 
                    1.0f : 
                    0.0f) : 
                 (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.171875f ? 
                     (data[1 /* type_of_time */] <4.0f ? 
                        0.33333334f : 
                        0.0f) : 
                     (data[0 /* vlan */] <98.0f ? 
                        0.0f : 
                        0.99334073f))) : 
            0.0f));
    return pred;
  } // constant pool size = 50B, number of visited nodes = 12, static init size = 0B
}

class log_drf_1_Tree_38_class_10 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* no_of_characters */] <92.5f ? 
         (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <88.5f ? 
            0.0f : 
             (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.58203125f ? 
                0.0f : 
                1.0f)) : 
        5.364749E-6f);
    return pred;
  } // constant pool size = 14B, number of visited nodes = 3, static init size = 0B
}

class log_drf_1_Tree_38_class_11 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* no_of_characters */] <134.5f ? 
         (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <133.5f ? 
            0.0f : 
             (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.072265625f ? 
                0.0f : 
                 (data[8 /* 7_letter_word */] <0.22447205f ? 
                    0.5f : 
                    0.0f))) : 
        0.0f);
    return pred;
  } // constant pool size = 18B, number of visited nodes = 4, static init size = 0B
}

class log_drf_1_Tree_38_class_12 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <529.5f ? 
         (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.9277344f ? 
             (data[8 /* 7_letter_word */] <0.03125f ? 
                 (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.0390625f ? 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.0625f ? 
                        3.2723704E-4f : 
                        0.0f) : 
                    0.0f) : 
                0.0f) : 
             (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                0.0f : 
                0.12337662f)) : 
         (data[3 /* no_of_ips */] <1.5f ? 
             (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                0.0f : 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <589.0f ? 
                    0.0f : 
                    1.0f)) : 
            0.0f));
    return pred;
  } // constant pool size = 38B, number of visited nodes = 9, static init size = 0B
}

class log_drf_1_Tree_38_class_13 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* no_of_characters */] <54.0f ? 
         (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <28.5f ? 
            1.0f : 
             (data[9 /* 8_letter_word */] <0.125f ? 
                0.11764706f : 
                 (data[5 /* 4_letter_word */] <0.125f ? 
                    0.0f : 
                    1.0f))) : 
         (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
             (data[2 /* no_of_characters */] <87.5f ? 
                 (data[0 /* vlan */] <17.5f ? 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.1015625f ? 
                        0.0f : 
                        0.8333333f) : 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.4453125f ? 
                        4.536176E-4f : 
                        0.0f)) : 
                 (data[8 /* 7_letter_word */] <0.015625f ? 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.03125f ? 
                        1.4213631E-4f : 
                        0.0f) : 
                    0.0f)) : 
            0.0f));
    return pred;
  } // constant pool size = 46B, number of visited nodes = 11, static init size = 0B
}

class log_drf_1_Tree_38_class_14 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <215.5f ? 
         (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.18359375f ? 
            0.0f : 
             (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.18359375f ? 
                0.0f : 
                 (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.18359375f ? 
                    0.0f : 
                     (data[8 /* 7_letter_word */] <0.22510783f ? 
                        0.0065789474f : 
                        0.0f)))) : 
         (Double.isNaN(data[12]) || data[12 /* 11_letter_word */] <0.18359375f ? 
            0.0f : 
             (data[1 /* type_of_time */] <2.5f ? 
                1.0f : 
                0.0f)));
    return pred;
  } // constant pool size = 30B, number of visited nodes = 7, static init size = 0B
}

class log_drf_1_Tree_38_class_15 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* no_of_characters */] <100.5f ? 
         (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <98.5f ? 
            0.0f : 
             (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.125f ? 
                 (data[5 /* 4_letter_word */] <0.74609375f ? 
                    0.0f : 
                    0.32960895f) : 
                0.0f)) : 
         (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <2.5f ? 
             (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
                0.0f : 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.59375f ? 
                     (data[2 /* no_of_characters */] <119.5f ? 
                        6.3019915E-4f : 
                        0.007214398f) : 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <89.5f ? 
                        0.0f : 
                        0.5463917f))) : 
            0.0f));
    return pred;
  } // constant pool size = 38B, number of visited nodes = 9, static init size = 0B
}

class log_drf_1_Tree_38_class_16 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* no_of_characters */] <84.5f ? 
         (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <79.5f ? 
            0.0f : 
             (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.1015625f ? 
                 (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.74609375f ? 
                    0.0f : 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <17.5f ? 
                        0.0f : 
                        0.5714286f)) : 
                0.0f)) : 
         (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
             (data[2 /* no_of_characters */] <108.5f ? 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.0859375f ? 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.1015625f ? 
                        4.961958E-4f : 
                        0.0f) : 
                     (data[7 /* 6_letter_word */] <0.22161865f ? 
                        0.01980198f : 
                        0.0f)) : 
                 (data[0 /* vlan */] <33.5f ? 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.0390625f ? 
                        8.855827E-5f : 
                        0.0f) : 
                    0.0f)) : 
            0.0f));
    return pred;
  } // constant pool size = 50B, number of visited nodes = 12, static init size = 0B
}

class log_drf_1_Tree_38_class_17 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <659.0f ? 
         (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.9160156f ? 
            0.0f : 
            1.09027475E-4f) : 
         (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <3.5f ? 
             (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <1.5f ? 
                 (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.01171875f ? 
                    0.6460177f : 
                     (data[11 /* 10_letter_word */] <0.030718887f ? 
                        0.375f : 
                        0.0f)) : 
                0.0f) : 
             (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <4.5f ? 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <1021.5f ? 
                     (data[6 /* 5_letter_word */] <0.4140625f ? 
                        0.969697f : 
                        1.0f) : 
                    1.0f) : 
                0.0f)));
    return pred;
  } // constant pool size = 38B, number of visited nodes = 9, static init size = 0B
}

class log_drf_1_Tree_38_class_18 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <330.5f ? 
        0.0f : 
        9.973073E-5f);
    return pred;
  } // constant pool size = 6B, number of visited nodes = 1, static init size = 0B
}

class log_drf_1_Tree_38_class_19 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* no_of_characters */] <136.5f ? 
         (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.22460938f ? 
             (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.18359375f ? 
                0.0f : 
                 (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.1015625f ? 
                    0.0f : 
                     (data[0 /* vlan */] <17.5f ? 
                        1.0f : 
                        0.0f))) : 
             (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                0.0f : 
                 (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.125f ? 
                    0.0f : 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.2890625f ? 
                        0.8995984f : 
                        0.0f)))) : 
         (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
            0.0f : 
             (data[3 /* no_of_ips */] <1.5f ? 
                 (data[0 /* vlan */] <17.5f ? 
                     (data[2 /* no_of_characters */] <172.5f ? 
                        0.8181818f : 
                        0.0f) : 
                    0.0f) : 
                0.0f)));
    return pred;
  } // constant pool size = 50B, number of visited nodes = 12, static init size = 0B
}

class log_drf_1_Tree_38_class_20 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* no_of_characters */] <134.5f ? 
         (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <114.5f ? 
             (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.44921875f ? 
                 (data[3 /* no_of_ips */] <0.5f ? 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.4140625f ? 
                        0.66575867f : 
                        0.95815295f) : 
                    0.0f) : 
                 (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.16796875f ? 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <33.5f ? 
                        0.9691308f : 
                        0.0f) : 
                    0.0f)) : 
             (data[1 /* type_of_time */] <4.5f ? 
                0.0f : 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <25.5f ? 
                     (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.1015625f ? 
                        0.9939505f : 
                        0.4394966f) : 
                    0.0f))) : 
         (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <2.5f ? 
             (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <1.5f ? 
                 (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.22265625f ? 
                     (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
                        0.0f : 
                        0.22781706f) : 
                     (data[2 /* no_of_characters */] <170.5f ? 
                        0.75722545f : 
                        0.034741785f)) : 
                 (data[2 /* no_of_characters */] <170.5f ? 
                    0.0f : 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.234375f ? 
                        0.84066904f : 
                        0.005194805f))) : 
             (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.05078125f ? 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.3671875f ? 
                    0.0f : 
                     (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.0859375f ? 
                        0.0f : 
                        0.9375f)) : 
                0.0f)));
    return pred;
  } // constant pool size = 82B, number of visited nodes = 20, static init size = 0B
}

class log_drf_1_Tree_38_class_21 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <220.5f ? 
         (Double.isNaN(data[13]) || data[13 /* 12_letter_word */] <0.171875f ? 
             (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.8984375f ? 
                 (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.18359375f ? 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.3203125f ? 
                        4.4061182E-4f : 
                        0.0032970656f) : 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.0625f ? 
                        0.0f : 
                        0.01092437f)) : 
                0.002173913f) : 
             (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
                0.0f : 
                 (data[13 /* 12_letter_word */] <0.22686768f ? 
                    1.0f : 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.16796875f ? 
                        0.011627907f : 
                        0.0f)))) : 
         (Double.isNaN(data[12]) || data[12 /* 11_letter_word */] <0.20800781f ? 
             (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <1.5f ? 
                 (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.15625f ? 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.78125f ? 
                        0.0049101445f : 
                        0.18584071f) : 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.4609375f ? 
                        0.0019267823f : 
                        0.23255815f)) : 
                 (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.4609375f ? 
                    0.0f : 
                     (data[2 /* no_of_characters */] <270.5f ? 
                        0.05f : 
                        0.0f))) : 
             (data[11 /* 10_letter_word */] <0.125f ? 
                0.0f : 
                1.0f)));
    return pred;
  } // constant pool size = 70B, number of visited nodes = 17, static init size = 0B
}

class log_drf_1_Tree_38_class_22 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <227.5f ? 
         (data[2 /* no_of_characters */] <131.5f ? 
             (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.15429688f ? 
                0.0f : 
                 (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.44921875f ? 
                    0.0f : 
                     (data[0 /* vlan */] <17.5f ? 
                        0.11764706f : 
                        0.0f))) : 
            0.0f) : 
         (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <1.5f ? 
             (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
                0.0f : 
                 (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.3203125f ? 
                    0.0f : 
                     (data[2 /* no_of_characters */] <244.5f ? 
                        0.06451613f : 
                        0.002793296f))) : 
            0.0f));
    return pred;
  } // constant pool size = 38B, number of visited nodes = 9, static init size = 0B
}

class log_drf_1_Tree_38_class_23 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <257.5f ? 
         (data[2 /* no_of_characters */] <153.5f ? 
             (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.31054688f ? 
                 (data[3 /* no_of_ips */] <0.5f ? 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.8671875f ? 
                        3.4560222E-4f : 
                        0.4472885f) : 
                    0.0f) : 
                 (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.05078125f ? 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.0859375f ? 
                        0.16575137f : 
                        0.0f) : 
                    0.0f)) : 
             (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
                0.0f : 
                 (data[0 /* vlan */] <17.5f ? 
                     (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.1015625f ? 
                        0.6486486f : 
                        0.0f) : 
                    0.0f))) : 
         (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
             (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.4140625f ? 
                 (Double.isNaN(data[12]) || data[12 /* 11_letter_word */] <0.083984375f ? 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.278125f ? 
                        0.0f : 
                        0.020576132f) : 
                     (Double.isNaN(data[13]) || data[13 /* 12_letter_word */] <0.046875f ? 
                        0.0f : 
                        1.0f)) : 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.4644165f ? 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <289.5f ? 
                        0.99903196f : 
                        0.0f) : 
                    0.0f)) : 
             (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.013671875f ? 
                 (data[5 /* 4_letter_word */] <0.05859375f ? 
                     (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.0859375f ? 
                        0.0f : 
                        0.875f) : 
                    0.0f) : 
                0.0f)));
    return pred;
  } // constant pool size = 82B, number of visited nodes = 20, static init size = 0B
}

class log_drf_1_Tree_38_class_24 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
        0.0f : 
         (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.9160156f ? 
            0.0f : 
            5.143151E-4f));
    return pred;
  } // constant pool size = 10B, number of visited nodes = 2, static init size = 0B
}

class log_drf_1_Tree_38_class_25 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <1.5f ? 
         (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.16015625f ? 
             (Double.isNaN(data[12]) || data[12 /* 11_letter_word */] <0.41601562f ? 
                 (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.46875f ? 
                        0.0107044615f : 
                        0.055733122f) : 
                     (data[6 /* 5_letter_word */] <0.046875f ? 
                        0.7745277f : 
                        0.0023701566f)) : 
                0.93650794f) : 
             (data[1 /* type_of_time */] <4.5f ? 
                0.0f : 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <25.5f ? 
                    0.0f : 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <160.5f ? 
                        0.3464674f : 
                        0.8978269f)))) : 
         (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <5.5f ? 
             (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.056640625f ? 
                 (data[1 /* type_of_time */] <4.5f ? 
                    0.0f : 
                     (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <3.5f ? 
                        0.99885726f : 
                        0.92746115f)) : 
                 (data[1 /* type_of_time */] <4.5f ? 
                    0.0f : 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <81.5f ? 
                        0.75921f : 
                        0.0f))) : 
             (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.0625f ? 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <21.5f ? 
                    0.0f : 
                    1.0f) : 
                0.0f)));
    return pred;
  } // constant pool size = 70B, number of visited nodes = 17, static init size = 0B
}

class log_drf_1_Tree_38_class_26 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* no_of_characters */] <57.5f ? 
         (data[2 /* no_of_characters */] <54.0f ? 
            0.0f : 
             (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.16796875f ? 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <56.5f ? 
                    0.99568033f : 
                    0.0f) : 
                0.0f)) : 
        0.0f);
    return pred;
  } // constant pool size = 18B, number of visited nodes = 4, static init size = 0B
}

class log_drf_1_Tree_38_class_27 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <256.5f ? 
        0.0f : 
         (data[2 /* no_of_characters */] <258.5f ? 
             (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <1.0f ? 
                 (data[8 /* 7_letter_word */] <0.265625f ? 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.19714355f ? 
                        0.0f : 
                        0.5f) : 
                    0.0f) : 
                0.0f) : 
            0.0f));
    return pred;
  } // constant pool size = 22B, number of visited nodes = 5, static init size = 0B
}

class log_drf_1_Tree_38_class_28 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <5.5f ? 
         (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <472.5f ? 
            0.0f : 
             (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.013671875f ? 
                 (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <3.5f ? 
                    0.0f : 
                     (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.0859375f ? 
                        0.0f : 
                        0.7894737f)) : 
                0.0f)) : 
         (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <6.5f ? 
             (data[5 /* 4_letter_word */] <0.0625f ? 
                 (data[14 /* 13_letter_word */] <0.15527344f ? 
                    0.9931507f : 
                    1.0f) : 
                1.0f) : 
            0.0f));
    return pred;
  } // constant pool size = 34B, number of visited nodes = 8, static init size = 0B
}

class log_drf_1_Tree_38_class_29 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <957.5f ? 
         (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <424.5f ? 
            8.268358E-6f : 
             (data[3 /* no_of_ips */] <0.5f ? 
                 (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.1875f ? 
                    0.0f : 
                     (Double.isNaN(data[12]) || data[12 /* 11_letter_word */] <0.03125f ? 
                        0.0f : 
                        0.25f)) : 
                0.0f)) : 
         (Double.isNaN(data[12]) || data[12 /* 11_letter_word */] <0.0087890625f ? 
            0.0f : 
             (data[5 /* 4_letter_word */] <0.3515625f ? 
                0.0f : 
                1.0f)));
    return pred;
  } // constant pool size = 30B, number of visited nodes = 7, static init size = 0B
}

class log_drf_1_Tree_38_class_30 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <2.5f ? 
         (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <195.5f ? 
            0.0f : 
             (data[8 /* 7_letter_word */] <0.35351562f ? 
                 (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <1.5f ? 
                    0.0f : 
                     (data[1 /* type_of_time */] <2.5f ? 
                        1.0f : 
                        0.0f)) : 
                0.0f)) : 
         (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <3.5f ? 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <225.5f ? 
                 (data[6 /* 5_letter_word */] <0.2890625f ? 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.22583008f ? 
                        0.0f : 
                        0.010978957f) : 
                    0.0f) : 
                 (data[1 /* type_of_time */] <3.0f ? 
                    1.0f : 
                    0.0f)) : 
            0.0f));
    return pred;
  } // constant pool size = 42B, number of visited nodes = 10, static init size = 0B
}

class log_drf_1_Tree_38_class_31 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[15]) || data[15 /* 14_letter_word */] <0.22485352f ? 
         (data[2 /* no_of_characters */] <113.5f ? 
             (Double.isNaN(data[13]) || data[13 /* 12_letter_word */] <0.125f ? 
                 (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.2890625f ? 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.4453125f ? 
                        0.037070096f : 
                        0.0f) : 
                     (data[6 /* 5_letter_word */] <0.171875f ? 
                        0.4245283f : 
                        0.0f)) : 
                 (data[3 /* no_of_ips */] <0.5f ? 
                    0.972973f : 
                     (data[11 /* 10_letter_word */] <0.125f ? 
                        0.0f : 
                        0.96875f))) : 
             (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
                0.0f : 
                 (data[2 /* no_of_characters */] <132.5f ? 
                     (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.2890625f ? 
                        0.0065904506f : 
                        0.15419847f) : 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <168.5f ? 
                        0.0035133741f : 
                        2.5567273E-4f)))) : 
         (Double.isNaN(data[12]) || data[12 /* 11_letter_word */] <0.25f ? 
             (data[5 /* 4_letter_word */] <0.125f ? 
                0.0f : 
                 (data[2 /* no_of_characters */] <100.5f ? 
                    1.0f : 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.125f ? 
                        1.0f : 
                        0.8076923f))) : 
            0.0f));
    return pred;
  } // constant pool size = 66B, number of visited nodes = 16, static init size = 0B
}

class log_drf_1_Tree_38_class_32 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* no_of_characters */] <123.5f ? 
         (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.22460938f ? 
             (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                0.0f : 
                 (data[1 /* type_of_time */] <4.5f ? 
                    0.0f : 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <33.5f ? 
                        0.0070765843f : 
                        0.0f))) : 
             (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.083984375f ? 
                 (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.1015625f ? 
                     (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.125f ? 
                        0.020100502f : 
                        0.218107f) : 
                     (data[0 /* vlan */] <81.5f ? 
                        0.93333334f : 
                        0.0f)) : 
                0.0f)) : 
        0.0f);
    return pred;
  } // constant pool size = 38B, number of visited nodes = 9, static init size = 0B
}

class log_drf_1_Tree_38_class_33 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* no_of_characters */] <69.5f ? 
         (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.41601562f ? 
             (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.29101562f ? 
                 (data[0 /* vlan */] <9.5f ? 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.16900635f ? 
                        0.0f : 
                        1.0f) : 
                    0.0f) : 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.16738129f ? 
                    0.2857143f : 
                    1.0f)) : 
             (data[2 /* no_of_characters */] <67.5f ? 
                 (data[2 /* no_of_characters */] <39.5f ? 
                    0.0f : 
                    0.5f) : 
                1.0f)) : 
         (Double.isNaN(data[4]) || data[4 /* no_of_macs */] <1.5f ? 
             (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.73046875f ? 
                 (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.078125f ? 
                     (data[2 /* no_of_characters */] <107.5f ? 
                        0.001412276f : 
                        1.785013E-5f) : 
                     (data[0 /* vlan */] <17.5f ? 
                        0.006794853f : 
                        2.7323025E-4f)) : 
                 (data[3 /* no_of_ips */] <0.5f ? 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.125f ? 
                        0.011733535f : 
                        0.51724136f) : 
                    0.0f)) : 
             (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.013671875f ? 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.1640625f ? 
                    0.0f : 
                     (data[3 /* no_of_ips */] <1.5f ? 
                        0.962963f : 
                        0.0f)) : 
                0.0f)));
    return pred;
  } // constant pool size = 74B, number of visited nodes = 18, static init size = 0B
}

class log_drf_1_Tree_38_class_34 {
  static final double score0(double[] data) {
    double pred =     1.0E-5f;
    return pred;
  } // constant pool size = 2B, number of visited nodes = 0, static init size = 0B
}

class log_drf_1_Tree_38_class_35 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* no_of_characters */] <88.5f ? 
         (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <87.5f ? 
             (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.1015625f ? 
                 (data[0 /* vlan */] <17.5f ? 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.6640625f ? 
                        0.0f : 
                        1.0f) : 
                    0.0f) : 
                0.0f) : 
             (data[9 /* 8_letter_word */] <0.25f ? 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.16796875f ? 
                    0.0f : 
                     (data[3 /* no_of_ips */] <0.5f ? 
                        0.6f : 
                        0.0f)) : 
                0.0f)) : 
         (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
             (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.47070312f ? 
                 (data[0 /* vlan */] <17.5f ? 
                     (data[9 /* 8_letter_word */] <0.0546875f ? 
                        7.544323E-4f : 
                        0.0f) : 
                    0.0f) : 
                 (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.23828125f ? 
                    0.0f : 
                     (data[1 /* type_of_time */] <4.5f ? 
                        0.0f : 
                        0.001019368f))) : 
             (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.013671875f ? 
                 (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.15625f ? 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.4453125f ? 
                        6.401434E-5f : 
                        4.5392648E-4f) : 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.4453125f ? 
                        0.0f : 
                        0.060606062f)) : 
                0.0f)));
    return pred;
  } // constant pool size = 74B, number of visited nodes = 18, static init size = 0B
}

class log_drf_1_Tree_38_class_36 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* no_of_characters */] <131.5f ? 
         (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <126.5f ? 
            0.0f : 
             (data[3 /* no_of_ips */] <0.5f ? 
                 (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.15625f ? 
                    0.0f : 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.0859375f ? 
                        0.0f : 
                        0.7058824f)) : 
                0.0f)) : 
        0.0f);
    return pred;
  } // constant pool size = 22B, number of visited nodes = 5, static init size = 0B
}

class log_drf_1_Tree_38_class_37 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* no_of_characters */] <164.5f ? 
         (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.9160156f ? 
             (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.47070312f ? 
                 (data[1 /* type_of_time */] <4.5f ? 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.1789093f ? 
                        0.9639604f : 
                        0.4943335f) : 
                     (data[2 /* no_of_characters */] <83.0f ? 
                        0.041875f : 
                        4.3549543E-4f)) : 
                 (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.0625f ? 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.125f ? 
                        0.49113604f : 
                        0.0056899004f) : 
                     (data[1 /* type_of_time */] <4.5f ? 
                        1.0f : 
                        0.0f))) : 
             (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
                0.9998267f : 
                0.010318397f)) : 
         (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
             (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.01953125f ? 
                 (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.0625f ? 
                        0.9973439f : 
                        0.99930155f) : 
                    0.0f) : 
                 (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.22265625f ? 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <154.5f ? 
                        0.17057379f : 
                        0.99208635f) : 
                     (data[8 /* 7_letter_word */] <0.3671875f ? 
                        0.0f : 
                        1.0f))) : 
             (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.1328125f ? 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.19140625f ? 
                     (data[2 /* no_of_characters */] <338.5f ? 
                        0.0029424129f : 
                        0.0f) : 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.1796875f ? 
                        0.009756098f : 
                        0.38135594f)) : 
                 (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.0625f ? 
                    0.0f : 
                     (data[1 /* type_of_time */] <4.5f ? 
                        0.6666667f : 
                        0.0f)))));
    return pred;
  } // constant pool size = 94B, number of visited nodes = 23, static init size = 0B
}

class log_drf_1_Tree_38_class_38 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* no_of_characters */] <93.5f ? 
         (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.41601562f ? 
            0.0f : 
             (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <89.5f ? 
                    0.0f : 
                     (data[0 /* vlan */] <130.5f ? 
                        0.5f : 
                        0.0f)) : 
                0.0f)) : 
        0.0f);
    return pred;
  } // constant pool size = 22B, number of visited nodes = 5, static init size = 0B
}


class log_drf_1_Forest_39 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += log_drf_1_Tree_39_class_0.score0(fdata);
    preds[2] += log_drf_1_Tree_39_class_1.score0(fdata);
    preds[3] += log_drf_1_Tree_39_class_2.score0(fdata);
    preds[4] += log_drf_1_Tree_39_class_3.score0(fdata);
    preds[5] += log_drf_1_Tree_39_class_4.score0(fdata);
    preds[6] += log_drf_1_Tree_39_class_5.score0(fdata);
    preds[7] += log_drf_1_Tree_39_class_6.score0(fdata);
    preds[8] += log_drf_1_Tree_39_class_7.score0(fdata);
    preds[9] += log_drf_1_Tree_39_class_8.score0(fdata);
    preds[10] += log_drf_1_Tree_39_class_9.score0(fdata);
    preds[11] += log_drf_1_Tree_39_class_10.score0(fdata);
    preds[12] += log_drf_1_Tree_39_class_11.score0(fdata);
    preds[13] += log_drf_1_Tree_39_class_12.score0(fdata);
    preds[14] += log_drf_1_Tree_39_class_13.score0(fdata);
    preds[15] += log_drf_1_Tree_39_class_14.score0(fdata);
    preds[16] += log_drf_1_Tree_39_class_15.score0(fdata);
    preds[17] += log_drf_1_Tree_39_class_16.score0(fdata);
    preds[18] += log_drf_1_Tree_39_class_17.score0(fdata);
    preds[19] += log_drf_1_Tree_39_class_18.score0(fdata);
    preds[20] += log_drf_1_Tree_39_class_19.score0(fdata);
    preds[21] += log_drf_1_Tree_39_class_20.score0(fdata);
    preds[22] += log_drf_1_Tree_39_class_21.score0(fdata);
    preds[23] += log_drf_1_Tree_39_class_22.score0(fdata);
    preds[24] += log_drf_1_Tree_39_class_23.score0(fdata);
    preds[25] += log_drf_1_Tree_39_class_24.score0(fdata);
    preds[26] += log_drf_1_Tree_39_class_25.score0(fdata);
    preds[27] += log_drf_1_Tree_39_class_26.score0(fdata);
    preds[28] += log_drf_1_Tree_39_class_27.score0(fdata);
    preds[29] += log_drf_1_Tree_39_class_28.score0(fdata);
    preds[30] += log_drf_1_Tree_39_class_29.score0(fdata);
    preds[31] += log_drf_1_Tree_39_class_30.score0(fdata);
    preds[32] += log_drf_1_Tree_39_class_31.score0(fdata);
    preds[33] += log_drf_1_Tree_39_class_32.score0(fdata);
    preds[34] += log_drf_1_Tree_39_class_33.score0(fdata);
    preds[35] += log_drf_1_Tree_39_class_34.score0(fdata);
    preds[36] += log_drf_1_Tree_39_class_35.score0(fdata);
    preds[37] += log_drf_1_Tree_39_class_36.score0(fdata);
    preds[38] += log_drf_1_Tree_39_class_37.score0(fdata);
    preds[39] += log_drf_1_Tree_39_class_38.score0(fdata);
  }
}
class log_drf_1_Tree_39_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <1040.0f ? 
         (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <532.5f ? 
             (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.087890625f ? 
                 (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.48046875f ? 
                    0.0f : 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.4609375f ? 
                        0.0f : 
                        7.374631E-4f)) : 
                 (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                     (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.0234375f ? 
                        0.0f : 
                        0.0028776978f) : 
                    0.0f)) : 
             (Double.isNaN(data[12]) || data[12 /* 11_letter_word */] <0.009765625f ? 
                 (Double.isNaN(data[4]) || data[4 /* no_of_macs */] <0.5f ? 
                    0.0f : 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.203125f ? 
                        1.0f : 
                        0.5f)) : 
                 (data[4 /* no_of_macs */] <0.5f ? 
                    0.0f : 
                    1.0f))) : 
         (data[11 /* 10_letter_word */] <0.02734375f ? 
            0.5f : 
            1.0f));
    return pred;
  } // constant pool size = 50B, number of visited nodes = 12, static init size = 0B
}

class log_drf_1_Tree_39_class_1 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <261.5f ? 
         (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <260.5f ? 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <141.5f ? 
                0.0f : 
                 (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                    0.0f : 
                     (data[6 /* 5_letter_word */] <0.8671875f ? 
                        0.0066006603f : 
                        0.0f))) : 
             (data[9 /* 8_letter_word */] <0.046875f ? 
                 (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                    0.0f : 
                    1.0f) : 
                0.0f)) : 
         (data[2 /* no_of_characters */] <289.5f ? 
             (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.1328125f ? 
                0.0f : 
                 (data[8 /* 7_letter_word */] <0.31640625f ? 
                     (data[6 /* 5_letter_word */] <0.15289307f ? 
                        0.33333334f : 
                        0.0f) : 
                     (data[1 /* type_of_time */] <4.5f ? 
                        0.627907f : 
                        0.99130434f))) : 
             (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.3671875f ? 
                 (data[7 /* 6_letter_word */] <0.01953125f ? 
                     (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                        0.0f : 
                        0.013071896f) : 
                    0.0f) : 
                 (data[8 /* 7_letter_word */] <0.41415405f ? 
                    0.94285715f : 
                    0.0f))));
    return pred;
  } // constant pool size = 66B, number of visited nodes = 16, static init size = 0B
}

class log_drf_1_Tree_39_class_2 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* no_of_characters */] <158.5f ? 
         (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <147.5f ? 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <181.5f ? 
                 (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.5859375f ? 
                        0.0046841484f : 
                        0.09118087f) : 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.1328125f ? 
                        0.0f : 
                        0.0011885895f)) : 
                 (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                    0.0f : 
                     (data[2 /* no_of_characters */] <85.5f ? 
                        0.0f : 
                        1.0f))) : 
             (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.46289062f ? 
                 (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.53515625f ? 
                     (data[2 /* no_of_characters */] <151.5f ? 
                        0.0031496063f : 
                        3.5273368E-4f) : 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.07232666f ? 
                        0.0f : 
                        0.3108108f)) : 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.54891205f ? 
                     (data[5 /* 4_letter_word */] <0.4140625f ? 
                        0.0f : 
                        0.9688042f) : 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <178.5f ? 
                        0.0f : 
                        0.9f)))) : 
         (data[2 /* no_of_characters */] <165.5f ? 
             (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.083984375f ? 
                 (data[8 /* 7_letter_word */] <0.1015625f ? 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.4140625f ? 
                        0.0f : 
                        0.31666666f) : 
                    0.0f) : 
                0.0f) : 
             (data[8 /* 7_letter_word */] <0.25976562f ? 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.421875f ? 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <178.5f ? 
                        1.5144631E-4f : 
                        0.005121639f) : 
                     (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.1328125f ? 
                        0.002065049f : 
                        0.03125f)) : 
                 (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.15625f ? 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <652.5f ? 
                        2.0866371E-5f : 
                        0.029411765f) : 
                     (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
                        0.0f : 
                        0.125f)))));
    return pred;
  } // constant pool size = 106B, number of visited nodes = 26, static init size = 0B
}

class log_drf_1_Tree_39_class_3 {
  static final double score0(double[] data) {
    double pred =      (data[1 /* type_of_time */] <4.5f ? 
         (data[2 /* no_of_characters */] <105.5f ? 
             (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.16796875f ? 
                 (data[0 /* vlan */] <162.5f ? 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <102.0f ? 
                        0.0f : 
                        0.9f) : 
                    0.0f) : 
                0.0f) : 
            0.0f) : 
         (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <140.5f ? 
            0.0f : 
             (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.013671875f ? 
                 (data[0 /* vlan */] <25.5f ? 
                    0.0f : 
                     (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <1.5f ? 
                        0.39119574f : 
                        0.0f)) : 
                 (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.01171875f ? 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.4609375f ? 
                        0.0f : 
                        0.002105263f) : 
                    0.0f))));
    return pred;
  } // constant pool size = 46B, number of visited nodes = 11, static init size = 0B
}

class log_drf_1_Tree_39_class_4 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* no_of_characters */] <113.5f ? 
         (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <109.5f ? 
             (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.7480469f ? 
                 (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.2890625f ? 
                    0.0f : 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.171875f ? 
                        0.0f : 
                        0.011235955f)) : 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <96.5f ? 
                    0.0f : 
                    0.2f)) : 
             (data[3 /* no_of_ips */] <0.5f ? 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.2890625f ? 
                    0.0f : 
                     (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.171875f ? 
                        0.0f : 
                        0.962963f)) : 
                0.0f)) : 
         (data[2 /* no_of_characters */] <118.5f ? 
             (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.26757812f ? 
                 (data[6 /* 5_letter_word */] <0.265625f ? 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <117.5f ? 
                        0.0f : 
                        0.004048583f) : 
                    0.0f) : 
                0.2857143f) : 
             (data[8 /* 7_letter_word */] <0.14453125f ? 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.12364197f ? 
                    0.0f : 
                     (data[2 /* no_of_characters */] <173.5f ? 
                        0.3846154f : 
                        0.004651163f)) : 
                0.0f)));
    return pred;
  } // constant pool size = 66B, number of visited nodes = 16, static init size = 0B
}

class log_drf_1_Tree_39_class_5 {
  static final double score0(double[] data) {
    double pred =      (data[1 /* type_of_time */] <4.5f ? 
        0.0f : 
         (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <205.5f ? 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <140.5f ? 
                 (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.07421875f ? 
                     (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                        7.125045E-5f : 
                        0.0f) : 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.15625f ? 
                        8.329169E-4f : 
                        0.0f)) : 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <61.5f ? 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.1328125f ? 
                        7.791196E-5f : 
                        9.287926E-4f) : 
                     (data[2 /* no_of_characters */] <143.5f ? 
                        0.23076923f : 
                        0.003933137f))) : 
             (Double.isNaN(data[12]) || data[12 /* 11_letter_word */] <0.29101562f ? 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.19140625f ? 
                     (data[2 /* no_of_characters */] <222.5f ? 
                        0.027355623f : 
                        0.0f) : 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <306.5f ? 
                        3.5260932E-4f : 
                        0.07284768f)) : 
                 (data[6 /* 5_letter_word */] <0.16796875f ? 
                    0.0f : 
                    0.6666667f))));
    return pred;
  } // constant pool size = 58B, number of visited nodes = 14, static init size = 0B
}

class log_drf_1_Tree_39_class_6 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* no_of_characters */] <98.5f ? 
         (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.10058594f ? 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <35.5f ? 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.87109375f ? 
                     (data[0 /* vlan */] <19.0f ? 
                        0.06486487f : 
                        0.0f) : 
                     (data[0 /* vlan */] <10.5f ? 
                        0.0f : 
                        1.0f)) : 
                 (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.2890625f ? 
                     (data[0 /* vlan */] <67.0f ? 
                        1.0f : 
                        0.0f) : 
                     (data[7 /* 6_letter_word */] <0.2421875f ? 
                        0.0f : 
                        0.44444445f))) : 
             (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.58203125f ? 
                 (data[2 /* no_of_characters */] <82.5f ? 
                    0.40816328f : 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <113.5f ? 
                        0.0f : 
                        1.0f)) : 
                 (data[2 /* no_of_characters */] <88.5f ? 
                    0.0f : 
                    1.0f))) : 
         (data[2 /* no_of_characters */] <117.5f ? 
             (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.18359375f ? 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.0859375f ? 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <110.5f ? 
                        0.0f : 
                        0.02123357f) : 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.0859375f ? 
                        0.0f : 
                        0.034059945f)) : 
                0.0f) : 
            0.0f));
    return pred;
  } // constant pool size = 74B, number of visited nodes = 18, static init size = 0B
}

class log_drf_1_Tree_39_class_7 {
  static final double score0(double[] data) {
    double pred =      (data[1 /* type_of_time */] <4.5f ? 
        0.0f : 
         (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <153.5f ? 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <147.5f ? 
                0.0f : 
                 (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.07421875f ? 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.078125f ? 
                        7.0671376E-4f : 
                        0.0f) : 
                    0.0f)) : 
             (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.94921875f ? 
                0.0f : 
                0.0863061f)));
    return pred;
  } // constant pool size = 26B, number of visited nodes = 6, static init size = 0B
}

class log_drf_1_Tree_39_class_8 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <900.5f ? 
         (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <751.0f ? 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <177.5f ? 
                0.0f : 
                 (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                     (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
                        0.0f : 
                        0.011111111f) : 
                    0.0f)) : 
             (data[7 /* 6_letter_word */] <0.0390625f ? 
                0.25f : 
                0.0f)) : 
         (data[2 /* no_of_characters */] <1011.5f ? 
             (Double.isNaN(data[4]) || data[4 /* no_of_macs */] <0.5f ? 
                 (data[0 /* vlan */] <158.0f ? 
                    0.0f : 
                    1.0f) : 
                0.0f) : 
             (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.5214844f ? 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.4140625f ? 
                     (data[3 /* no_of_ips */] <2.5f ? 
                        0.23529412f : 
                        0.007246377f) : 
                    0.2f) : 
                 (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <4.5f ? 
                     (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <2.0f ? 
                        0.0f : 
                        0.16666667f) : 
                    1.0f))));
    return pred;
  } // constant pool size = 58B, number of visited nodes = 14, static init size = 0B
}

class log_drf_1_Tree_39_class_9 {
  static final double score0(double[] data) {
    double pred =      (data[1 /* type_of_time */] <3.5f ? 
         (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <205.5f ? 
             (data[1 /* type_of_time */] <2.5f ? 
                0.0f : 
                1.0f) : 
             (data[5 /* 4_letter_word */] <0.22460938f ? 
                 (data[2 /* no_of_characters */] <255.5f ? 
                    0.0f : 
                    1.0f) : 
                 (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.44874573f ? 
                    0.0f : 
                     (data[0 /* vlan */] <178.5f ? 
                        0.6f : 
                        0.0f)))) : 
        0.0f);
    return pred;
  } // constant pool size = 30B, number of visited nodes = 7, static init size = 0B
}

class log_drf_1_Tree_39_class_10 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* no_of_characters */] <92.5f ? 
         (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <91.5f ? 
            0.0f : 
             (data[5 /* 4_letter_word */] <0.41601562f ? 
                 (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                    0.0f : 
                     (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <1.5f ? 
                        1.0f : 
                        0.0f)) : 
                0.0f)) : 
        5.364749E-6f);
    return pred;
  } // constant pool size = 22B, number of visited nodes = 5, static init size = 0B
}

class log_drf_1_Tree_39_class_11 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* no_of_characters */] <134.5f ? 
         (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <133.5f ? 
            0.0f : 
             (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.072265625f ? 
                0.0f : 
                 (data[8 /* 7_letter_word */] <0.22447205f ? 
                    0.33333334f : 
                    0.0f))) : 
        0.0f);
    return pred;
  } // constant pool size = 18B, number of visited nodes = 4, static init size = 0B
}

class log_drf_1_Tree_39_class_12 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <529.5f ? 
         (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <428.5f ? 
            0.0f : 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <582.5f ? 
                0.0f : 
                1.0f)) : 
         (data[2 /* no_of_characters */] <549.0f ? 
             (data[5 /* 4_letter_word */] <0.1015625f ? 
                1.0f : 
                0.0f) : 
            0.0f));
    return pred;
  } // constant pool size = 22B, number of visited nodes = 5, static init size = 0B
}

class log_drf_1_Tree_39_class_13 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* no_of_characters */] <54.0f ? 
         (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <36.5f ? 
             (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.125f ? 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.5f ? 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.5f ? 
                        0.99176955f : 
                        1.0f) : 
                     (data[2 /* no_of_characters */] <30.5f ? 
                        0.0f : 
                        0.33333334f)) : 
                1.0f) : 
             (data[8 /* 7_letter_word */] <0.125f ? 
                0.0f : 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <9.5f ? 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <51.5f ? 
                        1.0f : 
                        0.875f) : 
                    0.33333334f))) : 
         (data[2 /* no_of_characters */] <85.5f ? 
             (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.1015625f ? 
                0.0f : 
                 (data[6 /* 5_letter_word */] <0.22790527f ? 
                    1.0f : 
                    0.0f)) : 
             (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.49414062f ? 
                0.0f : 
                3.0105974E-5f)));
    return pred;
  } // constant pool size = 54B, number of visited nodes = 13, static init size = 0B
}

class log_drf_1_Tree_39_class_14 {
  static final double score0(double[] data) {
    double pred =      (data[1 /* type_of_time */] <2.5f ? 
         (data[5 /* 4_letter_word */] <0.22460938f ? 
             (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.171875f ? 
                0.0f : 
                 (data[7 /* 6_letter_word */] <0.26568604f ? 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.052083332f ? 
                        1.0f : 
                        0.5f) : 
                    0.0f)) : 
            0.0f) : 
        0.0f);
    return pred;
  } // constant pool size = 22B, number of visited nodes = 5, static init size = 0B
}

class log_drf_1_Tree_39_class_15 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* no_of_characters */] <100.5f ? 
         (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <98.5f ? 
            0.0f : 
             (data[0 /* vlan */] <29.5f ? 
                0.0f : 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <56.5f ? 
                     (data[3 /* no_of_ips */] <1.5f ? 
                        0.0f : 
                        0.205298f) : 
                    0.0f))) : 
         (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.3095703f ? 
             (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.5859375f ? 
                 (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <2.5f ? 
                     (Double.isNaN(data[15]) || data[15 /* 14_letter_word */] <0.10546875f ? 
                        0.0010056228f : 
                        0.03797468f) : 
                    0.0f) : 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <211.5f ? 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.1015625f ? 
                        0.0077562327f : 
                        0.0f) : 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.1796875f ? 
                        0.2990196f : 
                        0.7285714f))) : 
             (data[6 /* 5_letter_word */] <0.083984375f ? 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <386.5f ? 
                     (data[2 /* no_of_characters */] <127.5f ? 
                        0.23853211f : 
                        0.039451115f) : 
                    0.9782609f) : 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.2890625f ? 
                    0.0f : 
                     (data[2 /* no_of_characters */] <137.5f ? 
                        0.04f : 
                        0.0f)))));
    return pred;
  } // constant pool size = 70B, number of visited nodes = 17, static init size = 0B
}

class log_drf_1_Tree_39_class_16 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* no_of_characters */] <84.5f ? 
         (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.8330078f ? 
            0.0f : 
             (data[0 /* vlan */] <27.5f ? 
                0.0f : 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <77.0f ? 
                    0.0f : 
                    0.8333333f))) : 
         (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.3095703f ? 
             (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.15429688f ? 
                2.107415E-5f : 
                 (data[2 /* no_of_characters */] <94.5f ? 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.3671875f ? 
                        0.0f : 
                        0.035714287f) : 
                     (data[7 /* 6_letter_word */] <0.16751099f ? 
                        9.541985E-4f : 
                        0.0f))) : 
             (data[6 /* 5_letter_word */] <0.083984375f ? 
                 (data[2 /* no_of_characters */] <103.5f ? 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.16666667f ? 
                        0.0f : 
                        0.5f) : 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.6328125f ? 
                        0.0f : 
                        0.6666667f)) : 
                0.0f)));
    return pred;
  } // constant pool size = 54B, number of visited nodes = 13, static init size = 0B
}

class log_drf_1_Tree_39_class_17 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <659.0f ? 
        5.020912E-6f : 
         (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.51464844f ? 
             (data[0 /* vlan */] <173.5f ? 
                 (data[4 /* no_of_macs */] <0.5f ? 
                     (Double.isNaN(data[14]) || data[14 /* 13_letter_word */] <0.030691965f ? 
                        0.0f : 
                        1.0f) : 
                    0.0f) : 
                 (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.3799553f ? 
                     (data[2 /* no_of_characters */] <734.5f ? 
                        0.99319726f : 
                        0.75301206f) : 
                     (data[6 /* 5_letter_word */] <0.4140625f ? 
                        0.0f : 
                        0.82608694f))) : 
             (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <3.5f ? 
                0.0f : 
                 (data[3 /* no_of_ips */] <4.5f ? 
                    0.8333333f : 
                    0.0f))));
    return pred;
  } // constant pool size = 42B, number of visited nodes = 10, static init size = 0B
}

class log_drf_1_Tree_39_class_18 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <330.5f ? 
        0.0f : 
         (data[2 /* no_of_characters */] <332.5f ? 
             (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.4453125f ? 
                0.0f : 
                 (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.5493164f ? 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.0390625f ? 
                        0.0f : 
                        0.125f) : 
                    0.0f)) : 
            0.0f));
    return pred;
  } // constant pool size = 22B, number of visited nodes = 5, static init size = 0B
}

class log_drf_1_Tree_39_class_19 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* no_of_characters */] <136.5f ? 
         (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.22460938f ? 
             (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.1829338f ? 
                0.0f : 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.1015625f ? 
                    0.0f : 
                    0.055555556f)) : 
             (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                0.0f : 
                 (data[11 /* 10_letter_word */] <0.125f ? 
                    0.0f : 
                    0.9253521f))) : 
         (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.23535156f ? 
            0.0f : 
             (data[6 /* 5_letter_word */] <0.0625f ? 
                 (data[0 /* vlan */] <17.5f ? 
                    1.0f : 
                    0.0f) : 
                0.0f)));
    return pred;
  } // constant pool size = 38B, number of visited nodes = 9, static init size = 0B
}

class log_drf_1_Tree_39_class_20 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* no_of_characters */] <134.5f ? 
         (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.29101562f ? 
             (data[0 /* vlan */] <25.5f ? 
                 (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.1015625f ? 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.2890625f ? 
                        0.9282001f : 
                        0.99642855f) : 
                     (data[11 /* 10_letter_word */] <0.29107666f ? 
                        0.012173913f : 
                        1.0f)) : 
                0.0f) : 
             (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                 (data[2 /* no_of_characters */] <82.5f ? 
                    0.0f : 
                     (Double.isNaN(data[15]) || data[15 /* 14_letter_word */] <0.16666667f ? 
                        0.9747452f : 
                        0.0f)) : 
                0.0f)) : 
         (data[2 /* no_of_characters */] <157.5f ? 
             (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.26757812f ? 
                 (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.3671875f ? 
                        0.38538206f : 
                        0.0241363f) : 
                     (data[5 /* 4_letter_word */] <0.1015625f ? 
                        0.21232876f : 
                        0.0f)) : 
                 (Double.isNaN(data[12]) || data[12 /* 11_letter_word */] <0.25f ? 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.265625f ? 
                        0.033261802f : 
                        0.84615386f) : 
                    1.0f)) : 
             (data[8 /* 7_letter_word */] <0.25976562f ? 
                 (data[3 /* no_of_ips */] <1.5f ? 
                     (data[1 /* type_of_time */] <4.5f ? 
                        0.0f : 
                        0.4120867f) : 
                     (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.0390625f ? 
                        4.4747736E-4f : 
                        0.01754386f)) : 
                 (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
                    0.0f : 
                     (data[5 /* 4_letter_word */] <0.15625f ? 
                        0.019447288f : 
                        0.28849387f)))));
    return pred;
  } // constant pool size = 90B, number of visited nodes = 22, static init size = 0B
}

class log_drf_1_Tree_39_class_21 {
  static final double score0(double[] data) {
    double pred =      (data[1 /* type_of_time */] <3.5f ? 
         (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <220.5f ? 
            0.0f : 
             (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.17382812f ? 
                0.0f : 
                1.0f)) : 
         (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <237.5f ? 
             (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                 (data[0 /* vlan */] <17.5f ? 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.3125f ? 
                        0.006223605f : 
                        0.013761468f) : 
                     (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
                        0.0014807503f : 
                        5.936127E-4f)) : 
                 (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.18359375f ? 
                     (data[6 /* 5_letter_word */] <0.0546875f ? 
                        7.206169E-5f : 
                        0.0f) : 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.546875f ? 
                        3.481894E-4f : 
                        0.3043478f))) : 
             (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.16015625f ? 
                 (data[2 /* no_of_characters */] <246.5f ? 
                     (data[0 /* vlan */] <26.5f ? 
                        0.14814815f : 
                        0.0093896715f) : 
                     (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <3.5f ? 
                        0.0060201543f : 
                        0.0f)) : 
                 (data[5 /* 4_letter_word */] <0.546875f ? 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.4486084f ? 
                        0.0f : 
                        0.76666665f) : 
                    0.0f))));
    return pred;
  } // constant pool size = 70B, number of visited nodes = 17, static init size = 0B
}

class log_drf_1_Tree_39_class_22 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <227.5f ? 
         (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.15527344f ? 
            0.0f : 
             (data[0 /* vlan */] <5.5f ? 
                 (data[9 /* 8_letter_word */] <0.20898438f ? 
                    0.2f : 
                    0.0f) : 
                0.0f)) : 
         (data[2 /* no_of_characters */] <230.5f ? 
             (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.6328125f ? 
                0.0f : 
                 (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <1.5f ? 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.171875f ? 
                        0.0f : 
                        0.6f) : 
                    0.0f)) : 
             (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.47070312f ? 
                0.0f : 
                 (data[0 /* vlan */] <25.5f ? 
                     (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.087890625f ? 
                        0.010752688f : 
                        0.0f) : 
                    0.0f))));
    return pred;
  } // constant pool size = 46B, number of visited nodes = 11, static init size = 0B
}

class log_drf_1_Tree_39_class_23 {
  static final double score0(double[] data) {
    double pred =      (data[1 /* type_of_time */] <4.5f ? 
        0.0f : 
         (data[2 /* no_of_characters */] <135.5f ? 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <134.5f ? 
                0.0f : 
                 (data[3 /* no_of_ips */] <0.5f ? 
                     (data[0 /* vlan */] <17.5f ? 
                        1.0f : 
                        0.0f) : 
                    0.0f)) : 
             (data[6 /* 5_letter_word */] <0.029296875f ? 
                 (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.1328125f ? 
                     (data[0 /* vlan */] <17.5f ? 
                        0.75f : 
                        0.0f) : 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <17.5f ? 
                        0.9790428f : 
                        0.0f)) : 
                 (Double.isNaN(data[12]) || data[12 /* 11_letter_word */] <0.08203125f ? 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.4453125f ? 
                        0.002368065f : 
                        0.07692308f) : 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <385.5f ? 
                        0.0f : 
                        0.8f)))));
    return pred;
  } // constant pool size = 50B, number of visited nodes = 12, static init size = 0B
}

class log_drf_1_Tree_39_class_24 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* no_of_characters */] <144.5f ? 
         (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <143.5f ? 
            0.0f : 
             (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.125f ? 
                 (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.25f ? 
                     (data[0 /* vlan */] <17.5f ? 
                        1.0f : 
                        0.0f) : 
                    0.0f) : 
                0.0f)) : 
        0.0f);
    return pred;
  } // constant pool size = 22B, number of visited nodes = 5, static init size = 0B
}

class log_drf_1_Tree_39_class_25 {
  static final double score0(double[] data) {
    double pred =      (data[1 /* type_of_time */] <4.5f ? 
        0.0f : 
         (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <257.5f ? 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <157.5f ? 
                 (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.15625f ? 
                     (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <1.5f ? 
                        0.10879832f : 
                        0.9424049f) : 
                     (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <1.5f ? 
                        0.02905569f : 
                        1.0f)) : 
                 (data[0 /* vlan */] <25.5f ? 
                    0.0f : 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.546875f ? 
                        0.970699f : 
                        0.74496645f))) : 
             (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.421875f ? 
                 (Double.isNaN(data[13]) || data[13 /* 12_letter_word */] <0.18359375f ? 
                     (data[2 /* no_of_characters */] <321.5f ? 
                        0.139413f : 
                        3.6812073E-4f) : 
                    1.0f) : 
                 (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.2578125f ? 
                     (data[2 /* no_of_characters */] <289.5f ? 
                        0.0729927f : 
                        0.46223566f) : 
                    0.0f))));
    return pred;
  } // constant pool size = 54B, number of visited nodes = 13, static init size = 0B
}

class log_drf_1_Tree_39_class_26 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* no_of_characters */] <57.5f ? 
         (data[5 /* 4_letter_word */] <0.5f ? 
            0.0f : 
            0.9253112f) : 
        0.0f);
    return pred;
  } // constant pool size = 10B, number of visited nodes = 2, static init size = 0B
}

class log_drf_1_Tree_39_class_27 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <256.5f ? 
        0.0f : 
         (data[2 /* no_of_characters */] <258.5f ? 
             (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.44921875f ? 
                0.0f : 
                 (data[5 /* 4_letter_word */] <0.55033875f ? 
                    0.5f : 
                    0.0f)) : 
            0.0f));
    return pred;
  } // constant pool size = 18B, number of visited nodes = 4, static init size = 0B
}

class log_drf_1_Tree_39_class_28 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <447.5f ? 
        0.0f : 
         (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <533.5f ? 
             (data[2 /* no_of_characters */] <492.5f ? 
                 (data[3 /* no_of_ips */] <2.5f ? 
                    0.0f : 
                    1.0f) : 
                 (data[6 /* 5_letter_word */] <0.07421875f ? 
                    0.0f : 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <17.5f ? 
                        1.0f : 
                        0.0f))) : 
             (Double.isNaN(data[14]) || data[14 /* 13_letter_word */] <0.119140625f ? 
                0.0f : 
                1.0f)));
    return pred;
  } // constant pool size = 30B, number of visited nodes = 7, static init size = 0B
}

class log_drf_1_Tree_39_class_29 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <957.5f ? 
         (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.6904297f ? 
            0.0f : 
             (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.025390625f ? 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <113.5f ? 
                    0.0f : 
                     (data[0 /* vlan */] <149.5f ? 
                        0.22222222f : 
                        0.0f)) : 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <93.5f ? 
                    0.0f : 
                    0.2f))) : 
         (data[2 /* no_of_characters */] <962.5f ? 
            1.0f : 
             (Double.isNaN(data[12]) || data[12 /* 11_letter_word */] <0.029296875f ? 
                0.0f : 
                 (data[11 /* 10_letter_word */] <0.035590276f ? 
                    0.0f : 
                    0.5f))));
    return pred;
  } // constant pool size = 38B, number of visited nodes = 9, static init size = 0B
}

class log_drf_1_Tree_39_class_30 {
  static final double score0(double[] data) {
    double pred =      (data[1 /* type_of_time */] <1.5f ? 
        1.0f : 
        0.0f);
    return pred;
  } // constant pool size = 6B, number of visited nodes = 1, static init size = 0B
}

class log_drf_1_Tree_39_class_31 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* no_of_characters */] <113.5f ? 
         (Double.isNaN(data[15]) || data[15 /* 14_letter_word */] <0.100097656f ? 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <65.5f ? 
                 (Double.isNaN(data[13]) || data[13 /* 12_letter_word */] <0.125f ? 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.1015625f ? 
                        0.0f : 
                        0.0028319699f) : 
                     (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.125f ? 
                        0.0f : 
                        0.6666667f)) : 
                 (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.0859375f ? 
                     (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.25f ? 
                        0.07708442f : 
                        1.0f) : 
                     (data[2 /* no_of_characters */] <97.5f ? 
                        0.375f : 
                        0.83476394f))) : 
             (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                1.0f : 
                 (data[15 /* 14_letter_word */] <0.22491519f ? 
                    1.0f : 
                    0.8780488f))) : 
         (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.23535156f ? 
             (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.080078125f ? 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.43359375f ? 
                     (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
                        0.0f : 
                        7.446809E-4f) : 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.4453125f ? 
                        6.3461845E-4f : 
                        0.032352943f)) : 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.53515625f ? 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <129.5f ? 
                        0.0f : 
                        3.952569E-4f) : 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.078125f ? 
                        0.0f : 
                        1.0f))) : 
             (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.31054688f ? 
                0.0f : 
                 (data[11 /* 10_letter_word */] <0.26820755f ? 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <57.5f ? 
                        0.0f : 
                        1.0f) : 
                     (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                        0.0f : 
                        0.9459459f)))));
    return pred;
  } // constant pool size = 94B, number of visited nodes = 23, static init size = 0B
}

class log_drf_1_Tree_39_class_32 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* no_of_characters */] <123.5f ? 
         (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <121.5f ? 
             (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.22460938f ? 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.546875f ? 
                     (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                        6.572029E-5f : 
                        0.0035885167f) : 
                     (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                        0.0f : 
                        0.42477876f)) : 
                 (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.125f ? 
                     (data[0 /* vlan */] <33.5f ? 
                        0.3955224f : 
                        0.0f) : 
                    0.0f)) : 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <25.5f ? 
                0.0f : 
                 (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.44921875f ? 
                    0.0f : 
                     (data[7 /* 6_letter_word */] <0.25f ? 
                        0.0f : 
                        1.0f)))) : 
        0.0f);
    return pred;
  } // constant pool size = 46B, number of visited nodes = 11, static init size = 0B
}

class log_drf_1_Tree_39_class_33 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* no_of_characters */] <69.5f ? 
         (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <67.0f ? 
             (data[5 /* 4_letter_word */] <0.5f ? 
                 (data[0 /* vlan */] <65.5f ? 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.2890625f ? 
                        0.027522936f : 
                        1.0f) : 
                    0.0f) : 
                0.0f) : 
             (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.5f ? 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <69.5f ? 
                    1.0f : 
                    0.0f) : 
                0.0f)) : 
         (data[2 /* no_of_characters */] <84.5f ? 
             (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.1015625f ? 
                 (data[0 /* vlan */] <17.5f ? 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.5f ? 
                        0.9117647f : 
                        1.0f) : 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <62.5f ? 
                        0.0f : 
                        0.014285714f)) : 
                0.0f) : 
             (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.080078125f ? 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.15625f ? 
                     (data[1 /* type_of_time */] <2.5f ? 
                        0.006993007f : 
                        1.1912483E-4f) : 
                     (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.015625f ? 
                        3.718624E-4f : 
                        0.0f)) : 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <280.5f ? 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.703125f ? 
                        3.612978E-5f : 
                        0.5f) : 
                     (data[2 /* no_of_characters */] <390.5f ? 
                        0.3964497f : 
                        0.0f)))));
    return pred;
  } // constant pool size = 78B, number of visited nodes = 19, static init size = 0B
}

class log_drf_1_Tree_39_class_34 {
  static final double score0(double[] data) {
    double pred =     1.0E-5f;
    return pred;
  } // constant pool size = 2B, number of visited nodes = 0, static init size = 0B
}

class log_drf_1_Tree_39_class_35 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* no_of_characters */] <88.5f ? 
         (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.74902344f ? 
             (data[0 /* vlan */] <13.5f ? 
                0.005076142f : 
                0.0f) : 
            0.0032327587f) : 
         (data[2 /* no_of_characters */] <137.5f ? 
             (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.3671875f ? 
                 (data[0 /* vlan */] <17.5f ? 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.2890625f ? 
                        0.0027247956f : 
                        0.11111111f) : 
                    0.0f) : 
                0.0f) : 
             (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.49414062f ? 
                0.0f : 
                 (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                    0.0f : 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <191.5f ? 
                        0.0f : 
                        0.0054200543f)))));
    return pred;
  } // constant pool size = 42B, number of visited nodes = 10, static init size = 0B
}

class log_drf_1_Tree_39_class_36 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* no_of_characters */] <131.5f ? 
         (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <126.5f ? 
            0.0f : 
             (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.44921875f ? 
                0.0f : 
                 (data[0 /* vlan */] <9.5f ? 
                    0.8f : 
                    0.0f))) : 
        0.0f);
    return pred;
  } // constant pool size = 18B, number of visited nodes = 4, static init size = 0B
}

class log_drf_1_Tree_39_class_37 {
  static final double score0(double[] data) {
    double pred =      (data[1 /* type_of_time */] <4.5f ? 
         (data[2 /* no_of_characters */] <153.5f ? 
             (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.125f ? 
                 (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.37109375f ? 
                     (data[2 /* no_of_characters */] <106.0f ? 
                        0.97572815f : 
                        1.0f) : 
                     (data[2 /* no_of_characters */] <138.0f ? 
                        1.0f : 
                        0.0f)) : 
                 (data[1 /* type_of_time */] <3.5f ? 
                     (data[3 /* no_of_ips */] <0.5f ? 
                        1.0f : 
                        0.0f) : 
                    1.0f)) : 
             (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.18359375f ? 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.6328125f ? 
                     (data[1 /* type_of_time */] <3.5f ? 
                        0.15566038f : 
                        0.99796516f) : 
                     (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <1.5f ? 
                        1.0f : 
                        0.0f)) : 
                 (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.4163971f ? 
                     (data[2 /* no_of_characters */] <222.5f ? 
                        0.19506173f : 
                        0.99761903f) : 
                     (Double.isNaN(data[1]) || data[1 /* type_of_time */] <3.5f ? 
                        0.0f : 
                        1.0f)))) : 
         (data[2 /* no_of_characters */] <83.5f ? 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <149.5f ? 
                0.0f : 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <35.5f ? 
                    0.0f : 
                     (Double.isNaN(data[12]) || data[12 /* 11_letter_word */] <0.5f ? 
                        0.9875f : 
                        1.0f))) : 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <155.5f ? 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.46875f ? 
                    0.0f : 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.4140625f ? 
                        0.0f : 
                        0.002035002f)) : 
                 (data[5 /* 4_letter_word */] <0.05859375f ? 
                     (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                        0.085427135f : 
                        0.0f) : 
                    0.0f))));
    return pred;
  } // constant pool size = 98B, number of visited nodes = 24, static init size = 0B
}

class log_drf_1_Tree_39_class_38 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* no_of_characters */] <93.5f ? 
         (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <88.5f ? 
            0.0f : 
             (data[2 /* no_of_characters */] <89.5f ? 
                 (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.25f ? 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.7421875f ? 
                        0.0f : 
                        0.083333336f) : 
                    0.0f) : 
                 (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.4140625f ? 
                     (data[3 /* no_of_ips */] <1.5f ? 
                        0.0028169013f : 
                        0.0f) : 
                    0.125f))) : 
        0.0f);
    return pred;
  } // constant pool size = 30B, number of visited nodes = 7, static init size = 0B
}


class log_drf_1_Forest_40 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += log_drf_1_Tree_40_class_0.score0(fdata);
    preds[2] += log_drf_1_Tree_40_class_1.score0(fdata);
    preds[3] += log_drf_1_Tree_40_class_2.score0(fdata);
    preds[4] += log_drf_1_Tree_40_class_3.score0(fdata);
    preds[5] += log_drf_1_Tree_40_class_4.score0(fdata);
    preds[6] += log_drf_1_Tree_40_class_5.score0(fdata);
    preds[7] += log_drf_1_Tree_40_class_6.score0(fdata);
    preds[8] += log_drf_1_Tree_40_class_7.score0(fdata);
    preds[9] += log_drf_1_Tree_40_class_8.score0(fdata);
    preds[10] += log_drf_1_Tree_40_class_9.score0(fdata);
    preds[11] += log_drf_1_Tree_40_class_10.score0(fdata);
    preds[12] += log_drf_1_Tree_40_class_11.score0(fdata);
    preds[13] += log_drf_1_Tree_40_class_12.score0(fdata);
    preds[14] += log_drf_1_Tree_40_class_13.score0(fdata);
    preds[15] += log_drf_1_Tree_40_class_14.score0(fdata);
    preds[16] += log_drf_1_Tree_40_class_15.score0(fdata);
    preds[17] += log_drf_1_Tree_40_class_16.score0(fdata);
    preds[18] += log_drf_1_Tree_40_class_17.score0(fdata);
    preds[19] += log_drf_1_Tree_40_class_18.score0(fdata);
    preds[20] += log_drf_1_Tree_40_class_19.score0(fdata);
    preds[21] += log_drf_1_Tree_40_class_20.score0(fdata);
    preds[22] += log_drf_1_Tree_40_class_21.score0(fdata);
    preds[23] += log_drf_1_Tree_40_class_22.score0(fdata);
    preds[24] += log_drf_1_Tree_40_class_23.score0(fdata);
    preds[25] += log_drf_1_Tree_40_class_24.score0(fdata);
    preds[26] += log_drf_1_Tree_40_class_25.score0(fdata);
    preds[27] += log_drf_1_Tree_40_class_26.score0(fdata);
    preds[28] += log_drf_1_Tree_40_class_27.score0(fdata);
    preds[29] += log_drf_1_Tree_40_class_28.score0(fdata);
    preds[30] += log_drf_1_Tree_40_class_29.score0(fdata);
    preds[31] += log_drf_1_Tree_40_class_30.score0(fdata);
    preds[32] += log_drf_1_Tree_40_class_31.score0(fdata);
    preds[33] += log_drf_1_Tree_40_class_32.score0(fdata);
    preds[34] += log_drf_1_Tree_40_class_33.score0(fdata);
    preds[35] += log_drf_1_Tree_40_class_34.score0(fdata);
    preds[36] += log_drf_1_Tree_40_class_35.score0(fdata);
    preds[37] += log_drf_1_Tree_40_class_36.score0(fdata);
    preds[38] += log_drf_1_Tree_40_class_37.score0(fdata);
    preds[39] += log_drf_1_Tree_40_class_38.score0(fdata);
  }
}
class log_drf_1_Tree_40_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.020507812f ? 
         (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.20898438f ? 
            0.0f : 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <1061.0f ? 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <799.0f ? 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <522.5f ? 
                        1.5051174E-4f : 
                        0.007017544f) : 
                     (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.015625f ? 
                        0.0f : 
                        1.0f)) : 
                0.5f)) : 
         (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <572.0f ? 
            0.0f : 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <127.5f ? 
                 (data[4 /* no_of_macs */] <0.5f ? 
                    0.0f : 
                    1.0f) : 
                0.0f)));
    return pred;
  } // constant pool size = 38B, number of visited nodes = 9, static init size = 0B
}

class log_drf_1_Tree_40_class_1 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.39208984f ? 
         (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.3246994f ? 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <175.5f ? 
                0.0f : 
                 (data[8 /* 7_letter_word */] <0.265625f ? 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.23242188f ? 
                        0.0f : 
                        0.026422765f) : 
                    0.0f)) : 
             (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
                0.0f : 
                 (data[7 /* 6_letter_word */] <0.0625f ? 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <113.5f ? 
                        0.0f : 
                        0.3783784f) : 
                    0.0f))) : 
         (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <260.5f ? 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <258.5f ? 
                0.0f : 
                 (data[1 /* type_of_time */] <4.5f ? 
                    0.0f : 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.15625f ? 
                        0.0f : 
                        0.5f))) : 
             (data[2 /* no_of_characters */] <290.5f ? 
                 (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
                     (data[5 /* 4_letter_word */] <0.44908142f ? 
                        0.25773194f : 
                        0.0031948881f) : 
                     (data[3 /* no_of_ips */] <0.5f ? 
                        0.0f : 
                        0.9478673f)) : 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <137.5f ? 
                    0.0f : 
                     (data[5 /* 4_letter_word */] <0.41108704f ? 
                        0.8684211f : 
                        0.0053547523f)))));
    return pred;
  } // constant pool size = 74B, number of visited nodes = 18, static init size = 0B
}

class log_drf_1_Tree_40_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.47216797f ? 
         (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.13371944f ? 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <225.5f ? 
                0.0f : 
                 (data[8 /* 7_letter_word */] <0.20703125f ? 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.1875f ? 
                        0.0f : 
                        0.003322259f) : 
                    0.0f)) : 
             (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.17382812f ? 
                 (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.5859375f ? 
                     (data[7 /* 6_letter_word */] <0.17256007f ? 
                        0.076642334f : 
                        0.0026516407f) : 
                     (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.1015625f ? 
                        0.49760765f : 
                        0.0f)) : 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <654.5f ? 
                     (data[2 /* no_of_characters */] <134.5f ? 
                        0.019310344f : 
                        0.0f) : 
                     (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.109375f ? 
                        0.6666667f : 
                        1.0f)))) : 
         (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <158.5f ? 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <144.5f ? 
                 (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <1.5f ? 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <137.5f ? 
                        0.01835564f : 
                        0.11764706f) : 
                    0.0f) : 
                 (Double.isNaN(data[13]) || data[13 /* 12_letter_word */] <0.1015625f ? 
                     (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <2.0f ? 
                        0.798005f : 
                        0.0f) : 
                    0.0f)) : 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <986.5f ? 
                 (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.44921875f ? 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <178.5f ? 
                        0.0f : 
                        0.041666668f) : 
                     (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                        0.0f : 
                        0.64f)) : 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <1019.0f ? 
                    0.25f : 
                    0.0f))));
    return pred;
  } // constant pool size = 94B, number of visited nodes = 23, static init size = 0B
}

class log_drf_1_Tree_40_class_3 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.3227539f ? 
         (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.4951172f ? 
             (data[2 /* no_of_characters */] <105.5f ? 
                 (data[1 /* type_of_time */] <4.5f ? 
                     (data[1 /* type_of_time */] <3.0f ? 
                        0.0f : 
                        0.019480519f) : 
                    0.0f) : 
                 (data[8 /* 7_letter_word */] <0.2578125f ? 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.23968506f ? 
                        0.0f : 
                        9.803922E-4f) : 
                    0.0f)) : 
             (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
                0.0f : 
                 (data[3 /* no_of_ips */] <0.5f ? 
                    0.0f : 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.22441483f ? 
                        0.0f : 
                        0.44556963f)))) : 
         (data[2 /* no_of_characters */] <140.5f ? 
            0.0f : 
             (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.31054688f ? 
                 (data[2 /* no_of_characters */] <155.5f ? 
                     (data[6 /* 5_letter_word */] <0.3650818f ? 
                        0.9830398f : 
                        0.41475758f) : 
                     (data[6 /* 5_letter_word */] <0.4338646f ? 
                        0.2010748f : 
                        0.0f)) : 
                0.0f)));
    return pred;
  } // constant pool size = 62B, number of visited nodes = 15, static init size = 0B
}

class log_drf_1_Tree_40_class_4 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.3227539f ? 
         (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.42285156f ? 
             (data[0 /* vlan */] <29.5f ? 
                 (data[1 /* type_of_time */] <4.5f ? 
                    0.0f : 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.828125f ? 
                        1.3969082E-4f : 
                        8.550663E-4f)) : 
                0.0f) : 
             (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.13085938f ? 
                 (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.4609375f ? 
                    0.0f : 
                     (data[2 /* no_of_characters */] <120.5f ? 
                        0.0022883294f : 
                        0.0f)) : 
                 (data[8 /* 7_letter_word */] <0.15537262f ? 
                     (data[5 /* 4_letter_word */] <0.3549107f ? 
                        0.85714287f : 
                        0.0f) : 
                    0.0f))) : 
         (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.29101562f ? 
            0.0f : 
             (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.16796875f ? 
                0.0f : 
                0.9705882f)));
    return pred;
  } // constant pool size = 50B, number of visited nodes = 12, static init size = 0B
}

class log_drf_1_Tree_40_class_5 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.095703125f ? 
         (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.4951172f ? 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <215.5f ? 
                0.0f : 
                 (Double.isNaN(data[12]) || data[12 /* 11_letter_word */] <0.2890625f ? 
                    0.0f : 
                     (data[8 /* 7_letter_word */] <0.4140625f ? 
                        0.5f : 
                        0.0f))) : 
             (data[1 /* type_of_time */] <4.5f ? 
                0.0f : 
                 (data[3 /* no_of_ips */] <0.5f ? 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <65.5f ? 
                        6.1262E-4f : 
                        0.038961038f) : 
                    0.0f))) : 
         (data[7 /* 6_letter_word */] <0.2334671f ? 
             (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.22929625f ? 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <33.5f ? 
                    0.0f : 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <296.5f ? 
                        0.010628019f : 
                        0.18333334f)) : 
                 (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.0390625f ? 
                    1.0f : 
                    0.0f)) : 
             (data[1 /* type_of_time */] <4.5f ? 
                0.0f : 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <61.5f ? 
                     (data[6 /* 5_letter_word */] <0.03125f ? 
                        1.27665E-4f : 
                        0.0f) : 
                     (data[0 /* vlan */] <100.0f ? 
                        0.011655011f : 
                        0.0f)))));
    return pred;
  } // constant pool size = 70B, number of visited nodes = 17, static init size = 0B
}

class log_drf_1_Tree_40_class_6 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.24804688f ? 
         (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.9277344f ? 
             (data[2 /* no_of_characters */] <70.5f ? 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.74609375f ? 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.6171875f ? 
                        0.0f : 
                        0.6f) : 
                     (data[2 /* no_of_characters */] <33.0f ? 
                        0.5f : 
                        1.0f)) : 
                 (data[8 /* 7_letter_word */] <0.05078125f ? 
                     (data[2 /* no_of_characters */] <89.5f ? 
                        0.0011504831f : 
                        0.0f) : 
                    0.0f)) : 
             (data[1 /* type_of_time */] <4.5f ? 
                0.0f : 
                 (data[2 /* no_of_characters */] <55.5f ? 
                    0.875f : 
                    0.0f))) : 
         (data[2 /* no_of_characters */] <98.5f ? 
             (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.10107422f ? 
                 (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.1015625f ? 
                     (data[3 /* no_of_ips */] <0.5f ? 
                        0.059471365f : 
                        0.0f) : 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.1015625f ? 
                        0.086499594f : 
                        0.22689076f)) : 
                 (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.2911873f ? 
                    1.0f : 
                    0.0f)) : 
             (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
                0.0f : 
                 (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.17578125f ? 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.15625f ? 
                        0.0f : 
                        0.022940563f) : 
                    0.0f))));
    return pred;
  } // constant pool size = 78B, number of visited nodes = 19, static init size = 0B
}

class log_drf_1_Tree_40_class_7 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.94970703f ? 
        0.0f : 
        0.021650646f);
    return pred;
  } // constant pool size = 6B, number of visited nodes = 1, static init size = 0B
}

class log_drf_1_Tree_40_class_8 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.53759766f ? 
         (data[8 /* 7_letter_word */] <0.12597656f ? 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <883.5f ? 
                 (data[1 /* type_of_time */] <4.5f ? 
                    0.0f : 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <629.0f ? 
                        5.180542E-5f : 
                        0.0065789474f)) : 
                 (data[5 /* 4_letter_word */] <0.059972428f ? 
                     (data[2 /* no_of_characters */] <1008.5f ? 
                        1.0f : 
                        0.18965517f) : 
                     (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <4.5f ? 
                        0.11627907f : 
                        1.0f))) : 
             (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
                0.0f : 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.4609375f ? 
                    0.0f : 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <178.5f ? 
                        0.0f : 
                        0.33333334f)))) : 
         (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <830.0f ? 
            0.0f : 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <946.5f ? 
                1.0f : 
                 (data[1 /* type_of_time */] <4.5f ? 
                    0.0f : 
                     (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <4.5f ? 
                        0.07692308f : 
                        1.0f)))));
    return pred;
  } // constant pool size = 62B, number of visited nodes = 15, static init size = 0B
}

class log_drf_1_Tree_40_class_9 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.3095703f ? 
         (data[8 /* 7_letter_word */] <0.20703125f ? 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <161.5f ? 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.19247437f ? 
                    0.0f : 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.1484375f ? 
                        0.0f : 
                        0.10483871f)) : 
                 (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.3515625f ? 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.0546875f ? 
                        0.026446281f : 
                        0.56126237f) : 
                     (data[2 /* no_of_characters */] <137.5f ? 
                        0.3464567f : 
                        0.0f))) : 
             (data[1 /* type_of_time */] <3.5f ? 
                 (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.125f ? 
                    0.0f : 
                     (data[3 /* no_of_ips */] <2.5f ? 
                        0.0f : 
                        1.0f)) : 
                0.0f)) : 
         (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <173.5f ? 
             (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.41601562f ? 
                 (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <3.5f ? 
                    0.0f : 
                    1.0f) : 
                0.9655172f) : 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <202.0f ? 
                 (data[3 /* no_of_ips */] <2.5f ? 
                    0.0f : 
                     (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.0f ? 
                        1.0f : 
                        0.0f)) : 
                0.0f)));
    return pred;
  } // constant pool size = 70B, number of visited nodes = 17, static init size = 0B
}

class log_drf_1_Tree_40_class_10 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.027832031f ? 
         (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.4638672f ? 
             (data[2 /* no_of_characters */] <95.5f ? 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.58203125f ? 
                    0.0f : 
                    0.00990099f) : 
                0.0f) : 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <153.5f ? 
                0.0f : 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.4140625f ? 
                    0.0f : 
                     (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
                        0.0f : 
                        0.5f)))) : 
        0.0f);
    return pred;
  } // constant pool size = 30B, number of visited nodes = 7, static init size = 0B
}

class log_drf_1_Tree_40_class_11 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.27929688f ? 
        0.0f : 
         (data[7 /* 6_letter_word */] <0.2926693f ? 
             (data[2 /* no_of_characters */] <143.0f ? 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <103.5f ? 
                    0.0f : 
                    0.071428575f) : 
                0.0f) : 
            0.0f));
    return pred;
  } // constant pool size = 18B, number of visited nodes = 4, static init size = 0B
}

class log_drf_1_Tree_40_class_12 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.92822266f ? 
         (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.319983f ? 
            0.0f : 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <590.5f ? 
                0.0f : 
                0.95454544f)) : 
         (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <369.0f ? 
            0.0f : 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <515.0f ? 
                1.0f : 
                0.8f)));
    return pred;
  } // constant pool size = 22B, number of visited nodes = 5, static init size = 0B
}

class log_drf_1_Tree_40_class_13 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.2553711f ? 
         (data[8 /* 7_letter_word */] <0.26757812f ? 
             (data[2 /* no_of_characters */] <60.5f ? 
                0.8921833f : 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.19023132f ? 
                     (data[2 /* no_of_characters */] <79.5f ? 
                        6.443299E-4f : 
                        0.0f) : 
                     (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.15625f ? 
                        0.0f : 
                        0.0028248588f))) : 
             (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
                0.0f : 
                 (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                    0.0f : 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <138.0f ? 
                        0.0f : 
                        0.33333334f)))) : 
         (data[2 /* no_of_characters */] <48.5f ? 
            1.0f : 
             (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.19335938f ? 
                0.0f : 
                 (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.18359375f ? 
                    0.0f : 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.1015625f ? 
                        0.0f : 
                        0.08695652f)))));
    return pred;
  } // constant pool size = 54B, number of visited nodes = 13, static init size = 0B
}

class log_drf_1_Tree_40_class_14 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.19726562f ? 
        0.0f : 
         (data[7 /* 6_letter_word */] <0.20745659f ? 
             (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.1640625f ? 
                 (data[1 /* type_of_time */] <2.5f ? 
                    0.75f : 
                    0.0f) : 
                 (Double.isNaN(data[12]) || data[12 /* 11_letter_word */] <0.1015625f ? 
                    0.0f : 
                    0.78571427f)) : 
            0.0f));
    return pred;
  } // constant pool size = 22B, number of visited nodes = 5, static init size = 0B
}

class log_drf_1_Tree_40_class_15 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.94970703f ? 
         (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.59472656f ? 
             (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.31054688f ? 
                 (Double.isNaN(data[15]) || data[15 /* 14_letter_word */] <0.10546875f ? 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.4140625f ? 
                        0.0012091551f : 
                        0.0f) : 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.055755615f ? 
                        0.0f : 
                        0.10576923f)) : 
                 (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.3080357f ? 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <81.5f ? 
                        0.0f : 
                        0.08941606f) : 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.24625397f ? 
                        0.0f : 
                        0.23152709f))) : 
             (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.18359375f ? 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <360.5f ? 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <220.5f ? 
                        0.0069112172f : 
                        0.04f) : 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <419.5f ? 
                        1.0f : 
                        0.04f)) : 
                 (data[1 /* type_of_time */] <4.5f ? 
                    0.0f : 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <200.5f ? 
                        0.0f : 
                        1.0f)))) : 
         (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <100.5f ? 
             (data[0 /* vlan */] <27.5f ? 
                0.0f : 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <98.5f ? 
                    0.0f : 
                     (Double.isNaN(data[4]) || data[4 /* no_of_macs */] <0.5f ? 
                        0.3393295f : 
                        0.0f))) : 
            0.0f));
    return pred;
  } // constant pool size = 78B, number of visited nodes = 19, static init size = 0B
}

class log_drf_1_Tree_40_class_16 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.94970703f ? 
         (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.15488386f ? 
             (data[2 /* no_of_characters */] <95.5f ? 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.203125f ? 
                    0.0f : 
                    0.0046296297f) : 
                0.0f) : 
             (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
                0.0f : 
                 (data[3 /* no_of_ips */] <0.5f ? 
                     (data[5 /* 4_letter_word */] <0.18780226f ? 
                        0.0125f : 
                        6.101281E-4f) : 
                    0.0f))) : 
         (data[2 /* no_of_characters */] <80.5f ? 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <59.5f ? 
                0.020618556f : 
                0.0f) : 
             (Double.isNaN(data[4]) || data[4 /* no_of_macs */] <0.5f ? 
                 (data[0 /* vlan */] <25.5f ? 
                    0.0f : 
                     (data[2 /* no_of_characters */] <95.5f ? 
                        0.0f : 
                        3.6166364E-4f)) : 
                0.0f)));
    return pred;
  } // constant pool size = 50B, number of visited nodes = 12, static init size = 0B
}

class log_drf_1_Tree_40_class_17 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.3227539f ? 
         (data[8 /* 7_letter_word */] <0.123046875f ? 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <659.5f ? 
                0.0f : 
                 (Double.isNaN(data[12]) || data[12 /* 11_letter_word */] <0.01171875f ? 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <885.0f ? 
                        0.9798658f : 
                        0.02247191f) : 
                     (data[11 /* 10_letter_word */] <0.0390625f ? 
                        0.5f : 
                        0.0f))) : 
            0.0f) : 
         (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <1011.5f ? 
             (data[1 /* type_of_time */] <2.5f ? 
                 (data[5 /* 4_letter_word */] <0.16796875f ? 
                     (data[0 /* vlan */] <17.5f ? 
                        0.2f : 
                        0.0f) : 
                    0.0f) : 
                0.0f) : 
             (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.046875f ? 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.02734375f ? 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.171875f ? 
                        0.987013f : 
                        1.0f) : 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <1022.5f ? 
                        1.0f : 
                        0.7777778f)) : 
                0.8695652f)));
    return pred;
  } // constant pool size = 58B, number of visited nodes = 14, static init size = 0B
}

class log_drf_1_Tree_40_class_18 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.30566406f ? 
        0.0f : 
         (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.4453125f ? 
            0.0f : 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <330.5f ? 
                0.0f : 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <341.0f ? 
                    0.09090909f : 
                    0.0f))));
    return pred;
  } // constant pool size = 18B, number of visited nodes = 4, static init size = 0B
}

class log_drf_1_Tree_40_class_19 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.23583984f ? 
         (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.18332863f ? 
            0.0f : 
             (data[2 /* no_of_characters */] <153.0f ? 
                0.33333334f : 
                0.0f)) : 
         (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.20800781f ? 
            0.0f : 
             (data[0 /* vlan */] <19.5f ? 
                1.0f : 
                0.0f)));
    return pred;
  } // constant pool size = 22B, number of visited nodes = 5, static init size = 0B
}

class log_drf_1_Tree_40_class_20 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.92822266f ? 
         (data[8 /* 7_letter_word */] <0.2607422f ? 
             (data[0 /* vlan */] <25.5f ? 
                 (data[5 /* 4_letter_word */] <0.05859375f ? 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <215.5f ? 
                        0.89145964f : 
                        0.004219409f) : 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.3125f ? 
                        0.27148643f : 
                        0.9836786f)) : 
                0.0f) : 
             (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
                0.0f : 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.3783482f ? 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <33.5f ? 
                        0.51421803f : 
                        0.0f) : 
                     (data[2 /* no_of_characters */] <120.5f ? 
                        0.97849464f : 
                        0.021212121f)))) : 
         (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <135.5f ? 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <25.5f ? 
                0.9918033f : 
                0.0f) : 
            0.15697674f));
    return pred;
  } // constant pool size = 50B, number of visited nodes = 12, static init size = 0B
}

class log_drf_1_Tree_40_class_21 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.15478516f ? 
         (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.8027344f ? 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <220.5f ? 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.8984375f ? 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.3203125f ? 
                        6.103262E-4f : 
                        0.0033894598f) : 
                     (data[2 /* no_of_characters */] <162.5f ? 
                        0.0f : 
                        0.0024305556f)) : 
                 (data[8 /* 7_letter_word */] <0.1640625f ? 
                     (data[2 /* no_of_characters */] <269.5f ? 
                        0.0030562347f : 
                        0.0f) : 
                     (data[0 /* vlan */] <33.5f ? 
                        5.417118E-4f : 
                        0.008013083f))) : 
             (data[1 /* type_of_time */] <4.5f ? 
                0.0f : 
                 (data[0 /* vlan */] <17.5f ? 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.9275665f ? 
                        0.30952382f : 
                        0.0f) : 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <268.5f ? 
                        0.0f : 
                        0.018867925f)))) : 
         (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <215.5f ? 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <178.5f ? 
                0.0f : 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.5494792f ? 
                    0.0f : 
                    1.0f)) : 
             (data[2 /* no_of_characters */] <222.5f ? 
                 (data[11 /* 10_letter_word */] <0.2109127f ? 
                    0.0f : 
                     (data[12 /* 11_letter_word */] <0.125f ? 
                        0.75f : 
                        1.0f)) : 
                 (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.084375f ? 
                     (data[11 /* 10_letter_word */] <0.2274208f ? 
                        0.0f : 
                        0.0041067763f) : 
                     (data[1 /* type_of_time */] <4.5f ? 
                        0.0f : 
                        0.9166667f)))));
    return pred;
  } // constant pool size = 90B, number of visited nodes = 22, static init size = 0B
}

class log_drf_1_Tree_40_class_22 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.49560547f ? 
         (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.15527344f ? 
            0.0f : 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <325.5f ? 
                0.0f : 
                 (Double.isNaN(data[14]) || data[14 /* 13_letter_word */] <0.01171875f ? 
                     (data[2 /* no_of_characters */] <340.5f ? 
                        0.05f : 
                        0.0f) : 
                    0.0f))) : 
         (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <227.5f ? 
             (data[0 /* vlan */] <7.5f ? 
                 (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.083984375f ? 
                    0.0f : 
                    0.125f) : 
                0.0f) : 
             (data[2 /* no_of_characters */] <231.5f ? 
                 (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.2890625f ? 
                    0.0f : 
                     (data[0 /* vlan */] <106.0f ? 
                        0.5f : 
                        0.0f)) : 
                0.0f)));
    return pred;
  } // constant pool size = 46B, number of visited nodes = 11, static init size = 0B
}

class log_drf_1_Tree_40_class_23 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.13378906f ? 
         (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.13378906f ? 
             (data[0 /* vlan */] <19.5f ? 
                 (Double.isNaN(data[14]) || data[14 /* 13_letter_word */] <0.0625f ? 
                     (data[1 /* type_of_time */] <4.5f ? 
                        0.0f : 
                        0.9792435f) : 
                    0.0f) : 
                0.0f) : 
             (Double.isNaN(data[13]) || data[13 /* 12_letter_word */] <0.0546875f ? 
                 (Double.isNaN(data[15]) || data[15 /* 14_letter_word */] <0.12695312f ? 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.265625f ? 
                        0.0f : 
                        0.0022667171f) : 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.078125f ? 
                        0.0f : 
                        0.021276595f)) : 
                 (data[13 /* 12_letter_word */] <0.10040283f ? 
                    1.0f : 
                    0.0f))) : 
         (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.4140625f ? 
            0.0f : 
             (data[8 /* 7_letter_word */] <0.26757812f ? 
                0.0f : 
                1.0f)));
    return pred;
  } // constant pool size = 50B, number of visited nodes = 12, static init size = 0B
}

class log_drf_1_Tree_40_class_24 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.9746094f ? 
        0.0f : 
        2.0702505E-4f);
    return pred;
  } // constant pool size = 6B, number of visited nodes = 1, static init size = 0B
}

class log_drf_1_Tree_40_class_25 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.94970703f ? 
         (data[8 /* 7_letter_word */] <0.14453125f ? 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <29.5f ? 
                 (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.40848213f ? 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.3203125f ? 
                        0.011127237f : 
                        0.0f) : 
                     (data[2 /* no_of_characters */] <117.5f ? 
                        0.0030084236f : 
                        0.0f)) : 
                 (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.55915177f ? 
                     (data[2 /* no_of_characters */] <117.5f ? 
                        0.26699293f : 
                        0.7025773f) : 
                     (data[0 /* vlan */] <45.5f ? 
                        0.94409937f : 
                        0.0f))) : 
             (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
                0.0f : 
                 (data[2 /* no_of_characters */] <130.5f ? 
                     (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                        0.0134922415f : 
                        0.31126598f) : 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.03125f ? 
                        0.5414073f : 
                        0.13315031f)))) : 
         (data[2 /* no_of_characters */] <98.5f ? 
             (data[0 /* vlan */] <27.5f ? 
                0.0f : 
                 (data[2 /* no_of_characters */] <84.5f ? 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <66.5f ? 
                        0.98245615f : 
                        0.0f) : 
                     (data[2 /* no_of_characters */] <90.5f ? 
                        0.9977925f : 
                        1.0f))) : 
             (Double.isNaN(data[4]) || data[4 /* no_of_macs */] <0.5f ? 
                 (data[0 /* vlan */] <25.5f ? 
                    0.0f : 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <61.5f ? 
                        0.7542522f : 
                        0.0f)) : 
                 (data[3 /* no_of_ips */] <1.5f ? 
                    0.0f : 
                    1.0f))));
    return pred;
  } // constant pool size = 90B, number of visited nodes = 22, static init size = 0B
}

class log_drf_1_Tree_40_class_26 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.6513672f ? 
        0.0f : 
         (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.29101562f ? 
            0.0f : 
             (data[2 /* no_of_characters */] <73.0f ? 
                0.9951807f : 
                0.0f)));
    return pred;
  } // constant pool size = 14B, number of visited nodes = 3, static init size = 0B
}

class log_drf_1_Tree_40_class_27 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.24365234f ? 
        0.0f : 
         (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.48046875f ? 
            0.0f : 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <255.5f ? 
                0.0f : 
                 (data[2 /* no_of_characters */] <262.5f ? 
                    0.2f : 
                    0.0f))));
    return pred;
  } // constant pool size = 18B, number of visited nodes = 4, static init size = 0B
}

class log_drf_1_Tree_40_class_28 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.39453125f ? 
         (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.19765091f ? 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <489.5f ? 
                0.0f : 
                 (data[5 /* 4_letter_word */] <0.265625f ? 
                    0.0f : 
                     (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <5.5f ? 
                        0.0f : 
                        1.0f))) : 
             (data[8 /* 7_letter_word */] <0.0390625f ? 
                 (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.3203125f ? 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <469.5f ? 
                        0.0f : 
                        0.88304096f) : 
                     (data[6 /* 5_letter_word */] <0.1796875f ? 
                        0.038512617f : 
                        0.5742251f)) : 
                 (data[0 /* vlan */] <17.5f ? 
                     (data[7 /* 6_letter_word */] <0.3195784f ? 
                        0.18181819f : 
                        0.68421054f) : 
                    0.0f))) : 
         (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <492.0f ? 
             (data[7 /* 6_letter_word */] <0.409375f ? 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <376.5f ? 
                    0.0f : 
                    0.5f) : 
                0.0f) : 
             (data[14 /* 13_letter_word */] <0.072265625f ? 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <98.0f ? 
                    1.0f : 
                    0.0f) : 
                1.0f)));
    return pred;
  } // constant pool size = 66B, number of visited nodes = 16, static init size = 0B
}

class log_drf_1_Tree_40_class_29 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.0087890625f ? 
         (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.6904297f ? 
            0.0f : 
             (Double.isNaN(data[12]) || data[12 /* 11_letter_word */] <0.025390625f ? 
                 (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.1015625f ? 
                    0.0f : 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.7750778f ? 
                        0.0f : 
                        0.16666667f)) : 
                1.0f)) : 
         (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <956.5f ? 
            0.0f : 
             (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.40234375f ? 
                0.0f : 
                1.0f)));
    return pred;
  } // constant pool size = 30B, number of visited nodes = 7, static init size = 0B
}

class log_drf_1_Tree_40_class_30 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.24023438f ? 
         (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.23535156f ? 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <173.5f ? 
                0.0f : 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.265625f ? 
                    0.0f : 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.328125f ? 
                        0.0f : 
                        0.5f))) : 
             (data[1 /* type_of_time */] <1.5f ? 
                1.0f : 
                0.0f)) : 
         (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <217.5f ? 
             (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.22460938f ? 
                0.0f : 
                 (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.4609375f ? 
                    0.0f : 
                     (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <1.5f ? 
                        0.0f : 
                        1.0f))) : 
             (data[1 /* type_of_time */] <1.5f ? 
                1.0f : 
                0.0f)));
    return pred;
  } // constant pool size = 46B, number of visited nodes = 11, static init size = 0B
}

class log_drf_1_Tree_40_class_31 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.23583984f ? 
         (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.119140625f ? 
             (data[2 /* no_of_characters */] <110.5f ? 
                 (Double.isNaN(data[15]) || data[15 /* 14_letter_word */] <0.16796875f ? 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.2890625f ? 
                        0.012719253f : 
                        0.02994593f) : 
                    1.0f) : 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.64453125f ? 
                     (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                        0.0f : 
                        6.5766176E-4f) : 
                     (data[2 /* no_of_characters */] <125.5f ? 
                        0.21645021f : 
                        1.1325028E-4f))) : 
             (Double.isNaN(data[13]) || data[13 /* 12_letter_word */] <0.41601562f ? 
                 (data[2 /* no_of_characters */] <110.5f ? 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.36458334f ? 
                        0.07575758f : 
                        0.9312977f) : 
                     (data[6 /* 5_letter_word */] <0.125f ? 
                        0.008710643f : 
                        0.0023082842f)) : 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <110.5f ? 
                    1.0f : 
                    0.0f))) : 
         (data[2 /* no_of_characters */] <123.5f ? 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <119.5f ? 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <33.5f ? 
                    0.0f : 
                     (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                        0.8181818f : 
                        1.0f)) : 
                 (data[0 /* vlan */] <57.5f ? 
                    0.0f : 
                     (data[7 /* 6_letter_word */] <0.28645834f ? 
                        0.0f : 
                        1.0f))) : 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <164.5f ? 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <33.5f ? 
                    0.0f : 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.46875f ? 
                        0.0f : 
                        0.5f)) : 
                 (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.4140625f ? 
                    0.0f : 
                     (data[10 /* 9_letter_word */] <0.12760417f ? 
                        0.0f : 
                        1.0f)))));
    return pred;
  } // constant pool size = 98B, number of visited nodes = 24, static init size = 0B
}

class log_drf_1_Tree_40_class_32 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.5942383f ? 
         (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.23535156f ? 
             (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.44921875f ? 
                 (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
                    0.0f : 
                     (data[2 /* no_of_characters */] <137.5f ? 
                        0.0018032144f : 
                        0.0f)) : 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.37109375f ? 
                    0.0f : 
                     (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                        0.0f : 
                        1.0f))) : 
             (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.0625f ? 
                 (data[2 /* no_of_characters */] <120.5f ? 
                     (data[11 /* 10_letter_word */] <0.29508972f ? 
                        0.5368421f : 
                        0.0f) : 
                    0.0f) : 
                0.0f)) : 
         (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.10058594f ? 
            0.0f : 
             (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.26650938f ? 
                1.0f : 
                0.0f)));
    return pred;
  } // constant pool size = 50B, number of visited nodes = 12, static init size = 0B
}

class log_drf_1_Tree_40_class_33 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.47216797f ? 
         (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.40820312f ? 
             (data[0 /* vlan */] <5.5f ? 
                0.06451613f : 
                 (data[8 /* 7_letter_word */] <0.2578125f ? 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.828125f ? 
                        2.5759917E-4f : 
                        0.0012562814f) : 
                     (data[2 /* no_of_characters */] <98.5f ? 
                        0.003058104f : 
                        2.1108624E-5f))) : 
             (data[1 /* type_of_time */] <4.5f ? 
                0.0f : 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <280.5f ? 
                     (data[3 /* no_of_ips */] <0.5f ? 
                        0.008517295f : 
                        0.0f) : 
                     (data[0 /* vlan */] <17.5f ? 
                        0.8019802f : 
                        0.0f)))) : 
         (data[2 /* no_of_characters */] <70.5f ? 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <69.5f ? 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <9.5f ? 
                    1.0f : 
                    0.0f) : 
                0.0f) : 
             (data[2 /* no_of_characters */] <85.5f ? 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <79.0f ? 
                    0.0f : 
                    1.0f) : 
                 (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.4140625f ? 
                        0.0f : 
                        0.011494253f) : 
                    0.0f))));
    return pred;
  } // constant pool size = 70B, number of visited nodes = 17, static init size = 0B
}

class log_drf_1_Tree_40_class_34 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.12158203f ? 
        0.0f : 
         (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.1171875f ? 
            0.0f : 
             (data[7 /* 6_letter_word */] <0.13308498f ? 
                 (data[0 /* vlan */] <25.5f ? 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.09375f ? 
                        0.0f : 
                        0.33333334f) : 
                    0.0f) : 
                0.0f)));
    return pred;
  } // constant pool size = 22B, number of visited nodes = 5, static init size = 0B
}

class log_drf_1_Tree_40_class_35 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.018066406f ? 
         (data[8 /* 7_letter_word */] <0.18359375f ? 
             (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.15490723f ? 
                 (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.4140625f ? 
                     (data[0 /* vlan */] <17.5f ? 
                        0.002322495f : 
                        0.0f) : 
                     (data[6 /* 5_letter_word */] <0.5513916f ? 
                        1.2990387E-4f : 
                        0.0f)) : 
                 (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.0859375f ? 
                    0.0f : 
                     (data[1 /* type_of_time */] <4.5f ? 
                        0.0f : 
                        0.024390243f))) : 
             (data[0 /* vlan */] <13.5f ? 
                 (data[1 /* type_of_time */] <3.5f ? 
                    0.0f : 
                    0.016949153f) : 
                 (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
                    0.0f : 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.22851562f ? 
                        1.1554015E-4f : 
                        0.001529052f)))) : 
         (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.08691406f ? 
             (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.47242647f ? 
                0.0f : 
                 (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.4140625f ? 
                    0.0f : 
                     (data[1 /* type_of_time */] <4.5f ? 
                        0.0f : 
                        0.001633987f))) : 
             (data[1 /* type_of_time */] <4.5f ? 
                0.0f : 
                 (data[6 /* 5_letter_word */] <0.03515625f ? 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.046875f ? 
                        0.0f : 
                        0.01754386f) : 
                    0.0f))));
    return pred;
  } // constant pool size = 78B, number of visited nodes = 19, static init size = 0B
}

class log_drf_1_Tree_40_class_36 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.49560547f ? 
        0.0f : 
         (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.15527344f ? 
            0.0f : 
             (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.125f ? 
                0.0f : 
                 (data[2 /* no_of_characters */] <165.0f ? 
                    0.875f : 
                    0.0f))));
    return pred;
  } // constant pool size = 18B, number of visited nodes = 4, static init size = 0B
}

class log_drf_1_Tree_40_class_37 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.10546875f ? 
         (data[8 /* 7_letter_word */] <0.2607422f ? 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <157.5f ? 
                 (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.58984375f ? 
                     (data[6 /* 5_letter_word */] <0.046875f ? 
                        0.026758207f : 
                        3.8165026E-4f) : 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <145.5f ? 
                        0.04281433f : 
                        0.46548867f)) : 
                 (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.22265625f ? 
                     (data[2 /* no_of_characters */] <33.5f ? 
                        0.0f : 
                        0.951579f) : 
                     (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <1.5f ? 
                        0.9658745f : 
                        0.0026064292f))) : 
             (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <174.5f ? 
                     (data[1 /* type_of_time */] <3.5f ? 
                        0.08547009f : 
                        0.9979929f) : 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.75f ? 
                        0.03125f : 
                        1.0f)) : 
                0.0f)) : 
         (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.22460938f ? 
             (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.4140625f ? 
                 (Double.isNaN(data[13]) || data[13 /* 12_letter_word */] <0.18359375f ? 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.3203125f ? 
                        0.03590814f : 
                        0.2105594f) : 
                     (data[0 /* vlan */] <130.0f ? 
                        0.0f : 
                        0.99404764f)) : 
                 (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.20703125f ? 
                     (data[7 /* 6_letter_word */] <0.1388889f ? 
                        0.0f : 
                        0.6300246f) : 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <162.5f ? 
                        0.0f : 
                        1.0f))) : 
             (data[1 /* type_of_time */] <4.5f ? 
                 (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <1.5f ? 
                    1.0f : 
                    0.0f) : 
                0.0f)));
    return pred;
  } // constant pool size = 94B, number of visited nodes = 23, static init size = 0B
}

class log_drf_1_Tree_40_class_38 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.94970703f ? 
        5.3063627E-6f : 
         (data[2 /* no_of_characters */] <90.5f ? 
            0.0018501388f : 
            0.0f));
    return pred;
  } // constant pool size = 10B, number of visited nodes = 2, static init size = 0B
}


class log_drf_1_Forest_41 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += log_drf_1_Tree_41_class_0.score0(fdata);
    preds[2] += log_drf_1_Tree_41_class_1.score0(fdata);
    preds[3] += log_drf_1_Tree_41_class_2.score0(fdata);
    preds[4] += log_drf_1_Tree_41_class_3.score0(fdata);
    preds[5] += log_drf_1_Tree_41_class_4.score0(fdata);
    preds[6] += log_drf_1_Tree_41_class_5.score0(fdata);
    preds[7] += log_drf_1_Tree_41_class_6.score0(fdata);
    preds[8] += log_drf_1_Tree_41_class_7.score0(fdata);
    preds[9] += log_drf_1_Tree_41_class_8.score0(fdata);
    preds[10] += log_drf_1_Tree_41_class_9.score0(fdata);
    preds[11] += log_drf_1_Tree_41_class_10.score0(fdata);
    preds[12] += log_drf_1_Tree_41_class_11.score0(fdata);
    preds[13] += log_drf_1_Tree_41_class_12.score0(fdata);
    preds[14] += log_drf_1_Tree_41_class_13.score0(fdata);
    preds[15] += log_drf_1_Tree_41_class_14.score0(fdata);
    preds[16] += log_drf_1_Tree_41_class_15.score0(fdata);
    preds[17] += log_drf_1_Tree_41_class_16.score0(fdata);
    preds[18] += log_drf_1_Tree_41_class_17.score0(fdata);
    preds[19] += log_drf_1_Tree_41_class_18.score0(fdata);
    preds[20] += log_drf_1_Tree_41_class_19.score0(fdata);
    preds[21] += log_drf_1_Tree_41_class_20.score0(fdata);
    preds[22] += log_drf_1_Tree_41_class_21.score0(fdata);
    preds[23] += log_drf_1_Tree_41_class_22.score0(fdata);
    preds[24] += log_drf_1_Tree_41_class_23.score0(fdata);
    preds[25] += log_drf_1_Tree_41_class_24.score0(fdata);
    preds[26] += log_drf_1_Tree_41_class_25.score0(fdata);
    preds[27] += log_drf_1_Tree_41_class_26.score0(fdata);
    preds[28] += log_drf_1_Tree_41_class_27.score0(fdata);
    preds[29] += log_drf_1_Tree_41_class_28.score0(fdata);
    preds[30] += log_drf_1_Tree_41_class_29.score0(fdata);
    preds[31] += log_drf_1_Tree_41_class_30.score0(fdata);
    preds[32] += log_drf_1_Tree_41_class_31.score0(fdata);
    preds[33] += log_drf_1_Tree_41_class_32.score0(fdata);
    preds[34] += log_drf_1_Tree_41_class_33.score0(fdata);
    preds[35] += log_drf_1_Tree_41_class_34.score0(fdata);
    preds[36] += log_drf_1_Tree_41_class_35.score0(fdata);
    preds[37] += log_drf_1_Tree_41_class_36.score0(fdata);
    preds[38] += log_drf_1_Tree_41_class_37.score0(fdata);
    preds[39] += log_drf_1_Tree_41_class_38.score0(fdata);
  }
}
class log_drf_1_Tree_41_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[14]) || data[14 /* 13_letter_word */] <0.0146484375f ? 
         (Double.isNaN(data[4]) || data[4 /* no_of_macs */] <3.0f ? 
             (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.029296875f ? 
                 (Double.isNaN(data[4]) || data[4 /* no_of_macs */] <0.5f ? 
                    0.0f : 
                     (data[3 /* no_of_ips */] <0.5f ? 
                        1.0f : 
                        0.0f)) : 
                 (Double.isNaN(data[12]) || data[12 /* 11_letter_word */] <0.01171875f ? 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <519.5f ? 
                        8.4997875E-5f : 
                        0.2857143f) : 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <719.5f ? 
                        0.0f : 
                        1.0f))) : 
             (data[6 /* 5_letter_word */] <0.17773438f ? 
                0.5f : 
                0.0f)) : 
         (Double.isNaN(data[4]) || data[4 /* no_of_macs */] <0.5f ? 
            0.0f : 
            1.0f));
    return pred;
  } // constant pool size = 42B, number of visited nodes = 10, static init size = 0B
}

class log_drf_1_Tree_41_class_1 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.14160156f ? 
        0.0f : 
         (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
            0.0f : 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <255.5f ? 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <113.5f ? 
                    0.0f : 
                     (data[6 /* 5_letter_word */] <0.8725815f ? 
                        0.009769094f : 
                        0.0f)) : 
                 (data[5 /* 4_letter_word */] <0.3203125f ? 
                    0.0f : 
                     (data[1 /* type_of_time */] <3.5f ? 
                        1.0f : 
                        0.087138265f)))));
    return pred;
  } // constant pool size = 30B, number of visited nodes = 7, static init size = 0B
}

class log_drf_1_Tree_41_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.1484375f ? 
         (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
             (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.009765625f ? 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.1328125f ? 
                    0.0f : 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.5859375f ? 
                        0.010381458f : 
                        0.5597826f)) : 
                0.0f) : 
             (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.53515625f ? 
                 (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <1.5f ? 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.4609375f ? 
                        7.9260237E-4f : 
                        0.6993076f) : 
                    0.0f) : 
                0.0f)) : 
         (Double.isNaN(data[4]) || data[4 /* no_of_macs */] <3.0f ? 
             (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.1328125f ? 
                 (data[6 /* 5_letter_word */] <0.2116394f ? 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.19512598f ? 
                        0.0f : 
                        0.0033003301f) : 
                    0.0f) : 
                 (data[2 /* no_of_characters */] <130.5f ? 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <113.5f ? 
                        0.0f : 
                        0.2769231f) : 
                     (data[7 /* 6_letter_word */] <0.17606027f ? 
                        0.011764706f : 
                        8.513053E-4f))) : 
            0.5f));
    return pred;
  } // constant pool size = 62B, number of visited nodes = 15, static init size = 0B
}

class log_drf_1_Tree_41_class_3 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.3227539f ? 
         (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
            1.3449899E-5f : 
             (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.24080467f ? 
                 (data[1 /* type_of_time */] <4.5f ? 
                     (data[2 /* no_of_characters */] <120.5f ? 
                        0.1632653f : 
                        0.0f) : 
                    0.0f) : 
                 (data[3 /* no_of_ips */] <1.5f ? 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.0625f ? 
                        0.7942387f : 
                        0.0f) : 
                    0.0f))) : 
         (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.3095703f ? 
             (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <1.5f ? 
                 (data[3 /* no_of_ips */] <0.5f ? 
                     (data[6 /* 5_letter_word */] <0.4338646f ? 
                        0.17810026f : 
                        0.0f) : 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.3671875f ? 
                        0.0f : 
                        0.98370373f)) : 
                0.0f) : 
            0.0f));
    return pred;
  } // constant pool size = 50B, number of visited nodes = 12, static init size = 0B
}

class log_drf_1_Tree_41_class_4 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.3095703f ? 
         (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
            5.9444552E-5f : 
             (data[6 /* 5_letter_word */] <0.15429688f ? 
                 (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.03125f ? 
                     (data[3 /* no_of_ips */] <1.5f ? 
                        0.0013128282f : 
                        0.0f) : 
                    0.0f) : 
                0.0f)) : 
         (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.29101562f ? 
            0.0f : 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <25.5f ? 
                0.0f : 
                 (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.16796875f ? 
                    0.0f : 
                    0.96666664f))));
    return pred;
  } // constant pool size = 34B, number of visited nodes = 8, static init size = 0B
}

class log_drf_1_Tree_41_class_5 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.087402344f ? 
         (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
             (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.015625f ? 
                 (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.64453125f ? 
                    2.1567528E-5f : 
                    0.0012802607f) : 
                0.0f) : 
            0.0f) : 
         (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.27929688f ? 
             (Double.isNaN(data[12]) || data[12 /* 11_letter_word */] <0.29101562f ? 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.26074982f ? 
                     (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.0703125f ? 
                        3.5053282E-4f : 
                        0.002940696f) : 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.13392857f ? 
                        0.0f : 
                        1.0f)) : 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <202.5f ? 
                    0.0f : 
                    0.6666667f)) : 
            0.0f));
    return pred;
  } // constant pool size = 42B, number of visited nodes = 10, static init size = 0B
}

class log_drf_1_Tree_41_class_6 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.3486328f ? 
         (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
             (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.24609375f ? 
                 (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.0234375f ? 
                     (data[0 /* vlan */] <154.5f ? 
                        0.0016785023f : 
                        0.0f) : 
                    0.0f) : 
                 (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.30859375f ? 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.15625f ? 
                        0.005828355f : 
                        0.035697058f) : 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.25f ? 
                        0.0f : 
                        0.08080808f))) : 
            0.0f) : 
        0.0f);
    return pred;
  } // constant pool size = 34B, number of visited nodes = 8, static init size = 0B
}

class log_drf_1_Tree_41_class_7 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.027832031f ? 
         (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <1.5f ? 
             (data[2 /* no_of_characters */] <160.5f ? 
                 (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.8984375f ? 
                    0.0f : 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <178.5f ? 
                        0.0f : 
                        1.0f)) : 
                0.0f) : 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <183.5f ? 
                0.0f : 
                1.0f)) : 
        0.0f);
    return pred;
  } // constant pool size = 26B, number of visited nodes = 6, static init size = 0B
}

class log_drf_1_Tree_41_class_8 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.27929688f ? 
         (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <1.5f ? 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <173.5f ? 
                0.0f : 
                 (data[1 /* type_of_time */] <4.5f ? 
                    0.0f : 
                     (data[5 /* 4_letter_word */] <0.03125f ? 
                        0.06985294f : 
                        0.0014430014f))) : 
             (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.24056625f ? 
                0.0f : 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <654.5f ? 
                    0.0f : 
                    0.5f))) : 
         (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.18359375f ? 
             (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <1.5f ? 
                 (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.064453125f ? 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <849.0f ? 
                        0.0f : 
                        1.0f) : 
                     (data[5 /* 4_letter_word */] <0.1015625f ? 
                        0.023255814f : 
                        0.0f)) : 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <719.0f ? 
                    0.0f : 
                     (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.23828125f ? 
                        0.54615384f : 
                        0.0f))) : 
            0.0f));
    return pred;
  } // constant pool size = 58B, number of visited nodes = 14, static init size = 0B
}

class log_drf_1_Tree_41_class_9 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.095703125f ? 
         (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <2.5f ? 
             (data[0 /* vlan */] <161.5f ? 
                0.0f : 
                 (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <1.5f ? 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.15625f ? 
                        0.0f : 
                        9.140768E-4f) : 
                     (data[1 /* type_of_time */] <3.5f ? 
                        0.71794873f : 
                        0.0f))) : 
             (data[6 /* 5_letter_word */] <0.04296875f ? 
                 (Double.isNaN(data[4]) || data[4 /* no_of_macs */] <0.5f ? 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <98.0f ? 
                        0.0f : 
                        0.99509805f) : 
                    0.0f) : 
                 (data[6 /* 5_letter_word */] <0.18502808f ? 
                     (data[7 /* 6_letter_word */] <0.53125f ? 
                        0.13636364f : 
                        0.0f) : 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.578125f ? 
                        0.0f : 
                        0.29411766f)))) : 
         (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.10546875f ? 
             (data[10 /* 9_letter_word */] <0.267025f ? 
                 (data[2 /* no_of_characters */] <150.5f ? 
                     (data[10 /* 9_letter_word */] <0.22526875f ? 
                        0.31060606f : 
                        0.70481926f) : 
                     (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <4.5f ? 
                        0.0f : 
                        1.0f)) : 
                0.0f) : 
             (data[8 /* 7_letter_word */] <0.21178944f ? 
                 (data[1 /* type_of_time */] <3.5f ? 
                     (data[3 /* no_of_ips */] <1.5f ? 
                        0.0f : 
                        1.0f) : 
                    0.0f) : 
                0.0f)));
    return pred;
  } // constant pool size = 82B, number of visited nodes = 20, static init size = 0B
}

class log_drf_1_Tree_41_class_10 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.027832031f ? 
         (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
             (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.46289062f ? 
                0.0f : 
                2.5207966E-4f) : 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <165.5f ? 
                0.0f : 
                 (Double.isNaN(data[13]) || data[13 /* 12_letter_word */] <0.029947916f ? 
                     (data[7 /* 6_letter_word */] <0.125f ? 
                        0.01734104f : 
                        0.0f) : 
                    0.0f))) : 
        0.0f);
    return pred;
  } // constant pool size = 26B, number of visited nodes = 6, static init size = 0B
}

class log_drf_1_Tree_41_class_11 {
  static final double score0(double[] data) {
    double pred =     5.0E-6f;
    return pred;
  } // constant pool size = 2B, number of visited nodes = 0, static init size = 0B
}

class log_drf_1_Tree_41_class_12 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.027832031f ? 
         (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
            0.0f : 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <410.5f ? 
                0.0f : 
                 (data[0 /* vlan */] <589.0f ? 
                    0.0f : 
                    0.9756098f))) : 
        0.0f);
    return pred;
  } // constant pool size = 18B, number of visited nodes = 4, static init size = 0B
}

class log_drf_1_Tree_41_class_13 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.2602539f ? 
         (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
             (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.009765625f ? 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.03515625f ? 
                     (data[8 /* 7_letter_word */] <0.265625f ? 
                        0.023304174f : 
                        0.0f) : 
                    0.0f) : 
                 (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.29213715f ? 
                    0.0f : 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.16666667f ? 
                        7.930214E-4f : 
                        0.0f))) : 
             (data[5 /* 4_letter_word */] <0.03125f ? 
                 (data[3 /* no_of_ips */] <1.5f ? 
                     (data[8 /* 7_letter_word */] <0.21875f ? 
                        0.009868421f : 
                        0.0f) : 
                    0.0f) : 
                0.0f)) : 
         (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.0126953125f ? 
             (data[3 /* no_of_ips */] <0.5f ? 
                 (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.046875f ? 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <589.0f ? 
                        0.0012096077f : 
                        1.0f) : 
                    0.0f) : 
                0.0f) : 
            0.0f));
    return pred;
  } // constant pool size = 58B, number of visited nodes = 14, static init size = 0B
}

class log_drf_1_Tree_41_class_14 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.19091797f ? 
        1.6477632E-5f : 
         (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.18359375f ? 
            0.0f : 
             (Double.isNaN(data[12]) || data[12 /* 11_letter_word */] <0.1015625f ? 
                0.0f : 
                0.9285714f)));
    return pred;
  } // constant pool size = 14B, number of visited nodes = 3, static init size = 0B
}

class log_drf_1_Tree_41_class_15 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.091796875f ? 
         (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <1.5f ? 
             (data[0 /* vlan */] <145.5f ? 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <370.5f ? 
                     (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.1328125f ? 
                        0.0076042763f : 
                        0.0f) : 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <129.0f ? 
                        0.0f : 
                        1.0f)) : 
                0.0f) : 
             (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.83203125f ? 
                 (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.22425842f ? 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.546875f ? 
                        0.0f : 
                        0.47115386f) : 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <220.5f ? 
                        0.0f : 
                        0.11111111f)) : 
                 (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <2.5f ? 
                    0.16419704f : 
                    0.0f))) : 
         (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.16210938f ? 
             (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.2421875f ? 
                0.0f : 
                 (data[2 /* no_of_characters */] <130.5f ? 
                     (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <1.5f ? 
                        0.026455026f : 
                        0.0f) : 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <113.5f ? 
                        0.0f : 
                        0.045454547f))) : 
             (data[8 /* 7_letter_word */] <0.2068901f ? 
                 (data[1 /* type_of_time */] <4.5f ? 
                    0.0f : 
                     (Double.isNaN(data[4]) || data[4 /* no_of_macs */] <0.5f ? 
                        0.16336633f : 
                        0.0f)) : 
                 (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
                    0.0f : 
                     (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.18489583f ? 
                        0.0026525198f : 
                        0.023809524f)))));
    return pred;
  } // constant pool size = 86B, number of visited nodes = 21, static init size = 0B
}

class log_drf_1_Tree_41_class_16 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.4140625f ? 
         (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
             (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.94921875f ? 
                 (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.30859375f ? 
                     (data[0 /* vlan */] <97.5f ? 
                        3.0974136E-4f : 
                        0.0f) : 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.0859375f ? 
                        0.0055710305f : 
                        0.0f)) : 
                0.0019694732f) : 
            0.0f) : 
        0.0f);
    return pred;
  } // constant pool size = 26B, number of visited nodes = 6, static init size = 0B
}

class log_drf_1_Tree_41_class_17 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.3227539f ? 
         (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
             (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.0078125f ? 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.03515625f ? 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <178.5f ? 
                        0.0f : 
                        0.21346705f) : 
                    0.0f) : 
                0.0f) : 
             (data[5 /* 4_letter_word */] <0.03125f ? 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <829.0f ? 
                    0.0f : 
                     (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <2.5f ? 
                        0.33333334f : 
                        1.0f)) : 
                 (data[3 /* no_of_ips */] <1.5f ? 
                     (data[5 /* 4_letter_word */] <0.2355957f ? 
                        0.015625f : 
                        1.5617679E-4f) : 
                    0.0f))) : 
         (Double.isNaN(data[4]) || data[4 /* no_of_macs */] <0.5f ? 
             (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.31054688f ? 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <1008.5f ? 
                     (data[1 /* type_of_time */] <2.5f ? 
                        0.1f : 
                        0.0f) : 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.125f ? 
                        0.9661017f : 
                        0.5f)) : 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <993.5f ? 
                    0.0f : 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.044270832f ? 
                        0.98630136f : 
                        0.8f))) : 
            0.0f));
    return pred;
  } // constant pool size = 70B, number of visited nodes = 17, static init size = 0B
}

class log_drf_1_Tree_41_class_18 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.07470703f ? 
        0.0f : 
         (data[3 /* no_of_ips */] <0.5f ? 
             (data[10 /* 9_letter_word */] <0.08735752f ? 
                0.1f : 
                0.0f) : 
            0.0f));
    return pred;
  } // constant pool size = 14B, number of visited nodes = 3, static init size = 0B
}

class log_drf_1_Tree_41_class_19 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.027832031f ? 
         (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
            0.0f : 
             (data[3 /* no_of_ips */] <1.5f ? 
                 (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.22265625f ? 
                     (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.1826477f ? 
                        0.0f : 
                        0.18181819f) : 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <17.5f ? 
                        1.0f : 
                        0.0f)) : 
                0.0f)) : 
        0.0f);
    return pred;
  } // constant pool size = 26B, number of visited nodes = 6, static init size = 0B
}

class log_drf_1_Tree_41_class_20 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.77490234f ? 
         (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
             (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.44921875f ? 
                 (data[0 /* vlan */] <25.5f ? 
                     (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.1328125f ? 
                        0.76755434f : 
                        0.2314361f) : 
                    0.0f) : 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.25f ? 
                     (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.62109375f ? 
                        0.8432769f : 
                        0.9791667f) : 
                    0.102564104f)) : 
             (data[6 /* 5_letter_word */] <0.028756142f ? 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <170.5f ? 
                     (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <2.5f ? 
                        0.07374135f : 
                        0.0f) : 
                     (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.0859375f ? 
                        0.007936508f : 
                        0.9934498f)) : 
                 (data[3 /* no_of_ips */] <2.5f ? 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.1328125f ? 
                        0.013336249f : 
                        0.064579256f) : 
                     (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.15625f ? 
                        0.0f : 
                        4.755112E-4f)))) : 
        0.3625267f);
    return pred;
  } // constant pool size = 58B, number of visited nodes = 14, static init size = 0B
}

class log_drf_1_Tree_41_class_21 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.1484375f ? 
         (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <1.5f ? 
             (data[0 /* vlan */] <13.5f ? 
                 (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                    0.0f : 
                    0.4473684f) : 
                 (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.18359375f ? 
                     (data[1 /* type_of_time */] <3.5f ? 
                        0.52272725f : 
                        0.0026801326f) : 
                    0.0f)) : 
             (data[5 /* 4_letter_word */] <0.26757812f ? 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <190.5f ? 
                    0.0f : 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.4453125f ? 
                        0.0f : 
                        0.0022727272f)) : 
                0.0f)) : 
         (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.31640625f ? 
             (data[3 /* no_of_ips */] <0.5f ? 
                 (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.01953125f ? 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <160.5f ? 
                        3.194888E-4f : 
                        0.0011961722f) : 
                    0.0f) : 
                0.0f) : 
             (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.22460938f ? 
                8.036647E-5f : 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.45052084f ? 
                     (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <1.5f ? 
                        0.0017750167f : 
                        0.0f) : 
                     (data[0 /* vlan */] <98.0f ? 
                        0.0f : 
                        0.013333334f)))));
    return pred;
  } // constant pool size = 70B, number of visited nodes = 17, static init size = 0B
}

class log_drf_1_Tree_41_class_22 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.16015625f ? 
        2.2002563E-5f : 
         (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.15527344f ? 
            0.0f : 
             (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.44921875f ? 
                0.0f : 
                 (data[5 /* 4_letter_word */] <0.54993594f ? 
                     (data[0 /* vlan */] <17.5f ? 
                        0.1f : 
                        0.0f) : 
                    0.0f))));
    return pred;
  } // constant pool size = 22B, number of visited nodes = 5, static init size = 0B
}

class log_drf_1_Tree_41_class_23 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.1484375f ? 
         (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
             (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.1328125f ? 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.03515625f ? 
                     (data[8 /* 7_letter_word */] <0.3515625f ? 
                        0.09674528f : 
                        3.354829E-4f) : 
                     (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.2890625f ? 
                        0.0010516476f : 
                        0.07777778f)) : 
                 (data[11 /* 10_letter_word */] <0.1531372f ? 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <17.5f ? 
                        1.0f : 
                        0.0f) : 
                    0.0f)) : 
             (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.13394165f ? 
                0.0f : 
                 (data[2 /* no_of_characters */] <255.5f ? 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <244.0f ? 
                        0.0f : 
                        1.0f) : 
                    0.0f))) : 
         (Double.isNaN(data[13]) || data[13 /* 12_letter_word */] <0.045898438f ? 
             (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.6894531f ? 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <220.5f ? 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.21875f ? 
                        0.0f : 
                        8.1162245E-5f) : 
                     (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.15625f ? 
                        2.7831894E-4f : 
                        0.067961164f)) : 
                 (data[7 /* 6_letter_word */] <0.73202515f ? 
                    1.0f : 
                    0.0f)) : 
             (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.046875f ? 
                 (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.25f ? 
                    0.0f : 
                    1.0f) : 
                 (data[10 /* 9_letter_word */] <0.091145836f ? 
                    0.0f : 
                    1.0f))));
    return pred;
  } // constant pool size = 82B, number of visited nodes = 20, static init size = 0B
}

class log_drf_1_Tree_41_class_24 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.9746094f ? 
        0.0f : 
         (data[3 /* no_of_ips */] <0.5f ? 
            0.0f : 
            5.158184E-4f));
    return pred;
  } // constant pool size = 10B, number of visited nodes = 2, static init size = 0B
}

class log_drf_1_Tree_41_class_25 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.44970703f ? 
         (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <1.5f ? 
             (data[0 /* vlan */] <41.5f ? 
                 (Double.isNaN(data[12]) || data[12 /* 11_letter_word */] <0.15625f ? 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <160.5f ? 
                        0.07842345f : 
                        0.42629075f) : 
                     (data[3 /* no_of_ips */] <0.5f ? 
                        0.054545455f : 
                        1.0f)) : 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <549.5f ? 
                    0.0f : 
                     (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                        0.0f : 
                        0.0625f))) : 
             (data[5 /* 4_letter_word */] <0.1171875f ? 
                 (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <5.5f ? 
                     (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.0625f ? 
                        0.9789703f : 
                        0.8030963f) : 
                     (data[2 /* no_of_characters */] <370.0f ? 
                        1.0f : 
                        0.0f)) : 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <170.5f ? 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <81.5f ? 
                        0.87787056f : 
                        0.0f) : 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.22851562f ? 
                        0.032559954f : 
                        0.17436306f)))) : 
         (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.072265625f ? 
             (data[3 /* no_of_ips */] <0.5f ? 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <170.5f ? 
                    0.0f : 
                     (data[1 /* type_of_time */] <4.5f ? 
                        0.0f : 
                        0.6097561f)) : 
                1.0f) : 
            0.0f));
    return pred;
  } // constant pool size = 78B, number of visited nodes = 19, static init size = 0B
}

class log_drf_1_Tree_41_class_26 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.027832031f ? 
         (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
             (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.64453125f ? 
                0.0f : 
                 (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.05078125f ? 
                     (data[2 /* no_of_characters */] <60.5f ? 
                        0.99515736f : 
                        0.0f) : 
                    0.0f)) : 
            0.0f) : 
        0.0f);
    return pred;
  } // constant pool size = 22B, number of visited nodes = 5, static init size = 0B
}

class log_drf_1_Tree_41_class_27 {
  static final double score0(double[] data) {
    double pred =     1.0E-5f;
    return pred;
  } // constant pool size = 2B, number of visited nodes = 0, static init size = 0B
}

class log_drf_1_Tree_41_class_28 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[14]) || data[14 /* 13_letter_word */] <0.09814453f ? 
         (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <5.5f ? 
             (data[0 /* vlan */] <17.5f ? 
                 (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <3.0f ? 
                    0.0f : 
                    1.0f) : 
                0.0f) : 
             (data[5 /* 4_letter_word */] <0.125f ? 
                0.0f : 
                1.0f)) : 
         (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.13378906f ? 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <19.5f ? 
                1.0f : 
                0.0f) : 
             (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <3.5f ? 
                0.0f : 
                1.0f)));
    return pred;
  } // constant pool size = 34B, number of visited nodes = 8, static init size = 0B
}

class log_drf_1_Tree_41_class_29 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[14]) || data[14 /* 13_letter_word */] <0.0063476562f ? 
         (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
             (data[8 /* 7_letter_word */] <0.03125f ? 
                 (Double.isNaN(data[12]) || data[12 /* 11_letter_word */] <0.01171875f ? 
                     (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.1796875f ? 
                        0.0f : 
                        3.635042E-4f) : 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.03125f ? 
                        0.0f : 
                        0.8f)) : 
                0.0f) : 
            0.0f) : 
         (data[14 /* 13_letter_word */] <0.01799202f ? 
             (data[14 /* 13_letter_word */] <0.016958188f ? 
                0.5f : 
                0.0f) : 
            0.0f));
    return pred;
  } // constant pool size = 34B, number of visited nodes = 8, static init size = 0B
}

class log_drf_1_Tree_41_class_30 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.24023438f ? 
         (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <1.5f ? 
            0.0f : 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <173.5f ? 
                0.0f : 
                 (data[1 /* type_of_time */] <3.0f ? 
                    1.0f : 
                    0.0f))) : 
         (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.23535156f ? 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <225.5f ? 
                0.0f : 
                 (data[2 /* no_of_characters */] <238.5f ? 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.125f ? 
                        0.369863f : 
                        0.0f) : 
                    0.0f)) : 
             (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <2.5f ? 
                 (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <1.5f ? 
                    0.0f : 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.125f ? 
                        0.13157895f : 
                        0.0f)) : 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <210.5f ? 
                    0.0f : 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <625.0f ? 
                        1.0f : 
                        0.0f)))));
    return pred;
  } // constant pool size = 54B, number of visited nodes = 13, static init size = 0B
}

class log_drf_1_Tree_41_class_31 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[15]) || data[15 /* 14_letter_word */] <0.22485352f ? 
         (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <1.5f ? 
             (Double.isNaN(data[13]) || data[13 /* 12_letter_word */] <0.22460938f ? 
                 (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.1484375f ? 
                     (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                        0.010137495f : 
                        0.03255248f) : 
                     (data[2 /* no_of_characters */] <120.5f ? 
                        0.009491309f : 
                        1.1086475E-4f)) : 
                 (data[1 /* type_of_time */] <4.5f ? 
                    0.0f : 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.16796875f ? 
                        0.8f : 
                        0.0f))) : 
            0.0f) : 
         (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.37402344f ? 
             (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.125f ? 
                1.0f : 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <102.5f ? 
                    1.0f : 
                    0.5f)) : 
            0.0f));
    return pred;
  } // constant pool size = 46B, number of visited nodes = 11, static init size = 0B
}

class log_drf_1_Tree_41_class_32 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.19091797f ? 
         (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <1.5f ? 
             (data[0 /* vlan */] <29.5f ? 
                 (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.234375f ? 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.03125f ? 
                        0.0037671232f : 
                        0.0f) : 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.21875f ? 
                        0.0f : 
                        0.021812893f)) : 
                0.0f) : 
            0.0f) : 
         (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.44921875f ? 
             (data[2 /* no_of_characters */] <115.5f ? 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <113.5f ? 
                    0.0f : 
                     (data[7 /* 6_letter_word */] <0.3046875f ? 
                        0.0f : 
                        1.0f)) : 
                0.0f) : 
             (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.41689205f ? 
                0.0f : 
                 (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                    0.0f : 
                    1.0f))));
    return pred;
  } // constant pool size = 50B, number of visited nodes = 12, static init size = 0B
}

class log_drf_1_Tree_41_class_33 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.1743164f ? 
         (Double.isNaN(data[4]) || data[4 /* no_of_macs */] <1.5f ? 
             (data[0 /* vlan */] <9.5f ? 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <105.5f ? 
                    1.0f : 
                    0.0f) : 
                 (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.703125f ? 
                        2.9627047E-4f : 
                        0.016993959f) : 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.07217789f ? 
                        0.0f : 
                        0.065764025f))) : 
             (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.08239174f ? 
                0.0f : 
                 (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.10010621f ? 
                    1.0f : 
                    0.0f))) : 
         (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.2607422f ? 
             (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <1.5f ? 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <290.5f ? 
                     (data[0 /* vlan */] <17.5f ? 
                        0.013064133f : 
                        6.4816454E-4f) : 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.13444519f ? 
                        0.008695652f : 
                        0.21153846f)) : 
                0.0f) : 
             (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.29101562f ? 
                0.0f : 
                 (data[1 /* type_of_time */] <4.5f ? 
                    0.0f : 
                     (data[0 /* vlan */] <17.5f ? 
                        0.33333334f : 
                        0.0f)))));
    return pred;
  } // constant pool size = 70B, number of visited nodes = 17, static init size = 0B
}

class log_drf_1_Tree_41_class_34 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.123535156f ? 
        0.0f : 
        1.0860711E-4f);
    return pred;
  } // constant pool size = 6B, number of visited nodes = 1, static init size = 0B
}

class log_drf_1_Tree_41_class_35 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.087402344f ? 
         (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <2.5f ? 
             (data[0 /* vlan */] <17.5f ? 
                 (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.3671875f ? 
                     (data[2 /* no_of_characters */] <100.5f ? 
                        0.0116731515f : 
                        0.0010566037f) : 
                     (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                        0.0f : 
                        0.16666667f)) : 
                0.0f) : 
            0.0f) : 
         (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.3095703f ? 
            0.0f : 
             (data[2 /* no_of_characters */] <93.0f ? 
                 (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.171875f ? 
                        0.0f : 
                        0.75f) : 
                    0.0f) : 
                0.0f)));
    return pred;
  } // constant pool size = 42B, number of visited nodes = 10, static init size = 0B
}

class log_drf_1_Tree_41_class_36 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.16015625f ? 
        0.0f : 
         (data[3 /* no_of_ips */] <0.5f ? 
             (data[10 /* 9_letter_word */] <0.17327881f ? 
                 (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.0859375f ? 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.33125f ? 
                        0.0f : 
                        0.5294118f) : 
                    0.0f) : 
                0.0f) : 
            0.0f));
    return pred;
  } // constant pool size = 22B, number of visited nodes = 5, static init size = 0B
}

class log_drf_1_Tree_41_class_37 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.26757812f ? 
         (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
             (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.013671875f ? 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.09375f ? 
                     (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
                        0.9982912f : 
                        0.0067687347f) : 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.3203125f ? 
                        0.3503333f : 
                        0.094827585f)) : 
                 (data[11 /* 10_letter_word */] <0.15237427f ? 
                     (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.0859375f ? 
                        0.010156971f : 
                        0.52272725f) : 
                     (data[0 /* vlan */] <17.5f ? 
                        0.99708736f : 
                        0.3561273f))) : 
             (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.8730469f ? 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.19140625f ? 
                     (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.037628174f ? 
                        5.0494424E-4f : 
                        0.0f) : 
                     (data[1 /* type_of_time */] <4.5f ? 
                        0.35321102f : 
                        0.0f)) : 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <120.5f ? 
                     (data[0 /* vlan */] <90.0f ? 
                        0.0f : 
                        1.0f) : 
                    0.0f))) : 
         (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.41601562f ? 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <101.5f ? 
                0.0f : 
                 (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <176.5f ? 
                        1.0f : 
                        0.8857143f) : 
                    0.0f)) : 
             (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                 (data[1 /* type_of_time */] <4.5f ? 
                    1.0f : 
                    0.0f) : 
                0.0f)));
    return pred;
  } // constant pool size = 86B, number of visited nodes = 21, static init size = 0B
}

class log_drf_1_Tree_41_class_38 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.027832031f ? 
         (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
            0.0f : 
             (data[2 /* no_of_characters */] <90.5f ? 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <61.5f ? 
                    0.0f : 
                     (Double.isNaN(data[15]) || data[15 /* 14_letter_word */] <0.125f ? 
                        0.04761905f : 
                        0.0f)) : 
                0.0f)) : 
        0.0f);
    return pred;
  } // constant pool size = 22B, number of visited nodes = 5, static init size = 0B
}


class log_drf_1_Forest_42 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += log_drf_1_Tree_42_class_0.score0(fdata);
    preds[2] += log_drf_1_Tree_42_class_1.score0(fdata);
    preds[3] += log_drf_1_Tree_42_class_2.score0(fdata);
    preds[4] += log_drf_1_Tree_42_class_3.score0(fdata);
    preds[5] += log_drf_1_Tree_42_class_4.score0(fdata);
    preds[6] += log_drf_1_Tree_42_class_5.score0(fdata);
    preds[7] += log_drf_1_Tree_42_class_6.score0(fdata);
    preds[8] += log_drf_1_Tree_42_class_7.score0(fdata);
    preds[9] += log_drf_1_Tree_42_class_8.score0(fdata);
    preds[10] += log_drf_1_Tree_42_class_9.score0(fdata);
    preds[11] += log_drf_1_Tree_42_class_10.score0(fdata);
    preds[12] += log_drf_1_Tree_42_class_11.score0(fdata);
    preds[13] += log_drf_1_Tree_42_class_12.score0(fdata);
    preds[14] += log_drf_1_Tree_42_class_13.score0(fdata);
    preds[15] += log_drf_1_Tree_42_class_14.score0(fdata);
    preds[16] += log_drf_1_Tree_42_class_15.score0(fdata);
    preds[17] += log_drf_1_Tree_42_class_16.score0(fdata);
    preds[18] += log_drf_1_Tree_42_class_17.score0(fdata);
    preds[19] += log_drf_1_Tree_42_class_18.score0(fdata);
    preds[20] += log_drf_1_Tree_42_class_19.score0(fdata);
    preds[21] += log_drf_1_Tree_42_class_20.score0(fdata);
    preds[22] += log_drf_1_Tree_42_class_21.score0(fdata);
    preds[23] += log_drf_1_Tree_42_class_22.score0(fdata);
    preds[24] += log_drf_1_Tree_42_class_23.score0(fdata);
    preds[25] += log_drf_1_Tree_42_class_24.score0(fdata);
    preds[26] += log_drf_1_Tree_42_class_25.score0(fdata);
    preds[27] += log_drf_1_Tree_42_class_26.score0(fdata);
    preds[28] += log_drf_1_Tree_42_class_27.score0(fdata);
    preds[29] += log_drf_1_Tree_42_class_28.score0(fdata);
    preds[30] += log_drf_1_Tree_42_class_29.score0(fdata);
    preds[31] += log_drf_1_Tree_42_class_30.score0(fdata);
    preds[32] += log_drf_1_Tree_42_class_31.score0(fdata);
    preds[33] += log_drf_1_Tree_42_class_32.score0(fdata);
    preds[34] += log_drf_1_Tree_42_class_33.score0(fdata);
    preds[35] += log_drf_1_Tree_42_class_34.score0(fdata);
    preds[36] += log_drf_1_Tree_42_class_35.score0(fdata);
    preds[37] += log_drf_1_Tree_42_class_36.score0(fdata);
    preds[38] += log_drf_1_Tree_42_class_37.score0(fdata);
    preds[39] += log_drf_1_Tree_42_class_38.score0(fdata);
  }
}
class log_drf_1_Tree_42_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <1040.0f ? 
         (data[8 /* 7_letter_word */] <0.19238281f ? 
             (Double.isNaN(data[4]) || data[4 /* no_of_macs */] <0.5f ? 
                0.0f : 
                 (data[3 /* no_of_ips */] <0.5f ? 
                    1.0f : 
                    0.0f)) : 
            0.0f) : 
         (data[4 /* no_of_macs */] <0.5f ? 
            0.0f : 
            1.0f));
    return pred;
  } // constant pool size = 22B, number of visited nodes = 5, static init size = 0B
}

class log_drf_1_Tree_42_class_1 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <261.5f ? 
         (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
            0.0f : 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <141.5f ? 
                0.0f : 
                 (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
                    0.0f : 
                     (data[0 /* vlan */] <155.5f ? 
                        1.0f : 
                        0.0f)))) : 
         (data[1 /* type_of_time */] <3.5f ? 
             (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.25f ? 
                0.0f : 
                1.0f) : 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <141.5f ? 
                0.0f : 
                 (data[0 /* vlan */] <155.5f ? 
                    0.99635035f : 
                    0.0f))));
    return pred;
  } // constant pool size = 38B, number of visited nodes = 9, static init size = 0B
}

class log_drf_1_Tree_42_class_2 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* no_of_characters */] <158.5f ? 
         (Double.isNaN(data[0]) || data[0 /* vlan */] <181.5f ? 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <140.0f ? 
                0.0f : 
                 (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
                    0.0f : 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.3671875f ? 
                        0.2826087f : 
                        1.0f))) : 
             (data[3 /* no_of_ips */] <0.5f ? 
                0.0f : 
                 (data[2 /* no_of_characters */] <142.5f ? 
                    0.969697f : 
                    1.0f))) : 
         (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
            0.0f : 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <181.5f ? 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <1090.0f ? 
                     (data[2 /* no_of_characters */] <173.5f ? 
                        2.3877746E-4f : 
                        0.0f) : 
                     (data[5 /* 4_letter_word */] <0.203125f ? 
                        0.5f : 
                        0.0f)) : 
                 (Double.isNaN(data[14]) || data[14 /* 13_letter_word */] <0.100260414f ? 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <605.0f ? 
                        0.0989011f : 
                        1.0f) : 
                    1.0f))));
    return pred;
  } // constant pool size = 58B, number of visited nodes = 14, static init size = 0B
}

class log_drf_1_Tree_42_class_3 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.3227539f ? 
         (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
             (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.24023438f ? 
                0.0f : 
                 (data[0 /* vlan */] <26.5f ? 
                    1.2602395E-4f : 
                    0.0f)) : 
             (data[3 /* no_of_ips */] <1.5f ? 
                 (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.22567558f ? 
                     (data[1 /* type_of_time */] <4.5f ? 
                        0.1097561f : 
                        0.0f) : 
                     (data[5 /* 4_letter_word */] <0.4609375f ? 
                        0.0f : 
                        0.84390247f)) : 
                0.0f)) : 
         (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.38671875f ? 
             (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.111328125f ? 
                0.0f : 
                 (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.046875f ? 
                     (data[3 /* no_of_ips */] <0.5f ? 
                        0.17223975f : 
                        0.0f) : 
                    0.0f)) : 
             (data[1 /* type_of_time */] <4.5f ? 
                0.0f : 
                 (data[3 /* no_of_ips */] <0.5f ? 
                    0.0f : 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <180.5f ? 
                        0.980924f : 
                        0.0f)))));
    return pred;
  } // constant pool size = 62B, number of visited nodes = 15, static init size = 0B
}

class log_drf_1_Tree_42_class_4 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* no_of_characters */] <113.5f ? 
         (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.29101562f ? 
             (data[0 /* vlan */] <29.5f ? 
                 (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.74609375f ? 
                    2.8007283E-4f : 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <94.5f ? 
                        0.0f : 
                        0.09090909f)) : 
                0.0f) : 
             (data[8 /* 7_letter_word */] <0.36717606f ? 
                 (data[0 /* vlan */] <25.5f ? 
                    0.0f : 
                     (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.171875f ? 
                        0.0f : 
                        0.96153843f)) : 
                0.0f)) : 
         (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
            0.0f : 
             (data[0 /* vlan */] <25.5f ? 
                0.0f : 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.1171875f ? 
                    0.0f : 
                     (data[5 /* 4_letter_word */] <0.296875f ? 
                        0.0025113008f : 
                        2.5445293E-4f)))));
    return pred;
  } // constant pool size = 50B, number of visited nodes = 12, static init size = 0B
}

class log_drf_1_Tree_42_class_5 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.087402344f ? 
         (data[0 /* vlan */] <83.5f ? 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <80.5f ? 
                0.0f : 
                1.0f) : 
            0.0f) : 
         (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.27929688f ? 
             (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
                0.0f : 
                 (data[2 /* no_of_characters */] <110.5f ? 
                     (data[6 /* 5_letter_word */] <0.29416275f ? 
                        0.02955665f : 
                        0.0f) : 
                    0.0f)) : 
             (Double.isNaN(data[12]) || data[12 /* 11_letter_word */] <0.29101562f ? 
                 (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.22916667f ? 
                     (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.010416667f ? 
                        0.0014813717f : 
                        0.0f) : 
                     (data[9 /* 8_letter_word */] <0.23984376f ? 
                        1.0f : 
                        0.0f)) : 
                1.0f)));
    return pred;
  } // constant pool size = 46B, number of visited nodes = 11, static init size = 0B
}

class log_drf_1_Tree_42_class_6 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* no_of_characters */] <98.5f ? 
         (Double.isNaN(data[0]) || data[0 /* vlan */] <109.5f ? 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <85.5f ? 
                 (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.1015625f ? 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.828125f ? 
                        0.0027790645f : 
                        0.11363637f) : 
                    0.0f) : 
                 (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.16796875f ? 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.1484375f ? 
                        0.0f : 
                        0.8636364f) : 
                    0.0f)) : 
             (data[1 /* type_of_time */] <4.5f ? 
                0.0f : 
                 (data[0 /* vlan */] <138.5f ? 
                    1.0f : 
                    0.0f))) : 
         (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.15527344f ? 
            0.0f : 
             (data[0 /* vlan */] <133.5f ? 
                 (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.0625f ? 
                     (data[2 /* no_of_characters */] <117.5f ? 
                        0.029296875f : 
                        0.0f) : 
                    0.0f) : 
                0.0f)));
    return pred;
  } // constant pool size = 54B, number of visited nodes = 13, static init size = 0B
}

class log_drf_1_Tree_42_class_7 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <1.5f ? 
         (Double.isNaN(data[0]) || data[0 /* vlan */] <185.5f ? 
            0.0f : 
             (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.6660156f ? 
                0.0f : 
                1.0f)) : 
         (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.87402344f ? 
            0.0f : 
             (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <2.5f ? 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <110.0f ? 
                    0.0f : 
                    1.0f) : 
                0.0f)));
    return pred;
  } // constant pool size = 26B, number of visited nodes = 6, static init size = 0B
}

class log_drf_1_Tree_42_class_8 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <900.5f ? 
         (Double.isNaN(data[0]) || data[0 /* vlan */] <177.5f ? 
            0.0f : 
             (data[0 /* vlan */] <181.5f ? 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <732.5f ? 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.125f ? 
                        0.017441861f : 
                        0.0f) : 
                    0.25f) : 
                0.0f)) : 
         (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.53808594f ? 
             (data[3 /* no_of_ips */] <3.5f ? 
                 (data[0 /* vlan */] <174.5f ? 
                    0.0f : 
                     (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.03013393f ? 
                        0.97959185f : 
                        0.0f)) : 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.16796875f ? 
                     (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <4.5f ? 
                        0.0f : 
                        1.0f) : 
                    0.0f)) : 
             (data[0 /* vlan */] <173.5f ? 
                0.0f : 
                0.97037035f)));
    return pred;
  } // constant pool size = 50B, number of visited nodes = 12, static init size = 0B
}

class log_drf_1_Tree_42_class_9 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <2.5f ? 
         (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <1.5f ? 
             (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.9355469f ? 
                 (data[1 /* type_of_time */] <3.5f ? 
                     (Double.isNaN(data[12]) || data[12 /* 11_letter_word */] <0.078125f ? 
                        0.011627907f : 
                        0.0f) : 
                    0.0f) : 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <126.0f ? 
                    0.0f : 
                     (data[2 /* no_of_characters */] <120.5f ? 
                        0.019607844f : 
                        0.0f))) : 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <120.5f ? 
                 (data[1 /* type_of_time */] <4.0f ? 
                    1.0f : 
                    0.0f) : 
                0.0f)) : 
         (data[1 /* type_of_time */] <3.5f ? 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <173.5f ? 
                1.0f : 
                0.0f) : 
            0.0f));
    return pred;
  } // constant pool size = 46B, number of visited nodes = 11, static init size = 0B
}

class log_drf_1_Tree_42_class_10 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* no_of_characters */] <92.5f ? 
         (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.5830078f ? 
            0.0f : 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <127.5f ? 
                0.0f : 
                1.0f)) : 
        5.364749E-6f);
    return pred;
  } // constant pool size = 14B, number of visited nodes = 3, static init size = 0B
}

class log_drf_1_Tree_42_class_11 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* no_of_characters */] <134.5f ? 
        1.8135326E-5f : 
        0.0f);
    return pred;
  } // constant pool size = 6B, number of visited nodes = 1, static init size = 0B
}

class log_drf_1_Tree_42_class_12 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <529.5f ? 
         (Double.isNaN(data[0]) || data[0 /* vlan */] <593.5f ? 
            0.0f : 
             (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.1015625f ? 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <249.0f ? 
                    0.0f : 
                    1.0f) : 
                0.0f)) : 
         (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.5f ? 
             (data[3 /* no_of_ips */] <1.5f ? 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <589.0f ? 
                    0.0f : 
                    1.0f) : 
                0.0f) : 
            0.9285714f));
    return pred;
  } // constant pool size = 30B, number of visited nodes = 7, static init size = 0B
}

class log_drf_1_Tree_42_class_13 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* no_of_characters */] <54.0f ? 
         (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.41601562f ? 
             (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.125f ? 
                0.87732345f : 
                1.0f) : 
            0.0f) : 
         (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.19140625f ? 
             (data[8 /* 7_letter_word */] <0.013671875f ? 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <593.0f ? 
                    0.0f : 
                     (data[2 /* no_of_characters */] <455.5f ? 
                        0.16666667f : 
                        0.0f)) : 
                0.0f) : 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <590.5f ? 
                 (data[9 /* 8_letter_word */] <0.21035767f ? 
                     (data[0 /* vlan */] <17.5f ? 
                        0.1521739f : 
                        0.0019569471f) : 
                    0.0f) : 
                0.08f)));
    return pred;
  } // constant pool size = 42B, number of visited nodes = 10, static init size = 0B
}

class log_drf_1_Tree_42_class_14 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[12]) || data[12 /* 11_letter_word */] <0.18310547f ? 
         (data[0 /* vlan */] <27.5f ? 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <26.0f ? 
                0.0f : 
                 (data[1 /* type_of_time */] <3.5f ? 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <180.5f ? 
                        0.040816326f : 
                        0.0f) : 
                    0.0f)) : 
            0.0f) : 
         (data[1 /* type_of_time */] <2.5f ? 
            1.0f : 
            0.0f));
    return pred;
  } // constant pool size = 26B, number of visited nodes = 6, static init size = 0B
}

class log_drf_1_Tree_42_class_15 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* no_of_characters */] <100.5f ? 
         (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <1.5f ? 
            0.0f : 
             (data[5 /* 4_letter_word */] <0.7480469f ? 
                0.0f : 
                 (data[2 /* no_of_characters */] <97.0f ? 
                    0.0f : 
                     (data[2 /* no_of_characters */] <98.5f ? 
                        0.0f : 
                        0.33765182f)))) : 
         (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
            0.0f : 
             (data[3 /* no_of_ips */] <0.5f ? 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <376.5f ? 
                     (data[2 /* no_of_characters */] <122.5f ? 
                        0.002514368f : 
                        0.014788784f) : 
                     (data[0 /* vlan */] <162.5f ? 
                        0.30555555f : 
                        0.0f)) : 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <109.5f ? 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <62.5f ? 
                        3.728561E-5f : 
                        0.008163265f) : 
                     (data[5 /* 4_letter_word */] <0.265625f ? 
                        0.18532819f : 
                        0.009478673f)))));
    return pred;
  } // constant pool size = 54B, number of visited nodes = 13, static init size = 0B
}

class log_drf_1_Tree_42_class_16 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* no_of_characters */] <84.5f ? 
         (Double.isNaN(data[0]) || data[0 /* vlan */] <29.5f ? 
            0.0f : 
             (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.7480469f ? 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <81.0f ? 
                    0.0f : 
                     (data[0 /* vlan */] <61.0f ? 
                        0.045454547f : 
                        0.0f)) : 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <77.0f ? 
                    0.0f : 
                    0.8333333f))) : 
         (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
            0.0f : 
             (data[3 /* no_of_ips */] <0.5f ? 
                 (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.30859375f ? 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.3828125f ? 
                        1.2973534E-4f : 
                        6.038647E-4f) : 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <140.5f ? 
                        0.0f : 
                        0.02739726f)) : 
                0.0f)));
    return pred;
  } // constant pool size = 46B, number of visited nodes = 11, static init size = 0B
}

class log_drf_1_Tree_42_class_17 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <659.0f ? 
         (data[0 /* vlan */] <17.5f ? 
             (data[5 /* 4_letter_word */] <0.056640625f ? 
                 (data[1 /* type_of_time */] <3.0f ? 
                    0.024390243f : 
                    0.0f) : 
                0.0f) : 
            0.0f) : 
         (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.3486328f ? 
             (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <3.5f ? 
                 (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.02734375f ? 
                    0.78571427f : 
                     (data[0 /* vlan */] <67.5f ? 
                        0.5f : 
                        0.0f)) : 
                1.0f) : 
             (data[0 /* vlan */] <173.5f ? 
                0.0f : 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.046875f ? 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.072265625f ? 
                        0.16101696f : 
                        0.0f) : 
                    0.0f))));
    return pred;
  } // constant pool size = 46B, number of visited nodes = 11, static init size = 0B
}

class log_drf_1_Tree_42_class_18 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <330.5f ? 
        0.0f : 
         (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.05078125f ? 
            0.0f : 
             (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.07421875f ? 
                0.0f : 
                 (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.45572916f ? 
                    0.0f : 
                     (data[3 /* no_of_ips */] <0.5f ? 
                        0.33333334f : 
                        0.0f)))));
    return pred;
  } // constant pool size = 22B, number of visited nodes = 5, static init size = 0B
}

class log_drf_1_Tree_42_class_19 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* no_of_characters */] <136.5f ? 
         (data[0 /* vlan */] <17.5f ? 
             (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.1015625f ? 
                0.0f : 
                 (data[11 /* 10_letter_word */] <0.1015625f ? 
                    0.0f : 
                    1.0f)) : 
            0.0f) : 
         (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.24023438f ? 
            0.0f : 
             (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                0.0f : 
                 (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.125f ? 
                    0.0f : 
                     (data[3 /* no_of_ips */] <1.5f ? 
                        1.0f : 
                        0.0f)))));
    return pred;
  } // constant pool size = 34B, number of visited nodes = 8, static init size = 0B
}

class log_drf_1_Tree_42_class_20 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* no_of_characters */] <134.5f ? 
         (Double.isNaN(data[0]) || data[0 /* vlan */] <24.5f ? 
             (data[0 /* vlan */] <17.5f ? 
                0.0f : 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <106.5f ? 
                    1.0f : 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.1015625f ? 
                        0.99927455f : 
                        1.0f))) : 
            0.0f) : 
         (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
            0.0f : 
             (data[3 /* no_of_ips */] <0.5f ? 
                 (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.32421875f ? 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.1875f ? 
                        0.19113721f : 
                        0.5970018f) : 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <33.5f ? 
                        0.9939074f : 
                        0.0f)) : 
                 (data[0 /* vlan */] <25.5f ? 
                     (data[2 /* no_of_characters */] <242.5f ? 
                        0.8930868f : 
                        0.006801399f) : 
                    0.0f))));
    return pred;
  } // constant pool size = 50B, number of visited nodes = 12, static init size = 0B
}

class log_drf_1_Tree_42_class_21 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[12]) || data[12 /* 11_letter_word */] <0.22460938f ? 
         (data[0 /* vlan */] <11.5f ? 
             (data[5 /* 4_letter_word */] <0.072265625f ? 
                 (data[2 /* no_of_characters */] <205.5f ? 
                    0.0f : 
                     (data[7 /* 6_letter_word */] <0.78125f ? 
                        0.0f : 
                        0.3f)) : 
                0.0f) : 
             (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <260.5f ? 
                    0.0016196717f : 
                     (data[5 /* 4_letter_word */] <0.234375f ? 
                        8.0775446E-4f : 
                        0.025745258f)) : 
                 (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.1328125f ? 
                     (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.234375f ? 
                        6.368007E-5f : 
                        2.0665427E-4f) : 
                     (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.1796875f ? 
                        6.4536947E-4f : 
                        0.008281574f)))) : 
         (data[1 /* type_of_time */] <3.5f ? 
            1.0f : 
            0.0f));
    return pred;
  } // constant pool size = 50B, number of visited nodes = 12, static init size = 0B
}

class log_drf_1_Tree_42_class_22 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <227.5f ? 
         (data[0 /* vlan */] <5.5f ? 
             (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.083984375f ? 
                0.0f : 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <130.5f ? 
                    0.0f : 
                    0.25f)) : 
            0.0f) : 
         (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.6455078f ? 
             (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                0.0f : 
                 (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.15625f ? 
                    0.0f : 
                     (data[9 /* 8_letter_word */] <0.1841634f ? 
                        0.019607844f : 
                        0.0f))) : 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <27.5f ? 
                 (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.125f ? 
                     (data[5 /* 4_letter_word */] <0.70643616f ? 
                        0.03846154f : 
                        0.0f) : 
                    0.0f) : 
                0.0f)));
    return pred;
  } // constant pool size = 46B, number of visited nodes = 11, static init size = 0B
}

class log_drf_1_Tree_42_class_23 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <257.5f ? 
         (data[0 /* vlan */] <17.5f ? 
             (data[5 /* 4_letter_word */] <0.056640625f ? 
                 (data[1 /* type_of_time */] <4.5f ? 
                    0.0f : 
                     (data[2 /* no_of_characters */] <130.5f ? 
                        0.0f : 
                        0.9890892f)) : 
                 (Double.isNaN(data[15]) || data[15 /* 14_letter_word */] <0.072265625f ? 
                     (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
                        0.0f : 
                        0.0010277493f) : 
                    1.0f)) : 
            0.0f) : 
         (data[5 /* 4_letter_word */] <0.055664062f ? 
             (data[8 /* 7_letter_word */] <0.26757812f ? 
                 (data[0 /* vlan */] <17.5f ? 
                     (data[3 /* no_of_ips */] <3.5f ? 
                        1.0f : 
                        0.0f) : 
                    0.0f) : 
                 (data[11 /* 10_letter_word */] <0.07421875f ? 
                    0.0f : 
                     (data[7 /* 6_letter_word */] <0.3828125f ? 
                        0.0f : 
                        1.0f))) : 
             (data[0 /* vlan */] <13.5f ? 
                1.0f : 
                 (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.265625f ? 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.12451172f ? 
                        0.0f : 
                        5.589715E-4f) : 
                     (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
                        0.0f : 
                        0.2580645f)))));
    return pred;
  } // constant pool size = 70B, number of visited nodes = 17, static init size = 0B
}

class log_drf_1_Tree_42_class_24 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.9746094f ? 
        0.0f : 
         (data[0 /* vlan */] <12.5f ? 
            1.0f : 
            0.0f));
    return pred;
  } // constant pool size = 10B, number of visited nodes = 2, static init size = 0B
}

class log_drf_1_Tree_42_class_25 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <1.5f ? 
         (data[0 /* vlan */] <40.5f ? 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <29.5f ? 
                 (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.234375f ? 
                     (data[2 /* no_of_characters */] <80.5f ? 
                        0.0054347827f : 
                        4.0480366E-4f) : 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <24.0f ? 
                        0.0f : 
                        0.26865673f)) : 
                 (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.15625f ? 
                     (data[2 /* no_of_characters */] <40.5f ? 
                        0.0f : 
                        0.98732024f) : 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.125f ? 
                        0.060606062f : 
                        1.0f))) : 
            0.0f) : 
         (data[5 /* 4_letter_word */] <0.055664062f ? 
             (data[1 /* type_of_time */] <4.5f ? 
                0.0f : 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <385.0f ? 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <232.5f ? 
                        0.9995157f : 
                        0.9298246f) : 
                    0.0f)) : 
             (data[0 /* vlan */] <25.5f ? 
                0.0f : 
                 (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.05078125f ? 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.22265625f ? 
                        0.82281554f : 
                        0.2705272f) : 
                     (data[3 /* no_of_ips */] <3.5f ? 
                        0.5f : 
                        0.0f)))));
    return pred;
  } // constant pool size = 70B, number of visited nodes = 17, static init size = 0B
}

class log_drf_1_Tree_42_class_26 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* no_of_characters */] <57.5f ? 
         (data[8 /* 7_letter_word */] <0.29101562f ? 
            0.0f : 
            0.9780488f) : 
        0.0f);
    return pred;
  } // constant pool size = 10B, number of visited nodes = 2, static init size = 0B
}

class log_drf_1_Tree_42_class_27 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <256.5f ? 
        0.0f : 
         (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.23925781f ? 
            0.0f : 
             (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.47070312f ? 
                0.0f : 
                 (data[0 /* vlan */] <18.5f ? 
                    0.05882353f : 
                    0.0f))));
    return pred;
  } // constant pool size = 18B, number of visited nodes = 4, static init size = 0B
}

class log_drf_1_Tree_42_class_28 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <5.5f ? 
         (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <3.5f ? 
            0.0f : 
             (data[0 /* vlan */] <23.5f ? 
                1.0f : 
                0.0f)) : 
         (data[5 /* 4_letter_word */] <0.0625f ? 
             (data[2 /* no_of_characters */] <377.5f ? 
                0.0f : 
                1.0f) : 
            1.0f));
    return pred;
  } // constant pool size = 22B, number of visited nodes = 5, static init size = 0B
}

class log_drf_1_Tree_42_class_29 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <957.5f ? 
         (data[8 /* 7_letter_word */] <0.0390625f ? 
             (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.6894531f ? 
                0.0f : 
                 (Double.isNaN(data[12]) || data[12 /* 11_letter_word */] <0.02734375f ? 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <110.0f ? 
                        0.0f : 
                        0.0045045046f) : 
                    1.0f)) : 
            0.0f) : 
         (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.018554688f ? 
            0.0f : 
             (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                 (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.42578125f ? 
                    0.0f : 
                    1.0f) : 
                0.0f)));
    return pred;
  } // constant pool size = 34B, number of visited nodes = 8, static init size = 0B
}

class log_drf_1_Tree_42_class_30 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <2.5f ? 
         (Double.isNaN(data[0]) || data[0 /* vlan */] <177.5f ? 
            0.0f : 
             (data[0 /* vlan */] <181.5f ? 
                 (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <1.5f ? 
                    0.0f : 
                     (Double.isNaN(data[1]) || data[1 /* type_of_time */] <3.0f ? 
                        1.0f : 
                        0.0f)) : 
                0.0f)) : 
         (data[1 /* type_of_time */] <2.0f ? 
            1.0f : 
            0.0f));
    return pred;
  } // constant pool size = 26B, number of visited nodes = 6, static init size = 0B
}

class log_drf_1_Tree_42_class_31 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* no_of_characters */] <113.5f ? 
         (Double.isNaN(data[0]) || data[0 /* vlan */] <64.5f ? 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <34.5f ? 
                0.0f : 
                 (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.125f ? 
                     (data[2 /* no_of_characters */] <97.0f ? 
                        0.75f : 
                        0.0046296297f) : 
                    1.0f)) : 
             (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.083984375f ? 
                 (data[0 /* vlan */] <110.0f ? 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <102.5f ? 
                        0.74647886f : 
                        0.9625f) : 
                    0.0f) : 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <110.0f ? 
                     (Double.isNaN(data[15]) || data[15 /* 14_letter_word */] <0.2265625f ? 
                        0.98588234f : 
                        0.93333334f) : 
                    0.0f))) : 
         (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
            0.0f : 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <65.5f ? 
                 (Double.isNaN(data[4]) || data[4 /* no_of_macs */] <1.5f ? 
                     (data[2 /* no_of_characters */] <132.5f ? 
                        5.2791345E-4f : 
                        3.079292E-5f) : 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <34.5f ? 
                        7.9744816E-4f : 
                        1.0f)) : 
                 (data[5 /* 4_letter_word */] <0.33984375f ? 
                     (Double.isNaN(data[4]) || data[4 /* no_of_macs */] <0.5f ? 
                        0.16141732f : 
                        0.0f) : 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <168.5f ? 
                        0.07597536f : 
                        0.0f)))));
    return pred;
  } // constant pool size = 74B, number of visited nodes = 18, static init size = 0B
}

class log_drf_1_Tree_42_class_32 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* no_of_characters */] <123.5f ? 
         (Double.isNaN(data[0]) || data[0 /* vlan */] <29.5f ? 
             (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.1015625f ? 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <28.0f ? 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <25.0f ? 
                        0.0f : 
                        0.016666668f) : 
                    1.0f) : 
                 (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <120.5f ? 
                        0.0f : 
                        0.1835206f) : 
                     (data[2 /* no_of_characters */] <109.5f ? 
                        0.0f : 
                        1.0f))) : 
            0.0f) : 
        0.0f);
    return pred;
  } // constant pool size = 34B, number of visited nodes = 8, static init size = 0B
}

class log_drf_1_Tree_42_class_33 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* no_of_characters */] <69.5f ? 
         (data[0 /* vlan */] <10.5f ? 
             (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.125f ? 
                1.0f : 
                0.015151516f) : 
             (data[2 /* no_of_characters */] <39.5f ? 
                 (data[0 /* vlan */] <106.5f ? 
                     (data[6 /* 5_letter_word */] <0.125f ? 
                        0.25f : 
                        0.0f) : 
                    0.0f) : 
                0.0f)) : 
         (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.40820312f ? 
             (data[0 /* vlan */] <9.5f ? 
                0.75f : 
                 (data[2 /* no_of_characters */] <107.5f ? 
                     (data[1 /* type_of_time */] <2.5f ? 
                        0.11111111f : 
                        0.0012776413f) : 
                     (data[0 /* vlan */] <25.5f ? 
                        4.8395683E-5f : 
                        0.0f))) : 
             (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.080078125f ? 
                 (data[0 /* vlan */] <17.5f ? 
                     (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.0390625f ? 
                        0.020489471f : 
                        0.0f) : 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.15625f ? 
                        1.1458254E-4f : 
                        9.220839E-4f)) : 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <277.5f ? 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.70410156f ? 
                        0.0f : 
                        0.54285717f) : 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <17.5f ? 
                        0.9390244f : 
                        0.0f)))));
    return pred;
  } // constant pool size = 74B, number of visited nodes = 18, static init size = 0B
}

class log_drf_1_Tree_42_class_34 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.12158203f ? 
        0.0f : 
         (data[0 /* vlan */] <9.5f ? 
             (data[9 /* 8_letter_word */] <0.125f ? 
                0.0f : 
                0.014925373f) : 
             (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.15429688f ? 
                0.0f : 
                 (data[0 /* vlan */] <18.5f ? 
                     (Double.isNaN(data[12]) || data[12 /* 11_letter_word */] <0.045572918f ? 
                        0.02631579f : 
                        0.0f) : 
                    0.0f))));
    return pred;
  } // constant pool size = 26B, number of visited nodes = 6, static init size = 0B
}

class log_drf_1_Tree_42_class_35 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* no_of_characters */] <88.5f ? 
         (data[0 /* vlan */] <18.5f ? 
             (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.16796875f ? 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <81.0f ? 
                    0.0f : 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.1015625f ? 
                        0.125f : 
                        0.0f)) : 
                1.0f) : 
            0.0f) : 
         (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
            0.0f : 
             (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <1.5f ? 
                 (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                     (data[0 /* vlan */] <17.5f ? 
                        9.342884E-4f : 
                        0.0f) : 
                     (data[2 /* no_of_characters */] <144.5f ? 
                        0.0010834236f : 
                        1.6103059E-4f)) : 
                0.0f)));
    return pred;
  } // constant pool size = 42B, number of visited nodes = 10, static init size = 0B
}

class log_drf_1_Tree_42_class_36 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* no_of_characters */] <131.5f ? 
         (data[0 /* vlan */] <5.5f ? 
             (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.083984375f ? 
                0.0f : 
                 (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.37304688f ? 
                    0.0f : 
                    0.9166667f)) : 
            0.0f) : 
        0.0f);
    return pred;
  } // constant pool size = 18B, number of visited nodes = 4, static init size = 0B
}

class log_drf_1_Tree_42_class_37 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* no_of_characters */] <164.5f ? 
         (Double.isNaN(data[0]) || data[0 /* vlan */] <156.5f ? 
             (data[0 /* vlan */] <14.5f ? 
                 (data[1 /* type_of_time */] <4.5f ? 
                     (data[1 /* type_of_time */] <3.0f ? 
                        0.96153843f : 
                        1.0f) : 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.2890625f ? 
                        0.0f : 
                        0.15384616f)) : 
                 (data[0 /* vlan */] <25.5f ? 
                    0.0f : 
                     (data[1 /* type_of_time */] <3.0f ? 
                        0.96875f : 
                        2.112557E-4f))) : 
             (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <1.5f ? 
                 (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
                    0.9999004f : 
                    0.10251631f) : 
                 (data[3 /* no_of_ips */] <2.5f ? 
                     (Double.isNaN(data[1]) || data[1 /* type_of_time */] <3.5f ? 
                        0.0f : 
                        0.25f) : 
                    0.0f))) : 
         (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
             (Double.isNaN(data[12]) || data[12 /* 11_letter_word */] <0.18359375f ? 
                 (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.05078125f ? 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <218.5f ? 
                        0.9978132f : 
                        0.9813915f) : 
                     (data[8 /* 7_letter_word */] <0.265625f ? 
                        0.3325893f : 
                        0.8809035f)) : 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <126.0f ? 
                    0.0f : 
                    1.0f)) : 
            0.0f));
    return pred;
  } // constant pool size = 74B, number of visited nodes = 18, static init size = 0B
}

class log_drf_1_Tree_42_class_38 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* no_of_characters */] <93.5f ? 
         (Double.isNaN(data[0]) || data[0 /* vlan */] <85.5f ? 
            0.0f : 
             (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.83203125f ? 
                0.0f : 
                0.044444446f)) : 
        0.0f);
    return pred;
  } // constant pool size = 14B, number of visited nodes = 3, static init size = 0B
}


class log_drf_1_Forest_43 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += log_drf_1_Tree_43_class_0.score0(fdata);
    preds[2] += log_drf_1_Tree_43_class_1.score0(fdata);
    preds[3] += log_drf_1_Tree_43_class_2.score0(fdata);
    preds[4] += log_drf_1_Tree_43_class_3.score0(fdata);
    preds[5] += log_drf_1_Tree_43_class_4.score0(fdata);
    preds[6] += log_drf_1_Tree_43_class_5.score0(fdata);
    preds[7] += log_drf_1_Tree_43_class_6.score0(fdata);
    preds[8] += log_drf_1_Tree_43_class_7.score0(fdata);
    preds[9] += log_drf_1_Tree_43_class_8.score0(fdata);
    preds[10] += log_drf_1_Tree_43_class_9.score0(fdata);
    preds[11] += log_drf_1_Tree_43_class_10.score0(fdata);
    preds[12] += log_drf_1_Tree_43_class_11.score0(fdata);
    preds[13] += log_drf_1_Tree_43_class_12.score0(fdata);
    preds[14] += log_drf_1_Tree_43_class_13.score0(fdata);
    preds[15] += log_drf_1_Tree_43_class_14.score0(fdata);
    preds[16] += log_drf_1_Tree_43_class_15.score0(fdata);
    preds[17] += log_drf_1_Tree_43_class_16.score0(fdata);
    preds[18] += log_drf_1_Tree_43_class_17.score0(fdata);
    preds[19] += log_drf_1_Tree_43_class_18.score0(fdata);
    preds[20] += log_drf_1_Tree_43_class_19.score0(fdata);
    preds[21] += log_drf_1_Tree_43_class_20.score0(fdata);
    preds[22] += log_drf_1_Tree_43_class_21.score0(fdata);
    preds[23] += log_drf_1_Tree_43_class_22.score0(fdata);
    preds[24] += log_drf_1_Tree_43_class_23.score0(fdata);
    preds[25] += log_drf_1_Tree_43_class_24.score0(fdata);
    preds[26] += log_drf_1_Tree_43_class_25.score0(fdata);
    preds[27] += log_drf_1_Tree_43_class_26.score0(fdata);
    preds[28] += log_drf_1_Tree_43_class_27.score0(fdata);
    preds[29] += log_drf_1_Tree_43_class_28.score0(fdata);
    preds[30] += log_drf_1_Tree_43_class_29.score0(fdata);
    preds[31] += log_drf_1_Tree_43_class_30.score0(fdata);
    preds[32] += log_drf_1_Tree_43_class_31.score0(fdata);
    preds[33] += log_drf_1_Tree_43_class_32.score0(fdata);
    preds[34] += log_drf_1_Tree_43_class_33.score0(fdata);
    preds[35] += log_drf_1_Tree_43_class_34.score0(fdata);
    preds[36] += log_drf_1_Tree_43_class_35.score0(fdata);
    preds[37] += log_drf_1_Tree_43_class_36.score0(fdata);
    preds[38] += log_drf_1_Tree_43_class_37.score0(fdata);
    preds[39] += log_drf_1_Tree_43_class_38.score0(fdata);
  }
}
class log_drf_1_Tree_43_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <1040.0f ? 
         (Double.isNaN(data[14]) || data[14 /* 13_letter_word */] <0.0146484375f ? 
             (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.029296875f ? 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.46875f ? 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.125f ? 
                        0.0f : 
                        3.9878767E-5f) : 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.4453125f ? 
                        0.0f : 
                        0.002846975f)) : 
                 (data[10 /* 9_letter_word */] <0.074798584f ? 
                     (data[4 /* no_of_macs */] <0.5f ? 
                        0.0f : 
                        1.0f) : 
                     (Double.isNaN(data[4]) || data[4 /* no_of_macs */] <0.5f ? 
                        0.0f : 
                        0.037037037f))) : 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <585.5f ? 
                0.0f : 
                 (data[12 /* 11_letter_word */] <0.01171875f ? 
                    0.6666667f : 
                    1.0f))) : 
         (data[4 /* no_of_macs */] <0.5f ? 
            0.0f : 
            1.0f));
    return pred;
  } // constant pool size = 50B, number of visited nodes = 12, static init size = 0B
}

class log_drf_1_Tree_43_class_1 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <261.5f ? 
         (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.7080078f ? 
             (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.16040802f ? 
                0.0f : 
                 (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.046875f ? 
                     (data[1 /* type_of_time */] <4.5f ? 
                        0.0f : 
                        4.7580208E-4f) : 
                    0.0f)) : 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <174.5f ? 
                0.0f : 
                 (data[0 /* vlan */] <86.5f ? 
                    0.0f : 
                     (data[1 /* type_of_time */] <4.5f ? 
                        0.0f : 
                        1.0f)))) : 
         (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.31640625f ? 
             (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.140625f ? 
                0.0f : 
                 (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.421875f ? 
                    0.0f : 
                     (data[5 /* 4_letter_word */] <0.4601237f ? 
                        0.2f : 
                        0.0f))) : 
             (data[2 /* no_of_characters */] <289.5f ? 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <274.5f ? 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.44992065f ? 
                        0.8181818f : 
                        0.0f) : 
                     (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                        0.0f : 
                        1.0f)) : 
                 (data[8 /* 7_letter_word */] <0.44992065f ? 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.3870728f ? 
                        0.01509434f : 
                        0.9722222f) : 
                    0.0f))));
    return pred;
  } // constant pool size = 74B, number of visited nodes = 18, static init size = 0B
}

class log_drf_1_Tree_43_class_2 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* no_of_characters */] <158.5f ? 
         (Double.isNaN(data[0]) || data[0 /* vlan */] <181.5f ? 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <140.0f ? 
                0.0f : 
                 (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.07421875f ? 
                     (data[3 /* no_of_ips */] <0.5f ? 
                        0.063516416f : 
                        5.3031644E-4f) : 
                     (data[0 /* vlan */] <152.0f ? 
                        1.0f : 
                        0.0f))) : 
             (data[2 /* no_of_characters */] <139.0f ? 
                0.0f : 
                 (data[7 /* 6_letter_word */] <0.37109375f ? 
                    0.0f : 
                     (data[1 /* type_of_time */] <4.5f ? 
                        0.0f : 
                        1.0f)))) : 
         (Double.isNaN(data[4]) || data[4 /* no_of_macs */] <3.0f ? 
             (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.46289062f ? 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <174.5f ? 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.24229431f ? 
                        1.7897411E-5f : 
                        1.00040015E-4f) : 
                     (data[3 /* no_of_ips */] <1.5f ? 
                        0.012820513f : 
                        0.0f)) : 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <736.0f ? 
                     (data[6 /* 5_letter_word */] <0.0546875f ? 
                        0.011855365f : 
                        5.67215E-4f) : 
                     (Double.isNaN(data[13]) || data[13 /* 12_letter_word */] <0.0296875f ? 
                        0.0f : 
                        1.0f))) : 
            0.33333334f));
    return pred;
  } // constant pool size = 70B, number of visited nodes = 17, static init size = 0B
}

class log_drf_1_Tree_43_class_3 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* no_of_characters */] <158.5f ? 
         (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.3095703f ? 
             (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.23580551f ? 
                 (data[2 /* no_of_characters */] <106.5f ? 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.1015625f ? 
                        4.8309178E-4f : 
                        0.0f) : 
                    0.0f) : 
                 (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.07421875f ? 
                     (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                        0.0f : 
                        0.5686901f) : 
                    0.0f)) : 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <141.0f ? 
                0.0f : 
                 (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.16796875f ? 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.088541664f ? 
                        0.91072893f : 
                        0.0f) : 
                    0.0f))) : 
         (data[8 /* 7_letter_word */] <0.29296875f ? 
             (data[5 /* 4_letter_word */] <0.15429688f ? 
                 (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.121147156f ? 
                    0.0f : 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.1953125f ? 
                        0.9710145f : 
                        0.0f)) : 
                 (data[2 /* no_of_characters */] <167.5f ? 
                     (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.1015625f ? 
                        0.0f : 
                        0.11724138f) : 
                    0.0f)) : 
            0.0f));
    return pred;
  } // constant pool size = 66B, number of visited nodes = 16, static init size = 0B
}

class log_drf_1_Tree_43_class_4 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* no_of_characters */] <113.5f ? 
         (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.3095703f ? 
             (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.7480469f ? 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <101.5f ? 
                    0.0f : 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.4453125f ? 
                        0.0f : 
                        0.0034965035f)) : 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <26.5f ? 
                    0.0f : 
                     (data[0 /* vlan */] <42.5f ? 
                        0.6666667f : 
                        0.0f))) : 
             (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.29101562f ? 
                0.0f : 
                 (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.41744995f ? 
                    0.962963f : 
                    0.0f))) : 
         (data[8 /* 7_letter_word */] <0.14453125f ? 
             (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.2421875f ? 
                0.0f : 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <241.5f ? 
                     (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <1.5f ? 
                        9.7228977E-4f : 
                        0.0f) : 
                    0.0f)) : 
             (data[2 /* no_of_characters */] <118.5f ? 
                 (data[8 /* 7_letter_word */] <0.41854858f ? 
                     (data[7 /* 6_letter_word */] <0.0859375f ? 
                        0.083333336f : 
                        0.0f) : 
                    0.0f) : 
                0.0f)));
    return pred;
  } // constant pool size = 66B, number of visited nodes = 16, static init size = 0B
}

class log_drf_1_Tree_43_class_5 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <277.5f ? 
         (data[0 /* vlan */] <85.5f ? 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <64.5f ? 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.1328125f ? 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.15625f ? 
                        2.842605E-5f : 
                        1.2827091E-4f) : 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <33.0f ? 
                        0.0f : 
                        0.0038853812f)) : 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <169.5f ? 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <139.5f ? 
                        0.046511628f : 
                        0.19512194f) : 
                    1.0f)) : 
            0.0f) : 
         (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.123046875f ? 
            0.0f : 
             (data[0 /* vlan */] <75.5f ? 
                 (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.0859375f ? 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <329.5f ? 
                        0.0f : 
                        0.027777778f) : 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <33.0f ? 
                        0.012987013f : 
                        1.0f)) : 
                0.0f)));
    return pred;
  } // constant pool size = 54B, number of visited nodes = 13, static init size = 0B
}

class log_drf_1_Tree_43_class_6 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* no_of_characters */] <98.5f ? 
         (Double.isNaN(data[0]) || data[0 /* vlan */] <109.5f ? 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <34.5f ? 
                 (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.1015625f ? 
                     (data[2 /* no_of_characters */] <30.5f ? 
                        1.0f : 
                        3.4203625E-4f) : 
                     (data[10 /* 9_letter_word */] <0.27001953f ? 
                        1.0f : 
                        0.0f)) : 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <90.5f ? 
                     (data[2 /* no_of_characters */] <34.0f ? 
                        1.0f : 
                        0.0f) : 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.265625f ? 
                        0.0f : 
                        0.902439f))) : 
             (data[0 /* vlan */] <137.0f ? 
                1.0f : 
                0.0f)) : 
         (data[8 /* 7_letter_word */] <0.2607422f ? 
             (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.16015625f ? 
                0.0f : 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.15481567f ? 
                    0.0f : 
                     (data[9 /* 8_letter_word */] <0.18619792f ? 
                        0.17730497f : 
                        0.024858758f))) : 
            0.0f));
    return pred;
  } // constant pool size = 58B, number of visited nodes = 14, static init size = 0B
}

class log_drf_1_Tree_43_class_7 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* no_of_characters */] <154.5f ? 
         (Double.isNaN(data[0]) || data[0 /* vlan */] <185.5f ? 
            0.0f : 
             (data[0 /* vlan */] <593.0f ? 
                1.0f : 
                0.0f)) : 
         (data[8 /* 7_letter_word */] <0.0126953125f ? 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <185.5f ? 
                0.0f : 
                 (data[5 /* 4_letter_word */] <0.74609375f ? 
                    0.0f : 
                    1.0f)) : 
            0.0f));
    return pred;
  } // constant pool size = 26B, number of visited nodes = 6, static init size = 0B
}

class log_drf_1_Tree_43_class_8 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <900.5f ? 
         (Double.isNaN(data[0]) || data[0 /* vlan */] <177.5f ? 
            0.0f : 
             (data[0 /* vlan */] <181.5f ? 
                 (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.125f ? 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <788.5f ? 
                        0.0125f : 
                        0.5f) : 
                    0.0f) : 
                0.0f)) : 
         (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <3.5f ? 
             (data[0 /* vlan */] <173.5f ? 
                0.0f : 
                 (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.03125f ? 
                    1.0f : 
                     (data[8 /* 7_letter_word */] <0.0625f ? 
                        1.0f : 
                        0.0f))) : 
             (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <4.5f ? 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.16796875f ? 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.16666667f ? 
                        0.018691588f : 
                        0.0f) : 
                    0.0f) : 
                1.0f)));
    return pred;
  } // constant pool size = 50B, number of visited nodes = 12, static init size = 0B
}

class log_drf_1_Tree_43_class_9 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* no_of_characters */] <141.5f ? 
         (Double.isNaN(data[0]) || data[0 /* vlan */] <159.5f ? 
            0.0f : 
             (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.1015625f ? 
                 (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.125f ? 
                    0.0f : 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.171875f ? 
                        0.30208334f : 
                        0.0f)) : 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <174.5f ? 
                    1.0f : 
                    0.0f))) : 
         (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <2.5f ? 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <248.5f ? 
                0.0f : 
                 (data[8 /* 7_letter_word */] <0.0859375f ? 
                     (data[1 /* type_of_time */] <3.5f ? 
                        0.5f : 
                        0.0f) : 
                    0.0f)) : 
             (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.18359375f ? 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <98.0f ? 
                    0.0f : 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.2109375f ? 
                        0.2731183f : 
                        0.79611653f)) : 
                 (data[4 /* no_of_macs */] <0.5f ? 
                     (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.0f ? 
                        1.0f : 
                        0.0f) : 
                    0.0f))));
    return pred;
  } // constant pool size = 62B, number of visited nodes = 15, static init size = 0B
}

class log_drf_1_Tree_43_class_10 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* no_of_characters */] <92.5f ? 
         (Double.isNaN(data[0]) || data[0 /* vlan */] <164.5f ? 
            0.0f : 
             (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.33398438f ? 
                0.0f : 
                0.8f)) : 
         (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.4716797f ? 
            0.0f : 
             (data[2 /* no_of_characters */] <111.5f ? 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <110.5f ? 
                    0.0f : 
                     (data[5 /* 4_letter_word */] <0.171875f ? 
                        0.33333334f : 
                        0.0f)) : 
                0.0f)));
    return pred;
  } // constant pool size = 30B, number of visited nodes = 7, static init size = 0B
}

class log_drf_1_Tree_43_class_11 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* no_of_characters */] <134.5f ? 
        1.8135326E-5f : 
        0.0f);
    return pred;
  } // constant pool size = 6B, number of visited nodes = 1, static init size = 0B
}

class log_drf_1_Tree_43_class_12 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <529.5f ? 
         (Double.isNaN(data[0]) || data[0 /* vlan */] <593.5f ? 
            0.0f : 
             (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.25f ? 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <249.0f ? 
                    0.0f : 
                     (data[7 /* 6_letter_word */] <0.6953125f ? 
                        0.875f : 
                        1.0f)) : 
                0.0f)) : 
         (data[3 /* no_of_ips */] <1.5f ? 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <590.5f ? 
                0.0f : 
                1.0f) : 
            0.0f));
    return pred;
  } // constant pool size = 30B, number of visited nodes = 7, static init size = 0B
}

class log_drf_1_Tree_43_class_13 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* no_of_characters */] <54.0f ? 
         (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.125f ? 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <27.5f ? 
                1.0f : 
                 (data[2 /* no_of_characters */] <36.5f ? 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <517.5f ? 
                        0.0f : 
                        1.0f) : 
                    0.0f)) : 
             (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.29077148f ? 
                1.0f : 
                0.9f)) : 
         (data[8 /* 7_letter_word */] <0.20703125f ? 
             (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.18359375f ? 
                3.930277E-5f : 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <589.0f ? 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.18276978f ? 
                        0.0f : 
                        0.028846154f) : 
                    0.08695652f)) : 
            0.0f));
    return pred;
  } // constant pool size = 42B, number of visited nodes = 10, static init size = 0B
}

class log_drf_1_Tree_43_class_14 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[12]) || data[12 /* 11_letter_word */] <0.18310547f ? 
         (data[0 /* vlan */] <27.5f ? 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <24.5f ? 
                0.0f : 
                 (data[3 /* no_of_ips */] <0.5f ? 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.171875f ? 
                        0.0f : 
                        0.046511628f) : 
                    0.0f)) : 
            0.0f) : 
         (data[12 /* 11_letter_word */] <0.2245884f ? 
             (data[10 /* 9_letter_word */] <0.1015625f ? 
                0.0f : 
                 (Double.isNaN(data[1]) || data[1 /* type_of_time */] <3.0f ? 
                    1.0f : 
                    0.0f)) : 
            0.0f));
    return pred;
  } // constant pool size = 34B, number of visited nodes = 8, static init size = 0B
}

class log_drf_1_Tree_43_class_15 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* no_of_characters */] <100.5f ? 
         (Double.isNaN(data[0]) || data[0 /* vlan */] <29.5f ? 
            0.0f : 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <35.5f ? 
                 (Double.isNaN(data[4]) || data[4 /* no_of_macs */] <0.5f ? 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <96.0f ? 
                        0.0f : 
                        0.20240481f) : 
                    0.0f) : 
                0.0f)) : 
         (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.4716797f ? 
             (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.31054688f ? 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <211.5f ? 
                     (Double.isNaN(data[15]) || data[15 /* 14_letter_word */] <0.10546875f ? 
                        0.0014258034f : 
                        0.04519774f) : 
                     (data[2 /* no_of_characters */] <245.5f ? 
                        0.036767256f : 
                        0.0014364641f)) : 
                 (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.16796875f ? 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.4140625f ? 
                        0.014879817f : 
                        0.8679245f) : 
                    0.0f)) : 
            0.0f));
    return pred;
  } // constant pool size = 50B, number of visited nodes = 12, static init size = 0B
}

class log_drf_1_Tree_43_class_16 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* no_of_characters */] <84.5f ? 
         (Double.isNaN(data[0]) || data[0 /* vlan */] <29.5f ? 
            0.0f : 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <79.0f ? 
                0.0f : 
                 (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                     (data[0 /* vlan */] <61.0f ? 
                        0.8f : 
                        0.0f) : 
                    0.0f))) : 
         (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
             (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.31054688f ? 
                 (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.94921875f ? 
                     (data[2 /* no_of_characters */] <140.5f ? 
                        1.6187341E-4f : 
                        0.0f) : 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <33.5f ? 
                        7.598784E-4f : 
                        0.0f)) : 
                 (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.58203125f ? 
                    0.0f : 
                    0.33333334f)) : 
            0.0f));
    return pred;
  } // constant pool size = 46B, number of visited nodes = 11, static init size = 0B
}

class log_drf_1_Tree_43_class_17 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <659.0f ? 
         (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.89941406f ? 
            0.0f : 
             (data[0 /* vlan */] <19.5f ? 
                0.25f : 
                0.0f)) : 
         (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <3.5f ? 
             (data[2 /* no_of_characters */] <718.5f ? 
                0.9928058f : 
                 (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.020658053f ? 
                     (data[2 /* no_of_characters */] <885.0f ? 
                        0.09090909f : 
                        0.0f) : 
                     (data[4 /* no_of_macs */] <0.5f ? 
                        0.33333334f : 
                        0.0f))) : 
             (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <4.5f ? 
                 (data[6 /* 5_letter_word */] <0.16796875f ? 
                    0.8f : 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.16796875f ? 
                        0.9913793f : 
                        1.0f)) : 
                0.0f)));
    return pred;
  } // constant pool size = 46B, number of visited nodes = 11, static init size = 0B
}

class log_drf_1_Tree_43_class_18 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <330.5f ? 
        0.0f : 
         (data[6 /* 5_letter_word */] <0.03125f ? 
             (data[8 /* 7_letter_word */] <0.09765625f ? 
                 (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.0390625f ? 
                    0.0f : 
                    0.33333334f) : 
                0.0f) : 
            0.0f));
    return pred;
  } // constant pool size = 18B, number of visited nodes = 4, static init size = 0B
}

class log_drf_1_Tree_43_class_19 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* no_of_characters */] <136.5f ? 
         (data[0 /* vlan */] <17.5f ? 
             (data[0 /* vlan */] <13.5f ? 
                0.0f : 
                 (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.1015625f ? 
                    0.0f : 
                    1.0f)) : 
            0.0f) : 
         (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
            0.0f : 
             (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.22460938f ? 
                0.0f : 
                 (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.18359375f ? 
                    0.0f : 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <152.5f ? 
                        0.9375f : 
                        0.0f)))));
    return pred;
  } // constant pool size = 34B, number of visited nodes = 8, static init size = 0B
}

class log_drf_1_Tree_43_class_20 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* no_of_characters */] <134.5f ? 
         (Double.isNaN(data[0]) || data[0 /* vlan */] <24.5f ? 
             (data[0 /* vlan */] <17.5f ? 
                0.0f : 
                 (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.87109375f ? 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.4453125f ? 
                        0.9999179f : 
                        0.9997419f) : 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <121.5f ? 
                        1.0f : 
                        0.9931507f))) : 
            0.0f) : 
         (data[8 /* 7_letter_word */] <0.2607422f ? 
             (data[0 /* vlan */] <25.5f ? 
                 (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.87109375f ? 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.296875f ? 
                        0.58381224f : 
                        0.09639378f) : 
                     (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                        0.036036037f : 
                        1.0f)) : 
                0.0f) : 
             (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <1.5f ? 
                 (data[8 /* 7_letter_word */] <0.41667938f ? 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.30729166f ? 
                        0.012759994f : 
                        0.22646065f) : 
                     (Double.isNaN(data[15]) || data[15 /* 14_letter_word */] <0.140625f ? 
                        0.0027914362f : 
                        0.95652175f)) : 
                 (data[0 /* vlan */] <25.5f ? 
                     (Double.isNaN(data[14]) || data[14 /* 13_letter_word */] <0.0859375f ? 
                        1.0f : 
                        0.0f) : 
                    0.0f))));
    return pred;
  } // constant pool size = 70B, number of visited nodes = 17, static init size = 0B
}

class log_drf_1_Tree_43_class_21 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[12]) || data[12 /* 11_letter_word */] <0.22460938f ? 
         (data[0 /* vlan */] <11.5f ? 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <8.5f ? 
                0.0f : 
                 (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.1640625f ? 
                     (data[3 /* no_of_ips */] <0.5f ? 
                        0.0f : 
                        0.4318182f) : 
                    0.0f)) : 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <260.5f ? 
                 (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.44921875f ? 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.8984375f ? 
                        7.369602E-4f : 
                        0.0020686088f) : 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.125f ? 
                        0.0035330695f : 
                        0.0f)) : 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.1640625f ? 
                     (Double.isNaN(data[14]) || data[14 /* 13_letter_word */] <0.015625f ? 
                        5.215124E-4f : 
                        0.0f) : 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.28125f ? 
                        0.015619453f : 
                        0.08527132f)))) : 
         (data[12 /* 11_letter_word */] <0.2912445f ? 
             (data[5 /* 4_letter_word */] <0.125f ? 
                0.0f : 
                 (Double.isNaN(data[1]) || data[1 /* type_of_time */] <3.5f ? 
                    1.0f : 
                    0.0f)) : 
            0.0f));
    return pred;
  } // constant pool size = 62B, number of visited nodes = 15, static init size = 0B
}

class log_drf_1_Tree_43_class_22 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <227.5f ? 
         (data[0 /* vlan */] <5.5f ? 
             (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.083984375f ? 
                0.0f : 
                0.23076923f) : 
            0.0f) : 
         (data[8 /* 7_letter_word */] <0.0126953125f ? 
             (data[2 /* no_of_characters */] <232.5f ? 
                 (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.2890625f ? 
                    0.0f : 
                     (data[2 /* no_of_characters */] <229.5f ? 
                        0.4f : 
                        0.0f)) : 
                0.0f) : 
            0.0f));
    return pred;
  } // constant pool size = 30B, number of visited nodes = 7, static init size = 0B
}

class log_drf_1_Tree_43_class_23 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <257.5f ? 
         (data[0 /* vlan */] <17.5f ? 
             (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.15429688f ? 
                 (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.05859375f ? 
                     (data[2 /* no_of_characters */] <129.5f ? 
                        0.0f : 
                        0.89661014f) : 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.05580357f ? 
                        4.7641734E-4f : 
                        0.125f)) : 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <215.5f ? 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <179.5f ? 
                        0.0037695207f : 
                        0.16666667f) : 
                    1.0f)) : 
            0.0f) : 
         (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.27929688f ? 
             (data[0 /* vlan */] <13.5f ? 
                1.0f : 
                 (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.265625f ? 
                     (data[7 /* 6_letter_word */] <0.3828125f ? 
                        8.2101807E-4f : 
                        0.0f) : 
                     (data[9 /* 8_letter_word */] <0.30578613f ? 
                        0.8f : 
                        0.0f))) : 
             (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.38085938f ? 
                0.0f : 
                1.0f)));
    return pred;
  } // constant pool size = 58B, number of visited nodes = 14, static init size = 0B
}

class log_drf_1_Tree_43_class_24 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* no_of_characters */] <144.5f ? 
         (data[0 /* vlan */] <11.5f ? 
             (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                0.0f : 
                1.0f) : 
            0.0f) : 
        0.0f);
    return pred;
  } // constant pool size = 14B, number of visited nodes = 3, static init size = 0B
}

class log_drf_1_Tree_43_class_25 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* no_of_characters */] <165.5f ? 
         (data[0 /* vlan */] <29.5f ? 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <24.5f ? 
                0.0f : 
                 (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.4140625f ? 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.6328125f ? 
                        0.035870314f : 
                        0.91549295f) : 
                    0.33333334f)) : 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <41.5f ? 
                 (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.44921875f ? 
                     (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <2.5f ? 
                        0.94569224f : 
                        0.99959326f) : 
                    1.0f) : 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <173.5f ? 
                    0.0f : 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.7421875f ? 
                        0.0f : 
                        0.5f)))) : 
         (Double.isNaN(data[4]) || data[4 /* no_of_macs */] <0.5f ? 
             (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.24023438f ? 
                 (data[0 /* vlan */] <61.5f ? 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <29.5f ? 
                        5.6497176E-4f : 
                        0.9920749f) : 
                    0.0f) : 
                 (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.4609375f ? 
                        0.052931704f : 
                        0.7279597f) : 
                     (data[2 /* no_of_characters */] <218.5f ? 
                        0.5600203f : 
                        0.016057093f))) : 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <235.5f ? 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.25f ? 
                    1.0f : 
                    0.33333334f) : 
                0.0f)));
    return pred;
  } // constant pool size = 78B, number of visited nodes = 19, static init size = 0B
}

class log_drf_1_Tree_43_class_26 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* no_of_characters */] <57.5f ? 
         (Double.isNaN(data[0]) || data[0 /* vlan */] <29.5f ? 
             (data[5 /* 4_letter_word */] <0.5f ? 
                0.0f : 
                0.99763596f) : 
            0.0f) : 
        0.0f);
    return pred;
  } // constant pool size = 14B, number of visited nodes = 3, static init size = 0B
}

class log_drf_1_Tree_43_class_27 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <256.5f ? 
        0.0f : 
         (data[6 /* 5_letter_word */] <0.03125f ? 
             (data[8 /* 7_letter_word */] <0.26757812f ? 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.22472382f ? 
                    0.0f : 
                     (data[0 /* vlan */] <29.5f ? 
                        0.09090909f : 
                        0.0f)) : 
                0.0f) : 
            0.0f));
    return pred;
  } // constant pool size = 22B, number of visited nodes = 5, static init size = 0B
}

class log_drf_1_Tree_43_class_28 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <447.5f ? 
        0.0f : 
         (Double.isNaN(data[0]) || data[0 /* vlan */] <18.5f ? 
             (data[3 /* no_of_ips */] <2.5f ? 
                0.0f : 
                1.0f) : 
            0.0f));
    return pred;
  } // constant pool size = 14B, number of visited nodes = 3, static init size = 0B
}

class log_drf_1_Tree_43_class_29 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <957.5f ? 
         (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.18652344f ? 
            0.0f : 
             (data[6 /* 5_letter_word */] <0.19287872f ? 
                0.33333334f : 
                0.0f)) : 
         (Double.isNaN(data[12]) || data[12 /* 11_letter_word */] <0.017578125f ? 
            0.0f : 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <999.0f ? 
                1.0f : 
                0.0f)));
    return pred;
  } // constant pool size = 22B, number of visited nodes = 5, static init size = 0B
}

class log_drf_1_Tree_43_class_30 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <219.5f ? 
         (Double.isNaN(data[0]) || data[0 /* vlan */] <177.5f ? 
            0.0f : 
             (data[0 /* vlan */] <181.5f ? 
                 (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.16796875f ? 
                     (data[1 /* type_of_time */] <2.5f ? 
                        1.0f : 
                        0.0f) : 
                    0.0f) : 
                0.0f)) : 
         (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <2.5f ? 
            0.0f : 
             (data[2 /* no_of_characters */] <240.5f ? 
                 (data[5 /* 4_letter_word */] <0.125f ? 
                    0.0f : 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.0546875f ? 
                        1.0f : 
                        0.0f)) : 
                0.0f)));
    return pred;
  } // constant pool size = 38B, number of visited nodes = 9, static init size = 0B
}

class log_drf_1_Tree_43_class_31 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* no_of_characters */] <113.5f ? 
         (Double.isNaN(data[0]) || data[0 /* vlan */] <64.5f ? 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <34.5f ? 
                0.0f : 
                 (data[0 /* vlan */] <38.5f ? 
                     (data[5 /* 4_letter_word */] <0.265625f ? 
                        0.0f : 
                        0.9230769f) : 
                    0.0f)) : 
             (data[0 /* vlan */] <110.0f ? 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.265625f ? 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.22619629f ? 
                        0.982699f : 
                        0.95412844f) : 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.1953125f ? 
                        0.93650794f : 
                        0.0f)) : 
                0.0f)) : 
         (data[8 /* 7_letter_word */] <0.14453125f ? 
             (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.32226562f ? 
                 (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.21903992f ? 
                    0.0f : 
                     (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.1015625f ? 
                        0.0f : 
                        0.003811944f)) : 
                 (data[2 /* no_of_characters */] <141.5f ? 
                     (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                        0.021227768f : 
                        0.39338234f) : 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <65.5f ? 
                        4.4056744E-4f : 
                        0.013848091f))) : 
             (data[2 /* no_of_characters */] <132.5f ? 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.5355072f ? 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.064453125f ? 
                        0.0f : 
                        0.007575758f) : 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.078125f ? 
                        0.005050505f : 
                        1.0f)) : 
                 (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
                    0.0f : 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <65.5f ? 
                        1.0470108E-4f : 
                        0.004140787f)))));
    return pred;
  } // constant pool size = 90B, number of visited nodes = 22, static init size = 0B
}

class log_drf_1_Tree_43_class_32 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* no_of_characters */] <123.5f ? 
         (Double.isNaN(data[0]) || data[0 /* vlan */] <29.5f ? 
             (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <28.0f ? 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.125f ? 
                        8.331251E-5f : 
                        0.0f) : 
                     (data[8 /* 7_letter_word */] <0.171875f ? 
                        1.0f : 
                        0.0f)) : 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <28.0f ? 
                    0.0f : 
                     (data[2 /* no_of_characters */] <81.0f ? 
                        0.0f : 
                        1.0f))) : 
            0.0f) : 
        0.0f);
    return pred;
  } // constant pool size = 34B, number of visited nodes = 8, static init size = 0B
}

class log_drf_1_Tree_43_class_33 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* no_of_characters */] <69.5f ? 
         (data[0 /* vlan */] <10.5f ? 
             (data[2 /* no_of_characters */] <54.5f ? 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.16796875f ? 
                    0.0f : 
                    1.0f) : 
                1.0f) : 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <40.5f ? 
                0.0f : 
                 (data[0 /* vlan */] <64.0f ? 
                    1.0f : 
                    0.0f))) : 
         (Double.isNaN(data[4]) || data[4 /* no_of_macs */] <1.5f ? 
             (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.40820312f ? 
                 (data[0 /* vlan */] <9.5f ? 
                    1.0f : 
                     (data[1 /* type_of_time */] <2.5f ? 
                        0.011363637f : 
                        1.6594389E-4f)) : 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <296.5f ? 
                     (data[1 /* type_of_time */] <4.5f ? 
                        0.0f : 
                        0.003516217f) : 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.078125f ? 
                        0.0f : 
                        0.6956522f))) : 
             (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.08203125f ? 
                0.0f : 
                 (data[8 /* 7_letter_word */] <0.17578125f ? 
                    0.0f : 
                    0.96153843f))));
    return pred;
  } // constant pool size = 62B, number of visited nodes = 15, static init size = 0B
}

class log_drf_1_Tree_43_class_34 {
  static final double score0(double[] data) {
    double pred =     1.0E-5f;
    return pred;
  } // constant pool size = 2B, number of visited nodes = 0, static init size = 0B
}

class log_drf_1_Tree_43_class_35 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* no_of_characters */] <88.5f ? 
         (data[0 /* vlan */] <18.5f ? 
             (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.6660156f ? 
                 (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.16796875f ? 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.6640625f ? 
                        0.0f : 
                        0.25f) : 
                    1.0f) : 
                1.0f) : 
            0.0f) : 
         (data[8 /* 7_letter_word */] <0.16992188f ? 
             (data[0 /* vlan */] <13.5f ? 
                 (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.07421875f ? 
                     (data[3 /* no_of_ips */] <0.5f ? 
                        0.051282052f : 
                        0.0f) : 
                    0.0f) : 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.16527557f ? 
                     (data[1 /* type_of_time */] <4.5f ? 
                        0.0f : 
                        2.6449302E-4f) : 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.109375f ? 
                        0.0f : 
                        0.006849315f))) : 
             (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                0.0f : 
                 (data[0 /* vlan */] <17.5f ? 
                     (data[9 /* 8_letter_word */] <0.041666668f ? 
                        0.09090909f : 
                        0.0f) : 
                    0.0f))));
    return pred;
  } // constant pool size = 62B, number of visited nodes = 15, static init size = 0B
}

class log_drf_1_Tree_43_class_36 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* no_of_characters */] <131.5f ? 
         (data[0 /* vlan */] <5.5f ? 
             (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.083984375f ? 
                0.0f : 
                 (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.0859375f ? 
                    0.0f : 
                    0.7692308f)) : 
            0.0f) : 
        0.0f);
    return pred;
  } // constant pool size = 18B, number of visited nodes = 4, static init size = 0B
}

class log_drf_1_Tree_43_class_37 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* no_of_characters */] <164.5f ? 
         (Double.isNaN(data[0]) || data[0 /* vlan */] <156.5f ? 
             (data[0 /* vlan */] <17.5f ? 
                 (data[9 /* 8_letter_word */] <0.05859375f ? 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.4140625f ? 
                        0.9660042f : 
                        0.0f) : 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.4453125f ? 
                        0.0010589481f : 
                        0.05882353f)) : 
                 (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.2890625f ? 
                     (data[1 /* type_of_time */] <3.0f ? 
                        0.95f : 
                        7.338552E-5f) : 
                     (data[0 /* vlan */] <28.5f ? 
                        0.01076923f : 
                        0.0f))) : 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <180.5f ? 
                 (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.125f ? 
                     (data[2 /* no_of_characters */] <49.5f ? 
                        0.0f : 
                        0.98405176f) : 
                     (data[5 /* 4_letter_word */] <0.29589844f ? 
                        0.0f : 
                        0.9391172f)) : 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.125f ? 
                     (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.25f ? 
                        0.18577778f : 
                        1.0f) : 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.1015625f ? 
                        0.98734176f : 
                        1.0f)))) : 
         (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
             (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.88671875f ? 
                 (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.265625f ? 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <234.5f ? 
                        0.93957937f : 
                        0.67898834f) : 
                     (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
                        0.99788135f : 
                        0.0f)) : 
                0.26804122f) : 
             (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.31640625f ? 
                 (data[1 /* type_of_time */] <4.5f ? 
                     (data[3 /* no_of_ips */] <1.5f ? 
                        0.5f : 
                        0.004878049f) : 
                    0.0f) : 
                 (data[3 /* no_of_ips */] <2.5f ? 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.140625f ? 
                        0.022140222f : 
                        0.79651165f) : 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.1015625f ? 
                        0.0f : 
                        0.0032467532f)))));
    return pred;
  } // constant pool size = 110B, number of visited nodes = 27, static init size = 0B
}

class log_drf_1_Tree_43_class_38 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* no_of_characters */] <93.5f ? 
         (Double.isNaN(data[0]) || data[0 /* vlan */] <85.5f ? 
            0.0f : 
             (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.16796875f ? 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <89.5f ? 
                     (data[0 /* vlan */] <115.5f ? 
                        0.0033333334f : 
                        0.0f) : 
                     (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                        0.027777778f : 
                        0.33333334f)) : 
                0.0f)) : 
        0.0f);
    return pred;
  } // constant pool size = 26B, number of visited nodes = 6, static init size = 0B
}


class log_drf_1_Forest_44 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += log_drf_1_Tree_44_class_0.score0(fdata);
    preds[2] += log_drf_1_Tree_44_class_1.score0(fdata);
    preds[3] += log_drf_1_Tree_44_class_2.score0(fdata);
    preds[4] += log_drf_1_Tree_44_class_3.score0(fdata);
    preds[5] += log_drf_1_Tree_44_class_4.score0(fdata);
    preds[6] += log_drf_1_Tree_44_class_5.score0(fdata);
    preds[7] += log_drf_1_Tree_44_class_6.score0(fdata);
    preds[8] += log_drf_1_Tree_44_class_7.score0(fdata);
    preds[9] += log_drf_1_Tree_44_class_8.score0(fdata);
    preds[10] += log_drf_1_Tree_44_class_9.score0(fdata);
    preds[11] += log_drf_1_Tree_44_class_10.score0(fdata);
    preds[12] += log_drf_1_Tree_44_class_11.score0(fdata);
    preds[13] += log_drf_1_Tree_44_class_12.score0(fdata);
    preds[14] += log_drf_1_Tree_44_class_13.score0(fdata);
    preds[15] += log_drf_1_Tree_44_class_14.score0(fdata);
    preds[16] += log_drf_1_Tree_44_class_15.score0(fdata);
    preds[17] += log_drf_1_Tree_44_class_16.score0(fdata);
    preds[18] += log_drf_1_Tree_44_class_17.score0(fdata);
    preds[19] += log_drf_1_Tree_44_class_18.score0(fdata);
    preds[20] += log_drf_1_Tree_44_class_19.score0(fdata);
    preds[21] += log_drf_1_Tree_44_class_20.score0(fdata);
    preds[22] += log_drf_1_Tree_44_class_21.score0(fdata);
    preds[23] += log_drf_1_Tree_44_class_22.score0(fdata);
    preds[24] += log_drf_1_Tree_44_class_23.score0(fdata);
    preds[25] += log_drf_1_Tree_44_class_24.score0(fdata);
    preds[26] += log_drf_1_Tree_44_class_25.score0(fdata);
    preds[27] += log_drf_1_Tree_44_class_26.score0(fdata);
    preds[28] += log_drf_1_Tree_44_class_27.score0(fdata);
    preds[29] += log_drf_1_Tree_44_class_28.score0(fdata);
    preds[30] += log_drf_1_Tree_44_class_29.score0(fdata);
    preds[31] += log_drf_1_Tree_44_class_30.score0(fdata);
    preds[32] += log_drf_1_Tree_44_class_31.score0(fdata);
    preds[33] += log_drf_1_Tree_44_class_32.score0(fdata);
    preds[34] += log_drf_1_Tree_44_class_33.score0(fdata);
    preds[35] += log_drf_1_Tree_44_class_34.score0(fdata);
    preds[36] += log_drf_1_Tree_44_class_35.score0(fdata);
    preds[37] += log_drf_1_Tree_44_class_36.score0(fdata);
    preds[38] += log_drf_1_Tree_44_class_37.score0(fdata);
    preds[39] += log_drf_1_Tree_44_class_38.score0(fdata);
  }
}
class log_drf_1_Tree_44_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[4]) || data[4 /* no_of_macs */] <2.5f ? 
         (Double.isNaN(data[14]) || data[14 /* 13_letter_word */] <0.0087890625f ? 
             (Double.isNaN(data[4]) || data[4 /* no_of_macs */] <0.5f ? 
                0.0f : 
                 (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.0234375f ? 
                     (data[3 /* no_of_ips */] <0.5f ? 
                        1.0f : 
                        0.0f) : 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.1015625f ? 
                        0.0f : 
                        1.0f))) : 
             (Double.isNaN(data[4]) || data[4 /* no_of_macs */] <0.5f ? 
                0.0f : 
                1.0f)) : 
         (data[8 /* 7_letter_word */] <0.19726562f ? 
            0.5f : 
            0.0f));
    return pred;
  } // constant pool size = 34B, number of visited nodes = 8, static init size = 0B
}

class log_drf_1_Tree_44_class_1 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
        0.0f : 
         (data[3 /* no_of_ips */] <1.5f ? 
             (data[6 /* 5_letter_word */] <0.22460938f ? 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <137.5f ? 
                    0.0f : 
                     (data[0 /* vlan */] <151.5f ? 
                        0.9966887f : 
                        0.0f)) : 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.234375f ? 
                    0.0f : 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.62442017f ? 
                        0.0f : 
                        1.0f))) : 
            0.0f));
    return pred;
  } // constant pool size = 30B, number of visited nodes = 7, static init size = 0B
}

class log_drf_1_Tree_44_class_2 {
  static final double score0(double[] data) {
    double pred =      (data[1 /* type_of_time */] <4.5f ? 
        0.0f : 
         (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.05859375f ? 
             (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.47070312f ? 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <137.5f ? 
                    0.0f : 
                     (Double.isNaN(data[13]) || data[13 /* 12_letter_word */] <0.03125f ? 
                        0.15086207f : 
                        1.0f)) : 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <137.5f ? 
                    0.0f : 
                     (data[7 /* 6_letter_word */] <0.0859375f ? 
                        0.0f : 
                        1.0f))) : 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <137.5f ? 
                0.0f : 
                 (Double.isNaN(data[14]) || data[14 /* 13_letter_word */] <0.1015625f ? 
                     (data[3 /* no_of_ips */] <0.5f ? 
                        0.41964287f : 
                        0.0051903115f) : 
                    1.0f))));
    return pred;
  } // constant pool size = 42B, number of visited nodes = 10, static init size = 0B
}

class log_drf_1_Tree_44_class_3 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
         (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.36914062f ? 
             (data[0 /* vlan */] <25.5f ? 
                 (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.234375f ? 
                    0.0f : 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.203125f ? 
                        0.0f : 
                        4.2643922E-4f)) : 
                0.0f) : 
             (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.23046875f ? 
                0.0f : 
                 (Double.isNaN(data[12]) || data[12 /* 11_letter_word */] <0.125f ? 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.0625f ? 
                        0.0f : 
                        0.8923611f) : 
                    0.0f))) : 
         (data[3 /* no_of_ips */] <1.5f ? 
             (data[0 /* vlan */] <29.5f ? 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.046875f ? 
                     (data[0 /* vlan */] <28.0f ? 
                        0.0f : 
                        0.98820823f) : 
                    0.0f) : 
                 (data[2 /* no_of_characters */] <109.5f ? 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.125f ? 
                        0.0048109964f : 
                        0.0f) : 
                    0.0f)) : 
            0.0f));
    return pred;
  } // constant pool size = 58B, number of visited nodes = 14, static init size = 0B
}

class log_drf_1_Tree_44_class_4 {
  static final double score0(double[] data) {
    double pred =      (data[1 /* type_of_time */] <4.5f ? 
        0.0f : 
         (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.123046875f ? 
             (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.25976562f ? 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <25.5f ? 
                    0.0f : 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.828125f ? 
                        1.5507483E-4f : 
                        0.0952381f)) : 
                0.0f) : 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <25.5f ? 
                0.0f : 
                 (data[2 /* no_of_characters */] <120.5f ? 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <109.5f ? 
                        9.2678407E-4f : 
                        0.1495327f) : 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.421875f ? 
                        1.8389114E-4f : 
                        0.015197569f)))));
    return pred;
  } // constant pool size = 38B, number of visited nodes = 9, static init size = 0B
}

class log_drf_1_Tree_44_class_5 {
  static final double score0(double[] data) {
    double pred =      (data[1 /* type_of_time */] <4.5f ? 
        0.0f : 
         (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.08984375f ? 
             (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.421875f ? 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <33.5f ? 
                    0.0f : 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.3125f ? 
                        0.0f : 
                        0.0018214936f)) : 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <33.5f ? 
                    0.0f : 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <104.0f ? 
                        0.011082138f : 
                        0.0f))) : 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <33.5f ? 
                 (data[9 /* 8_letter_word */] <0.13250732f ? 
                     (data[10 /* 9_letter_word */] <0.046875f ? 
                        0.11764706f : 
                        0.0f) : 
                    0.0f) : 
                 (Double.isNaN(data[4]) || data[4 /* no_of_macs */] <0.5f ? 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <300.5f ? 
                        0.019769358f : 
                        0.13333334f) : 
                    0.0f))));
    return pred;
  } // constant pool size = 50B, number of visited nodes = 12, static init size = 0B
}

class log_drf_1_Tree_44_class_6 {
  static final double score0(double[] data) {
    double pred =      (data[1 /* type_of_time */] <4.5f ? 
        0.0f : 
         (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.15527344f ? 
             (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.32421875f ? 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.87109375f ? 
                     (Double.isNaN(data[14]) || data[14 /* 13_letter_word */] <0.015625f ? 
                        1.2418246E-4f : 
                        0.0f) : 
                     (Double.isNaN(data[4]) || data[4 /* no_of_macs */] <0.5f ? 
                        0.0041841003f : 
                        0.0f)) : 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <61.5f ? 
                     (data[0 /* vlan */] <17.0f ? 
                        0.003615329f : 
                        0.0f) : 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.041666668f ? 
                        0.034920637f : 
                        0.0f))) : 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <121.5f ? 
                0.0f : 
                 (data[9 /* 8_letter_word */] <0.24106598f ? 
                     (data[2 /* no_of_characters */] <130.5f ? 
                        1.0f : 
                        0.0f) : 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <120.5f ? 
                        0.9950739f : 
                        0.0f)))));
    return pred;
  } // constant pool size = 54B, number of visited nodes = 13, static init size = 0B
}

class log_drf_1_Tree_44_class_7 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <1.5f ? 
         (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
            0.0f : 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <185.5f ? 
                0.0f : 
                 (data[0 /* vlan */] <593.0f ? 
                    1.0f : 
                    0.0f))) : 
         (data[3 /* no_of_ips */] <2.5f ? 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <183.5f ? 
                0.0f : 
                1.0f) : 
            0.0f));
    return pred;
  } // constant pool size = 26B, number of visited nodes = 6, static init size = 0B
}

class log_drf_1_Tree_44_class_8 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <2.5f ? 
         (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
            0.0f : 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <177.5f ? 
                0.0f : 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <883.5f ? 
                     (data[3 /* no_of_ips */] <0.5f ? 
                        0.009237875f : 
                        0.0f) : 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.109375f ? 
                        1.0f : 
                        0.6f)))) : 
         (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <5.5f ? 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <173.5f ? 
                0.0f : 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.20703125f ? 
                     (data[5 /* 4_letter_word */] <0.4140625f ? 
                        0.017391304f : 
                        0.7777778f) : 
                    0.0f)) : 
            0.0f));
    return pred;
  } // constant pool size = 42B, number of visited nodes = 10, static init size = 0B
}

class log_drf_1_Tree_44_class_9 {
  static final double score0(double[] data) {
    double pred =      (data[1 /* type_of_time */] <3.5f ? 
         (data[3 /* no_of_ips */] <1.5f ? 
            0.0f : 
             (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.29101562f ? 
                 (data[9 /* 8_letter_word */] <0.1015625f ? 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <200.5f ? 
                        1.0f : 
                        0.0f) : 
                    1.0f) : 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <174.5f ? 
                    1.0f : 
                    0.0f))) : 
        0.0f);
    return pred;
  } // constant pool size = 26B, number of visited nodes = 6, static init size = 0B
}

class log_drf_1_Tree_44_class_10 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
        7.4042264E-6f : 
         (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.87402344f ? 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <165.5f ? 
                0.0f : 
                 (data[0 /* vlan */] <172.5f ? 
                     (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
                        0.0f : 
                        1.0f) : 
                    0.0f)) : 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <99.5f ? 
                0.0f : 
                0.33333334f)));
    return pred;
  } // constant pool size = 26B, number of visited nodes = 6, static init size = 0B
}

class log_drf_1_Tree_44_class_11 {
  static final double score0(double[] data) {
    double pred =     5.0E-6f;
    return pred;
  } // constant pool size = 2B, number of visited nodes = 0, static init size = 0B
}

class log_drf_1_Tree_44_class_12 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
        0.0f : 
         (data[6 /* 5_letter_word */] <0.028320312f ? 
             (data[3 /* no_of_ips */] <1.5f ? 
                 (data[5 /* 4_letter_word */] <0.0625f ? 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <589.0f ? 
                        0.0f : 
                        0.9f) : 
                    0.0f) : 
                0.0f) : 
            0.0f));
    return pred;
  } // constant pool size = 22B, number of visited nodes = 5, static init size = 0B
}

class log_drf_1_Tree_44_class_13 {
  static final double score0(double[] data) {
    double pred =      (data[1 /* type_of_time */] <4.5f ? 
        0.0f : 
         (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.2607422f ? 
             (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.25390625f ? 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <589.0f ? 
                     (Double.isNaN(data[14]) || data[14 /* 13_letter_word */] <0.0625f ? 
                        0.0043323254f : 
                        0.0f) : 
                    0.7583643f) : 
                 (data[2 /* no_of_characters */] <50.5f ? 
                    1.0f : 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.1953125f ? 
                        0.0f : 
                        0.0028571428f))) : 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <588.5f ? 
                 (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.046875f ? 
                     (Double.isNaN(data[4]) || data[4 /* no_of_macs */] <0.5f ? 
                        3.2586028E-4f : 
                        0.0f) : 
                    0.0f) : 
                1.0f)));
    return pred;
  } // constant pool size = 42B, number of visited nodes = 10, static init size = 0B
}

class log_drf_1_Tree_44_class_14 {
  static final double score0(double[] data) {
    double pred =      (data[1 /* type_of_time */] <2.5f ? 
         (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.2109375f ? 
             (Double.isNaN(data[12]) || data[12 /* 11_letter_word */] <0.1015625f ? 
                 (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.18374634f ? 
                    0.0f : 
                    1.0f) : 
                1.0f) : 
            0.0f) : 
        0.0f);
    return pred;
  } // constant pool size = 18B, number of visited nodes = 4, static init size = 0B
}

class log_drf_1_Tree_44_class_15 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <1.5f ? 
         (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
            0.0f : 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <125.5f ? 
                 (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.015625f ? 
                     (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.109375f ? 
                        4.0075343E-4f : 
                        0.0063166204f) : 
                    0.0f) : 
                 (Double.isNaN(data[12]) || data[12 /* 11_letter_word */] <0.01171875f ? 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.625f ? 
                        0.07011236f : 
                        0.43548387f) : 
                    0.0f))) : 
         (data[3 /* no_of_ips */] <2.5f ? 
             (data[0 /* vlan */] <29.5f ? 
                0.0f : 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.546875f ? 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <100.5f ? 
                        0.14530776f : 
                        7.833921E-4f) : 
                    1.0f)) : 
             (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.46289062f ? 
                0.0f : 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <170.5f ? 
                    0.0f : 
                     (data[3 /* no_of_ips */] <3.5f ? 
                        0.003508772f : 
                        0.0f)))));
    return pred;
  } // constant pool size = 58B, number of visited nodes = 14, static init size = 0B
}

class log_drf_1_Tree_44_class_16 {
  static final double score0(double[] data) {
    double pred =      (data[1 /* type_of_time */] <4.5f ? 
        0.0f : 
         (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.3486328f ? 
             (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.32275772f ? 
                 (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.4921875f ? 
                     (data[2 /* no_of_characters */] <100.5f ? 
                        1.825817E-4f : 
                        0.0f) : 
                     (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.3125f ? 
                        4.1987404E-4f : 
                        0.16666667f)) : 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <61.5f ? 
                     (Double.isNaN(data[4]) || data[4 /* no_of_macs */] <0.5f ? 
                        7.889546E-4f : 
                        0.0f) : 
                     (data[5 /* 4_letter_word */] <0.25f ? 
                        0.046511628f : 
                        0.0058479533f))) : 
            0.0f));
    return pred;
  } // constant pool size = 38B, number of visited nodes = 9, static init size = 0B
}

class log_drf_1_Tree_44_class_17 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <3.5f ? 
         (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
            1.610306E-5f : 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <177.5f ? 
                 (Double.isNaN(data[14]) || data[14 /* 13_letter_word */] <0.052734375f ? 
                    0.0f : 
                     (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.015625f ? 
                        0.0f : 
                        1.0f)) : 
                 (Double.isNaN(data[14]) || data[14 /* 13_letter_word */] <0.1015625f ? 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <659.5f ? 
                        0.0f : 
                        0.44817072f) : 
                    0.0f))) : 
         (data[3 /* no_of_ips */] <4.5f ? 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <749.0f ? 
                0.0f : 
                 (data[6 /* 5_letter_word */] <0.16796875f ? 
                    0.8f : 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.578125f ? 
                        1.0f : 
                        0.6666667f))) : 
            0.0f));
    return pred;
  } // constant pool size = 46B, number of visited nodes = 11, static init size = 0B
}

class log_drf_1_Tree_44_class_18 {
  static final double score0(double[] data) {
    double pred =     5.0E-6f;
    return pred;
  } // constant pool size = 2B, number of visited nodes = 0, static init size = 0B
}

class log_drf_1_Tree_44_class_19 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
        0.0f : 
         (data[6 /* 5_letter_word */] <0.028320312f ? 
             (data[3 /* no_of_ips */] <1.5f ? 
                 (data[5 /* 4_letter_word */] <0.265625f ? 
                     (data[0 /* vlan */] <17.5f ? 
                        0.9852071f : 
                        0.0f) : 
                    0.0f) : 
                0.0f) : 
            0.0f));
    return pred;
  } // constant pool size = 22B, number of visited nodes = 5, static init size = 0B
}

class log_drf_1_Tree_44_class_20 {
  static final double score0(double[] data) {
    double pred =      (data[1 /* type_of_time */] <4.5f ? 
        0.0f : 
         (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.9716797f ? 
             (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.028467178f ? 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <25.5f ? 
                     (Double.isNaN(data[12]) || data[12 /* 11_letter_word */] <0.21875f ? 
                        0.800484f : 
                        1.0f) : 
                    0.0f) : 
                 (data[0 /* vlan */] <25.5f ? 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.20736898f ? 
                        0.0556152f : 
                        0.7677643f) : 
                    0.0f)) : 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <31.5f ? 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <140.5f ? 
                    1.0f : 
                     (data[2 /* no_of_characters */] <145.0f ? 
                        0.9f : 
                        1.0f)) : 
                0.0f)));
    return pred;
  } // constant pool size = 42B, number of visited nodes = 10, static init size = 0B
}

class log_drf_1_Tree_44_class_21 {
  static final double score0(double[] data) {
    double pred =      (data[1 /* type_of_time */] <3.5f ? 
         (data[3 /* no_of_ips */] <0.5f ? 
             (data[5 /* 4_letter_word */] <0.22460938f ? 
                0.0f : 
                 (data[0 /* vlan */] <81.5f ? 
                    0.0f : 
                    1.0f)) : 
            0.0f) : 
         (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <1.5f ? 
             (data[0 /* vlan */] <13.5f ? 
                 (data[5 /* 4_letter_word */] <0.07421875f ? 
                     (data[7 /* 6_letter_word */] <0.78125f ? 
                        0.0f : 
                        0.35849056f) : 
                    0.0f) : 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.27734375f ? 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.028167725f ? 
                        0.0017279129f : 
                        5.9925095E-4f) : 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.3125f ? 
                        0.004940198f : 
                        8.745081E-4f))) : 
             (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.46289062f ? 
                0.0f : 
                 (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <3.5f ? 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.1015625f ? 
                        5.0E-4f : 
                        0.0f) : 
                    0.0f))));
    return pred;
  } // constant pool size = 58B, number of visited nodes = 14, static init size = 0B
}

class log_drf_1_Tree_44_class_22 {
  static final double score0(double[] data) {
    double pred =      (data[1 /* type_of_time */] <4.5f ? 
        0.0f : 
         (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.15527344f ? 
             (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.64453125f ? 
                0.0f : 
                 (data[0 /* vlan */] <25.5f ? 
                    7.272727E-4f : 
                    0.0f)) : 
             (data[0 /* vlan */] <5.5f ? 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <130.5f ? 
                    0.0f : 
                    0.5f) : 
                 (data[9 /* 8_letter_word */] <0.17507172f ? 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.4140625f ? 
                        0.0f : 
                        0.5f) : 
                    0.0f))));
    return pred;
  } // constant pool size = 34B, number of visited nodes = 8, static init size = 0B
}

class log_drf_1_Tree_44_class_23 {
  static final double score0(double[] data) {
    double pred =      (data[1 /* type_of_time */] <4.5f ? 
        0.0f : 
         (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.5830078f ? 
             (data[5 /* 4_letter_word */] <0.1328125f ? 
                 (data[0 /* vlan */] <17.5f ? 
                     (Double.isNaN(data[14]) || data[14 /* 13_letter_word */] <0.0625f ? 
                        0.9521008f : 
                        0.0f) : 
                    0.0f) : 
                 (data[0 /* vlan */] <17.5f ? 
                     (Double.isNaN(data[12]) || data[12 /* 11_letter_word */] <0.046875f ? 
                        0.0018014772f : 
                        1.0f) : 
                    0.0f)) : 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <19.5f ? 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.16666667f ? 
                    0.991453f : 
                    1.0f) : 
                0.0f)));
    return pred;
  } // constant pool size = 38B, number of visited nodes = 9, static init size = 0B
}

class log_drf_1_Tree_44_class_24 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
        0.0f : 
         (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.9160156f ? 
            0.0f : 
            1.7053206E-4f));
    return pred;
  } // constant pool size = 10B, number of visited nodes = 2, static init size = 0B
}

class log_drf_1_Tree_44_class_25 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <1.5f ? 
         (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
            0.0f : 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <29.5f ? 
                 (Double.isNaN(data[16]) || data[16 /* 15_letter_word */] <0.125f ? 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.171875f ? 
                        0.002042806f : 
                        1.2147716E-4f) : 
                    1.0f) : 
                 (Double.isNaN(data[12]) || data[12 /* 11_letter_word */] <0.125f ? 
                     (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                        0.5693262f : 
                        0.6793452f) : 
                     (data[5 /* 4_letter_word */] <0.0859375f ? 
                        0.0f : 
                        0.99930555f)))) : 
         (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <5.5f ? 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <85.5f ? 
                 (data[3 /* no_of_ips */] <2.5f ? 
                     (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.0390625f ? 
                        0.9174693f : 
                        0.08132323f) : 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.1796875f ? 
                        0.999134f : 
                        0.9870539f)) : 
                 (data[5 /* 4_letter_word */] <0.0625f ? 
                     (data[11 /* 10_letter_word */] <0.1015625f ? 
                        0.023622047f : 
                        0.0f) : 
                    0.0f)) : 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <23.5f ? 
                0.0f : 
                1.0f)));
    return pred;
  } // constant pool size = 66B, number of visited nodes = 16, static init size = 0B
}

class log_drf_1_Tree_44_class_26 {
  static final double score0(double[] data) {
    double pred =      (data[1 /* type_of_time */] <4.5f ? 
        0.0f : 
         (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.31640625f ? 
            0.0f : 
             (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.6328125f ? 
                0.0f : 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <33.5f ? 
                     (data[0 /* vlan */] <29.5f ? 
                        0.938914f : 
                        0.0f) : 
                    0.0f))));
    return pred;
  } // constant pool size = 22B, number of visited nodes = 5, static init size = 0B
}

class log_drf_1_Tree_44_class_27 {
  static final double score0(double[] data) {
    double pred =     1.0E-5f;
    return pred;
  } // constant pool size = 2B, number of visited nodes = 0, static init size = 0B
}

class log_drf_1_Tree_44_class_28 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <5.5f ? 
         (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <3.5f ? 
            0.0f : 
             (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.1328125f ? 
                0.0f : 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <98.0f ? 
                    1.0f : 
                    0.0f))) : 
         (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <6.5f ? 
             (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.25f ? 
                1.0f : 
                0.8888889f) : 
            0.0f));
    return pred;
  } // constant pool size = 26B, number of visited nodes = 6, static init size = 0B
}

class log_drf_1_Tree_44_class_29 {
  static final double score0(double[] data) {
    double pred =      (data[1 /* type_of_time */] <4.5f ? 
        0.0f : 
         (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.037109375f ? 
            0.0f : 
             (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.5332031f ? 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <125.5f ? 
                    0.0f : 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <928.5f ? 
                        0.0f : 
                        0.083333336f)) : 
                 (data[5 /* 4_letter_word */] <0.56877136f ? 
                    1.0f : 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.18164062f ? 
                        0.0f : 
                        0.16666667f)))));
    return pred;
  } // constant pool size = 30B, number of visited nodes = 7, static init size = 0B
}

class log_drf_1_Tree_44_class_30 {
  static final double score0(double[] data) {
    double pred =      (data[1 /* type_of_time */] <1.5f ? 
        1.0f : 
        0.0f);
    return pred;
  } // constant pool size = 6B, number of visited nodes = 1, static init size = 0B
}

class log_drf_1_Tree_44_class_31 {
  static final double score0(double[] data) {
    double pred =      (data[1 /* type_of_time */] <4.5f ? 
        0.0f : 
         (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.38671875f ? 
             (Double.isNaN(data[13]) || data[13 /* 12_letter_word */] <0.234375f ? 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <65.5f ? 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.3203125f ? 
                        0.0f : 
                        7.2114303E-4f) : 
                     (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.1015625f ? 
                        0.114248194f : 
                        0.53271025f)) : 
                 (data[0 /* vlan */] <33.5f ? 
                    0.0f : 
                    1.0f)) : 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <61.5f ? 
                 (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.1015625f ? 
                     (data[8 /* 7_letter_word */] <0.55f ? 
                        0.001539251f : 
                        0.0f) : 
                    0.0f) : 
                0.64873415f)));
    return pred;
  } // constant pool size = 42B, number of visited nodes = 10, static init size = 0B
}

class log_drf_1_Tree_44_class_32 {
  static final double score0(double[] data) {
    double pred =      (data[1 /* type_of_time */] <4.5f ? 
        0.0f : 
         (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.028320312f ? 
             (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.53515625f ? 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.22265625f ? 
                     (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.4453125f ? 
                        0.0f : 
                        0.03654189f) : 
                     (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                        0.0074377656f : 
                        0.038781162f)) : 
                0.0f) : 
            0.0f));
    return pred;
  } // constant pool size = 26B, number of visited nodes = 6, static init size = 0B
}

class log_drf_1_Tree_44_class_33 {
  static final double score0(double[] data) {
    double pred =      (data[1 /* type_of_time */] <4.5f ? 
         (data[1 /* type_of_time */] <2.5f ? 
             (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.7480469f ? 
                 (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.07305145f ? 
                     (data[2 /* no_of_characters */] <120.5f ? 
                        0.03448276f : 
                        0.0f) : 
                    0.0f) : 
                0.33333334f) : 
            0.0f) : 
         (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.40820312f ? 
             (data[0 /* vlan */] <9.5f ? 
                 (data[5 /* 4_letter_word */] <0.125f ? 
                    1.0f : 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <3.5f ? 
                        0.018518519f : 
                        0.6666667f)) : 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.2578125f ? 
                     (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.015625f ? 
                        6.880817E-4f : 
                        0.0f) : 
                    0.0f)) : 
             (data[0 /* vlan */] <19.5f ? 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.17382812f ? 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <4.0f ? 
                        1.0f : 
                        0.5254237f) : 
                     (data[3 /* no_of_ips */] <0.5f ? 
                        0.0f : 
                        1.0f)) : 
                 (data[2 /* no_of_characters */] <117.5f ? 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <109.5f ? 
                        2.8188864E-4f : 
                        0.025165563f) : 
                    0.0f))));
    return pred;
  } // constant pool size = 70B, number of visited nodes = 17, static init size = 0B
}

class log_drf_1_Tree_44_class_34 {
  static final double score0(double[] data) {
    double pred =     1.0E-5f;
    return pred;
  } // constant pool size = 2B, number of visited nodes = 0, static init size = 0B
}

class log_drf_1_Tree_44_class_35 {
  static final double score0(double[] data) {
    double pred =      (data[1 /* type_of_time */] <4.5f ? 
        0.0f : 
         (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.87402344f ? 
             (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.4140625f ? 
                 (data[0 /* vlan */] <17.5f ? 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.03414154f ? 
                        0.0018465326f : 
                        0.0f) : 
                    0.0f) : 
                0.0f) : 
             (data[0 /* vlan */] <19.5f ? 
                0.0018993352f : 
                0.0f)));
    return pred;
  } // constant pool size = 26B, number of visited nodes = 6, static init size = 0B
}

class log_drf_1_Tree_44_class_36 {
  static final double score0(double[] data) {
    double pred =      (data[1 /* type_of_time */] <4.5f ? 
        0.0f : 
         (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.15527344f ? 
            0.0f : 
             (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.49414062f ? 
                0.0f : 
                 (data[0 /* vlan */] <9.5f ? 
                    0.78571427f : 
                    0.0f))));
    return pred;
  } // constant pool size = 18B, number of visited nodes = 4, static init size = 0B
}

class log_drf_1_Tree_44_class_37 {
  static final double score0(double[] data) {
    double pred =      (data[1 /* type_of_time */] <4.5f ? 
         (data[1 /* type_of_time */] <3.5f ? 
             (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.83203125f ? 
                 (data[3 /* no_of_ips */] <0.5f ? 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <81.5f ? 
                        0.8852459f : 
                        0.0f) : 
                     (data[0 /* vlan */] <162.5f ? 
                        0.02173913f : 
                        0.0f)) : 
                1.0f) : 
             (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.22460938f ? 
                 (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.0859375f ? 
                     (data[2 /* no_of_characters */] <120.5f ? 
                        0.983871f : 
                        0.997921f) : 
                    1.0f) : 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.4609375f ? 
                     (Double.isNaN(data[13]) || data[13 /* 12_letter_word */] <0.21875f ? 
                        0.9984208f : 
                        0.9861111f) : 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <260.5f ? 
                        0.99794614f : 
                        0.9785784f)))) : 
         (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.9716797f ? 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <155.5f ? 
                 (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.01171875f ? 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.31124115f ? 
                        0.0f : 
                        3.5717475E-4f) : 
                    0.0f) : 
                 (data[3 /* no_of_ips */] <0.5f ? 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <140.5f ? 
                        0.24745762f : 
                        0.0f) : 
                    0.0f)) : 
            0.010339734f));
    return pred;
  } // constant pool size = 74B, number of visited nodes = 18, static init size = 0B
}

class log_drf_1_Tree_44_class_38 {
  static final double score0(double[] data) {
    double pred =      (data[1 /* type_of_time */] <4.5f ? 
        0.0f : 
         (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.44921875f ? 
            0.0f : 
             (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.125f ? 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <65.5f ? 
                    0.0f : 
                     (data[0 /* vlan */] <111.5f ? 
                        0.1f : 
                        0.0f)) : 
                0.0f)));
    return pred;
  } // constant pool size = 22B, number of visited nodes = 5, static init size = 0B
}


class log_drf_1_Forest_45 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += log_drf_1_Tree_45_class_0.score0(fdata);
    preds[2] += log_drf_1_Tree_45_class_1.score0(fdata);
    preds[3] += log_drf_1_Tree_45_class_2.score0(fdata);
    preds[4] += log_drf_1_Tree_45_class_3.score0(fdata);
    preds[5] += log_drf_1_Tree_45_class_4.score0(fdata);
    preds[6] += log_drf_1_Tree_45_class_5.score0(fdata);
    preds[7] += log_drf_1_Tree_45_class_6.score0(fdata);
    preds[8] += log_drf_1_Tree_45_class_7.score0(fdata);
    preds[9] += log_drf_1_Tree_45_class_8.score0(fdata);
    preds[10] += log_drf_1_Tree_45_class_9.score0(fdata);
    preds[11] += log_drf_1_Tree_45_class_10.score0(fdata);
    preds[12] += log_drf_1_Tree_45_class_11.score0(fdata);
    preds[13] += log_drf_1_Tree_45_class_12.score0(fdata);
    preds[14] += log_drf_1_Tree_45_class_13.score0(fdata);
    preds[15] += log_drf_1_Tree_45_class_14.score0(fdata);
    preds[16] += log_drf_1_Tree_45_class_15.score0(fdata);
    preds[17] += log_drf_1_Tree_45_class_16.score0(fdata);
    preds[18] += log_drf_1_Tree_45_class_17.score0(fdata);
    preds[19] += log_drf_1_Tree_45_class_18.score0(fdata);
    preds[20] += log_drf_1_Tree_45_class_19.score0(fdata);
    preds[21] += log_drf_1_Tree_45_class_20.score0(fdata);
    preds[22] += log_drf_1_Tree_45_class_21.score0(fdata);
    preds[23] += log_drf_1_Tree_45_class_22.score0(fdata);
    preds[24] += log_drf_1_Tree_45_class_23.score0(fdata);
    preds[25] += log_drf_1_Tree_45_class_24.score0(fdata);
    preds[26] += log_drf_1_Tree_45_class_25.score0(fdata);
    preds[27] += log_drf_1_Tree_45_class_26.score0(fdata);
    preds[28] += log_drf_1_Tree_45_class_27.score0(fdata);
    preds[29] += log_drf_1_Tree_45_class_28.score0(fdata);
    preds[30] += log_drf_1_Tree_45_class_29.score0(fdata);
    preds[31] += log_drf_1_Tree_45_class_30.score0(fdata);
    preds[32] += log_drf_1_Tree_45_class_31.score0(fdata);
    preds[33] += log_drf_1_Tree_45_class_32.score0(fdata);
    preds[34] += log_drf_1_Tree_45_class_33.score0(fdata);
    preds[35] += log_drf_1_Tree_45_class_34.score0(fdata);
    preds[36] += log_drf_1_Tree_45_class_35.score0(fdata);
    preds[37] += log_drf_1_Tree_45_class_36.score0(fdata);
    preds[38] += log_drf_1_Tree_45_class_37.score0(fdata);
    preds[39] += log_drf_1_Tree_45_class_38.score0(fdata);
  }
}
class log_drf_1_Tree_45_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[4]) || data[4 /* no_of_macs */] <2.5f ? 
         (Double.isNaN(data[12]) || data[12 /* 11_letter_word */] <0.017578125f ? 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <1051.0f ? 
                 (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.2265625f ? 
                    0.0f : 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.078125f ? 
                        9.133254E-5f : 
                        0.0011049723f)) : 
                 (data[5 /* 4_letter_word */] <0.25390625f ? 
                    0.5f : 
                    1.0f)) : 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <689.5f ? 
                0.0f : 
                 (data[4 /* no_of_macs */] <0.5f ? 
                    0.0f : 
                    1.0f))) : 
         (data[2 /* no_of_characters */] <219.0f ? 
            0.0f : 
            0.5f));
    return pred;
  } // constant pool size = 38B, number of visited nodes = 9, static init size = 0B
}

class log_drf_1_Tree_45_class_1 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.39208984f ? 
         (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
            0.0f : 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <260.5f ? 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <142.5f ? 
                    0.0f : 
                     (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <1.5f ? 
                        0.0019780614f : 
                        0.0f)) : 
                 (data[2 /* no_of_characters */] <281.5f ? 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.1796875f ? 
                        0.5081967f : 
                        0.0f) : 
                    0.0f))) : 
         (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <260.5f ? 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <258.5f ? 
                0.0f : 
                 (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                    0.0f : 
                    0.5f)) : 
             (data[1 /* type_of_time */] <3.5f ? 
                 (data[1 /* type_of_time */] <2.5f ? 
                    0.0f : 
                    1.0f) : 
                 (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.15625f ? 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <89.5f ? 
                        0.0f : 
                        0.19520265f) : 
                    0.0f))));
    return pred;
  } // constant pool size = 58B, number of visited nodes = 14, static init size = 0B
}

class log_drf_1_Tree_45_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.47216797f ? 
         (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
             (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.013671875f ? 
                 (data[8 /* 7_letter_word */] <0.29296875f ? 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <129.5f ? 
                        0.0f : 
                        0.06507177f) : 
                    2.4169858E-4f) : 
                0.0f) : 
             (Double.isNaN(data[13]) || data[13 /* 12_letter_word */] <0.029296875f ? 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <178.5f ? 
                    0.0f : 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.2890625f ? 
                        0.0063829785f : 
                        0.016666668f)) : 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.22265625f ? 
                    0.0f : 
                    1.0f))) : 
         (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.44921875f ? 
             (data[1 /* type_of_time */] <4.5f ? 
                0.0f : 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.7319603f ? 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.57973635f ? 
                        0.003536068f : 
                        0.019480519f) : 
                     (data[7 /* 6_letter_word */] <0.80315834f ? 
                        0.21428572f : 
                        0.056924883f))) : 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <175.5f ? 
                 (data[1 /* type_of_time */] <4.5f ? 
                    0.0f : 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <128.5f ? 
                        0.0f : 
                        1.0f)) : 
                1.0f)));
    return pred;
  } // constant pool size = 70B, number of visited nodes = 17, static init size = 0B
}

class log_drf_1_Tree_45_class_3 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.39208984f ? 
         (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.013671875f ? 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <295.5f ? 
                 (data[0 /* vlan */] <156.5f ? 
                     (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.0546875f ? 
                        2.769316E-4f : 
                        0.0f) : 
                    0.0f) : 
                 (data[2 /* no_of_characters */] <308.5f ? 
                     (data[0 /* vlan */] <36.5f ? 
                        0.9669118f : 
                        0.0f) : 
                     (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.03125f ? 
                        0.003388682f : 
                        0.0f))) : 
            0.0f) : 
         (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.31640625f ? 
             (data[2 /* no_of_characters */] <157.5f ? 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <154.5f ? 
                    0.0f : 
                     (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.125f ? 
                        0.0f : 
                        0.96585363f)) : 
                0.0f) : 
             (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.63320315f ? 
                 (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.1015625f ? 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.0421875f ? 
                        0.59745604f : 
                        0.0f) : 
                    0.9945652f) : 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <149.5f ? 
                     (data[2 /* no_of_characters */] <141.5f ? 
                        0.0f : 
                        0.997992f) : 
                    0.0f))));
    return pred;
  } // constant pool size = 70B, number of visited nodes = 17, static init size = 0B
}

class log_drf_1_Tree_45_class_4 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.3095703f ? 
         (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.87402344f ? 
             (data[0 /* vlan */] <29.5f ? 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <24.5f ? 
                    0.0f : 
                     (data[0 /* vlan */] <27.5f ? 
                        0.020905923f : 
                        0.0f)) : 
                0.0f) : 
             (data[2 /* no_of_characters */] <100.5f ? 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <25.5f ? 
                    0.0f : 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <95.5f ? 
                        0.0f : 
                        0.6666667f)) : 
                0.0f)) : 
         (data[2 /* no_of_characters */] <115.5f ? 
             (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.16666667f ? 
                 (data[10 /* 9_letter_word */] <0.41744995f ? 
                     (Double.isNaN(data[13]) || data[13 /* 12_letter_word */] <0.171875f ? 
                        0.8888889f : 
                        0.0f) : 
                    0.0f) : 
                0.0f) : 
            0.0f));
    return pred;
  } // constant pool size = 50B, number of visited nodes = 12, static init size = 0B
}

class log_drf_1_Tree_45_class_5 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.095703125f ? 
         (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
            1.5479223E-4f : 
            0.0f) : 
         (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.08691406f ? 
            0.0f : 
             (data[2 /* no_of_characters */] <107.5f ? 
                 (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.08496094f ? 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <57.5f ? 
                        0.0f : 
                        0.22857143f) : 
                    0.0f) : 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <33.5f ? 
                    0.0f : 
                     (data[0 /* vlan */] <36.5f ? 
                        1.0f : 
                        0.011587486f)))));
    return pred;
  } // constant pool size = 34B, number of visited nodes = 8, static init size = 0B
}

class log_drf_1_Tree_45_class_6 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.24804688f ? 
         (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.8330078f ? 
             (data[2 /* no_of_characters */] <40.5f ? 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <28.5f ? 
                    0.0f : 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <94.5f ? 
                        1.0f : 
                        0.0f)) : 
                0.0f) : 
             (data[2 /* no_of_characters */] <78.0f ? 
                0.88235295f : 
                0.0f)) : 
         (data[2 /* no_of_characters */] <98.5f ? 
             (data[5 /* 4_letter_word */] <0.4638672f ? 
                 (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.125f ? 
                     (data[8 /* 7_letter_word */] <0.1015625f ? 
                        0.5448718f : 
                        0.0f) : 
                    1.0f) : 
                 (data[2 /* no_of_characters */] <84.5f ? 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.4140625f ? 
                        0.0f : 
                        1.0f) : 
                     (data[3 /* no_of_ips */] <0.5f ? 
                        0.025f : 
                        0.0f))) : 
             (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.15429688f ? 
                0.0f : 
                 (data[9 /* 8_letter_word */] <0.17523956f ? 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.12890625f ? 
                        0.0f : 
                        0.23404256f) : 
                     (data[0 /* vlan */] <133.5f ? 
                        0.011477046f : 
                        0.0f)))));
    return pred;
  } // constant pool size = 70B, number of visited nodes = 17, static init size = 0B
}

class log_drf_1_Tree_45_class_7 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.94970703f ? 
        0.0f : 
         (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <2.5f ? 
             (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <1.5f ? 
                 (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <178.5f ? 
                        0.0f : 
                        0.9591837f) : 
                    0.0f) : 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <110.0f ? 
                    0.0f : 
                    1.0f)) : 
            0.0f));
    return pred;
  } // constant pool size = 26B, number of visited nodes = 6, static init size = 0B
}

class log_drf_1_Tree_45_class_8 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.53759766f ? 
         (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.15039062f ? 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <893.5f ? 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <179.5f ? 
                    0.0f : 
                     (data[3 /* no_of_ips */] <0.5f ? 
                        0.005524862f : 
                        0.0f)) : 
                 (data[2 /* no_of_characters */] <1011.0f ? 
                     (data[0 /* vlan */] <179.5f ? 
                        0.0f : 
                        0.95555556f) : 
                     (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.015625f ? 
                        0.053030305f : 
                        0.0f))) : 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <881.5f ? 
                0.0f : 
                 (data[3 /* no_of_ips */] <2.0f ? 
                    0.5f : 
                    0.0f))) : 
         (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <830.0f ? 
            0.0f : 
             (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.85706675f ? 
                 (data[6 /* 5_letter_word */] <0.20089285f ? 
                    0.0f : 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.6330955f ? 
                        1.0f : 
                        0.8947368f)) : 
                0.071428575f)));
    return pred;
  } // constant pool size = 58B, number of visited nodes = 14, static init size = 0B
}

class log_drf_1_Tree_45_class_9 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.095703125f ? 
         (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <2.5f ? 
             (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <1.5f ? 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <240.5f ? 
                     (data[8 /* 7_letter_word */] <0.046875f ? 
                        2.9089217E-5f : 
                        0.0f) : 
                     (data[8 /* 7_letter_word */] <0.09375f ? 
                        0.0015686274f : 
                        0.0f)) : 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <154.5f ? 
                    0.0f : 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.21875f ? 
                        0.0f : 
                        0.4f))) : 
             (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.18359375f ? 
                 (data[1 /* type_of_time */] <4.0f ? 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <174.0f ? 
                        1.0f : 
                        0.0f) : 
                    0.0f) : 
                 (data[4 /* no_of_macs */] <0.5f ? 
                     (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <4.5f ? 
                        0.24264705f : 
                        0.8876405f) : 
                    0.0f))) : 
         (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.23535156f ? 
             (data[1 /* type_of_time */] <3.5f ? 
                 (data[11 /* 10_letter_word */] <0.05078125f ? 
                    0.0f : 
                    1.0f) : 
                0.0f) : 
             (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.22460938f ? 
                 (data[2 /* no_of_characters */] <125.5f ? 
                     (data[1 /* type_of_time */] <4.0f ? 
                        1.0f : 
                        0.0f) : 
                     (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <2.5f ? 
                        0.0f : 
                        0.2578125f)) : 
                 (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.26763916f ? 
                     (data[0 /* vlan */] <148.5f ? 
                        0.0f : 
                        0.956621f) : 
                    0.0f))));
    return pred;
  } // constant pool size = 90B, number of visited nodes = 22, static init size = 0B
}

class log_drf_1_Tree_45_class_10 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.3388672f ? 
         (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
             (data[2 /* no_of_characters */] <115.5f ? 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <163.5f ? 
                    0.0f : 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <177.5f ? 
                        0.0017482517f : 
                        0.0f)) : 
                0.0f) : 
             (data[2 /* no_of_characters */] <95.5f ? 
                 (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.291214f ? 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <126.5f ? 
                        0.0f : 
                        0.33333334f) : 
                     (data[3 /* no_of_ips */] <1.5f ? 
                        0.5f : 
                        0.0f)) : 
                0.0f)) : 
        0.0f);
    return pred;
  } // constant pool size = 38B, number of visited nodes = 9, static init size = 0B
}

class log_drf_1_Tree_45_class_11 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.27929688f ? 
        0.0f : 
         (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.13378906f ? 
            0.0f : 
             (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.26757812f ? 
                0.0f : 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <85.5f ? 
                    0.0f : 
                     (data[2 /* no_of_characters */] <192.0f ? 
                        0.5f : 
                        0.0f)))));
    return pred;
  } // constant pool size = 22B, number of visited nodes = 5, static init size = 0B
}

class log_drf_1_Tree_45_class_12 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.92822266f ? 
         (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.5830078f ? 
            0.0f : 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <588.5f ? 
                0.0f : 
                0.9583333f)) : 
         (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <369.0f ? 
            0.0f : 
            0.8666667f));
    return pred;
  } // constant pool size = 18B, number of visited nodes = 4, static init size = 0B
}

class log_drf_1_Tree_45_class_13 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.2553711f ? 
         (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
             (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.013671875f ? 
                 (data[8 /* 7_letter_word */] <0.265625f ? 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.24340057f ? 
                        0.014996592f : 
                        0.0969031f) : 
                    0.0f) : 
                0.0f) : 
             (data[2 /* no_of_characters */] <65.5f ? 
                1.0f : 
                0.0f)) : 
         (data[2 /* no_of_characters */] <85.5f ? 
             (data[5 /* 4_letter_word */] <0.45048076f ? 
                 (data[0 /* vlan */] <33.5f ? 
                    1.0f : 
                    0.0f) : 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.25f ? 
                     (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                        0.0015822785f : 
                        0.0f) : 
                    0.0f)) : 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <592.5f ? 
                0.0f : 
                1.0f)));
    return pred;
  } // constant pool size = 50B, number of visited nodes = 12, static init size = 0B
}

class log_drf_1_Tree_45_class_14 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.19091797f ? 
        1.6477632E-5f : 
         (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <215.5f ? 
            0.0f : 
             (data[2 /* no_of_characters */] <219.5f ? 
                 (data[8 /* 7_letter_word */] <0.1015625f ? 
                    0.0f : 
                     (data[12 /* 11_letter_word */] <0.1015625f ? 
                        0.0f : 
                        1.0f)) : 
                0.0f)));
    return pred;
  } // constant pool size = 22B, number of visited nodes = 5, static init size = 0B
}

class log_drf_1_Tree_45_class_15 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.94970703f ? 
         (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.2109375f ? 
             (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.31054688f ? 
                 (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.19363403f ? 
                     (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
                        0.0f : 
                        0.0041647386f) : 
                     (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.0546875f ? 
                        0.06163022f : 
                        0.0f)) : 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <390.5f ? 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.4140625f ? 
                        0.015197569f : 
                        0.72727275f) : 
                    1.0f)) : 
             (data[2 /* no_of_characters */] <125.5f ? 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <137.5f ? 
                    0.0f : 
                     (data[0 /* vlan */] <158.5f ? 
                        0.5f : 
                        0.0f)) : 
                0.0f)) : 
         (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <100.5f ? 
            0.10038704f : 
            0.0f));
    return pred;
  } // constant pool size = 50B, number of visited nodes = 12, static init size = 0B
}

class log_drf_1_Tree_45_class_16 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.94970703f ? 
         (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
             (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.31054688f ? 
                 (data[0 /* vlan */] <97.5f ? 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.3125f ? 
                        4.307003E-5f : 
                        4.261969E-4f) : 
                    0.0f) : 
                 (data[0 /* vlan */] <57.5f ? 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.171875f ? 
                        0.0f : 
                        0.33333334f) : 
                    0.0f)) : 
            0.0f) : 
         (data[2 /* no_of_characters */] <80.5f ? 
            0.03311258f : 
            0.0f));
    return pred;
  } // constant pool size = 34B, number of visited nodes = 8, static init size = 0B
}

class log_drf_1_Tree_45_class_17 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.36914062f ? 
         (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <3.5f ? 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <659.5f ? 
                 (data[0 /* vlan */] <19.5f ? 
                     (data[9 /* 8_letter_word */] <0.0625f ? 
                        0.0027100272f : 
                        0.0f) : 
                    0.0f) : 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <720.5f ? 
                    0.9930556f : 
                     (data[0 /* vlan */] <19.5f ? 
                        1.0f : 
                        0.0375f))) : 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <784.0f ? 
                0.0f : 
                1.0f)) : 
         (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <992.5f ? 
            0.0f : 
             (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.5227051f ? 
                 (data[3 /* no_of_ips */] <2.0f ? 
                    0.0f : 
                    1.0f) : 
                 (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.16875f ? 
                    0.0f : 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.046875f ? 
                        0.6666667f : 
                        0.0f)))));
    return pred;
  } // constant pool size = 54B, number of visited nodes = 13, static init size = 0B
}

class log_drf_1_Tree_45_class_18 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.07470703f ? 
        0.0f : 
         (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.07421875f ? 
            0.0f : 
             (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.45898438f ? 
                0.0f : 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <319.0f ? 
                    0.0f : 
                    0.09090909f))));
    return pred;
  } // constant pool size = 18B, number of visited nodes = 4, static init size = 0B
}

class log_drf_1_Tree_45_class_19 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.24365234f ? 
        1.2240801E-5f : 
         (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.23535156f ? 
            0.0f : 
             (data[0 /* vlan */] <19.5f ? 
                1.0f : 
                0.0f)));
    return pred;
  } // constant pool size = 14B, number of visited nodes = 3, static init size = 0B
}

class log_drf_1_Tree_45_class_20 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.92822266f ? 
         (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.44921875f ? 
             (data[0 /* vlan */] <25.5f ? 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <240.5f ? 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.3515625f ? 
                        0.7554494f : 
                        0.99746716f) : 
                     (Double.isNaN(data[15]) || data[15 /* 14_letter_word */] <0.1015625f ? 
                        0.061744574f : 
                        1.0f)) : 
                0.0f) : 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <135.5f ? 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <25.5f ? 
                     (data[0 /* vlan */] <18.0f ? 
                        0.0f : 
                        1.0f) : 
                    0.0f) : 
                 (data[9 /* 8_letter_word */] <0.5826111f ? 
                     (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.125f ? 
                        0.20531757f : 
                        0.036144577f) : 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <17.5f ? 
                        0.0f : 
                        0.5777778f)))) : 
         (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <135.5f ? 
            0.9154569f : 
             (data[0 /* vlan */] <25.5f ? 
                1.0f : 
                0.0f)));
    return pred;
  } // constant pool size = 58B, number of visited nodes = 14, static init size = 0B
}

class log_drf_1_Tree_45_class_21 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.24365234f ? 
         (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
             (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.15429688f ? 
                 (data[0 /* vlan */] <17.5f ? 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.046875f ? 
                        0.010484274f : 
                        0.0f) : 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.0390625f ? 
                        0.0018847603f : 
                        4.0533236E-4f)) : 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <33.5f ? 
                    0.0f : 
                     (data[8 /* 7_letter_word */] <0.1796875f ? 
                        0.38181818f : 
                        0.0021881838f))) : 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <265.5f ? 
                 (data[0 /* vlan */] <25.5f ? 
                     (data[0 /* vlan */] <21.0f ? 
                        0.0f : 
                        5.906675E-4f) : 
                    0.0f) : 
                 (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.1328125f ? 
                     (data[3 /* no_of_ips */] <1.5f ? 
                        0.0036101083f : 
                        0.0f) : 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.078125f ? 
                        0.0f : 
                        0.027777778f)))) : 
         (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.19140625f ? 
             (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.24316406f ? 
                 (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.4453125f ? 
                        0.0f : 
                        4.916421E-4f) : 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.0546875f ? 
                        0.0027844072f : 
                        0.0f)) : 
                 (data[7 /* 6_letter_word */] <0.29387856f ? 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <295.5f ? 
                        0.0044792835f : 
                        0.05925926f) : 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.3203125f ? 
                        7.142857E-4f : 
                        0.25f))) : 
             (data[9 /* 8_letter_word */] <0.22460938f ? 
                 (Double.isNaN(data[12]) || data[12 /* 11_letter_word */] <0.125f ? 
                     (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <1.5f ? 
                        0.03047619f : 
                        0.0f) : 
                    1.0f) : 
                0.0f)));
    return pred;
  } // constant pool size = 102B, number of visited nodes = 25, static init size = 0B
}

class log_drf_1_Tree_45_class_22 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.16015625f ? 
        2.2002563E-5f : 
         (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.4638672f ? 
            0.0f : 
             (data[0 /* vlan */] <9.5f ? 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <130.5f ? 
                    0.0f : 
                    0.75f) : 
                0.0f)));
    return pred;
  } // constant pool size = 18B, number of visited nodes = 4, static init size = 0B
}

class log_drf_1_Tree_45_class_23 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.42236328f ? 
         (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.5830078f ? 
             (data[0 /* vlan */] <13.5f ? 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <150.5f ? 
                    0.0f : 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.1015625f ? 
                        1.0f : 
                        0.0f)) : 
                 (data[0 /* vlan */] <21.5f ? 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.26873016f ? 
                        1.0985389E-4f : 
                        0.43396226f) : 
                    0.0f)) : 
             (data[2 /* no_of_characters */] <135.5f ? 
                 (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.16796875f ? 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.125f ? 
                        0.007968128f : 
                        0.0f) : 
                    0.0f) : 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <155.5f ? 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <152.5f ? 
                        0.98082453f : 
                        1.0f) : 
                     (data[9 /* 8_letter_word */] <0.8305969f ? 
                        0.054054055f : 
                        0.0f)))) : 
         (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.12695312f ? 
             (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.03013393f ? 
                 (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                     (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.171875f ? 
                        0.0f : 
                        0.13333334f) : 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <231.5f ? 
                        0.0f : 
                        0.08571429f)) : 
                0.0f) : 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <19.5f ? 
                 (data[2 /* no_of_characters */] <220.0f ? 
                    0.0f : 
                    1.0f) : 
                0.0f)));
    return pred;
  } // constant pool size = 82B, number of visited nodes = 20, static init size = 0B
}

class log_drf_1_Tree_45_class_24 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.029785156f ? 
         (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
            0.0f : 
             (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.9160156f ? 
                0.0f : 
                1.7232465E-4f)) : 
        0.0f);
    return pred;
  } // constant pool size = 14B, number of visited nodes = 3, static init size = 0B
}

class log_drf_1_Tree_45_class_25 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[4]) || data[4 /* no_of_macs */] <0.5f ? 
         (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <1.5f ? 
             (Double.isNaN(data[12]) || data[12 /* 11_letter_word */] <0.15429688f ? 
                 (data[0 /* vlan */] <41.5f ? 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.21875f ? 
                        0.05746014f : 
                        0.27502653f) : 
                     (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.03125f ? 
                        0.0f : 
                        0.0011248594f)) : 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.4140625f ? 
                     (data[1 /* type_of_time */] <4.5f ? 
                        0.0f : 
                        0.9663144f) : 
                    0.0f)) : 
             (data[0 /* vlan */] <25.5f ? 
                0.0f : 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <86.0f ? 
                     (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.078125f ? 
                        0.95040643f : 
                        1.0f) : 
                     (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
                        0.0f : 
                        0.008752735f)))) : 
         (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <236.5f ? 
             (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.44921875f ? 
                1.0f : 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <33.5f ? 
                    1.0f : 
                    0.0f)) : 
            0.0f));
    return pred;
  } // constant pool size = 62B, number of visited nodes = 15, static init size = 0B
}

class log_drf_1_Tree_45_class_26 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.6513672f ? 
        0.0f : 
         (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
             (data[2 /* no_of_characters */] <63.0f ? 
                 (data[2 /* no_of_characters */] <55.5f ? 
                    0.9714286f : 
                    0.9947644f) : 
                0.0f) : 
            0.0f));
    return pred;
  } // constant pool size = 18B, number of visited nodes = 4, static init size = 0B
}

class log_drf_1_Tree_45_class_27 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.24365234f ? 
        0.0f : 
         (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <255.5f ? 
                0.0f : 
                 (data[11 /* 10_letter_word */] <0.021484375f ? 
                     (data[7 /* 6_letter_word */] <0.26137924f ? 
                        0.012738854f : 
                        0.0f) : 
                    0.0f)) : 
            0.0f));
    return pred;
  } // constant pool size = 22B, number of visited nodes = 5, static init size = 0B
}

class log_drf_1_Tree_45_class_28 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.39453125f ? 
         (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <5.5f ? 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <469.5f ? 
                0.0f : 
                 (data[5 /* 4_letter_word */] <0.32421875f ? 
                    0.0f : 
                     (data[0 /* vlan */] <19.5f ? 
                        0.9722222f : 
                        0.0f))) : 
            1.0f) : 
         (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <492.0f ? 
            0.0f : 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <539.0f ? 
                1.0f : 
                0.0f)));
    return pred;
  } // constant pool size = 30B, number of visited nodes = 7, static init size = 0B
}

class log_drf_1_Tree_45_class_29 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.51464844f ? 
        1.1759933E-5f : 
         (data[5 /* 4_letter_word */] <0.5686817f ? 
             (data[3 /* no_of_ips */] <0.5f ? 
                 (data[0 /* vlan */] <30.0f ? 
                    0.0f : 
                    0.5f) : 
                0.0f) : 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <425.5f ? 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <109.5f ? 
                    0.0f : 
                     (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.1015625f ? 
                        0.0f : 
                        0.007575758f)) : 
                 (data[2 /* no_of_characters */] <456.5f ? 
                    0.5f : 
                    0.0f))));
    return pred;
  } // constant pool size = 34B, number of visited nodes = 8, static init size = 0B
}

class log_drf_1_Tree_45_class_30 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.24804688f ? 
        0.0f : 
         (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <2.5f ? 
             (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.22460938f ? 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <196.5f ? 
                    0.0f : 
                     (data[2 /* no_of_characters */] <212.5f ? 
                        0.0019181586f : 
                        0.0f)) : 
                 (data[1 /* type_of_time */] <2.0f ? 
                    1.0f : 
                    0.0f)) : 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <173.5f ? 
                0.0f : 
                 (data[0 /* vlan */] <180.5f ? 
                    1.0f : 
                    0.0f))));
    return pred;
  } // constant pool size = 34B, number of visited nodes = 8, static init size = 0B
}

class log_drf_1_Tree_45_class_31 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.13378906f ? 
         (Double.isNaN(data[15]) || data[15 /* 14_letter_word */] <0.2915039f ? 
             (data[2 /* no_of_characters */] <110.5f ? 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <108.5f ? 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.4140625f ? 
                        0.008486156f : 
                        0.06616098f) : 
                     (data[3 /* no_of_ips */] <0.5f ? 
                        0.15925926f : 
                        0.10357143f)) : 
                 (data[2 /* no_of_characters */] <118.5f ? 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.578125f ? 
                        0.0f : 
                        0.38064516f) : 
                     (Double.isNaN(data[4]) || data[4 /* no_of_macs */] <1.5f ? 
                        4.2075547E-4f : 
                        0.0015910899f))) : 
            0.974359f) : 
         (data[2 /* no_of_characters */] <105.5f ? 
             (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.41455078f ? 
                 (data[7 /* 6_letter_word */] <0.36725998f ? 
                     (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                        0.5765766f : 
                        0.17283951f) : 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <33.5f ? 
                        0.0f : 
                        0.6627907f)) : 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <101.5f ? 
                    0.0f : 
                     (data[5 /* 4_letter_word */] <0.53466034f ? 
                        0.0f : 
                        1.0f))) : 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <81.5f ? 
                 (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.7060547f ? 
                     (data[7 /* 6_letter_word */] <0.22853088f ? 
                        0.0015166835f : 
                        0.0f) : 
                     (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                        0.0f : 
                        1.0f)) : 
                 (data[7 /* 6_letter_word */] <0.17100906f ? 
                     (data[2 /* no_of_characters */] <142.5f ? 
                        0.6486486f : 
                        0.0f) : 
                     (data[2 /* no_of_characters */] <142.5f ? 
                        0.2647059f : 
                        0.0f)))));
    return pred;
  } // constant pool size = 94B, number of visited nodes = 23, static init size = 0B
}

class log_drf_1_Tree_45_class_32 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.5942383f ? 
         (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
             (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.013671875f ? 
                 (data[0 /* vlan */] <33.5f ? 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.46424866f ? 
                        0.0f : 
                        0.040955633f) : 
                    0.0f) : 
                0.0f) : 
             (data[2 /* no_of_characters */] <90.5f ? 
                 (data[5 /* 4_letter_word */] <0.125f ? 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.16712952f ? 
                        0.9019608f : 
                        0.0f) : 
                    0.0f) : 
                 (data[2 /* no_of_characters */] <115.5f ? 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.12534714f ? 
                        0.0f : 
                        0.14206128f) : 
                    0.0f))) : 
         (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.18359375f ? 
            0.0f : 
             (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.2110672f ? 
                 (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.1015625f ? 
                    0.0f : 
                    1.0f) : 
                0.0f)));
    return pred;
  } // constant pool size = 54B, number of visited nodes = 13, static init size = 0B
}

class log_drf_1_Tree_45_class_33 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.47216797f ? 
         (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.080078125f ? 
             (data[2 /* no_of_characters */] <85.5f ? 
                 (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.83203125f ? 
                     (data[1 /* type_of_time */] <4.5f ? 
                        0.0f : 
                        7.1377587E-4f) : 
                    0.1452514f) : 
                 (data[0 /* vlan */] <12.5f ? 
                     (Double.isNaN(data[13]) || data[13 /* 12_letter_word */] <0.046875f ? 
                        0.027027028f : 
                        0.0f) : 
                     (data[0 /* vlan */] <100.5f ? 
                        2.8101727E-4f : 
                        0.0f))) : 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <280.5f ? 
                 (data[0 /* vlan */] <9.5f ? 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.29101562f ? 
                        0.0f : 
                        1.0f) : 
                     (data[0 /* vlan */] <65.5f ? 
                        0.0015434606f : 
                        0.0f)) : 
                 (data[9 /* 8_letter_word */] <0.17710114f ? 
                     (data[5 /* 4_letter_word */] <0.390625f ? 
                        0.014084507f : 
                        0.82758623f) : 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.03515625f ? 
                        0.0070422534f : 
                        0.0f)))) : 
         (data[2 /* no_of_characters */] <70.5f ? 
             (data[5 /* 4_letter_word */] <0.37402344f ? 
                 (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.125f ? 
                     (data[2 /* no_of_characters */] <33.5f ? 
                        0.0f : 
                        0.33333334f) : 
                    0.0f) : 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <17.5f ? 
                    1.0f : 
                    0.0f)) : 
             (data[0 /* vlan */] <9.5f ? 
                1.0f : 
                 (data[2 /* no_of_characters */] <85.5f ? 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <79.0f ? 
                        0.0f : 
                        1.0f) : 
                    0.0f))));
    return pred;
  } // constant pool size = 94B, number of visited nodes = 23, static init size = 0B
}

class log_drf_1_Tree_45_class_34 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.123535156f ? 
        0.0f : 
         (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <1.5f ? 
             (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.31054688f ? 
                 (data[0 /* vlan */] <9.5f ? 
                    0.1f : 
                    0.0f) : 
                 (data[2 /* no_of_characters */] <119.5f ? 
                     (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                        0.030303031f : 
                        0.0f) : 
                    0.0f)) : 
            0.0f));
    return pred;
  } // constant pool size = 26B, number of visited nodes = 6, static init size = 0B
}

class log_drf_1_Tree_45_class_35 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.087402344f ? 
         (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.87402344f ? 
             (data[0 /* vlan */] <17.5f ? 
                 (data[2 /* no_of_characters */] <140.5f ? 
                     (data[9 /* 8_letter_word */] <0.10242462f ? 
                        0.010324484f : 
                        0.0f) : 
                     (data[2 /* no_of_characters */] <281.5f ? 
                        6.941231E-4f : 
                        0.0f)) : 
                0.0f) : 
             (data[2 /* no_of_characters */] <85.5f ? 
                0.0051085567f : 
                0.0f)) : 
         (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <305.5f ? 
             (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.23730469f ? 
                0.0f : 
                 (data[0 /* vlan */] <17.5f ? 
                     (data[2 /* no_of_characters */] <113.5f ? 
                        0.18181819f : 
                        0.0f) : 
                    0.0f)) : 
             (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.52382815f ? 
                0.0f : 
                 (data[6 /* 5_letter_word */] <0.14296874f ? 
                    0.33333334f : 
                    0.0f))));
    return pred;
  } // constant pool size = 54B, number of visited nodes = 13, static init size = 0B
}

class log_drf_1_Tree_45_class_36 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.16015625f ? 
        0.0f : 
         (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.083984375f ? 
            0.0f : 
             (data[0 /* vlan */] <13.5f ? 
                0.6666667f : 
                0.0f)));
    return pred;
  } // constant pool size = 14B, number of visited nodes = 3, static init size = 0B
}

class log_drf_1_Tree_45_class_37 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.10546875f ? 
         (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <1.5f ? 
             (data[0 /* vlan */] <157.5f ? 
                 (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.58984375f ? 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.046875f ? 
                        0.041393608f : 
                        7.939659E-4f) : 
                     (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.0859375f ? 
                        0.14953828f : 
                        0.9940653f)) : 
                 (data[2 /* no_of_characters */] <33.5f ? 
                    0.0f : 
                     (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
                        0.9984428f : 
                        0.31728044f))) : 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <200.5f ? 
                 (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.07421875f ? 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.8671875f ? 
                        0.0f : 
                        0.01f) : 
                    0.0f) : 
                 (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.171875f ? 
                     (data[1 /* type_of_time */] <4.5f ? 
                        0.021052632f : 
                        0.0f) : 
                    1.0f))) : 
         (data[2 /* no_of_characters */] <170.5f ? 
             (data[1 /* type_of_time */] <4.5f ? 
                 (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <1.5f ? 
                    1.0f : 
                    0.0f) : 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <154.5f ? 
                     (data[7 /* 6_letter_word */] <0.3151245f ? 
                        0.0f : 
                        7.9176563E-4f) : 
                     (data[3 /* no_of_ips */] <0.5f ? 
                        0.8333333f : 
                        0.0f))) : 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <165.5f ? 
                 (data[2 /* no_of_characters */] <179.5f ? 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <175.5f ? 
                        0.7864644f : 
                        0.112280704f) : 
                     (data[2 /* no_of_characters */] <248.5f ? 
                        0.011643529f : 
                        5.710207E-4f)) : 
                 (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.18489583f ? 
                     (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
                        0.97584903f : 
                        0.0f) : 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <179.5f ? 
                        0.05970149f : 
                        0.47058824f)))));
    return pred;
  } // constant pool size = 106B, number of visited nodes = 26, static init size = 0B
}

class log_drf_1_Tree_45_class_38 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.94970703f ? 
         (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.44921875f ? 
            0.0f : 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <85.5f ? 
                0.0f : 
                 (data[2 /* no_of_characters */] <107.5f ? 
                     (data[5 /* 4_letter_word */] <0.25226593f ? 
                        0.03846154f : 
                        0.0f) : 
                    0.0f))) : 
        1.7320516E-4f);
    return pred;
  } // constant pool size = 22B, number of visited nodes = 5, static init size = 0B
}


class log_drf_1_Forest_46 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += log_drf_1_Tree_46_class_0.score0(fdata);
    preds[2] += log_drf_1_Tree_46_class_1.score0(fdata);
    preds[3] += log_drf_1_Tree_46_class_2.score0(fdata);
    preds[4] += log_drf_1_Tree_46_class_3.score0(fdata);
    preds[5] += log_drf_1_Tree_46_class_4.score0(fdata);
    preds[6] += log_drf_1_Tree_46_class_5.score0(fdata);
    preds[7] += log_drf_1_Tree_46_class_6.score0(fdata);
    preds[8] += log_drf_1_Tree_46_class_7.score0(fdata);
    preds[9] += log_drf_1_Tree_46_class_8.score0(fdata);
    preds[10] += log_drf_1_Tree_46_class_9.score0(fdata);
    preds[11] += log_drf_1_Tree_46_class_10.score0(fdata);
    preds[12] += log_drf_1_Tree_46_class_11.score0(fdata);
    preds[13] += log_drf_1_Tree_46_class_12.score0(fdata);
    preds[14] += log_drf_1_Tree_46_class_13.score0(fdata);
    preds[15] += log_drf_1_Tree_46_class_14.score0(fdata);
    preds[16] += log_drf_1_Tree_46_class_15.score0(fdata);
    preds[17] += log_drf_1_Tree_46_class_16.score0(fdata);
    preds[18] += log_drf_1_Tree_46_class_17.score0(fdata);
    preds[19] += log_drf_1_Tree_46_class_18.score0(fdata);
    preds[20] += log_drf_1_Tree_46_class_19.score0(fdata);
    preds[21] += log_drf_1_Tree_46_class_20.score0(fdata);
    preds[22] += log_drf_1_Tree_46_class_21.score0(fdata);
    preds[23] += log_drf_1_Tree_46_class_22.score0(fdata);
    preds[24] += log_drf_1_Tree_46_class_23.score0(fdata);
    preds[25] += log_drf_1_Tree_46_class_24.score0(fdata);
    preds[26] += log_drf_1_Tree_46_class_25.score0(fdata);
    preds[27] += log_drf_1_Tree_46_class_26.score0(fdata);
    preds[28] += log_drf_1_Tree_46_class_27.score0(fdata);
    preds[29] += log_drf_1_Tree_46_class_28.score0(fdata);
    preds[30] += log_drf_1_Tree_46_class_29.score0(fdata);
    preds[31] += log_drf_1_Tree_46_class_30.score0(fdata);
    preds[32] += log_drf_1_Tree_46_class_31.score0(fdata);
    preds[33] += log_drf_1_Tree_46_class_32.score0(fdata);
    preds[34] += log_drf_1_Tree_46_class_33.score0(fdata);
    preds[35] += log_drf_1_Tree_46_class_34.score0(fdata);
    preds[36] += log_drf_1_Tree_46_class_35.score0(fdata);
    preds[37] += log_drf_1_Tree_46_class_36.score0(fdata);
    preds[38] += log_drf_1_Tree_46_class_37.score0(fdata);
    preds[39] += log_drf_1_Tree_46_class_38.score0(fdata);
  }
}
class log_drf_1_Tree_46_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[4]) || data[4 /* no_of_macs */] <2.5f ? 
         (Double.isNaN(data[4]) || data[4 /* no_of_macs */] <0.5f ? 
            0.0f : 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <75.5f ? 
                0.0f : 
                1.0f)) : 
        0.2857143f);
    return pred;
  } // constant pool size = 14B, number of visited nodes = 3, static init size = 0B
}

class log_drf_1_Tree_46_class_1 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
        0.0f : 
         (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.38671875f ? 
             (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.1328125f ? 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.23565674f ? 
                    0.0f : 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <260.5f ? 
                        0.0026675558f : 
                        0.3030303f)) : 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.26737976f ? 
                    0.0f : 
                     (data[0 /* vlan */] <81.5f ? 
                        0.0f : 
                        0.96875f))) : 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <248.0f ? 
                0.0f : 
                 (data[5 /* 4_letter_word */] <0.3671875f ? 
                    0.0f : 
                    0.9957983f))));
    return pred;
  } // constant pool size = 38B, number of visited nodes = 9, static init size = 0B
}

class log_drf_1_Tree_46_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
         (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
            0.0f : 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <137.5f ? 
                0.0f : 
                 (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.3515625f ? 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.171875f ? 
                        0.089097306f : 
                        0.93333334f) : 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <165.5f ? 
                        1.0f : 
                        0.0f)))) : 
         (data[6 /* 5_letter_word */] <0.05859375f ? 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <181.5f ? 
                0.0f : 
                 (data[7 /* 6_letter_word */] <0.359375f ? 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.171875f ? 
                        0.007246377f : 
                        0.5f) : 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <591.0f ? 
                        1.0f : 
                        0.0f))) : 
             (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.19140625f ? 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <178.5f ? 
                    0.0f : 
                     (data[5 /* 4_letter_word */] <0.265625f ? 
                        0.07272727f : 
                        0.0f)) : 
                 (data[5 /* 4_letter_word */] <0.22265625f ? 
                     (data[9 /* 8_letter_word */] <0.1f ? 
                        0.008583691f : 
                        0.0f) : 
                    0.0f))));
    return pred;
  } // constant pool size = 66B, number of visited nodes = 16, static init size = 0B
}

class log_drf_1_Tree_46_class_3 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
         (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
            0.0f : 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <295.5f ? 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.234375f ? 
                    0.0f : 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.4609375f ? 
                        0.0f : 
                        0.0017667845f)) : 
                 (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.1640625f ? 
                     (data[8 /* 7_letter_word */] <0.125f ? 
                        0.0f : 
                        0.99622643f) : 
                    0.0f))) : 
         (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.24023438f ? 
             (data[1 /* type_of_time */] <4.5f ? 
                 (data[2 /* no_of_characters */] <110.5f ? 
                    1.0f : 
                    0.0f) : 
                0.0f) : 
             (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.18359375f ? 
                 (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.38671875f ? 
                    0.0f : 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <160.5f ? 
                        0.9553945f : 
                        0.039473683f)) : 
                0.0f)));
    return pred;
  } // constant pool size = 54B, number of visited nodes = 13, static init size = 0B
}

class log_drf_1_Tree_46_class_4 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.3095703f ? 
         (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.24316406f ? 
             (data[2 /* no_of_characters */] <100.5f ? 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <98.5f ? 
                    0.0f : 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.7421875f ? 
                        0.0f : 
                        0.6666667f)) : 
                0.0f) : 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <25.5f ? 
                0.0f : 
                 (data[0 /* vlan */] <33.5f ? 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.265625f ? 
                        0.0f : 
                        0.013559322f) : 
                    0.0f))) : 
         (data[6 /* 5_letter_word */] <0.41601562f ? 
             (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <25.5f ? 
                    0.0f : 
                     (data[0 /* vlan */] <33.5f ? 
                        0.9117647f : 
                        0.0f)) : 
                0.0f) : 
            0.0f));
    return pred;
  } // constant pool size = 50B, number of visited nodes = 12, static init size = 0B
}

class log_drf_1_Tree_46_class_5 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.07470703f ? 
         (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.095703125f ? 
             (data[0 /* vlan */] <85.5f ? 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <64.5f ? 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.15625f ? 
                        0.0f : 
                        2.891009E-4f) : 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.4140625f ? 
                        0.0f : 
                        1.0f)) : 
                0.0f) : 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <33.5f ? 
                0.0f : 
                 (data[7 /* 6_letter_word */] <0.19107819f ? 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <306.5f ? 
                        0.005194805f : 
                        0.2631579f) : 
                     (data[2 /* no_of_characters */] <112.5f ? 
                        0.00814664f : 
                        0.0f)))) : 
         (data[6 /* 5_letter_word */] <0.1484375f ? 
            0.0f : 
             (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.04296875f ? 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <33.5f ? 
                    0.0f : 
                     (data[0 /* vlan */] <37.5f ? 
                        1.0f : 
                        0.0062015504f)) : 
                0.0f)));
    return pred;
  } // constant pool size = 58B, number of visited nodes = 14, static init size = 0B
}

class log_drf_1_Tree_46_class_6 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
         (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
            0.0f : 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <125.5f ? 
                 (data[2 /* no_of_characters */] <30.5f ? 
                    1.0f : 
                     (data[2 /* no_of_characters */] <50.5f ? 
                        0.23684211f : 
                        0.0017000312f)) : 
                 (data[0 /* vlan */] <133.5f ? 
                     (data[5 /* 4_letter_word */] <0.21875f ? 
                        0.23404256f : 
                        0.9852941f) : 
                    0.0f))) : 
        0.0f);
    return pred;
  } // constant pool size = 30B, number of visited nodes = 7, static init size = 0B
}

class log_drf_1_Tree_46_class_7 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <1.5f ? 
         (data[8 /* 7_letter_word */] <0.0126953125f ? 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <185.5f ? 
                0.0f : 
                 (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.74609375f ? 
                    0.0f : 
                    0.9705882f)) : 
            0.0f) : 
         (data[6 /* 5_letter_word */] <0.041992188f ? 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <183.5f ? 
                0.0f : 
                1.0f) : 
            0.0f));
    return pred;
  } // constant pool size = 26B, number of visited nodes = 6, static init size = 0B
}

class log_drf_1_Tree_46_class_8 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <2.5f ? 
         (data[8 /* 7_letter_word */] <0.0126953125f ? 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <886.0f ? 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <751.0f ? 
                     (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                        1.5446998E-4f : 
                        0.0f) : 
                     (data[2 /* no_of_characters */] <815.0f ? 
                        0.5f : 
                        0.0f)) : 
                 (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.01171875f ? 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.03125f ? 
                        0.6666667f : 
                        1.0f) : 
                    0.0f)) : 
            0.0f) : 
         (data[6 /* 5_letter_word */] <0.26757812f ? 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <173.5f ? 
                0.0f : 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <609.5f ? 
                    0.0f : 
                    0.4f)) : 
             (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.04296875f ? 
                 (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.53515625f ? 
                     (data[6 /* 5_letter_word */] <0.3534088f ? 
                        0.01632653f : 
                        5.0845306E-4f) : 
                     (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <3.5f ? 
                        0.8240741f : 
                        0.2857143f)) : 
                 (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.47265625f ? 
                    0.0f : 
                    1.0f))));
    return pred;
  } // constant pool size = 66B, number of visited nodes = 16, static init size = 0B
}

class log_drf_1_Tree_46_class_9 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <2.5f ? 
         (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.16015625f ? 
            0.0f : 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <151.5f ? 
                0.0f : 
                 (data[8 /* 7_letter_word */] <0.098958336f ? 
                     (data[2 /* no_of_characters */] <126.5f ? 
                        0.96153843f : 
                        0.003147954f) : 
                    0.0f))) : 
         (data[1 /* type_of_time */] <3.5f ? 
             (data[1 /* type_of_time */] <2.0f ? 
                0.0f : 
                1.0f) : 
            0.0f));
    return pred;
  } // constant pool size = 30B, number of visited nodes = 7, static init size = 0B
}

class log_drf_1_Tree_46_class_10 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
        7.4042264E-6f : 
         (data[6 /* 5_letter_word */] <0.028320312f ? 
             (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.8730469f ? 
                 (Double.isNaN(data[12]) || data[12 /* 11_letter_word */] <0.07421875f ? 
                     (data[3 /* no_of_ips */] <1.5f ? 
                        3.8744672E-4f : 
                        0.0f) : 
                    0.0f) : 
                 (data[3 /* no_of_ips */] <1.5f ? 
                     (data[1 /* type_of_time */] <4.5f ? 
                        0.0f : 
                        0.6666667f) : 
                    0.0f)) : 
            0.0f));
    return pred;
  } // constant pool size = 30B, number of visited nodes = 7, static init size = 0B
}

class log_drf_1_Tree_46_class_11 {
  static final double score0(double[] data) {
    double pred =     5.0E-6f;
    return pred;
  } // constant pool size = 2B, number of visited nodes = 0, static init size = 0B
}

class log_drf_1_Tree_46_class_12 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
        0.0f : 
         (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.9277344f ? 
             (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.58203125f ? 
                0.0f : 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <508.5f ? 
                    0.0f : 
                    1.0f)) : 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <330.5f ? 
                0.0f : 
                1.0f)));
    return pred;
  } // constant pool size = 22B, number of visited nodes = 5, static init size = 0B
}

class log_drf_1_Tree_46_class_13 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
         (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
            0.0f : 
             (data[2 /* no_of_characters */] <35.5f ? 
                 (data[0 /* vlan */] <21.5f ? 
                    0.0f : 
                     (data[0 /* vlan */] <108.5f ? 
                        0.86206895f : 
                        1.0f)) : 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.19140625f ? 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <589.0f ? 
                        0.0f : 
                        0.032258064f) : 
                     (data[8 /* 7_letter_word */] <0.26089478f ? 
                        0.059176672f : 
                        0.0f)))) : 
         (data[6 /* 5_letter_word */] <0.028320312f ? 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <592.5f ? 
                0.0f : 
                 (data[7 /* 6_letter_word */] <0.16796875f ? 
                    1.0f : 
                    0.0f)) : 
            0.0f));
    return pred;
  } // constant pool size = 46B, number of visited nodes = 11, static init size = 0B
}

class log_drf_1_Tree_46_class_14 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.19091797f ? 
         (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.19726562f ? 
            0.0f : 
             (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.19140625f ? 
                0.0f : 
                 (data[8 /* 7_letter_word */] <0.224823f ? 
                     (data[0 /* vlan */] <33.5f ? 
                        0.032258064f : 
                        0.0f) : 
                    0.0f))) : 
         (data[1 /* type_of_time */] <2.5f ? 
             (data[10 /* 9_letter_word */] <0.22410297f ? 
                1.0f : 
                0.0f) : 
            0.0f));
    return pred;
  } // constant pool size = 30B, number of visited nodes = 7, static init size = 0B
}

class log_drf_1_Tree_46_class_15 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <1.5f ? 
         (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.63378906f ? 
             (data[0 /* vlan */] <141.5f ? 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <124.5f ? 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <165.5f ? 
                        2.4404381E-4f : 
                        0.0021750256f) : 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <126.5f ? 
                        0.058951966f : 
                        0.4620462f)) : 
                0.0f) : 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <113.5f ? 
                0.0f : 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <225.5f ? 
                     (data[0 /* vlan */] <149.5f ? 
                        0.27272728f : 
                        0.0f) : 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.0859375f ? 
                        0.7132867f : 
                        0.33333334f)))) : 
         (data[6 /* 5_letter_word */] <0.041992188f ? 
             (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.29101562f ? 
                 (data[5 /* 4_letter_word */] <0.18359375f ? 
                     (data[4 /* no_of_macs */] <0.5f ? 
                        0.013020833f : 
                        0.0f) : 
                     (data[5 /* 4_letter_word */] <0.22824097f ? 
                        1.0f : 
                        0.08373356f)) : 
                0.0f) : 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <85.5f ? 
                0.0f : 
                 (data[5 /* 4_letter_word */] <0.22265625f ? 
                     (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
                        0.0f : 
                        0.018518519f) : 
                    0.0f))));
    return pred;
  } // constant pool size = 74B, number of visited nodes = 18, static init size = 0B
}

class log_drf_1_Tree_46_class_16 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.3095703f ? 
         (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.52734375f ? 
             (data[2 /* no_of_characters */] <105.5f ? 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.3671875f ? 
                     (data[2 /* no_of_characters */] <81.5f ? 
                        0.0014030165f : 
                        1.7534631E-4f) : 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.21875f ? 
                        0.0073937154f : 
                        0.0f)) : 
                 (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.3203125f ? 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.4765625f ? 
                        0.0f : 
                        4.294057E-5f) : 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.3125f ? 
                        0.0f : 
                        3.170912E-4f))) : 
            0.0f) : 
         (data[6 /* 5_letter_word */] <0.083984375f ? 
             (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.16699219f ? 
                 (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.2890625f ? 
                    0.0f : 
                     (data[2 /* no_of_characters */] <100.5f ? 
                        0.016666668f : 
                        0.0f)) : 
                0.0f) : 
            0.0f));
    return pred;
  } // constant pool size = 54B, number of visited nodes = 13, static init size = 0B
}

class log_drf_1_Tree_46_class_17 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <3.5f ? 
         (data[8 /* 7_letter_word */] <0.123046875f ? 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <659.5f ? 
                1.8494202E-5f : 
                 (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.0625f ? 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <882.0f ? 
                        0.98f : 
                        0.0f) : 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.2421875f ? 
                        0.0f : 
                        0.5f))) : 
            0.0f) : 
         (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.5830078f ? 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <173.5f ? 
                0.0f : 
                 (data[2 /* no_of_characters */] <993.5f ? 
                    0.0f : 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.046875f ? 
                        0.9647059f : 
                        0.7777778f))) : 
            1.0f));
    return pred;
  } // constant pool size = 42B, number of visited nodes = 10, static init size = 0B
}

class log_drf_1_Tree_46_class_18 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.07470703f ? 
        0.0f : 
         (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.296875f ? 
            0.0f : 
             (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.0390625f ? 
                0.0f : 
                 (data[11 /* 10_letter_word */] <0.1953125f ? 
                    0.33333334f : 
                    0.0f))));
    return pred;
  } // constant pool size = 18B, number of visited nodes = 4, static init size = 0B
}

class log_drf_1_Tree_46_class_19 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.23583984f ? 
         (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.19726562f ? 
            0.0f : 
             (data[2 /* no_of_characters */] <135.5f ? 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.18489583f ? 
                    0.0f : 
                     (data[7 /* 6_letter_word */] <0.22862244f ? 
                        0.019607844f : 
                        0.0f)) : 
                0.0f)) : 
         (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.125f ? 
            0.0f : 
             (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.2919922f ? 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <17.5f ? 
                    1.0f : 
                    0.0f) : 
                0.0f)));
    return pred;
  } // constant pool size = 34B, number of visited nodes = 8, static init size = 0B
}

class log_drf_1_Tree_46_class_20 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
         (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
            0.0f : 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <25.5f ? 
                 (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.1328125f ? 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <120.5f ? 
                        0.9771605f : 
                        0.7668006f) : 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <17.5f ? 
                        0.0f : 
                        1.0f)) : 
                0.0f)) : 
         (data[6 /* 5_letter_word */] <0.028320312f ? 
             (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.087890625f ? 
                 (data[0 /* vlan */] <22.5f ? 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.21875f ? 
                        0.13233458f : 
                        1.0f) : 
                    0.0f) : 
                 (data[2 /* no_of_characters */] <120.5f ? 
                    0.0f : 
                     (data[5 /* 4_letter_word */] <0.21875f ? 
                        0.9955157f : 
                        0.9085821f))) : 
             (Double.isNaN(data[12]) || data[12 /* 11_letter_word */] <0.080078125f ? 
                 (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.19140625f ? 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.1171875f ? 
                        0.022859244f : 
                        0.0f) : 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.234375f ? 
                        0.013385293f : 
                        0.0f)) : 
                 (data[5 /* 4_letter_word */] <0.05859375f ? 
                    0.0f : 
                    1.0f))));
    return pred;
  } // constant pool size = 70B, number of visited nodes = 17, static init size = 0B
}

class log_drf_1_Tree_46_class_21 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.15478516f ? 
         (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.8027344f ? 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <230.5f ? 
                 (data[0 /* vlan */] <17.5f ? 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.2890625f ? 
                        0.0f : 
                        0.014615747f) : 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.0546875f ? 
                        9.389042E-4f : 
                        2.699718E-4f)) : 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <304.5f ? 
                     (data[5 /* 4_letter_word */] <0.234375f ? 
                        4.1858517E-4f : 
                        0.010195589f) : 
                     (data[2 /* no_of_characters */] <320.5f ? 
                        0.0025125628f : 
                        0.0f))) : 
             (data[0 /* vlan */] <13.5f ? 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.9283371f ? 
                    0.33333334f : 
                    0.0f) : 
                6.002401E-4f)) : 
         (data[1 /* type_of_time */] <3.5f ? 
             (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.22460938f ? 
                0.0f : 
                 (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <1.0f ? 
                    1.0f : 
                    0.0f)) : 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <175.5f ? 
                 (data[2 /* no_of_characters */] <108.5f ? 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <106.0f ? 
                        0.0f : 
                        0.33333334f) : 
                    0.0f) : 
                 (data[11 /* 10_letter_word */] <0.17459488f ? 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <29.0f ? 
                        0.0f : 
                        0.83870965f) : 
                     (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.1015625f ? 
                        0.009643202f : 
                        0.64285713f)))));
    return pred;
  } // constant pool size = 82B, number of visited nodes = 20, static init size = 0B
}

class log_drf_1_Tree_46_class_22 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.16015625f ? 
         (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.32226562f ? 
            0.0f : 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <225.5f ? 
                0.0f : 
                 (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.6328125f ? 
                    0.0f : 
                     (data[3 /* no_of_ips */] <1.0f ? 
                        0.1764706f : 
                        0.0f)))) : 
         (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.083984375f ? 
            0.0f : 
             (data[0 /* vlan */] <9.5f ? 
                0.2857143f : 
                0.0f)));
    return pred;
  } // constant pool size = 30B, number of visited nodes = 7, static init size = 0B
}

class log_drf_1_Tree_46_class_23 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.13378906f ? 
         (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.18359375f ? 
             (data[0 /* vlan */] <17.5f ? 
                 (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.30859375f ? 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.05965909f ? 
                        0.8706426f : 
                        0.22083333f) : 
                     (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.0390625f ? 
                        0.0010695187f : 
                        0.0f)) : 
                0.0f) : 
             (data[0 /* vlan */] <13.5f ? 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <150.5f ? 
                    0.0f : 
                    1.0f) : 
                 (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
                    0.0f : 
                     (data[3 /* no_of_ips */] <1.5f ? 
                        8.683571E-4f : 
                        0.0f)))) : 
         (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.12695312f ? 
            0.0f : 
             (data[11 /* 10_letter_word */] <0.15409088f ? 
                 (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.14296874f ? 
                    1.0f : 
                    0.0f) : 
                0.0f)));
    return pred;
  } // constant pool size = 54B, number of visited nodes = 13, static init size = 0B
}

class log_drf_1_Tree_46_class_24 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
        0.0f : 
         (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.9160156f ? 
            0.0f : 
             (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
                0.0f : 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <140.5f ? 
                    0.0f : 
                     (data[2 /* no_of_characters */] <583.5f ? 
                        0.33333334f : 
                        0.0f)))));
    return pred;
  } // constant pool size = 22B, number of visited nodes = 5, static init size = 0B
}

class log_drf_1_Tree_46_class_25 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <1.5f ? 
         (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.10546875f ? 
             (data[0 /* vlan */] <41.5f ? 
                 (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.21875f ? 
                        0.030846484f : 
                        0.088222966f) : 
                     (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.046875f ? 
                        0.4761137f : 
                        0.02764977f)) : 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <173.5f ? 
                    0.0f : 
                     (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.03125f ? 
                        0.0f : 
                        0.01369863f))) : 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <29.5f ? 
                 (data[7 /* 6_letter_word */] <0.25572205f ? 
                     (data[2 /* no_of_characters */] <80.5f ? 
                        1.0f : 
                        0.007451565f) : 
                     (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                        0.0f : 
                        0.10489511f)) : 
                 (data[1 /* type_of_time */] <4.5f ? 
                    0.0f : 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <61.0f ? 
                        0.9803241f : 
                        0.0f)))) : 
         (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.4638672f ? 
             (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.70703125f ? 
                 (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <4.5f ? 
                     (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.0390625f ? 
                        0.6896716f : 
                        0.20403588f) : 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.4609375f ? 
                        2.0124773E-4f : 
                        0.083333336f)) : 
                 (data[2 /* no_of_characters */] <160.5f ? 
                     (data[4 /* no_of_macs */] <0.5f ? 
                        0.9f : 
                        1.0f) : 
                    1.0f)) : 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <177.5f ? 
                 (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <5.5f ? 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <280.5f ? 
                        0.9996396f : 
                        0.90909094f) : 
                     (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <6.5f ? 
                        0.0f : 
                        1.0f)) : 
                0.0f)));
    return pred;
  } // constant pool size = 102B, number of visited nodes = 25, static init size = 0B
}

class log_drf_1_Tree_46_class_26 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
         (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
            0.0f : 
             (data[2 /* no_of_characters */] <60.5f ? 
                 (data[2 /* no_of_characters */] <54.0f ? 
                    0.0f : 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.171875f ? 
                        0.995338f : 
                        0.0f)) : 
                0.0f)) : 
        0.0f);
    return pred;
  } // constant pool size = 22B, number of visited nodes = 5, static init size = 0B
}

class log_drf_1_Tree_46_class_27 {
  static final double score0(double[] data) {
    double pred =     1.0E-5f;
    return pred;
  } // constant pool size = 2B, number of visited nodes = 0, static init size = 0B
}

class log_drf_1_Tree_46_class_28 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <5.5f ? 
         (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.3203125f ? 
            0.0f : 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <457.0f ? 
                0.0f : 
                 (data[0 /* vlan */] <98.0f ? 
                    1.0f : 
                    0.0f))) : 
         (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.4638672f ? 
             (data[7 /* 6_letter_word */] <0.18359375f ? 
                 (data[2 /* no_of_characters */] <499.5f ? 
                    0.5f : 
                    1.0f) : 
                1.0f) : 
             (data[2 /* no_of_characters */] <377.5f ? 
                0.0f : 
                1.0f)));
    return pred;
  } // constant pool size = 34B, number of visited nodes = 8, static init size = 0B
}

class log_drf_1_Tree_46_class_29 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.0087890625f ? 
         (data[8 /* 7_letter_word */] <0.03125f ? 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <185.5f ? 
                0.0f : 
                 (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.69140625f ? 
                    0.0f : 
                     (data[5 /* 4_letter_word */] <0.73239136f ? 
                        0.16666667f : 
                        0.0011890606f))) : 
            0.0f) : 
         (Double.isNaN(data[14]) || data[14 /* 13_letter_word */] <0.0068359375f ? 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <133.5f ? 
                0.0f : 
                 (data[0 /* vlan */] <137.5f ? 
                    1.0f : 
                    0.0f)) : 
             (data[8 /* 7_letter_word */] <0.0859375f ? 
                0.5f : 
                0.0f)));
    return pred;
  } // constant pool size = 38B, number of visited nodes = 9, static init size = 0B
}

class log_drf_1_Tree_46_class_30 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <2.5f ? 
         (data[8 /* 7_letter_word */] <0.2607422f ? 
             (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.23935318f ? 
                0.0f : 
                 (data[1 /* type_of_time */] <2.5f ? 
                    1.0f : 
                    0.0f)) : 
            0.0f) : 
         (data[1 /* type_of_time */] <2.0f ? 
            1.0f : 
            0.0f));
    return pred;
  } // constant pool size = 22B, number of visited nodes = 5, static init size = 0B
}

class log_drf_1_Tree_46_class_31 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.23583984f ? 
         (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.13378906f ? 
             (data[2 /* no_of_characters */] <80.5f ? 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <73.5f ? 
                     (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.25f ? 
                        0.0032588455f : 
                        1.0f) : 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.7421875f ? 
                        0.1712963f : 
                        0.91071427f)) : 
                 (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <1.5f ? 
                     (data[0 /* vlan */] <99.5f ? 
                        0.01081802f : 
                        1.8458699E-5f) : 
                    0.0f)) : 
             (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.53515625f ? 
                 (data[2 /* no_of_characters */] <110.5f ? 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <33.5f ? 
                        0.0f : 
                        0.5853132f) : 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.3671875f ? 
                        0.0040828823f : 
                        0.0f)) : 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.2386818f ? 
                    1.0f : 
                    0.0f))) : 
         (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.0625f ? 
             (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.29101562f ? 
                0.0f : 
                 (data[0 /* vlan */] <109.5f ? 
                     (data[3 /* no_of_ips */] <0.5f ? 
                        0.7083333f : 
                        0.99224806f) : 
                    0.0f)) : 
            0.0f));
    return pred;
  } // constant pool size = 70B, number of visited nodes = 17, static init size = 0B
}

class log_drf_1_Tree_46_class_32 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.19091797f ? 
         (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.24316406f ? 
            0.0f : 
             (data[2 /* no_of_characters */] <125.5f ? 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.0859375f ? 
                     (data[7 /* 6_letter_word */] <0.2668152f ? 
                        0.40677965f : 
                        0.016782196f) : 
                    0.0f) : 
                0.0f)) : 
         (data[6 /* 5_letter_word */] <0.05078125f ? 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <25.5f ? 
                0.0f : 
                 (data[0 /* vlan */] <29.5f ? 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <28.0f ? 
                        0.0f : 
                        1.0f) : 
                    0.0f)) : 
            0.0f));
    return pred;
  } // constant pool size = 38B, number of visited nodes = 9, static init size = 0B
}

class log_drf_1_Tree_46_class_33 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[4]) || data[4 /* no_of_macs */] <1.5f ? 
         (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.4716797f ? 
             (data[0 /* vlan */] <9.5f ? 
                 (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.2890625f ? 
                     (data[6 /* 5_letter_word */] <0.23712158f ? 
                        0.11764706f : 
                        0.01754386f) : 
                    1.0f) : 
                 (data[0 /* vlan */] <17.5f ? 
                     (data[2 /* no_of_characters */] <100.5f ? 
                        0.3263158f : 
                        0.004707069f) : 
                     (data[2 /* no_of_characters */] <120.5f ? 
                        0.0012600711f : 
                        0.0f))) : 
             (data[0 /* vlan */] <9.5f ? 
                1.0f : 
                 (data[2 /* no_of_characters */] <90.5f ? 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <57.5f ? 
                        0.009615385f : 
                        0.08695652f) : 
                    0.0f))) : 
         (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.08691406f ? 
            0.0f : 
             (data[6 /* 5_letter_word */] <0.11425781f ? 
                 (Double.isNaN(data[14]) || data[14 /* 13_letter_word */] <0.009194711f ? 
                    1.0f : 
                    0.0f) : 
                0.0f)));
    return pred;
  } // constant pool size = 58B, number of visited nodes = 14, static init size = 0B
}

class log_drf_1_Tree_46_class_34 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.123535156f ? 
        0.0f : 
         (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.12109375f ? 
            0.0f : 
             (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.22460938f ? 
                 (data[8 /* 7_letter_word */] <0.18289693f ? 
                     (data[5 /* 4_letter_word */] <0.4140625f ? 
                        0.05263158f : 
                        0.0f) : 
                    0.0f) : 
                 (data[10 /* 9_letter_word */] <0.15434837f ? 
                    0.5f : 
                    0.0f))));
    return pred;
  } // constant pool size = 26B, number of visited nodes = 6, static init size = 0B
}

class log_drf_1_Tree_46_class_35 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.087402344f ? 
         (data[8 /* 7_letter_word */] <0.17480469f ? 
             (data[0 /* vlan */] <19.5f ? 
                 (data[6 /* 5_letter_word */] <0.03125f ? 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.0859375f ? 
                        0.0035820894f : 
                        0.001183432f) : 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.4609375f ? 
                        0.0f : 
                        0.0037664783f)) : 
                0.0f) : 
             (data[0 /* vlan */] <17.5f ? 
                 (data[2 /* no_of_characters */] <90.5f ? 
                     (data[5 /* 4_letter_word */] <0.125f ? 
                        0.125f : 
                        0.0f) : 
                    0.0f) : 
                0.0f)) : 
         (data[1 /* type_of_time */] <4.5f ? 
            0.0f : 
             (data[2 /* no_of_characters */] <110.5f ? 
                 (data[0 /* vlan */] <17.5f ? 
                     (data[5 /* 4_letter_word */] <0.5703125f ? 
                        1.0f : 
                        0.0f) : 
                    0.0f) : 
                0.0f)));
    return pred;
  } // constant pool size = 54B, number of visited nodes = 13, static init size = 0B
}

class log_drf_1_Tree_46_class_36 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.16015625f ? 
        0.0f : 
         (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.15527344f ? 
            0.0f : 
             (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.084375f ? 
                 (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.0859375f ? 
                    0.0f : 
                     (data[0 /* vlan */] <17.5f ? 
                        0.71428573f : 
                        0.0f)) : 
                0.0f)));
    return pred;
  } // constant pool size = 22B, number of visited nodes = 5, static init size = 0B
}

class log_drf_1_Tree_46_class_37 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
         (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
             (Double.isNaN(data[12]) || data[12 /* 11_letter_word */] <0.18359375f ? 
                 (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.18359375f ? 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.21875f ? 
                        0.9988576f : 
                        0.997803f) : 
                     (data[11 /* 10_letter_word */] <0.2923584f ? 
                        0.9864865f : 
                        1.0f)) : 
                 (Double.isNaN(data[1]) || data[1 /* type_of_time */] <3.5f ? 
                    0.0f : 
                    1.0f)) : 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <153.5f ? 
                 (data[0 /* vlan */] <13.5f ? 
                     (data[5 /* 4_letter_word */] <0.078125f ? 
                        0.055555556f : 
                        0.0f) : 
                    0.0f) : 
                 (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.97265625f ? 
                     (Double.isNaN(data[12]) || data[12 /* 11_letter_word */] <0.5f ? 
                        0.13680154f : 
                        1.0f) : 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <167.5f ? 
                        0.81632656f : 
                        0.0f)))) : 
         (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.9160156f ? 
             (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.19140625f ? 
                 (data[3 /* no_of_ips */] <2.5f ? 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <240.5f ? 
                        2.4813897E-4f : 
                        0.032258064f) : 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.4609375f ? 
                        7.3724565E-5f : 
                        0.0010972933f)) : 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.18359375f ? 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.38541666f ? 
                        7.834944E-4f : 
                        0.01953125f) : 
                     (data[7 /* 6_letter_word */] <0.225885f ? 
                        0.65680474f : 
                        0.0624f))) : 
             (data[0 /* vlan */] <91.5f ? 
                0.0f : 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <130.5f ? 
                    1.0f : 
                    0.0f))));
    return pred;
  } // constant pool size = 94B, number of visited nodes = 23, static init size = 0B
}

class log_drf_1_Tree_46_class_38 {
  static final double score0(double[] data) {
    double pred =     1.5E-5f;
    return pred;
  } // constant pool size = 2B, number of visited nodes = 0, static init size = 0B
}


class log_drf_1_Forest_47 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += log_drf_1_Tree_47_class_0.score0(fdata);
    preds[2] += log_drf_1_Tree_47_class_1.score0(fdata);
    preds[3] += log_drf_1_Tree_47_class_2.score0(fdata);
    preds[4] += log_drf_1_Tree_47_class_3.score0(fdata);
    preds[5] += log_drf_1_Tree_47_class_4.score0(fdata);
    preds[6] += log_drf_1_Tree_47_class_5.score0(fdata);
    preds[7] += log_drf_1_Tree_47_class_6.score0(fdata);
    preds[8] += log_drf_1_Tree_47_class_7.score0(fdata);
    preds[9] += log_drf_1_Tree_47_class_8.score0(fdata);
    preds[10] += log_drf_1_Tree_47_class_9.score0(fdata);
    preds[11] += log_drf_1_Tree_47_class_10.score0(fdata);
    preds[12] += log_drf_1_Tree_47_class_11.score0(fdata);
    preds[13] += log_drf_1_Tree_47_class_12.score0(fdata);
    preds[14] += log_drf_1_Tree_47_class_13.score0(fdata);
    preds[15] += log_drf_1_Tree_47_class_14.score0(fdata);
    preds[16] += log_drf_1_Tree_47_class_15.score0(fdata);
    preds[17] += log_drf_1_Tree_47_class_16.score0(fdata);
    preds[18] += log_drf_1_Tree_47_class_17.score0(fdata);
    preds[19] += log_drf_1_Tree_47_class_18.score0(fdata);
    preds[20] += log_drf_1_Tree_47_class_19.score0(fdata);
    preds[21] += log_drf_1_Tree_47_class_20.score0(fdata);
    preds[22] += log_drf_1_Tree_47_class_21.score0(fdata);
    preds[23] += log_drf_1_Tree_47_class_22.score0(fdata);
    preds[24] += log_drf_1_Tree_47_class_23.score0(fdata);
    preds[25] += log_drf_1_Tree_47_class_24.score0(fdata);
    preds[26] += log_drf_1_Tree_47_class_25.score0(fdata);
    preds[27] += log_drf_1_Tree_47_class_26.score0(fdata);
    preds[28] += log_drf_1_Tree_47_class_27.score0(fdata);
    preds[29] += log_drf_1_Tree_47_class_28.score0(fdata);
    preds[30] += log_drf_1_Tree_47_class_29.score0(fdata);
    preds[31] += log_drf_1_Tree_47_class_30.score0(fdata);
    preds[32] += log_drf_1_Tree_47_class_31.score0(fdata);
    preds[33] += log_drf_1_Tree_47_class_32.score0(fdata);
    preds[34] += log_drf_1_Tree_47_class_33.score0(fdata);
    preds[35] += log_drf_1_Tree_47_class_34.score0(fdata);
    preds[36] += log_drf_1_Tree_47_class_35.score0(fdata);
    preds[37] += log_drf_1_Tree_47_class_36.score0(fdata);
    preds[38] += log_drf_1_Tree_47_class_37.score0(fdata);
    preds[39] += log_drf_1_Tree_47_class_38.score0(fdata);
  }
}
class log_drf_1_Tree_47_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[4]) || data[4 /* no_of_macs */] <2.5f ? 
         (Double.isNaN(data[4]) || data[4 /* no_of_macs */] <0.5f ? 
            0.0f : 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <75.5f ? 
                0.0f : 
                1.0f)) : 
         (data[2 /* no_of_characters */] <972.5f ? 
            0.0f : 
            1.0f));
    return pred;
  } // constant pool size = 18B, number of visited nodes = 4, static init size = 0B
}

class log_drf_1_Tree_47_class_1 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
        0.0f : 
         (Double.isNaN(data[0]) || data[0 /* vlan */] <141.5f ? 
            0.0f : 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <253.0f ? 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.22265625f ? 
                    0.0f : 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.5390625f ? 
                        0.0f : 
                        1.0f)) : 
                 (data[0 /* vlan */] <155.5f ? 
                    1.0f : 
                    0.0f))));
    return pred;
  } // constant pool size = 26B, number of visited nodes = 6, static init size = 0B
}

class log_drf_1_Tree_47_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
         (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.13378906f ? 
             (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.19335938f ? 
                0.0f : 
                 (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
                    0.0f : 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <113.5f ? 
                        0.0f : 
                        0.011428571f))) : 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <135.5f ? 
                0.0f : 
                 (data[7 /* 6_letter_word */] <0.18303572f ? 
                     (data[2 /* no_of_characters */] <160.5f ? 
                        1.0f : 
                        0.0f) : 
                     (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.21875f ? 
                        0.11392405f : 
                        0.0f)))) : 
         (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <145.5f ? 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <179.5f ? 
                 (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.3671875f ? 
                    0.0f : 
                     (data[6 /* 5_letter_word */] <0.5847168f ? 
                        2.0004001E-4f : 
                        0.0f)) : 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <590.0f ? 
                    1.0f : 
                    0.0f)) : 
             (Double.isNaN(data[14]) || data[14 /* 13_letter_word */] <0.03125f ? 
                 (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.4765625f ? 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <178.5f ? 
                        9.2704184E-5f : 
                        0.14634146f) : 
                     (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <1.5f ? 
                        0.19360903f : 
                        0.0f)) : 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <106.0f ? 
                    0.0f : 
                    1.0f))));
    return pred;
  } // constant pool size = 78B, number of visited nodes = 19, static init size = 0B
}

class log_drf_1_Tree_47_class_3 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.3227539f ? 
         (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.23535156f ? 
             (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                0.0f : 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.04296875f ? 
                     (Double.isNaN(data[4]) || data[4 /* no_of_macs */] <0.5f ? 
                        0.0012204052f : 
                        0.0f) : 
                    0.0f)) : 
             (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.072265625f ? 
                 (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.4609375f ? 
                    0.0f : 
                     (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.125f ? 
                        0.19864559f : 
                        0.0f)) : 
                0.0f)) : 
         (data[2 /* no_of_characters */] <140.5f ? 
            0.0f : 
             (data[0 /* vlan */] <29.5f ? 
                 (data[5 /* 4_letter_word */] <0.3671875f ? 
                     (data[5 /* 4_letter_word */] <0.15490723f ? 
                        0.60181f : 
                        0.0f) : 
                     (data[0 /* vlan */] <25.5f ? 
                        0.0f : 
                        1.0f)) : 
                0.0f)));
    return pred;
  } // constant pool size = 54B, number of visited nodes = 13, static init size = 0B
}

class log_drf_1_Tree_47_class_4 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.3227539f ? 
         (data[0 /* vlan */] <27.5f ? 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <24.5f ? 
                0.0f : 
                 (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.44921875f ? 
                     (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.1015625f ? 
                        0.03984064f : 
                        0.0f) : 
                    0.33333334f)) : 
            0.0f) : 
         (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.29101562f ? 
            0.0f : 
             (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.16796875f ? 
                0.0f : 
                1.0f)));
    return pred;
  } // constant pool size = 30B, number of visited nodes = 7, static init size = 0B
}

class log_drf_1_Tree_47_class_5 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.087402344f ? 
         (data[0 /* vlan */] <83.5f ? 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <64.5f ? 
                0.0f : 
                1.0f) : 
            0.0f) : 
         (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <205.5f ? 
             (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.26757812f ? 
                 (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.15625f ? 
                     (data[3 /* no_of_ips */] <0.5f ? 
                        9.449244E-4f : 
                        0.0f) : 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.45117188f ? 
                        0.001117943f : 
                        0.33333334f)) : 
                0.0f) : 
             (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.08984375f ? 
                 (data[3 /* no_of_ips */] <0.5f ? 
                     (data[6 /* 5_letter_word */] <0.11592102f ? 
                        0.33333334f : 
                        0.0012650221f) : 
                    0.0f) : 
                 (data[6 /* 5_letter_word */] <0.09453201f ? 
                     (data[2 /* no_of_characters */] <331.5f ? 
                        1.0f : 
                        0.0f) : 
                     (data[3 /* no_of_ips */] <0.5f ? 
                        0.025943397f : 
                        0.0f)))));
    return pred;
  } // constant pool size = 58B, number of visited nodes = 14, static init size = 0B
}

class log_drf_1_Tree_47_class_6 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
         (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.16015625f ? 
             (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.025024414f ? 
                 (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.30859375f ? 
                     (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
                        0.0f : 
                        0.0029396634f) : 
                     (data[2 /* no_of_characters */] <80.5f ? 
                        0.939759f : 
                        0.006162465f)) : 
                0.0f) : 
             (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.16210938f ? 
                 (data[2 /* no_of_characters */] <100.5f ? 
                     (data[7 /* 6_letter_word */] <0.41604614f ? 
                        0.2783505f : 
                        0.020618556f) : 
                    0.0f) : 
                 (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.22265625f ? 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.1796875f ? 
                        0.032061912f : 
                        0.0f) : 
                    0.112068966f))) : 
        0.0f);
    return pred;
  } // constant pool size = 46B, number of visited nodes = 11, static init size = 0B
}

class log_drf_1_Tree_47_class_7 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <1.5f ? 
         (Double.isNaN(data[0]) || data[0 /* vlan */] <185.5f ? 
            0.0f : 
             (data[0 /* vlan */] <593.0f ? 
                1.0f : 
                0.0f)) : 
         (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <163.5f ? 
            0.0f : 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <183.5f ? 
                0.0f : 
                1.0f)));
    return pred;
  } // constant pool size = 22B, number of visited nodes = 5, static init size = 0B
}

class log_drf_1_Tree_47_class_8 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <2.5f ? 
         (Double.isNaN(data[0]) || data[0 /* vlan */] <177.5f ? 
            0.0f : 
             (data[0 /* vlan */] <181.5f ? 
                 (data[0 /* vlan */] <180.5f ? 
                    0.0f : 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.171875f ? 
                        0.24561404f : 
                        1.0f)) : 
                0.0f)) : 
         (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <736.5f ? 
            0.0f : 
             (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.46289062f ? 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <993.5f ? 
                    1.0f : 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.3507843f ? 
                        0.027027028f : 
                        1.0f)) : 
                 (data[6 /* 5_letter_word */] <0.5824814f ? 
                    0.121212125f : 
                    0.0f))));
    return pred;
  } // constant pool size = 42B, number of visited nodes = 10, static init size = 0B
}

class log_drf_1_Tree_47_class_9 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <2.5f ? 
         (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.19140625f ? 
             (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <1.5f ? 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.16015625f ? 
                     (data[1 /* type_of_time */] <3.5f ? 
                        0.008474576f : 
                        0.0f) : 
                     (data[7 /* 6_letter_word */] <0.17327881f ? 
                        0.0030425964f : 
                        0.0f)) : 
                 (data[1 /* type_of_time */] <3.5f ? 
                     (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.125f ? 
                        0.7777778f : 
                        0.0f) : 
                    0.0f)) : 
             (data[8 /* 7_letter_word */] <0.056640625f ? 
                 (data[10 /* 9_letter_word */] <0.22615051f ? 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.5f ? 
                        0.0f : 
                        0.6451613f) : 
                    0.0f) : 
                0.0f)) : 
         (data[1 /* type_of_time */] <3.5f ? 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <173.5f ? 
                1.0f : 
                0.0f) : 
            0.0f));
    return pred;
  } // constant pool size = 54B, number of visited nodes = 13, static init size = 0B
}

class log_drf_1_Tree_47_class_10 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
        7.4042264E-6f : 
         (data[2 /* no_of_characters */] <93.5f ? 
             (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.58203125f ? 
                0.0f : 
                0.6f) : 
            0.0f));
    return pred;
  } // constant pool size = 14B, number of visited nodes = 3, static init size = 0B
}

class log_drf_1_Tree_47_class_11 {
  static final double score0(double[] data) {
    double pred =     5.0E-6f;
    return pred;
  } // constant pool size = 2B, number of visited nodes = 0, static init size = 0B
}

class log_drf_1_Tree_47_class_12 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
        0.0f : 
         (Double.isNaN(data[0]) || data[0 /* vlan */] <593.5f ? 
            0.0f : 
             (data[2 /* no_of_characters */] <243.0f ? 
                0.0f : 
                0.9714286f)));
    return pred;
  } // constant pool size = 14B, number of visited nodes = 3, static init size = 0B
}

class log_drf_1_Tree_47_class_13 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
         (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.025390625f ? 
             (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
                0.0f : 
                 (data[2 /* no_of_characters */] <40.5f ? 
                     (data[0 /* vlan */] <17.5f ? 
                        0.0f : 
                        0.9507042f) : 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.1796875f ? 
                        1.3655606E-4f : 
                        0.014366653f))) : 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <181.5f ? 
                0.0f : 
                 (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.1015625f ? 
                     (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.171875f ? 
                        0.010869565f : 
                        0.0f) : 
                    0.0f))) : 
         (data[2 /* no_of_characters */] <44.5f ? 
            1.0f : 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <592.5f ? 
                0.0f : 
                0.055555556f)));
    return pred;
  } // constant pool size = 46B, number of visited nodes = 11, static init size = 0B
}

class log_drf_1_Tree_47_class_14 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.20703125f ? 
         (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.19140625f ? 
             (data[1 /* type_of_time */] <2.5f ? 
                 (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.13343811f ? 
                    0.0f : 
                     (data[9 /* 8_letter_word */] <0.0859375f ? 
                        0.5f : 
                        0.0f)) : 
                0.0f) : 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <24.5f ? 
                0.0f : 
                 (data[0 /* vlan */] <32.5f ? 
                     (data[1 /* type_of_time */] <3.5f ? 
                        0.9f : 
                        0.0f) : 
                    0.0f))) : 
        0.0f);
    return pred;
  } // constant pool size = 34B, number of visited nodes = 8, static init size = 0B
}

class log_drf_1_Tree_47_class_15 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <1.5f ? 
         (data[0 /* vlan */] <141.5f ? 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <136.5f ? 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.0859375f ? 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.4609375f ? 
                        0.0f : 
                        0.0018461539f) : 
                     (data[8 /* 7_letter_word */] <0.20019531f ? 
                        0.04194471f : 
                        0.0014413837f)) : 
                 (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.125f ? 
                     (data[0 /* vlan */] <140.0f ? 
                        0.6666667f : 
                        0.18090452f) : 
                    1.0f)) : 
            0.0f) : 
         (data[2 /* no_of_characters */] <100.5f ? 
             (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.25f ? 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <98.5f ? 
                    0.0f : 
                     (Double.isNaN(data[4]) || data[4 /* no_of_macs */] <0.5f ? 
                        0.33858922f : 
                        0.0f)) : 
                0.0f) : 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <85.5f ? 
                0.0f : 
                 (data[6 /* 5_letter_word */] <0.05078125f ? 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <202.5f ? 
                        0.0f : 
                        0.8181818f) : 
                     (data[3 /* no_of_ips */] <2.5f ? 
                        0.0054347827f : 
                        0.0f)))));
    return pred;
  } // constant pool size = 66B, number of visited nodes = 16, static init size = 0B
}

class log_drf_1_Tree_47_class_16 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
         (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.3095703f ? 
             (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.16015625f ? 
                 (data[0 /* vlan */] <33.5f ? 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.46875f ? 
                        0.0f : 
                        0.0012658228f) : 
                    0.0f) : 
                 (data[2 /* no_of_characters */] <100.5f ? 
                     (data[7 /* 6_letter_word */] <0.18640137f ? 
                        1.0f : 
                        0.0013140604f) : 
                     (data[7 /* 6_letter_word */] <0.17327881f ? 
                        0.0037453184f : 
                        8.2021E-5f))) : 
             (data[1 /* type_of_time */] <4.5f ? 
                0.0f : 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.25f ? 
                     (data[11 /* 10_letter_word */] <0.421875f ? 
                        0.010471204f : 
                        0.0f) : 
                    0.5f))) : 
        0.0f);
    return pred;
  } // constant pool size = 46B, number of visited nodes = 11, static init size = 0B
}

class log_drf_1_Tree_47_class_17 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <3.5f ? 
         (Double.isNaN(data[0]) || data[0 /* vlan */] <177.5f ? 
             (data[0 /* vlan */] <14.5f ? 
                 (data[9 /* 8_letter_word */] <0.0703125f ? 
                     (Double.isNaN(data[14]) || data[14 /* 13_letter_word */] <0.03125f ? 
                        3.529827E-4f : 
                        1.0f) : 
                    0.0f) : 
                0.0f) : 
             (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.060546875f ? 
                 (data[5 /* 4_letter_word */] <0.1015625f ? 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <589.0f ? 
                        0.27004218f : 
                        0.0f) : 
                    0.0f) : 
                0.0f)) : 
         (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <992.5f ? 
            0.0f : 
             (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <4.5f ? 
                 (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.58203125f ? 
                     (data[6 /* 5_letter_word */] <0.171875f ? 
                        0.75f : 
                        1.0f) : 
                    0.8f) : 
                0.0f)));
    return pred;
  } // constant pool size = 50B, number of visited nodes = 12, static init size = 0B
}

class log_drf_1_Tree_47_class_18 {
  static final double score0(double[] data) {
    double pred =     5.0E-6f;
    return pred;
  } // constant pool size = 2B, number of visited nodes = 0, static init size = 0B
}

class log_drf_1_Tree_47_class_19 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
        0.0f : 
         (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.22460938f ? 
             (data[2 /* no_of_characters */] <140.5f ? 
                 (data[0 /* vlan */] <18.5f ? 
                    1.0f : 
                    0.0f) : 
                0.0f) : 
             (data[0 /* vlan */] <16.5f ? 
                 (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.2912445f ? 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <320.0f ? 
                        1.0f : 
                        0.0f) : 
                    0.0f) : 
                0.0f)));
    return pred;
  } // constant pool size = 30B, number of visited nodes = 7, static init size = 0B
}

class log_drf_1_Tree_47_class_20 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
         (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.44921875f ? 
             (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
                0.0f : 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <150.5f ? 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.8671875f ? 
                        0.81717527f : 
                        0.54260087f) : 
                     (Double.isNaN(data[15]) || data[15 /* 14_letter_word */] <0.15625f ? 
                        0.32507545f : 
                        0.989011f))) : 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <31.5f ? 
                1.0f : 
                0.0f)) : 
         (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.10546875f ? 
             (data[0 /* vlan */] <25.5f ? 
                 (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.74609375f ? 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <17.0f ? 
                        0.0f : 
                        1.0f) : 
                     (data[0 /* vlan */] <16.5f ? 
                        0.0f : 
                        1.0f)) : 
                0.0f) : 
             (data[10 /* 9_letter_word */] <0.416008f ? 
                 (data[8 /* 7_letter_word */] <0.265625f ? 
                     (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.0625f ? 
                        0.004219409f : 
                        0.8181818f) : 
                     (data[3 /* no_of_ips */] <1.5f ? 
                        1.0f : 
                        0.92557806f)) : 
                0.0f)));
    return pred;
  } // constant pool size = 66B, number of visited nodes = 16, static init size = 0B
}

class log_drf_1_Tree_47_class_21 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.1484375f ? 
         (data[0 /* vlan */] <11.5f ? 
             (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                0.0f : 
                0.30232558f) : 
             (Double.isNaN(data[12]) || data[12 /* 11_letter_word */] <0.22460938f ? 
                 (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.11016846f ? 
                     (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.15625f ? 
                        0.0019188947f : 
                        0.012336976f) : 
                     (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.0859375f ? 
                        0.0045351475f : 
                        0.23076923f)) : 
                 (data[1 /* type_of_time */] <3.5f ? 
                    1.0f : 
                    0.0f))) : 
         (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <252.5f ? 
             (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.072265625f ? 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.309375f ? 
                    2.0384035E-4f : 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.3668701f ? 
                        8.3594566E-4f : 
                        0.0f)) : 
                0.0f) : 
             (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.44921875f ? 
                 (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.421875f ? 
                     (data[2 /* no_of_characters */] <268.5f ? 
                        0.004149378f : 
                        0.0f) : 
                     (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <1.5f ? 
                        0.0048076925f : 
                        0.0f)) : 
                 (data[14 /* 13_letter_word */] <0.125f ? 
                     (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
                        0.022900764f : 
                        0.0f) : 
                    0.0f))));
    return pred;
  } // constant pool size = 74B, number of visited nodes = 18, static init size = 0B
}

class log_drf_1_Tree_47_class_22 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.3227539f ? 
         (data[0 /* vlan */] <5.5f ? 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <4.5f ? 
                0.0f : 
                0.15384616f) : 
            0.0f) : 
         (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <227.5f ? 
            0.0f : 
             (data[0 /* vlan */] <25.5f ? 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <18.0f ? 
                    0.0f : 
                     (data[6 /* 5_letter_word */] <0.34895834f ? 
                        0.1f : 
                        0.0f)) : 
                0.0f)));
    return pred;
  } // constant pool size = 30B, number of visited nodes = 7, static init size = 0B
}

class log_drf_1_Tree_47_class_23 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.1484375f ? 
         (data[0 /* vlan */] <17.5f ? 
             (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                 (data[1 /* type_of_time */] <4.5f ? 
                    0.0f : 
                     (data[9 /* 8_letter_word */] <0.1328125f ? 
                        0.02955665f : 
                        0.98490685f)) : 
                 (data[5 /* 4_letter_word */] <0.1015625f ? 
                     (data[14 /* 13_letter_word */] <0.071428575f ? 
                        0.5769231f : 
                        0.0f) : 
                    0.0f)) : 
            0.0f) : 
         (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <222.5f ? 
             (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.046875f ? 
                 (data[6 /* 5_letter_word */] <0.26818848f ? 
                     (data[5 /* 4_letter_word */] <0.087890625f ? 
                        0.008488964f : 
                        3.4590106E-4f) : 
                     (data[0 /* vlan */] <17.5f ? 
                        0.0013315579f : 
                        0.0f)) : 
                0.0f) : 
             (data[0 /* vlan */] <13.5f ? 
                1.0f : 
                 (data[3 /* no_of_ips */] <1.5f ? 
                     (data[8 /* 7_letter_word */] <0.03125f ? 
                        0.00729927f : 
                        0.0f) : 
                    0.0f))));
    return pred;
  } // constant pool size = 62B, number of visited nodes = 15, static init size = 0B
}

class log_drf_1_Tree_47_class_24 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.9746094f ? 
        0.0f : 
         (data[0 /* vlan */] <12.5f ? 
            1.0f : 
            0.0f));
    return pred;
  } // constant pool size = 10B, number of visited nodes = 2, static init size = 0B
}

class log_drf_1_Tree_47_class_25 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <1.5f ? 
         (data[0 /* vlan */] <40.5f ? 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <29.5f ? 
                 (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.234375f ? 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.03125f ? 
                        8.697543E-4f : 
                        1.15780946E-4f) : 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.0859375f ? 
                        0.023356402f : 
                        0.0f)) : 
                 (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.10546875f ? 
                     (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.0625f ? 
                        0.98609734f : 
                        0.47826087f) : 
                     (data[7 /* 6_letter_word */] <0.15625f ? 
                        0.76623374f : 
                        0.9767442f))) : 
             (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.05078125f ? 
                0.0f : 
                 (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                    0.0f : 
                     (Double.isNaN(data[13]) || data[13 /* 12_letter_word */] <0.03125f ? 
                        0.01f : 
                        0.0f)))) : 
         (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <190.5f ? 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <85.5f ? 
                 (data[0 /* vlan */] <24.5f ? 
                    0.0f : 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.828125f ? 
                        0.99982256f : 
                        0.9040677f)) : 
                 (data[5 /* 4_letter_word */] <0.1015625f ? 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.6640625f ? 
                        0.0f : 
                        1.0f) : 
                    0.0f)) : 
             (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.22460938f ? 
                 (Double.isNaN(data[4]) || data[4 /* no_of_macs */] <0.5f ? 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <24.0f ? 
                        0.0f : 
                        0.22249094f) : 
                     (data[8 /* 7_letter_word */] <0.7421875f ? 
                        0.6666667f : 
                        1.0f)) : 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <98.0f ? 
                     (data[0 /* vlan */] <22.0f ? 
                        0.0f : 
                        1.0f) : 
                    0.0f))));
    return pred;
  } // constant pool size = 98B, number of visited nodes = 24, static init size = 0B
}

class log_drf_1_Tree_47_class_26 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.027832031f ? 
         (data[0 /* vlan */] <29.5f ? 
             (data[2 /* no_of_characters */] <63.0f ? 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.6640625f ? 
                     (data[2 /* no_of_characters */] <54.5f ? 
                        0.0f : 
                        0.9951691f) : 
                    0.0f) : 
                0.0f) : 
            0.0f) : 
        0.0f);
    return pred;
  } // constant pool size = 22B, number of visited nodes = 5, static init size = 0B
}

class log_drf_1_Tree_47_class_27 {
  static final double score0(double[] data) {
    double pred =     1.0E-5f;
    return pred;
  } // constant pool size = 2B, number of visited nodes = 0, static init size = 0B
}

class log_drf_1_Tree_47_class_28 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <5.5f ? 
         (data[0 /* vlan */] <17.5f ? 
             (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <3.0f ? 
                0.0f : 
                1.0f) : 
            0.0f) : 
         (data[2 /* no_of_characters */] <351.5f ? 
            0.0f : 
            1.0f));
    return pred;
  } // constant pool size = 18B, number of visited nodes = 4, static init size = 0B
}

class log_drf_1_Tree_47_class_29 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.11621094f ? 
         (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.18359375f ? 
            0.0f : 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <108.5f ? 
                0.0f : 
                 (data[7 /* 6_letter_word */] <0.1015625f ? 
                     (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.07421875f ? 
                        0.004854369f : 
                        0.0f) : 
                    0.0f))) : 
         (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <954.0f ? 
             (Double.isNaN(data[12]) || data[12 /* 11_letter_word */] <0.025390625f ? 
                0.0f : 
                 (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.013671875f ? 
                     (data[8 /* 7_letter_word */] <0.075f ? 
                        0.071428575f : 
                        0.0f) : 
                    0.0f)) : 
             (data[0 /* vlan */] <137.5f ? 
                 (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.37890625f ? 
                    0.0f : 
                     (data[11 /* 10_letter_word */] <0.0390625f ? 
                        0.5f : 
                        1.0f)) : 
                0.0f)));
    return pred;
  } // constant pool size = 50B, number of visited nodes = 12, static init size = 0B
}

class log_drf_1_Tree_47_class_30 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <2.5f ? 
         (Double.isNaN(data[0]) || data[0 /* vlan */] <177.5f ? 
            0.0f : 
             (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <1.5f ? 
                0.0f : 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.125f ? 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <200.5f ? 
                        0.0f : 
                        0.30769232f) : 
                    1.0f))) : 
         (data[1 /* type_of_time */] <2.0f ? 
            1.0f : 
            0.0f));
    return pred;
  } // constant pool size = 26B, number of visited nodes = 6, static init size = 0B
}

class log_drf_1_Tree_47_class_31 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.1484375f ? 
         (data[0 /* vlan */] <99.5f ? 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <83.5f ? 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.19140625f ? 
                     (Double.isNaN(data[13]) || data[13 /* 12_letter_word */] <0.21875f ? 
                        4.3081783E-4f : 
                        0.06666667f) : 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <60.0f ? 
                        0.0014284013f : 
                        1.0f)) : 
                 (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.125f ? 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <86.5f ? 
                        0.9773333f : 
                        0.5f) : 
                     (Double.isNaN(data[12]) || data[12 /* 11_letter_word */] <0.125f ? 
                        1.0f : 
                        0.0f))) : 
            0.0f) : 
         (data[2 /* no_of_characters */] <113.5f ? 
             (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.29101562f ? 
                 (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.2890625f ? 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.12504578f ? 
                        2.9735354E-4f : 
                        0.0f) : 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <109.5f ? 
                        0.0f : 
                        0.2631579f)) : 
                 (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.16796875f ? 
                     (data[7 /* 6_letter_word */] <0.0859375f ? 
                        0.0f : 
                        0.92727274f) : 
                    0.0f)) : 
             (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.21679688f ? 
                0.0f : 
                 (data[8 /* 7_letter_word */] <0.23730011f ? 
                     (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.05859375f ? 
                        0.0f : 
                        1.0f) : 
                     (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
                        0.0f : 
                        9.718173E-4f)))));
    return pred;
  } // constant pool size = 82B, number of visited nodes = 20, static init size = 0B
}

class log_drf_1_Tree_47_class_32 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
         (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.4716797f ? 
             (Double.isNaN(data[13]) || data[13 /* 12_letter_word */] <0.29101562f ? 
                0.0f : 
                 (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
                    0.0f : 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.16666667f ? 
                        0.4f : 
                        0.0f))) : 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <25.5f ? 
                0.0f : 
                 (data[2 /* no_of_characters */] <130.5f ? 
                     (data[0 /* vlan */] <57.5f ? 
                        0.4528302f : 
                        0.0f) : 
                    0.0f))) : 
         (data[2 /* no_of_characters */] <88.5f ? 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <87.5f ? 
                0.0f : 
                 (data[8 /* 7_letter_word */] <0.25f ? 
                    0.0f : 
                    1.0f)) : 
             (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.22460938f ? 
                 (data[3 /* no_of_ips */] <1.5f ? 
                     (data[5 /* 4_letter_word */] <0.21875f ? 
                        0.0070856437f : 
                        0.0f) : 
                    0.0f) : 
                 (data[5 /* 4_letter_word */] <0.22265625f ? 
                    0.0f : 
                     (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.125f ? 
                        0.0f : 
                        0.06693989f)))));
    return pred;
  } // constant pool size = 66B, number of visited nodes = 16, static init size = 0B
}

class log_drf_1_Tree_47_class_33 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.1743164f ? 
         (data[0 /* vlan */] <3.5f ? 
            1.0f : 
             (data[0 /* vlan */] <18.0f ? 
                 (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.18359375f ? 
                     (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                        0.0087264795f : 
                        0.19417475f) : 
                    0.0f) : 
                 (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.703125f ? 
                        3.0661913E-4f : 
                        0.00792393f) : 
                    0.0f))) : 
         (data[2 /* no_of_characters */] <100.5f ? 
             (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.16796875f ? 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <89.0f ? 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.2890625f ? 
                        0.0f : 
                        0.14285715f) : 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.1015625f ? 
                        0.07070707f : 
                        0.0f)) : 
                0.0f) : 
             (data[0 /* vlan */] <9.5f ? 
                1.0f : 
                 (data[1 /* type_of_time */] <4.5f ? 
                    0.0f : 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.114583336f ? 
                        9.044453E-5f : 
                        0.0063377093f)))));
    return pred;
  } // constant pool size = 62B, number of visited nodes = 15, static init size = 0B
}

class log_drf_1_Tree_47_class_34 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.12158203f ? 
        0.0f : 
        2.4234492E-5f);
    return pred;
  } // constant pool size = 6B, number of visited nodes = 1, static init size = 0B
}

class log_drf_1_Tree_47_class_35 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <2.5f ? 
         (data[0 /* vlan */] <13.5f ? 
             (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.21484375f ? 
                0.0f : 
                 (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.25f ? 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <11.5f ? 
                        0.0f : 
                        1.0f) : 
                    1.0f)) : 
             (data[0 /* vlan */] <17.5f ? 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.74609375f ? 
                     (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                        4.6482802E-4f : 
                        0.0038560412f) : 
                    0.125f) : 
                0.0f)) : 
        0.0f);
    return pred;
  } // constant pool size = 34B, number of visited nodes = 8, static init size = 0B
}

class log_drf_1_Tree_47_class_36 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.027832031f ? 
         (data[0 /* vlan */] <5.5f ? 
             (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.083984375f ? 
                0.0f : 
                0.84615386f) : 
            0.0f) : 
        0.0f);
    return pred;
  } // constant pool size = 14B, number of visited nodes = 3, static init size = 0B
}

class log_drf_1_Tree_47_class_37 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
         (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.10546875f ? 
             (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
                 (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.0625f ? 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <260.5f ? 
                        0.99840415f : 
                        0.9871134f) : 
                    0.9995503f) : 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.04296875f ? 
                     (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.015625f ? 
                        0.007392607f : 
                        0.0f) : 
                    0.0f)) : 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <151.5f ? 
                 (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.15625f ? 
                     (data[0 /* vlan */] <13.5f ? 
                        0.26666668f : 
                        0.0060036946f) : 
                     (Double.isNaN(data[13]) || data[13 /* 12_letter_word */] <0.015625f ? 
                        0.16167277f : 
                        0.0f)) : 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <176.0f ? 
                     (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.078125f ? 
                        0.9966605f : 
                        1.0f) : 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <629.5f ? 
                        0.99382716f : 
                        0.0f)))) : 
         (data[1 /* type_of_time */] <4.5f ? 
             (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <2.5f ? 
                 (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.22265625f ? 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.1015625f ? 
                        0.99835134f : 
                        1.0f) : 
                     (data[0 /* vlan */] <165.5f ? 
                        0.012987013f : 
                        0.54022986f)) : 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <165.0f ? 
                    0.0f : 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.0625f ? 
                        0.0f : 
                        0.009803922f))) : 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <152.5f ? 
                0.0f : 
                 (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.4765625f ? 
                    0.0f : 
                     (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <3.5f ? 
                        8.628128E-4f : 
                        0.0f)))));
    return pred;
  } // constant pool size = 98B, number of visited nodes = 24, static init size = 0B
}

class log_drf_1_Tree_47_class_38 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.027832031f ? 
         (data[0 /* vlan */] <99.5f ? 
             (data[2 /* no_of_characters */] <95.5f ? 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.125f ? 
                     (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                        2.2799817E-4f : 
                        8.9405454E-4f) : 
                    0.0f) : 
                0.0f) : 
            0.0f) : 
        0.0f);
    return pred;
  } // constant pool size = 22B, number of visited nodes = 5, static init size = 0B
}


class log_drf_1_Forest_48 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += log_drf_1_Tree_48_class_0.score0(fdata);
    preds[2] += log_drf_1_Tree_48_class_1.score0(fdata);
    preds[3] += log_drf_1_Tree_48_class_2.score0(fdata);
    preds[4] += log_drf_1_Tree_48_class_3.score0(fdata);
    preds[5] += log_drf_1_Tree_48_class_4.score0(fdata);
    preds[6] += log_drf_1_Tree_48_class_5.score0(fdata);
    preds[7] += log_drf_1_Tree_48_class_6.score0(fdata);
    preds[8] += log_drf_1_Tree_48_class_7.score0(fdata);
    preds[9] += log_drf_1_Tree_48_class_8.score0(fdata);
    preds[10] += log_drf_1_Tree_48_class_9.score0(fdata);
    preds[11] += log_drf_1_Tree_48_class_10.score0(fdata);
    preds[12] += log_drf_1_Tree_48_class_11.score0(fdata);
    preds[13] += log_drf_1_Tree_48_class_12.score0(fdata);
    preds[14] += log_drf_1_Tree_48_class_13.score0(fdata);
    preds[15] += log_drf_1_Tree_48_class_14.score0(fdata);
    preds[16] += log_drf_1_Tree_48_class_15.score0(fdata);
    preds[17] += log_drf_1_Tree_48_class_16.score0(fdata);
    preds[18] += log_drf_1_Tree_48_class_17.score0(fdata);
    preds[19] += log_drf_1_Tree_48_class_18.score0(fdata);
    preds[20] += log_drf_1_Tree_48_class_19.score0(fdata);
    preds[21] += log_drf_1_Tree_48_class_20.score0(fdata);
    preds[22] += log_drf_1_Tree_48_class_21.score0(fdata);
    preds[23] += log_drf_1_Tree_48_class_22.score0(fdata);
    preds[24] += log_drf_1_Tree_48_class_23.score0(fdata);
    preds[25] += log_drf_1_Tree_48_class_24.score0(fdata);
    preds[26] += log_drf_1_Tree_48_class_25.score0(fdata);
    preds[27] += log_drf_1_Tree_48_class_26.score0(fdata);
    preds[28] += log_drf_1_Tree_48_class_27.score0(fdata);
    preds[29] += log_drf_1_Tree_48_class_28.score0(fdata);
    preds[30] += log_drf_1_Tree_48_class_29.score0(fdata);
    preds[31] += log_drf_1_Tree_48_class_30.score0(fdata);
    preds[32] += log_drf_1_Tree_48_class_31.score0(fdata);
    preds[33] += log_drf_1_Tree_48_class_32.score0(fdata);
    preds[34] += log_drf_1_Tree_48_class_33.score0(fdata);
    preds[35] += log_drf_1_Tree_48_class_34.score0(fdata);
    preds[36] += log_drf_1_Tree_48_class_35.score0(fdata);
    preds[37] += log_drf_1_Tree_48_class_36.score0(fdata);
    preds[38] += log_drf_1_Tree_48_class_37.score0(fdata);
    preds[39] += log_drf_1_Tree_48_class_38.score0(fdata);
  }
}
class log_drf_1_Tree_48_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[4]) || data[4 /* no_of_macs */] <2.5f ? 
         (Double.isNaN(data[12]) || data[12 /* 11_letter_word */] <0.009765625f ? 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <1053.5f ? 
                 (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.01171875f ? 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <198.5f ? 
                        0.0f : 
                        1.8503955E-4f) : 
                     (data[10 /* 9_letter_word */] <0.07348633f ? 
                        0.6363636f : 
                        0.0f)) : 
                1.0f) : 
             (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.03125f ? 
                0.0f : 
                 (Double.isNaN(data[14]) || data[14 /* 13_letter_word */] <0.015625f ? 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <1008.5f ? 
                        0.0f : 
                        1.0f) : 
                     (data[5 /* 4_letter_word */] <0.2734375f ? 
                        0.5f : 
                        1.0f)))) : 
         (data[0 /* vlan */] <71.5f ? 
            0.0f : 
            1.0f));
    return pred;
  } // constant pool size = 46B, number of visited nodes = 11, static init size = 0B
}

class log_drf_1_Tree_48_class_1 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.0087890625f ? 
         (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.32226562f ? 
             (data[0 /* vlan */] <149.5f ? 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <142.0f ? 
                    0.0f : 
                    1.0f) : 
                0.0f) : 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <260.5f ? 
                 (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.19140625f ? 
                    0.0f : 
                     (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                        0.0f : 
                        4.977601E-4f)) : 
                 (data[1 /* type_of_time */] <3.5f ? 
                     (data[0 /* vlan */] <81.5f ? 
                        0.0f : 
                        1.0f) : 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.28125f ? 
                        0.0f : 
                        0.25f)))) : 
        0.0f);
    return pred;
  } // constant pool size = 42B, number of visited nodes = 10, static init size = 0B
}

class log_drf_1_Tree_48_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.06640625f ? 
         (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.4638672f ? 
             (data[2 /* no_of_characters */] <150.5f ? 
                 (data[1 /* type_of_time */] <4.5f ? 
                    0.0f : 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <113.5f ? 
                        0.0f : 
                        0.29405287f)) : 
                 (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
                    0.0f : 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <129.5f ? 
                        0.0f : 
                        0.011156186f))) : 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <181.5f ? 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <137.0f ? 
                    0.0f : 
                     (data[0 /* vlan */] <152.5f ? 
                        0.310559f : 
                        0.0f)) : 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <160.5f ? 
                     (data[2 /* no_of_characters */] <139.5f ? 
                        0.0f : 
                        0.99391174f) : 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.4140625f ? 
                        0.036363635f : 
                        1.0f)))) : 
         (Double.isNaN(data[0]) || data[0 /* vlan */] <181.5f ? 
            0.0f : 
             (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                0.0f : 
                1.0f)));
    return pred;
  } // constant pool size = 62B, number of visited nodes = 15, static init size = 0B
}

class log_drf_1_Tree_48_class_3 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.0087890625f ? 
         (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.38671875f ? 
             (data[0 /* vlan */] <29.5f ? 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <28.5f ? 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.21875f ? 
                        0.0f : 
                        1.5451174E-4f) : 
                     (data[2 /* no_of_characters */] <200.5f ? 
                        0.0f : 
                        1.0f)) : 
                 (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
                     (data[2 /* no_of_characters */] <120.5f ? 
                        0.0013317796f : 
                        0.0f) : 
                    0.0f)) : 
             (data[2 /* no_of_characters */] <160.5f ? 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.05859375f ? 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <33.5f ? 
                        0.26576647f : 
                        8.1103E-4f) : 
                    0.0f) : 
                 (data[2 /* no_of_characters */] <167.5f ? 
                     (data[5 /* 4_letter_word */] <0.4515625f ? 
                        0.5f : 
                        7.163324E-4f) : 
                    0.0f))) : 
        0.0f);
    return pred;
  } // constant pool size = 54B, number of visited nodes = 13, static init size = 0B
}

class log_drf_1_Tree_48_class_4 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.0087890625f ? 
         (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.28808594f ? 
             (data[0 /* vlan */] <29.5f ? 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <26.0f ? 
                    0.0f : 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.2678299f ? 
                        0.057971016f : 
                        0.8333333f)) : 
                0.0f) : 
             (data[2 /* no_of_characters */] <120.5f ? 
                 (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.22265625f ? 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <33.5f ? 
                        2.8141268E-4f : 
                        0.0f) : 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <116.5f ? 
                        0.0f : 
                        0.009569378f)) : 
                 (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
                    0.0f : 
                     (data[5 /* 4_letter_word */] <0.48274994f ? 
                        0.0f : 
                        9.664637E-5f)))) : 
        0.0f);
    return pred;
  } // constant pool size = 46B, number of visited nodes = 11, static init size = 0B
}

class log_drf_1_Tree_48_class_5 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.0087890625f ? 
         (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.095703125f ? 
             (data[0 /* vlan */] <85.5f ? 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.15625f ? 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <34.5f ? 
                        0.0f : 
                        0.0032537961f) : 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.15625f ? 
                        0.0012080213f : 
                        0.0037593986f)) : 
                0.0f) : 
             (data[2 /* no_of_characters */] <110.5f ? 
                 (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.22265625f ? 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.21875f ? 
                        0.0f : 
                        0.0044444446f) : 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.0859375f ? 
                        0.05376344f : 
                        0.0f)) : 
                 (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.0859375f ? 
                     (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.1328125f ? 
                        1.3280213E-4f : 
                        0.0024301338f) : 
                     (data[7 /* 6_letter_word */] <0.23699951f ? 
                        0.05159705f : 
                        0.0f)))) : 
        0.0f);
    return pred;
  } // constant pool size = 54B, number of visited nodes = 13, static init size = 0B
}

class log_drf_1_Tree_48_class_6 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[4]) || data[4 /* no_of_macs */] <0.5f ? 
         (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
            0.0f : 
             (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.234375f ? 
                 (data[2 /* no_of_characters */] <70.5f ? 
                     (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                        0.07823129f : 
                        0.0f) : 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.03125f ? 
                        5.075627E-5f : 
                        0.0f)) : 
                 (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.15625f ? 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <65.5f ? 
                        3.2289312E-4f : 
                        0.026990553f) : 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.15625f ? 
                        0.060707748f : 
                        0.14749263f)))) : 
        0.0f);
    return pred;
  } // constant pool size = 38B, number of visited nodes = 9, static init size = 0B
}

class log_drf_1_Tree_48_class_7 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.0087890625f ? 
         (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.94921875f ? 
            0.0f : 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <183.5f ? 
                0.0f : 
                0.99375f)) : 
        0.0f);
    return pred;
  } // constant pool size = 14B, number of visited nodes = 3, static init size = 0B
}

class log_drf_1_Tree_48_class_8 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.0087890625f ? 
         (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.52246094f ? 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <177.5f ? 
                0.0f : 
                 (data[1 /* type_of_time */] <4.5f ? 
                    0.0f : 
                     (data[7 /* 6_letter_word */] <0.25f ? 
                        0.094444446f : 
                        0.004f))) : 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <821.5f ? 
                0.0f : 
                 (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.07421875f ? 
                     (data[3 /* no_of_ips */] <1.0f ? 
                        0.05882353f : 
                        0.9767442f) : 
                    1.0f))) : 
        0.0f);
    return pred;
  } // constant pool size = 34B, number of visited nodes = 8, static init size = 0B
}

class log_drf_1_Tree_48_class_9 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.3095703f ? 
         (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.19824219f ? 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <195.5f ? 
                 (data[1 /* type_of_time */] <3.5f ? 
                     (Double.isNaN(data[1]) || data[1 /* type_of_time */] <2.5f ? 
                        0.0f : 
                        1.0f) : 
                    0.0f) : 
                 (data[1 /* type_of_time */] <3.5f ? 
                     (data[11 /* 10_letter_word */] <0.10157776f ? 
                        0.0f : 
                        1.0f) : 
                    0.0f)) : 
             (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <2.5f ? 
                 (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.19140625f ? 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.234375f ? 
                        7.7974735E-5f : 
                        0.005910602f) : 
                     (data[2 /* no_of_characters */] <120.5f ? 
                        0.275f : 
                        0.0f)) : 
                 (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.22265625f ? 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.1826477f ? 
                        0.006245757f : 
                        0.35779816f) : 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <180.5f ? 
                        1.0f : 
                        0.0f)))) : 
         (Double.isNaN(data[0]) || data[0 /* vlan */] <165.5f ? 
            0.0f : 
             (Double.isNaN(data[1]) || data[1 /* type_of_time */] <3.5f ? 
                1.0f : 
                0.0f)));
    return pred;
  } // constant pool size = 66B, number of visited nodes = 16, static init size = 0B
}

class log_drf_1_Tree_48_class_10 {
  static final double score0(double[] data) {
    double pred =     3.5E-5f;
    return pred;
  } // constant pool size = 2B, number of visited nodes = 0, static init size = 0B
}

class log_drf_1_Tree_48_class_11 {
  static final double score0(double[] data) {
    double pred =     5.0E-6f;
    return pred;
  } // constant pool size = 2B, number of visited nodes = 0, static init size = 0B
}

class log_drf_1_Tree_48_class_12 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.0087890625f ? 
         (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.9277344f ? 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <592.5f ? 
                0.0f : 
                0.08045977f) : 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <368.0f ? 
                0.0f : 
                 (data[0 /* vlan */] <589.0f ? 
                    0.0f : 
                    1.0f))) : 
        0.0f);
    return pred;
  } // constant pool size = 22B, number of visited nodes = 5, static init size = 0B
}

class log_drf_1_Tree_48_class_13 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.0087890625f ? 
         (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.2607422f ? 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <590.5f ? 
                 (data[0 /* vlan */] <5.5f ? 
                     (data[9 /* 8_letter_word */] <0.1796875f ? 
                        0.0f : 
                        1.0f) : 
                     (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
                        0.0f : 
                        0.0016416368f)) : 
                0.734767f) : 
             (data[2 /* no_of_characters */] <85.5f ? 
                 (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.1015625f ? 
                     (data[2 /* no_of_characters */] <56.0f ? 
                        0.032258064f : 
                        0.0f) : 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.1015625f ? 
                        0.0f : 
                        1.0f)) : 
                 (data[1 /* type_of_time */] <4.5f ? 
                    0.0f : 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <589.0f ? 
                        0.0f : 
                        1.0f)))) : 
        0.0f);
    return pred;
  } // constant pool size = 50B, number of visited nodes = 12, static init size = 0B
}

class log_drf_1_Tree_48_class_14 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.19091797f ? 
         (Double.isNaN(data[12]) || data[12 /* 11_letter_word */] <0.18359375f ? 
            0.0f : 
             (data[12 /* 11_letter_word */] <0.22505188f ? 
                 (data[1 /* type_of_time */] <3.0f ? 
                    1.0f : 
                    0.0f) : 
                0.0f)) : 
         (data[11 /* 10_letter_word */] <0.21067095f ? 
             (data[1 /* type_of_time */] <2.5f ? 
                1.0f : 
                0.0f) : 
            0.0f));
    return pred;
  } // constant pool size = 26B, number of visited nodes = 6, static init size = 0B
}

class log_drf_1_Tree_48_class_15 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.3095703f ? 
         (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.94921875f ? 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <210.5f ? 
                 (Double.isNaN(data[15]) || data[15 /* 14_letter_word */] <0.10546875f ? 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.4140625f ? 
                        0.0012096507f : 
                        0.0f) : 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.2892151f ? 
                        0.08196721f : 
                        0.0f)) : 
                 (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
                    0.0f : 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <129.5f ? 
                        4.954174E-4f : 
                        0.12846069f))) : 
             (data[3 /* no_of_ips */] <1.5f ? 
                0.0f : 
                 (Double.isNaN(data[4]) || data[4 /* no_of_macs */] <0.5f ? 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <109.5f ? 
                        0.12613744f : 
                        0.0f) : 
                    0.0f))) : 
         (Double.isNaN(data[0]) || data[0 /* vlan */] <136.5f ? 
            0.0f : 
             (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
                0.0f : 
                1.0f)));
    return pred;
  } // constant pool size = 54B, number of visited nodes = 13, static init size = 0B
}

class log_drf_1_Tree_48_class_16 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.3095703f ? 
         (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.94921875f ? 
             (data[2 /* no_of_characters */] <100.5f ? 
                 (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.1015625f ? 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <65.5f ? 
                        2.3218017E-4f : 
                        0.0020242915f) : 
                    0.0f) : 
                 (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
                    0.0f : 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.6451721f ? 
                        2.3459861E-5f : 
                        2.993116E-4f))) : 
             (data[3 /* no_of_ips */] <0.5f ? 
                0.0024764736f : 
                0.0f)) : 
         (data[11 /* 10_letter_word */] <0.36688137f ? 
             (data[1 /* type_of_time */] <4.5f ? 
                0.0f : 
                 (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.58203125f ? 
                     (data[2 /* no_of_characters */] <99.5f ? 
                        0.016393442f : 
                        0.0f) : 
                    0.6666667f)) : 
            0.0f));
    return pred;
  } // constant pool size = 50B, number of visited nodes = 12, static init size = 0B
}

class log_drf_1_Tree_48_class_17 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.033203125f ? 
         (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.36914062f ? 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <177.5f ? 
                 (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.35472107f ? 
                     (Double.isNaN(data[14]) || data[14 /* 13_letter_word */] <0.0546875f ? 
                        0.0f : 
                        3.6616623E-4f) : 
                     (data[0 /* vlan */] <26.5f ? 
                        1.0f : 
                        0.0f)) : 
                 (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <3.5f ? 
                     (data[1 /* type_of_time */] <4.5f ? 
                        0.0f : 
                        0.27272728f) : 
                     (data[2 /* no_of_characters */] <1018.5f ? 
                        1.0f : 
                        0.98333335f))) : 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <991.0f ? 
                0.0f : 
                 (data[1 /* type_of_time */] <4.5f ? 
                    0.0f : 
                     (data[6 /* 5_letter_word */] <0.4296875f ? 
                        0.2f : 
                        1.0f)))) : 
        0.0f);
    return pred;
  } // constant pool size = 50B, number of visited nodes = 12, static init size = 0B
}

class log_drf_1_Tree_48_class_18 {
  static final double score0(double[] data) {
    double pred =     5.0E-6f;
    return pred;
  } // constant pool size = 2B, number of visited nodes = 0, static init size = 0B
}

class log_drf_1_Tree_48_class_19 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.23583984f ? 
         (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.19726562f ? 
            0.0f : 
             (data[2 /* no_of_characters */] <140.5f ? 
                 (data[0 /* vlan */] <17.5f ? 
                     (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                        0.0f : 
                        0.5f) : 
                    0.0f) : 
                0.0f)) : 
         (data[0 /* vlan */] <17.5f ? 
            1.0f : 
            0.0f));
    return pred;
  } // constant pool size = 26B, number of visited nodes = 6, static init size = 0B
}

class log_drf_1_Tree_48_class_20 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[4]) || data[4 /* no_of_macs */] <0.5f ? 
         (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
            0.0f : 
             (data[5 /* 4_letter_word */] <0.03125f ? 
                 (data[2 /* no_of_characters */] <130.5f ? 
                     (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <1.5f ? 
                        0.9335118f : 
                        0.0f) : 
                     (data[3 /* no_of_ips */] <1.5f ? 
                        0.3720433f : 
                        0.0f)) : 
                 (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.3671875f ? 
                     (data[0 /* vlan */] <17.5f ? 
                        0.0f : 
                        0.23145913f) : 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.21875f ? 
                        0.90383404f : 
                        0.8888889f)))) : 
        0.0f);
    return pred;
  } // constant pool size = 38B, number of visited nodes = 9, static init size = 0B
}

class log_drf_1_Tree_48_class_21 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.15478516f ? 
         (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.8027344f ? 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <220.5f ? 
                 (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.44921875f ? 
                     (data[2 /* no_of_characters */] <162.5f ? 
                        2.364371E-4f : 
                        0.0013448684f) : 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <128.5f ? 
                        0.006162189f : 
                        0.0f)) : 
                 (data[0 /* vlan */] <33.5f ? 
                     (data[7 /* 6_letter_word */] <0.043899536f ? 
                        0.002224694f : 
                        0.0f) : 
                     (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.13422775f ? 
                        0.006430868f : 
                        0.115384616f))) : 
             (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.072265625f ? 
                 (data[1 /* type_of_time */] <4.5f ? 
                    0.0f : 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <270.5f ? 
                        0.0f : 
                        0.01724138f)) : 
                0.30555555f)) : 
         (Double.isNaN(data[0]) || data[0 /* vlan */] <34.5f ? 
             (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.1015625f ? 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <170.5f ? 
                    0.0f : 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.546875f ? 
                        0.0f : 
                        1.0f)) : 
                 (data[10 /* 9_letter_word */] <0.13868205f ? 
                    1.0f : 
                    0.0f)) : 
             (data[1 /* type_of_time */] <3.5f ? 
                 (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.125f ? 
                    0.0f : 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.125f ? 
                        1.0f : 
                        0.0f)) : 
                 (data[0 /* vlan */] <39.0f ? 
                     (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.21223958f ? 
                        1.0f : 
                        0.0f) : 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.4453125f ? 
                        0.0f : 
                        0.004761905f)))));
    return pred;
  } // constant pool size = 94B, number of visited nodes = 23, static init size = 0B
}

class log_drf_1_Tree_48_class_22 {
  static final double score0(double[] data) {
    double pred =     4.0E-5f;
    return pred;
  } // constant pool size = 2B, number of visited nodes = 0, static init size = 0B
}

class log_drf_1_Tree_48_class_23 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.13378906f ? 
         (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.13378906f ? 
             (data[2 /* no_of_characters */] <155.5f ? 
                 (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.58203125f ? 
                     (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.1015625f ? 
                        1.7208002E-4f : 
                        0.0f) : 
                     (data[2 /* no_of_characters */] <134.5f ? 
                        0.0f : 
                        0.9894383f)) : 
                 (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
                    0.0f : 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <237.5f ? 
                        0.005351496f : 
                        0.039156627f))) : 
             (data[0 /* vlan */] <13.5f ? 
                 (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.17578125f ? 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <10.0f ? 
                        0.0f : 
                        0.125f) : 
                     (data[12 /* 11_letter_word */] <0.046875f ? 
                        0.0f : 
                        1.0f)) : 
                 (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.265625f ? 
                    0.0f : 
                     (data[9 /* 8_letter_word */] <0.29211426f ? 
                        0.42105263f : 
                        7.358352E-4f)))) : 
         (data[11 /* 10_letter_word */] <0.15493679f ? 
             (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.072265625f ? 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <260.5f ? 
                     (data[7 /* 6_letter_word */] <0.359375f ? 
                        0.0f : 
                        0.9990412f) : 
                    0.0f) : 
                0.0f) : 
            0.0f));
    return pred;
  } // constant pool size = 74B, number of visited nodes = 18, static init size = 0B
}

class log_drf_1_Tree_48_class_24 {
  static final double score0(double[] data) {
    double pred =     1.5E-5f;
    return pred;
  } // constant pool size = 2B, number of visited nodes = 0, static init size = 0B
}

class log_drf_1_Tree_48_class_25 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[4]) || data[4 /* no_of_macs */] <0.5f ? 
         (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
            0.0f : 
             (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.44921875f ? 
                 (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.1875f ? 
                        0.052043848f : 
                        0.23047481f) : 
                     (data[6 /* 5_letter_word */] <0.1328125f ? 
                        0.6554245f : 
                        0.3220387f)) : 
                 (data[3 /* no_of_ips */] <1.5f ? 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <161.5f ? 
                        0.0027100272f : 
                        0.43548387f) : 
                    1.0f))) : 
         (Double.isNaN(data[0]) || data[0 /* vlan */] <34.5f ? 
             (data[0 /* vlan */] <20.5f ? 
                0.0f : 
                1.0f) : 
            0.0f));
    return pred;
  } // constant pool size = 42B, number of visited nodes = 10, static init size = 0B
}

class log_drf_1_Tree_48_class_26 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.0087890625f ? 
         (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.6513672f ? 
            0.0f : 
             (data[0 /* vlan */] <29.5f ? 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.2890625f ? 
                    0.0f : 
                     (data[0 /* vlan */] <28.0f ? 
                        0.0f : 
                        0.99764705f)) : 
                0.0f)) : 
        0.0f);
    return pred;
  } // constant pool size = 22B, number of visited nodes = 5, static init size = 0B
}

class log_drf_1_Tree_48_class_27 {
  static final double score0(double[] data) {
    double pred =     1.0E-5f;
    return pred;
  } // constant pool size = 2B, number of visited nodes = 0, static init size = 0B
}

class log_drf_1_Tree_48_class_28 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[14]) || data[14 /* 13_letter_word */] <0.09814453f ? 
         (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.19726562f ? 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <489.5f ? 
                0.0f : 
                 (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <5.5f ? 
                    0.0f : 
                    1.0f)) : 
             (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <5.5f ? 
                 (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.015625f ? 
                     (data[0 /* vlan */] <17.5f ? 
                        0.1324201f : 
                        0.0f) : 
                    0.0f) : 
                 (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.1015625f ? 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.41601562f ? 
                        1.0f : 
                        0.9f) : 
                    1.0f))) : 
         (Double.isNaN(data[0]) || data[0 /* vlan */] <18.5f ? 
            1.0f : 
            0.0f));
    return pred;
  } // constant pool size = 42B, number of visited nodes = 10, static init size = 0B
}

class log_drf_1_Tree_48_class_29 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.0087890625f ? 
         (Double.isNaN(data[12]) || data[12 /* 11_letter_word */] <0.0390625f ? 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <185.5f ? 
                0.0f : 
                 (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
                    0.0f : 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.7734375f ? 
                        0.0f : 
                        0.0026666666f))) : 
             (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.58203125f ? 
                0.0f : 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <78.0f ? 
                    0.0f : 
                    0.5f))) : 
         (data[11 /* 10_letter_word */] <0.024276733f ? 
            0.25f : 
             (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.0078125f ? 
                0.0f : 
                 (data[11 /* 10_letter_word */] <0.047145247f ? 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.3125f ? 
                        0.0f : 
                        0.5f) : 
                    0.0f))));
    return pred;
  } // constant pool size = 46B, number of visited nodes = 11, static init size = 0B
}

class log_drf_1_Tree_48_class_30 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[4]) || data[4 /* no_of_macs */] <0.5f ? 
         (data[1 /* type_of_time */] <1.5f ? 
            1.0f : 
            0.0f) : 
        0.0f);
    return pred;
  } // constant pool size = 10B, number of visited nodes = 2, static init size = 0B
}

class log_drf_1_Tree_48_class_31 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[13]) || data[13 /* 12_letter_word */] <0.23583984f ? 
         (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.13378906f ? 
             (data[2 /* no_of_characters */] <80.5f ? 
                 (data[1 /* type_of_time */] <4.5f ? 
                    0.0f : 
                     (data[6 /* 5_letter_word */] <0.125f ? 
                        0.17009346f : 
                        0.0f)) : 
                 (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
                    0.0f : 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <65.5f ? 
                        3.365757E-5f : 
                        0.08022922f))) : 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <65.5f ? 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <37.0f ? 
                     (Double.isNaN(data[4]) || data[4 /* no_of_macs */] <1.5f ? 
                        0.0f : 
                        7.8678207E-4f) : 
                     (data[2 /* no_of_characters */] <80.5f ? 
                        1.0f : 
                        0.003940455f)) : 
                 (data[2 /* no_of_characters */] <140.5f ? 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <111.5f ? 
                        0.9293967f : 
                        0.0f) : 
                     (data[2 /* no_of_characters */] <176.5f ? 
                        0.0044713686f : 
                        1.7799929E-4f)))) : 
         (data[0 /* vlan */] <126.5f ? 
             (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.072265625f ? 
                 (data[0 /* vlan */] <33.5f ? 
                    0.0f : 
                    1.0f) : 
                0.0f) : 
            0.0f));
    return pred;
  } // constant pool size = 70B, number of visited nodes = 17, static init size = 0B
}

class log_drf_1_Tree_48_class_32 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.23583984f ? 
         (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.59472656f ? 
             (data[2 /* no_of_characters */] <125.5f ? 
                 (data[1 /* type_of_time */] <4.5f ? 
                    0.0f : 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <121.5f ? 
                        0.0019387896f : 
                        0.03950834f)) : 
                0.0f) : 
             (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.18359375f ? 
                0.0f : 
                 (data[3 /* no_of_ips */] <0.5f ? 
                    0.0f : 
                     (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <1.5f ? 
                        0.86206895f : 
                        0.0f)))) : 
         (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.19628906f ? 
            0.0f : 
             (data[1 /* type_of_time */] <4.5f ? 
                0.0f : 
                 (data[5 /* 4_letter_word */] <0.125f ? 
                    0.0f : 
                     (data[2 /* no_of_characters */] <120.5f ? 
                        1.0f : 
                        0.0f)))));
    return pred;
  } // constant pool size = 50B, number of visited nodes = 12, static init size = 0B
}

class log_drf_1_Tree_48_class_33 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[4]) || data[4 /* no_of_macs */] <1.5f ? 
         (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.4716797f ? 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <280.5f ? 
                 (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.828125f ? 
                        0.0f : 
                        0.03448276f) : 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.703125f ? 
                        5.966302E-4f : 
                        0.008145257f)) : 
                 (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.078125f ? 
                    0.0f : 
                     (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.078125f ? 
                        0.121107265f : 
                        0.5714286f))) : 
             (data[0 /* vlan */] <9.5f ? 
                1.0f : 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <61.5f ? 
                    0.0f : 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.4140625f ? 
                        0.0f : 
                        0.12195122f)))) : 
         (data[0 /* vlan */] <22.5f ? 
            0.9583333f : 
            0.0f));
    return pred;
  } // constant pool size = 50B, number of visited nodes = 12, static init size = 0B
}

class log_drf_1_Tree_48_class_34 {
  static final double score0(double[] data) {
    double pred =     1.0E-5f;
    return pred;
  } // constant pool size = 2B, number of visited nodes = 0, static init size = 0B
}

class log_drf_1_Tree_48_class_35 {
  static final double score0(double[] data) {
    double pred =     1.35E-4f;
    return pred;
  } // constant pool size = 2B, number of visited nodes = 0, static init size = 0B
}

class log_drf_1_Tree_48_class_36 {
  static final double score0(double[] data) {
    double pred =     8.0E-5f;
    return pred;
  } // constant pool size = 2B, number of visited nodes = 0, static init size = 0B
}

class log_drf_1_Tree_48_class_37 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[4]) || data[4 /* no_of_macs */] <0.5f ? 
         (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
             (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.05078125f ? 
                 (data[1 /* type_of_time */] <3.5f ? 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.828125f ? 
                        0.12547529f : 
                        1.0f) : 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <222.5f ? 
                        0.9986443f : 
                        0.9936934f)) : 
                 (data[1 /* type_of_time */] <3.5f ? 
                     (data[5 /* 4_letter_word */] <0.1015625f ? 
                        1.0f : 
                        0.0021008404f) : 
                    1.0f)) : 
             (data[2 /* no_of_characters */] <48.0f ? 
                 (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.125f ? 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.5f ? 
                        0.11985019f : 
                        0.0f) : 
                    0.0f) : 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <154.5f ? 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.3203125f ? 
                        2.1603872E-5f : 
                        1.7094017E-4f) : 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.96875f ? 
                        0.037490986f : 
                        0.45454547f)))) : 
        0.0f);
    return pred;
  } // constant pool size = 58B, number of visited nodes = 14, static init size = 0B
}

class log_drf_1_Tree_48_class_38 {
  static final double score0(double[] data) {
    double pred =     1.5E-5f;
    return pred;
  } // constant pool size = 2B, number of visited nodes = 0, static init size = 0B
}


class log_drf_1_Forest_49 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += log_drf_1_Tree_49_class_0.score0(fdata);
    preds[2] += log_drf_1_Tree_49_class_1.score0(fdata);
    preds[3] += log_drf_1_Tree_49_class_2.score0(fdata);
    preds[4] += log_drf_1_Tree_49_class_3.score0(fdata);
    preds[5] += log_drf_1_Tree_49_class_4.score0(fdata);
    preds[6] += log_drf_1_Tree_49_class_5.score0(fdata);
    preds[7] += log_drf_1_Tree_49_class_6.score0(fdata);
    preds[8] += log_drf_1_Tree_49_class_7.score0(fdata);
    preds[9] += log_drf_1_Tree_49_class_8.score0(fdata);
    preds[10] += log_drf_1_Tree_49_class_9.score0(fdata);
    preds[11] += log_drf_1_Tree_49_class_10.score0(fdata);
    preds[12] += log_drf_1_Tree_49_class_11.score0(fdata);
    preds[13] += log_drf_1_Tree_49_class_12.score0(fdata);
    preds[14] += log_drf_1_Tree_49_class_13.score0(fdata);
    preds[15] += log_drf_1_Tree_49_class_14.score0(fdata);
    preds[16] += log_drf_1_Tree_49_class_15.score0(fdata);
    preds[17] += log_drf_1_Tree_49_class_16.score0(fdata);
    preds[18] += log_drf_1_Tree_49_class_17.score0(fdata);
    preds[19] += log_drf_1_Tree_49_class_18.score0(fdata);
    preds[20] += log_drf_1_Tree_49_class_19.score0(fdata);
    preds[21] += log_drf_1_Tree_49_class_20.score0(fdata);
    preds[22] += log_drf_1_Tree_49_class_21.score0(fdata);
    preds[23] += log_drf_1_Tree_49_class_22.score0(fdata);
    preds[24] += log_drf_1_Tree_49_class_23.score0(fdata);
    preds[25] += log_drf_1_Tree_49_class_24.score0(fdata);
    preds[26] += log_drf_1_Tree_49_class_25.score0(fdata);
    preds[27] += log_drf_1_Tree_49_class_26.score0(fdata);
    preds[28] += log_drf_1_Tree_49_class_27.score0(fdata);
    preds[29] += log_drf_1_Tree_49_class_28.score0(fdata);
    preds[30] += log_drf_1_Tree_49_class_29.score0(fdata);
    preds[31] += log_drf_1_Tree_49_class_30.score0(fdata);
    preds[32] += log_drf_1_Tree_49_class_31.score0(fdata);
    preds[33] += log_drf_1_Tree_49_class_32.score0(fdata);
    preds[34] += log_drf_1_Tree_49_class_33.score0(fdata);
    preds[35] += log_drf_1_Tree_49_class_34.score0(fdata);
    preds[36] += log_drf_1_Tree_49_class_35.score0(fdata);
    preds[37] += log_drf_1_Tree_49_class_36.score0(fdata);
    preds[38] += log_drf_1_Tree_49_class_37.score0(fdata);
    preds[39] += log_drf_1_Tree_49_class_38.score0(fdata);
  }
}
class log_drf_1_Tree_49_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[14]) || data[14 /* 13_letter_word */] <0.0146484375f ? 
         (Double.isNaN(data[15]) || data[15 /* 14_letter_word */] <0.036621094f ? 
             (Double.isNaN(data[13]) || data[13 /* 12_letter_word */] <0.009765625f ? 
                 (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.0859375f ? 
                     (Double.isNaN(data[4]) || data[4 /* no_of_macs */] <0.5f ? 
                        0.0f : 
                        6.6467264E-4f) : 
                     (data[9 /* 8_letter_word */] <0.12878418f ? 
                        0.034782607f : 
                        2.4601974E-4f)) : 
                 (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.1484375f ? 
                    0.0f : 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.1015625f ? 
                        0.0f : 
                        0.33333334f))) : 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <101.5f ? 
                0.0f : 
                0.6666667f)) : 
         (data[14 /* 13_letter_word */] <0.058912277f ? 
            1.0f : 
            0.0f));
    return pred;
  } // constant pool size = 42B, number of visited nodes = 10, static init size = 0B
}

class log_drf_1_Tree_49_class_1 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
        0.0f : 
         (Double.isNaN(data[0]) || data[0 /* vlan */] <141.5f ? 
            0.0f : 
             (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.32421875f ? 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.22265625f ? 
                    0.0f : 
                     (data[2 /* no_of_characters */] <160.5f ? 
                        0.0f : 
                        0.07638889f)) : 
                 (data[0 /* vlan */] <148.5f ? 
                    1.0f : 
                    0.0f))));
    return pred;
  } // constant pool size = 26B, number of visited nodes = 6, static init size = 0B
}

class log_drf_1_Tree_49_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.47216797f ? 
         (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
            0.0f : 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <137.5f ? 
                0.0f : 
                 (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.58984375f ? 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.08755493f ? 
                        0.013953488f : 
                        0.12065814f) : 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.08484268f ? 
                        0.0f : 
                        1.0f)))) : 
         (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.44921875f ? 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <181.5f ? 
                 (Double.isNaN(data[13]) || data[13 /* 12_letter_word */] <0.056640625f ? 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.0546875f ? 
                        0.014465066f : 
                        0.0012102874f) : 
                    0.0f) : 
                 (data[7 /* 6_letter_word */] <0.83299065f ? 
                     (Double.isNaN(data[13]) || data[13 /* 12_letter_word */] <0.03125f ? 
                        0.031578947f : 
                        1.0f) : 
                    0.7373737f)) : 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <175.5f ? 
                 (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                     (data[2 /* no_of_characters */] <120.5f ? 
                        0.0f : 
                        0.024024025f) : 
                    0.0f) : 
                1.0f)));
    return pred;
  } // constant pool size = 62B, number of visited nodes = 15, static init size = 0B
}

class log_drf_1_Tree_49_class_3 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
         (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.35351562f ? 
            0.0f : 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <295.5f ? 
                0.0f : 
                 (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.46463013f ? 
                     (data[7 /* 6_letter_word */] <0.0625f ? 
                        0.0f : 
                        0.99264705f) : 
                    0.0f))) : 
         (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.4765625f ? 
             (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.38720703f ? 
                 (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.015625f ? 
                     (data[6 /* 5_letter_word */] <0.046875f ? 
                        0.0016997167f : 
                        0.0f) : 
                    0.0f) : 
                 (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.3515625f ? 
                    0.0f : 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <180.5f ? 
                        1.0f : 
                        0.0f))) : 
             (data[0 /* vlan */] <29.5f ? 
                 (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.04296875f ? 
                     (data[0 /* vlan */] <28.0f ? 
                        0.0f : 
                        1.0f) : 
                    0.0f) : 
                 (data[2 /* no_of_characters */] <90.5f ? 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <118.5f ? 
                        0.0f : 
                        0.5f) : 
                    0.0f))));
    return pred;
  } // constant pool size = 66B, number of visited nodes = 16, static init size = 0B
}

class log_drf_1_Tree_49_class_4 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <1.5f ? 
         (data[0 /* vlan */] <27.5f ? 
             (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.29296875f ? 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.30859375f ? 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <24.5f ? 
                        0.0f : 
                        0.046728972f) : 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.2890625f ? 
                        0.0f : 
                        0.34736842f)) : 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <24.5f ? 
                    0.0f : 
                    0.14285715f)) : 
            0.0f) : 
        0.0f);
    return pred;
  } // constant pool size = 30B, number of visited nodes = 7, static init size = 0B
}

class log_drf_1_Tree_49_class_5 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.095703125f ? 
         (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
            0.0f : 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <35.5f ? 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.10546875f ? 
                    0.0f : 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.21875f ? 
                        0.0f : 
                        0.0015337423f)) : 
                 (Double.isNaN(data[12]) || data[12 /* 11_letter_word */] <0.19140625f ? 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.15625f ? 
                        9.229349E-4f : 
                        0.012903226f) : 
                    0.125f))) : 
         (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.27929688f ? 
             (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.22460938f ? 
                0.0f : 
                 (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.234375f ? 
                    0.0f : 
                     (data[2 /* no_of_characters */] <120.5f ? 
                        0.05882353f : 
                        0.0f))) : 
             (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.21679688f ? 
                 (data[7 /* 6_letter_word */] <0.14868927f ? 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.265625f ? 
                        0.0058479533f : 
                        0.13432837f) : 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.090625f ? 
                        0.0f : 
                        0.016632017f)) : 
                 (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.0390625f ? 
                    0.0f : 
                    1.0f))));
    return pred;
  } // constant pool size = 66B, number of visited nodes = 16, static init size = 0B
}

class log_drf_1_Tree_49_class_6 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.16015625f ? 
         (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
            0.0f : 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <131.5f ? 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.87109375f ? 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.7734375f ? 
                        0.0f : 
                        0.0018050541f) : 
                    0.004468719f) : 
                 (data[0 /* vlan */] <139.0f ? 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <150.5f ? 
                        1.0f : 
                        0.0f) : 
                    0.0f))) : 
         (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.24609375f ? 
             (data[0 /* vlan */] <19.5f ? 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.9278259f ? 
                    0.0f : 
                     (data[0 /* vlan */] <10.5f ? 
                        0.0f : 
                        1.0f)) : 
                0.0f) : 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <85.5f ? 
                0.0f : 
                 (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.18359375f ? 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.15490723f ? 
                        0.026522594f : 
                        0.2109375f) : 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.21875f ? 
                        0.82417583f : 
                        0.0f)))));
    return pred;
  } // constant pool size = 62B, number of visited nodes = 15, static init size = 0B
}

class log_drf_1_Tree_49_class_7 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <1.5f ? 
         (Double.isNaN(data[0]) || data[0 /* vlan */] <185.5f ? 
            0.0f : 
            0.14689265f) : 
         (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.87402344f ? 
            0.0f : 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <109.5f ? 
                0.0f : 
                1.0f)));
    return pred;
  } // constant pool size = 18B, number of visited nodes = 4, static init size = 0B
}

class log_drf_1_Tree_49_class_8 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <2.5f ? 
         (Double.isNaN(data[0]) || data[0 /* vlan */] <177.5f ? 
            0.0f : 
             (data[1 /* type_of_time */] <4.5f ? 
                0.0f : 
                 (data[5 /* 4_letter_word */] <0.03125f ? 
                     (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <1.5f ? 
                        0.061930783f : 
                        1.0f) : 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <739.0f ? 
                        0.0f : 
                        0.8181818f)))) : 
         (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.52246094f ? 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <173.5f ? 
                0.0f : 
                0.053333335f) : 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <105.5f ? 
                0.0f : 
                 (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.34765625f ? 
                     (data[2 /* no_of_characters */] <579.5f ? 
                        0.0f : 
                        0.9305556f) : 
                    1.0f))));
    return pred;
  } // constant pool size = 46B, number of visited nodes = 11, static init size = 0B
}

class log_drf_1_Tree_49_class_9 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <2.5f ? 
         (data[1 /* type_of_time */] <3.5f ? 
             (data[1 /* type_of_time */] <2.5f ? 
                0.0f : 
                 (Double.isNaN(data[12]) || data[12 /* 11_letter_word */] <0.125f ? 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <260.5f ? 
                        1.0f : 
                        0.0f) : 
                    0.0f)) : 
            0.0f) : 
         (data[1 /* type_of_time */] <4.0f ? 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <173.5f ? 
                1.0f : 
                0.0f) : 
            0.0f));
    return pred;
  } // constant pool size = 30B, number of visited nodes = 7, static init size = 0B
}

class log_drf_1_Tree_49_class_10 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
        7.4042264E-6f : 
         (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.35351562f ? 
             (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.8730469f ? 
                 (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.02734375f ? 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.30932617f ? 
                        0.0f : 
                        4.3252597E-4f) : 
                    0.0f) : 
                 (data[2 /* no_of_characters */] <90.5f ? 
                    1.0f : 
                    0.0f)) : 
            0.0f));
    return pred;
  } // constant pool size = 26B, number of visited nodes = 6, static init size = 0B
}

class log_drf_1_Tree_49_class_11 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.27929688f ? 
        0.0f : 
         (Double.isNaN(data[0]) || data[0 /* vlan */] <124.5f ? 
            0.0f : 
             (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.26757812f ? 
                0.0f : 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.1328125f ? 
                    0.0f : 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.078125f ? 
                        0.0f : 
                        0.33333334f)))));
    return pred;
  } // constant pool size = 22B, number of visited nodes = 5, static init size = 0B
}

class log_drf_1_Tree_49_class_12 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.92822266f ? 
         (Double.isNaN(data[0]) || data[0 /* vlan */] <593.5f ? 
            0.0f : 
            0.07526882f) : 
         (data[1 /* type_of_time */] <4.5f ? 
            0.0f : 
            0.013002364f));
    return pred;
  } // constant pool size = 14B, number of visited nodes = 3, static init size = 0B
}

class log_drf_1_Tree_49_class_13 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
         (Double.isNaN(data[0]) || data[0 /* vlan */] <593.5f ? 
             (data[2 /* no_of_characters */] <55.5f ? 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.2890625f ? 
                     (data[6 /* 5_letter_word */] <0.125f ? 
                        0.62068963f : 
                        0.99f) : 
                    0.0f) : 
                 (data[0 /* vlan */] <14.5f ? 
                     (data[2 /* no_of_characters */] <94.5f ? 
                        0.06896552f : 
                        0.0f) : 
                    0.0f)) : 
            0.8638132f) : 
         (data[5 /* 4_letter_word */] <0.030273438f ? 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <590.5f ? 
                0.0f : 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.69921875f ? 
                     (data[2 /* no_of_characters */] <519.5f ? 
                        0.18181819f : 
                        0.0f) : 
                    0.0f)) : 
            0.0f));
    return pred;
  } // constant pool size = 46B, number of visited nodes = 11, static init size = 0B
}

class log_drf_1_Tree_49_class_14 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.19726562f ? 
        0.0f : 
         (data[1 /* type_of_time */] <2.5f ? 
             (data[5 /* 4_letter_word */] <0.1015625f ? 
                0.0f : 
                 (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <1.0f ? 
                     (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.1015625f ? 
                        0.125f : 
                        1.0f) : 
                    0.0f)) : 
            0.0f));
    return pred;
  } // constant pool size = 22B, number of visited nodes = 5, static init size = 0B
}

class log_drf_1_Tree_49_class_15 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.5942383f ? 
         (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
            0.0f : 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <125.5f ? 
                 (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.8984375f ? 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.203125f ? 
                        6.60066E-4f : 
                        0.0f) : 
                    0.060889225f) : 
                 (data[0 /* vlan */] <154.5f ? 
                     (data[2 /* no_of_characters */] <120.5f ? 
                        0.011961723f : 
                        0.2646593f) : 
                    0.0f))) : 
         (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.10058594f ? 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <113.5f ? 
                0.0f : 
                 (data[1 /* type_of_time */] <4.5f ? 
                    0.0f : 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <149.5f ? 
                        0.7741935f : 
                        0.0f))) : 
             (data[0 /* vlan */] <89.5f ? 
                0.0f : 
                 (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.22456208f ? 
                    1.0f : 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <230.5f ? 
                        0.0f : 
                        1.0f)))));
    return pred;
  } // constant pool size = 58B, number of visited nodes = 14, static init size = 0B
}

class log_drf_1_Tree_49_class_16 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
         (data[0 /* vlan */] <83.5f ? 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <80.5f ? 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <30.5f ? 
                     (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.3125f ? 
                        0.0f : 
                        0.0037593986f) : 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.46875f ? 
                        0.0033373786f : 
                        0.0625f)) : 
                 (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.05859375f ? 
                     (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.03846154f ? 
                        0.045454547f : 
                        0.0f) : 
                    0.0f)) : 
            0.0f) : 
        0.0f);
    return pred;
  } // constant pool size = 34B, number of visited nodes = 8, static init size = 0B
}

class log_drf_1_Tree_49_class_17 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <3.5f ? 
         (Double.isNaN(data[0]) || data[0 /* vlan */] <177.5f ? 
             (data[8 /* 7_letter_word */] <0.09765625f ? 
                 (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.06640625f ? 
                    0.0f : 
                     (Double.isNaN(data[12]) || data[12 /* 11_letter_word */] <0.046875f ? 
                        0.0f : 
                        0.083333336f)) : 
                0.0f) : 
             (data[0 /* vlan */] <181.5f ? 
                 (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.02734375f ? 
                     (data[6 /* 5_letter_word */] <0.1015625f ? 
                        0.6934673f : 
                        0.0f) : 
                    0.0f) : 
                0.0f)) : 
         (Double.isNaN(data[14]) || data[14 /* 13_letter_word */] <0.0625f ? 
             (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <991.0f ? 
                0.0f : 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.04296875f ? 
                     (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.578125f ? 
                        1.0f : 
                        0.8333333f) : 
                     (data[8 /* 7_letter_word */] <0.21083577f ? 
                        0.0f : 
                        1.0f))) : 
            0.0f));
    return pred;
  } // constant pool size = 54B, number of visited nodes = 13, static init size = 0B
}

class log_drf_1_Tree_49_class_18 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.30566406f ? 
        0.0f : 
        3.591825E-5f);
    return pred;
  } // constant pool size = 6B, number of visited nodes = 1, static init size = 0B
}

class log_drf_1_Tree_49_class_19 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.24365234f ? 
         (data[0 /* vlan */] <17.5f ? 
             (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.19140625f ? 
                0.0f : 
                 (data[2 /* no_of_characters */] <140.5f ? 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.1015625f ? 
                        0.0125f : 
                        0.0f) : 
                    0.0f)) : 
            0.0f) : 
         (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.2421875f ? 
            0.0f : 
             (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.22460938f ? 
                0.0f : 
                 (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <1.5f ? 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.125f ? 
                        0.80212015f : 
                        0.0f) : 
                    0.0f))));
    return pred;
  } // constant pool size = 38B, number of visited nodes = 9, static init size = 0B
}

class log_drf_1_Tree_49_class_20 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
         (data[0 /* vlan */] <24.5f ? 
             (data[0 /* vlan */] <17.5f ? 
                0.0f : 
                 (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.64453125f ? 
                    1.0f : 
                     (data[5 /* 4_letter_word */] <0.70562744f ? 
                        0.9936306f : 
                        1.0f))) : 
            0.0f) : 
         (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.40820312f ? 
             (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.26757812f ? 
                 (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.19140625f ? 
                     (data[3 /* no_of_ips */] <1.5f ? 
                        0.061148856f : 
                        8.8117673E-4f) : 
                    0.0f) : 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.15625f ? 
                     (data[10 /* 9_letter_word */] <0.0859375f ? 
                        0.0047879615f : 
                        0.9189655f) : 
                     (data[0 /* vlan */] <24.5f ? 
                        0.88f : 
                        0.0f))) : 
             (data[0 /* vlan */] <25.5f ? 
                 (data[9 /* 8_letter_word */] <0.04296875f ? 
                     (data[0 /* vlan */] <18.0f ? 
                        0.0f : 
                        1.0f) : 
                     (Double.isNaN(data[4]) || data[4 /* no_of_macs */] <1.0f ? 
                        0.018518519f : 
                        0.0f)) : 
                0.0f)));
    return pred;
  } // constant pool size = 66B, number of visited nodes = 16, static init size = 0B
}

class log_drf_1_Tree_49_class_21 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.24365234f ? 
         (data[0 /* vlan */] <37.5f ? 
             (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.17382812f ? 
                 (data[0 /* vlan */] <17.0f ? 
                     (data[2 /* no_of_characters */] <120.5f ? 
                        0.15151516f : 
                        0.0023774146f) : 
                    0.0f) : 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.5514145f ? 
                     (data[2 /* no_of_characters */] <70.5f ? 
                        0.0019120459f : 
                        1.4170328E-4f) : 
                    0.0f)) : 
             (data[0 /* vlan */] <41.5f ? 
                 (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.546875f ? 
                     (data[6 /* 5_letter_word */] <0.046875f ? 
                        0.14197531f : 
                        0.0020242915f) : 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.0859375f ? 
                        0.005484461f : 
                        0.0f)) : 
                 (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.03515625f ? 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.06281662f ? 
                        0.0025185142f : 
                        0.0f) : 
                     (data[2 /* no_of_characters */] <160.5f ? 
                        0.0f : 
                        5.654332E-4f)))) : 
         (data[1 /* type_of_time */] <3.5f ? 
             (Double.isNaN(data[12]) || data[12 /* 11_letter_word */] <0.125f ? 
                0.0f : 
                1.0f) : 
             (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.15429688f ? 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <210.5f ? 
                     (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.07421875f ? 
                        0.0019760549f : 
                        0.0f) : 
                     (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.1015625f ? 
                        0.012073272f : 
                        0.25f)) : 
                 (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.46378326f ? 
                    0.0f : 
                     (data[7 /* 6_letter_word */] <0.41501236f ? 
                        0.0f : 
                        3.990423E-4f)))));
    return pred;
  } // constant pool size = 90B, number of visited nodes = 22, static init size = 0B
}

class log_drf_1_Tree_49_class_22 {
  static final double score0(double[] data) {
    double pred =     4.0E-5f;
    return pred;
  } // constant pool size = 2B, number of visited nodes = 0, static init size = 0B
}

class log_drf_1_Tree_49_class_23 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.42236328f ? 
         (data[0 /* vlan */] <17.5f ? 
             (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.31054688f ? 
                 (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.74609375f ? 
                     (Double.isNaN(data[13]) || data[13 /* 12_letter_word */] <0.046875f ? 
                        0.0025854977f : 
                        1.0f) : 
                    0.9904762f) : 
                 (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.16796875f ? 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.16666667f ? 
                        0.99248827f : 
                        0.0f) : 
                    0.0f)) : 
            0.0f) : 
         (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.030273438f ? 
             (data[0 /* vlan */] <19.5f ? 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.46523476f ? 
                    1.0f : 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.63652676f ? 
                        0.0f : 
                        0.55932206f)) : 
                0.0f) : 
            0.0f));
    return pred;
  } // constant pool size = 46B, number of visited nodes = 11, static init size = 0B
}

class log_drf_1_Tree_49_class_24 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
        0.0f : 
         (data[0 /* vlan */] <12.5f ? 
            0.03846154f : 
            0.0f));
    return pred;
  } // constant pool size = 10B, number of visited nodes = 2, static init size = 0B
}

class log_drf_1_Tree_49_class_25 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <1.5f ? 
         (Double.isNaN(data[12]) || data[12 /* 11_letter_word */] <0.15527344f ? 
             (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
                0.0f : 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <25.5f ? 
                    0.0f : 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.1875f ? 
                        0.36470106f : 
                        0.5619527f))) : 
             (data[5 /* 4_letter_word */] <0.29101562f ? 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.2890625f ? 
                    0.0f : 
                     (data[6 /* 5_letter_word */] <0.0859375f ? 
                        0.0f : 
                        1.0f)) : 
                 (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.58302563f ? 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.0625f ? 
                        0.9951923f : 
                        0.0f) : 
                    0.0f))) : 
         (data[5 /* 4_letter_word */] <0.055664062f ? 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <85.5f ? 
                 (data[6 /* 5_letter_word */] <0.2890625f ? 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.072265625f ? 
                        1.0f : 
                        0.24318658f) : 
                     (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <400.0f ? 
                        0.9996507f : 
                        0.0f)) : 
                 (data[3 /* no_of_ips */] <2.5f ? 
                     (data[2 /* no_of_characters */] <179.5f ? 
                        1.0f : 
                        0.0f) : 
                    0.0f)) : 
             (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.04296875f ? 
                 (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <2.5f ? 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.1015625f ? 
                        0.8030627f : 
                        0.26134405f) : 
                     (data[5 /* 4_letter_word */] <0.22534943f ? 
                        0.0f : 
                        0.9982191f)) : 
                 (data[2 /* no_of_characters */] <140.5f ? 
                     (data[1 /* type_of_time */] <4.0f ? 
                        0.0f : 
                        1.0f) : 
                     (data[2 /* no_of_characters */] <279.5f ? 
                        0.17163636f : 
                        0.0f)))));
    return pred;
  } // constant pool size = 98B, number of visited nodes = 24, static init size = 0B
}

class log_drf_1_Tree_49_class_26 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
         (data[0 /* vlan */] <29.5f ? 
             (data[2 /* no_of_characters */] <60.5f ? 
                 (data[0 /* vlan */] <22.0f ? 
                    0.0f : 
                     (data[2 /* no_of_characters */] <55.5f ? 
                        1.0f : 
                        0.99749374f)) : 
                0.0f) : 
            0.0f) : 
        0.0f);
    return pred;
  } // constant pool size = 22B, number of visited nodes = 5, static init size = 0B
}

class log_drf_1_Tree_49_class_27 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.24365234f ? 
        0.0f : 
         (data[0 /* vlan */] <18.5f ? 
             (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.46289062f ? 
                0.0f : 
                 (Double.isNaN(data[2]) || data[2 /* no_of_characters */] <170.5f ? 
                    0.0f : 
                     (data[2 /* no_of_characters */] <389.5f ? 
                        0.5f : 
                        0.0f))) : 
            0.0f));
    return pred;
  } // constant pool size = 22B, number of visited nodes = 5, static init size = 0B
}

class log_drf_1_Tree_49_class_28 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <5.5f ? 
         (data[0 /* vlan */] <17.5f ? 
             (data[1 /* type_of_time */] <4.5f ? 
                0.0f : 
                 (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <3.0f ? 
                    0.0f : 
                    1.0f)) : 
            0.0f) : 
         (data[5 /* 4_letter_word */] <0.0625f ? 
             (data[7 /* 6_letter_word */] <0.3671875f ? 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.16796875f ? 
                    1.0f : 
                    0.9f) : 
                1.0f) : 
            1.0f));
    return pred;
  } // constant pool size = 30B, number of visited nodes = 7, static init size = 0B
}

class log_drf_1_Tree_49_class_29 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[14]) || data[14 /* 13_letter_word */] <0.0063476562f ? 
         (Double.isNaN(data[12]) || data[12 /* 11_letter_word */] <0.0087890625f ? 
            8.212406E-6f : 
             (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.5332031f ? 
                 (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.21484375f ? 
                    0.0f : 
                    0.6666667f) : 
                 (data[6 /* 5_letter_word */] <0.05859375f ? 
                    0.0f : 
                    1.0f))) : 
         (data[14 /* 13_letter_word */] <0.014110565f ? 
            1.0f : 
            0.0f));
    return pred;
  } // constant pool size = 26B, number of visited nodes = 6, static init size = 0B
}

class log_drf_1_Tree_49_class_30 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <2.5f ? 
         (data[1 /* type_of_time */] <1.5f ? 
            1.0f : 
            0.0f) : 
         (data[1 /* type_of_time */] <2.0f ? 
            1.0f : 
            0.0f));
    return pred;
  } // constant pool size = 14B, number of visited nodes = 3, static init size = 0B
}

class log_drf_1_Tree_49_class_31 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.13378906f ? 
         (Double.isNaN(data[15]) || data[15 /* 14_letter_word */] <0.2915039f ? 
             (Double.isNaN(data[13]) || data[13 /* 12_letter_word */] <0.22460938f ? 
                 (data[0 /* vlan */] <139.5f ? 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.46875f ? 
                        0.004877419f : 
                        0.05367913f) : 
                    0.0f) : 
                 (data[13 /* 12_letter_word */] <0.2912445f ? 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.125f ? 
                        1.0f : 
                        0.0f) : 
                    0.0f)) : 
             (data[9 /* 8_letter_word */] <0.16796875f ? 
                0.0f : 
                1.0f)) : 
         (Double.isNaN(data[13]) || data[13 /* 12_letter_word */] <0.41601562f ? 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <81.5f ? 
                 (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.7060547f ? 
                     (Double.isNaN(data[0]) || data[0 /* vlan */] <37.5f ? 
                        0.0f : 
                        0.0013111888f) : 
                    0.21428572f) : 
                 (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.53515625f ? 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.31054688f ? 
                        0.06342126f : 
                        0.16904762f) : 
                     (data[10 /* 9_letter_word */] <0.07421875f ? 
                        0.0f : 
                        1.0f))) : 
            0.92f));
    return pred;
  } // constant pool size = 62B, number of visited nodes = 15, static init size = 0B
}

class log_drf_1_Tree_49_class_32 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.5942383f ? 
         (data[0 /* vlan */] <29.5f ? 
             (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.44921875f ? 
                 (Double.isNaN(data[0]) || data[0 /* vlan */] <28.5f ? 
                     (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.3156891f ? 
                        0.0f : 
                        2.3121387E-4f) : 
                     (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.084228516f ? 
                        0.028758543f : 
                        0.0f)) : 
                 (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.4140625f ? 
                    0.0f : 
                    0.9777778f)) : 
            0.0f) : 
         (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.10058594f ? 
            0.0f : 
             (data[0 /* vlan */] <29.5f ? 
                 (data[0 /* vlan */] <28.0f ? 
                    0.0f : 
                     (data[10 /* 9_letter_word */] <0.1015625f ? 
                        0.0f : 
                        1.0f)) : 
                0.0f)));
    return pred;
  } // constant pool size = 46B, number of visited nodes = 11, static init size = 0B
}

class log_drf_1_Tree_49_class_33 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.47216797f ? 
         (data[0 /* vlan */] <17.5f ? 
             (Double.isNaN(data[8]) || data[8 /* 7_letter_word */] <0.04296875f ? 
                 (data[0 /* vlan */] <8.5f ? 
                    1.0f : 
                     (data[2 /* no_of_characters */] <100.5f ? 
                        0.42372882f : 
                        6.6674076E-4f)) : 
                 (data[8 /* 7_letter_word */] <0.19250488f ? 
                     (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.1015625f ? 
                        0.77272725f : 
                        0.0f) : 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.046875f ? 
                        0.0f : 
                        0.17117117f))) : 
             (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.73046875f ? 
                 (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.87109375f ? 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.01361084f ? 
                        2.2509997E-4f : 
                        0.0f) : 
                    0.0021978023f) : 
                 (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.125f ? 
                    0.0f : 
                     (data[2 /* no_of_characters */] <120.5f ? 
                        1.0f : 
                        0.0f)))) : 
         (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.44921875f ? 
             (data[0 /* vlan */] <9.5f ? 
                1.0f : 
                 (data[2 /* no_of_characters */] <90.5f ? 
                     (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                        0.10144927f : 
                        0.0f) : 
                    0.0f)) : 
             (data[3 /* no_of_ips */] <0.5f ? 
                 (data[1 /* type_of_time */] <4.5f ? 
                    0.0f : 
                     (Double.isNaN(data[4]) || data[4 /* no_of_macs */] <0.5f ? 
                        0.2347826f : 
                        0.0f)) : 
                0.0f)));
    return pred;
  } // constant pool size = 82B, number of visited nodes = 20, static init size = 0B
}

class log_drf_1_Tree_49_class_34 {
  static final double score0(double[] data) {
    double pred =     1.0E-5f;
    return pred;
  } // constant pool size = 2B, number of visited nodes = 0, static init size = 0B
}

class log_drf_1_Tree_49_class_35 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <2.5f ? 
         (data[0 /* vlan */] <13.5f ? 
             (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.41601562f ? 
                 (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.21484375f ? 
                    0.0f : 
                     (data[10 /* 9_letter_word */] <0.29075113f ? 
                        1.0f : 
                        0.25f)) : 
                0.0f) : 
             (data[8 /* 7_letter_word */] <0.16992188f ? 
                 (data[0 /* vlan */] <21.5f ? 
                     (Double.isNaN(data[11]) || data[11 /* 10_letter_word */] <0.015625f ? 
                        0.0046880636f : 
                        0.0f) : 
                    0.0f) : 
                0.0f)) : 
        0.0f);
    return pred;
  } // constant pool size = 34B, number of visited nodes = 8, static init size = 0B
}

class log_drf_1_Tree_49_class_36 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
         (data[0 /* vlan */] <5.5f ? 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <4.5f ? 
                0.0f : 
                0.75f) : 
            0.0f) : 
        0.0f);
    return pred;
  } // constant pool size = 14B, number of visited nodes = 3, static init size = 0B
}

class log_drf_1_Tree_49_class_37 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
         (data[0 /* vlan */] <151.5f ? 
             (data[0 /* vlan */] <14.5f ? 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.3515625f ? 
                     (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.1796875f ? 
                        0.9752941f : 
                        8.976661E-4f) : 
                    0.0f) : 
                 (data[1 /* type_of_time */] <2.5f ? 
                     (Double.isNaN(data[12]) || data[12 /* 11_letter_word */] <0.171875f ? 
                        0.9655172f : 
                        0.0f) : 
                     (data[1 /* type_of_time */] <4.5f ? 
                        0.012048192f : 
                        0.0f))) : 
             (Double.isNaN(data[10]) || data[10 /* 9_letter_word */] <0.05078125f ? 
                 (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
                     (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.0625f ? 
                        0.99733454f : 
                        0.9994648f) : 
                     (data[0 /* vlan */] <179.5f ? 
                        0.76033056f : 
                        0.073529415f)) : 
                1.0f)) : 
         (data[1 /* type_of_time */] <4.5f ? 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <161.5f ? 
                0.98929995f : 
                 (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.3671875f ? 
                     (data[3 /* no_of_ips */] <2.5f ? 
                        0.51445085f : 
                        0.0f) : 
                    1.0f)) : 
             (Double.isNaN(data[6]) || data[6 /* 5_letter_word */] <0.4765625f ? 
                0.0f : 
                 (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.4140625f ? 
                    0.0f : 
                    8.271299E-4f))));
    return pred;
  } // constant pool size = 74B, number of visited nodes = 18, static init size = 0B
}

class log_drf_1_Tree_49_class_38 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[7]) || data[7 /* 6_letter_word */] <0.47216797f ? 
         (Double.isNaN(data[1]) || data[1 /* type_of_time */] <4.5f ? 
            0.0f : 
             (Double.isNaN(data[0]) || data[0 /* vlan */] <85.5f ? 
                0.0f : 
                 (Double.isNaN(data[3]) || data[3 /* no_of_ips */] <0.5f ? 
                    0.0f : 
                     (data[0 /* vlan */] <115.5f ? 
                        0.008f : 
                        0.0f)))) : 
         (Double.isNaN(data[5]) || data[5 /* 4_letter_word */] <0.030273438f ? 
             (Double.isNaN(data[9]) || data[9 /* 8_letter_word */] <0.41601562f ? 
                0.0f : 
                0.0015772871f) : 
            0.0f));
    return pred;
  } // constant pool size = 30B, number of visited nodes = 7, static init size = 0B
}



